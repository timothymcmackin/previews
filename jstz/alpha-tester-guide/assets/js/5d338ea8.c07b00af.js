"use strict";(self.webpackChunkjstz_docs=self.webpackChunkjstz_docs||[]).push([[912],{892:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>d,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"api/headers","title":"Headers","description":"jstz\'s Headers implementation is based on the Fetch API specification. This API permits you to manipulate and inspect HTTP request and response headers.","source":"@site/api/headers.md","sourceDirName":"api","slug":"/api/headers","permalink":"/previews/jstz/alpha-tester-guide/api/headers","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Headers","sidebar_label":"Headers"},"sidebar":"documentationSidebar","previous":{"title":"Ledger","permalink":"/previews/jstz/alpha-tester-guide/api/ledger"},"next":{"title":"Request","permalink":"/previews/jstz/alpha-tester-guide/api/request"}}');var a=s(4848),t=s(3023);const d={title:"Headers",sidebar_label:"Headers"},i=void 0,o={},c=[{value:"Quick Start",id:"quick-start",level:2},{value:"Referer",id:"referer",level:2},{value:"Constructor",id:"constructor",level:2},{value:"<code>new Headers(init?: HeadersInit): Headers</code>",id:"new-headersinit-headersinit-headers",level:3},{value:"Instance Methods",id:"instance-methods",level:2},{value:"<code>Headers.append(name: string, value: string): void</code>",id:"headersappendname-string-value-string-void",level:3},{value:"<code>Headers.delete(name: string): void</code>",id:"headersdeletename-string-void",level:3},{value:"<code>Headers.get(name: string): string | null</code>",id:"headersgetname-string-string--null",level:3},{value:"<code>Headers.getSetCookie(): string[]</code>",id:"headersgetsetcookie-string",level:3},{value:"<code>Headers.has(name: string): boolean</code>",id:"headershasname-string-boolean",level:3},{value:"<code>Headers.set(name: string, value: string): void</code>",id:"headerssetname-string-value-string-void",level:3},{value:"<code>Headers[Symbol.iterator](): Iterator&lt;[string, string]&gt;</code>",id:"headerssymboliterator-iteratorstring-string",level:3},{value:"<code>Headers.entries(): Iterator&lt;[string, string]&gt;</code>",id:"headersentries-iteratorstring-string",level:3},{value:"<code>Headers.keys(): Iterator&lt;string&gt;</code>",id:"headerskeys-iteratorstring",level:3},{value:"<code>Headers.values(): Iterator&lt;string&gt;</code>",id:"headersvalues-iteratorstring",level:3},{value:"<code>Headers.forEach(callback: (value: string, name: string, parent: Headers) =&gt; void): void</code>",id:"headersforeachcallback-value-string-name-string-parent-headers--void-void",level:3}];function l(e){const r={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.code,{children:"jstz"}),"'s ",(0,a.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Headers",children:(0,a.jsx)(r.code,{children:"Headers"})})," implementation is based on the ",(0,a.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API",children:"Fetch API"})," specification. This API permits you to manipulate and inspect HTTP request and response headers."]}),"\n",(0,a.jsx)(r.admonition,{type:"danger",children:(0,a.jsxs)(r.p,{children:["\u26a0\ufe0f ",(0,a.jsx)(r.code,{children:"jstz"}),"'s implementation is not spec compliant \u26a0\ufe0f"]})}),"\n",(0,a.jsx)(r.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,a.jsxs)(r.p,{children:["We can create a ",(0,a.jsx)(r.code,{children:"Headers"})," instance from a simple object of header names and values:"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:'const headers = new Headers({ "Content-Type": "application/json" });\n'})}),"\n",(0,a.jsxs)(r.p,{children:["We can then add more headers to the ",(0,a.jsx)(r.code,{children:"Headers"})," instance using ",(0,a.jsx)(r.code,{children:"Headers.append()"}),":"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:'headers.append("Authorization", "Bearer 123456789");\n'})}),"\n",(0,a.jsxs)(r.p,{children:["We can also retrieve a header value using ",(0,a.jsx)(r.code,{children:"Headers.get()"}),":"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:'const authHeader = headers.get("Authorization");\nconsole.log(authHeader); // "Bearer 123456789"\n'})}),"\n",(0,a.jsx)(r.h2,{id:"referer",children:"Referer"}),"\n",(0,a.jsxs)(r.p,{children:["The ",(0,a.jsx)(r.code,{children:"Referer"})," header is a special header that is automatically set by ",(0,a.jsx)(r.code,{children:"jstz"})," when it makes a request. The value of the ",(0,a.jsx)(r.code,{children:"Referer"})," header is the ",(0,a.jsx)(r.code,{children:"tz1"})," address of the smart function (or account) that made the request."]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:'async function handler(request: Request): Promise<Response> {\n    const referer = request.headers.get("Referer"); // "tz1..."\n    ...\n}\n'})}),"\n",(0,a.jsx)(r.h2,{id:"constructor",children:"Constructor"}),"\n",(0,a.jsx)(r.h3,{id:"new-headersinit-headersinit-headers",children:(0,a.jsx)(r.code,{children:"new Headers(init?: HeadersInit): Headers"})}),"\n",(0,a.jsxs)(r.p,{children:["Creates a new ",(0,a.jsx)(r.code,{children:"Headers"})," object.\nA ",(0,a.jsx)(r.code,{children:"HeadersInit"})," object can be an ",(0,a.jsx)(r.code,{children:"Array"})," of key-value pairs, ",(0,a.jsx)(r.code,{children:"Record<string, string>"})," or a ",(0,a.jsx)(r.code,{children:"Headers"})," object."]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"type HeadersInit = [string, string][] | Record<string, string> | Headers;\n"})}),"\n",(0,a.jsx)(r.h2,{id:"instance-methods",children:"Instance Methods"}),"\n",(0,a.jsx)(r.h3,{id:"headersappendname-string-value-string-void",children:(0,a.jsx)(r.code,{children:"Headers.append(name: string, value: string): void"})}),"\n",(0,a.jsxs)(r.p,{children:["Appends a new value onto an existing header inside a ",(0,a.jsx)(r.code,{children:"Headers"})," object, or adds the header if it does not already exist."]}),"\n",(0,a.jsx)(r.h3,{id:"headersdeletename-string-void",children:(0,a.jsx)(r.code,{children:"Headers.delete(name: string): void"})}),"\n",(0,a.jsxs)(r.p,{children:["Deletes a header from the ",(0,a.jsx)(r.code,{children:"Headers"})," object."]}),"\n",(0,a.jsx)(r.h3,{id:"headersgetname-string-string--null",children:(0,a.jsx)(r.code,{children:"Headers.get(name: string): string | null"})}),"\n",(0,a.jsxs)(r.p,{children:["Returns the associated header value of the given name, or ",(0,a.jsx)(r.code,{children:"null"})," if no values are found. If the header has more than 1 value, then the values are concatenated, separated by ",(0,a.jsx)(r.code,{children:'", "'}),", as per the spec."]}),"\n",(0,a.jsx)(r.h3,{id:"headersgetsetcookie-string",children:(0,a.jsx)(r.code,{children:"Headers.getSetCookie(): string[]"})}),"\n",(0,a.jsxs)(r.p,{children:["Returns an array of all the header values for the ",(0,a.jsx)(r.code,{children:"Set-Cookie"})," header."]}),"\n",(0,a.jsx)(r.h3,{id:"headershasname-string-boolean",children:(0,a.jsx)(r.code,{children:"Headers.has(name: string): boolean"})}),"\n",(0,a.jsxs)(r.p,{children:["Returns a boolean stating whether a ",(0,a.jsx)(r.code,{children:"Headers"})," object contains a certain header."]}),"\n",(0,a.jsx)(r.h3,{id:"headerssetname-string-value-string-void",children:(0,a.jsx)(r.code,{children:"Headers.set(name: string, value: string): void"})}),"\n",(0,a.jsxs)(r.p,{children:["Sets a new value for an existing header inside a ",(0,a.jsx)(r.code,{children:"Headers"})," object, or adds the header if it does not already exist."]}),"\n",(0,a.jsx)(r.h3,{id:"headerssymboliterator-iteratorstring-string",children:(0,a.jsx)(r.code,{children:"Headers[Symbol.iterator](): Iterator<[string, string]>"})}),"\n",(0,a.jsxs)(r.p,{children:["Returns an iterator over the list of header name/value pairs. This makes Headers instances ",(0,a.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol",children:"iterable"}),"."]}),"\n",(0,a.jsx)(r.h3,{id:"headersentries-iteratorstring-string",children:(0,a.jsx)(r.code,{children:"Headers.entries(): Iterator<[string, string]>"})}),"\n",(0,a.jsx)(r.p,{children:"Returns an iterator over the list of header name/value pairs."}),"\n",(0,a.jsx)(r.h3,{id:"headerskeys-iteratorstring",children:(0,a.jsx)(r.code,{children:"Headers.keys(): Iterator<string>"})}),"\n",(0,a.jsx)(r.p,{children:"Returns an iterator over the header names."}),"\n",(0,a.jsx)(r.h3,{id:"headersvalues-iteratorstring",children:(0,a.jsx)(r.code,{children:"Headers.values(): Iterator<string>"})}),"\n",(0,a.jsx)(r.p,{children:"Returns an iterator over the header values."}),"\n",(0,a.jsx)(r.h3,{id:"headersforeachcallback-value-string-name-string-parent-headers--void-void",children:(0,a.jsx)(r.code,{children:"Headers.forEach(callback: (value: string, name: string, parent: Headers) => void): void"})}),"\n",(0,a.jsx)(r.p,{children:"Calls the callback for each header. Note that the header value is the first callback argument, while the header name is the second argument."})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},3023:(e,r,s)=>{s.d(r,{R:()=>d,x:()=>i});var n=s(6540);const a={},t=n.createContext(a);function d(e){const r=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),n.createElement(t.Provider,{value:r},e.children)}}}]);