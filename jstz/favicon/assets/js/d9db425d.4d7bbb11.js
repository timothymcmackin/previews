"use strict";(self.webpackChunkjstz_docs=self.webpackChunkjstz_docs||[]).push([[181],{3023:(e,r,a)=>{a.d(r,{R:()=>i,x:()=>l});var s=a(6540);const n={},t=s.createContext(n);function i(e){const r=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),s.createElement(t.Provider,{value:r},e.children)}},8393:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"api/url_search_params","title":"URLSearchParams","description":"jstz\'s implementation of the URLSearchParams API defines utility methods for working with the query string of a URL according to the URL specification. It is used for building and manipulating search parameters.","source":"@site/api/url_search_params.md","sourceDirName":"api","slug":"/api/url_search_params","permalink":"/previews/jstz/favicon/api/url_search_params","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"URLSearchParams","sidebar_label":"URLSearchParams"},"sidebar":"documentationSidebar","previous":{"title":"URL","permalink":"/previews/jstz/favicon/api/url"},"next":{"title":"URLPattern","permalink":"/previews/jstz/favicon/api/url_pattern"}}');var n=a(4848),t=a(3023);const i={title:"URLSearchParams",sidebar_label:"URLSearchParams"},l=void 0,c={},o=[{value:"Example",id:"example",level:2},{value:"Constructor",id:"constructor",level:2},{value:"<code>new URLSearchParams(init?: [string, string][] | Record&lt;string, string&gt; | string): URLSearchParams</code>",id:"new-urlsearchparamsinit-string-string--recordstring-string--string-urlsearchparams",level:3},{value:"Instance Properties",id:"instance-properties",level:2},{value:"<code>readonly URLSearchParams.size: number</code>",id:"readonly-urlsearchparamssize-number",level:3},{value:"Instance Methods",id:"instance-methods",level:2},{value:"<code>URLSearchParams.append(name: string, value: string): void</code>",id:"urlsearchparamsappendname-string-value-string-void",level:3},{value:"<code>URLSearchParams.delete(name: string, value?: string): void</code>",id:"urlsearchparamsdeletename-string-value-string-void",level:3},{value:"<code>URLSearchParams.get(name: string): string | null</code>",id:"urlsearchparamsgetname-string-string--null",level:3},{value:"<code>URLSearchParams.getAll(name: string): string[]</code>",id:"urlsearchparamsgetallname-string-string",level:3},{value:"<code>URLSearchParams.has(name: string, value?: string): boolean</code>",id:"urlsearchparamshasname-string-value-string-boolean",level:3},{value:"<code>URLSearchParams.set(name: string, value: string): void</code>",id:"urlsearchparamssetname-string-value-string-void",level:3},{value:"<code>URLSearchParams.sort(): void</code>",id:"urlsearchparamssort-void",level:3},{value:"<code>URLSearchParams.toString(): string</code>",id:"urlsearchparamstostring-string",level:3},{value:"<code>URLSearchParams[Symbol.iterator](): Iterator&lt;[string, string]&gt;</code>",id:"urlsearchparamssymboliterator-iteratorstring-string",level:3},{value:"<code>URLSearchParams.entries(): Iterator&lt;[string, string]&gt;</code>",id:"urlsearchparamsentries-iteratorstring-string",level:3},{value:"<code>URLSearchParams.keys(): Iterator&lt;string&gt;</code>",id:"urlsearchparamskeys-iteratorstring",level:3},{value:"<code>URLSearchParams.values(): Iterator&lt;string&gt;</code>",id:"urlsearchparamsvalues-iteratorstring",level:3},{value:"<code>URLSearchParams.forEach(callback: (value: string, name: string, parent: URLSearchParams) =&gt; void): void</code>",id:"urlsearchparamsforeachcallback-value-string-name-string-parent-urlsearchparams--void-void",level:3}];function h(e){const r={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"jstz"}),"'s implementation of the ",(0,n.jsx)(r.code,{children:"URLSearchParams"})," API defines utility methods for working with the query string of a URL according to the ",(0,n.jsx)(r.a,{href:"https://url.spec.whatwg.org/#urlsearchparams",children:"URL specification"}),". It is used for building and manipulating search parameters."]}),"\n",(0,n.jsx)(r.h2,{id:"example",children:"Example"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-typescript",children:'// Parse query string from URL\nlet url = new URL("https://example.com?foo=1&bar=2");\nlet params = new URLSearchParams(url.search);\n\n// Add a new parameter\nparams.append("baz", 3);\n\n// Remove parameter\nparams.delete("bar");\n'})}),"\n",(0,n.jsx)(r.h2,{id:"constructor",children:"Constructor"}),"\n",(0,n.jsx)(r.h3,{id:"new-urlsearchparamsinit-string-string--recordstring-string--string-urlsearchparams",children:(0,n.jsx)(r.code,{children:"new URLSearchParams(init?: [string, string][] | Record<string, string> | string): URLSearchParams"})}),"\n",(0,n.jsxs)(r.p,{children:["Creates a new instance of ",(0,n.jsx)(r.code,{children:"URLSearchParams"})," with the provided key-value pairs. The ",(0,n.jsx)(r.code,{children:"init"})," parameter can be one of the following:"]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"An array of key-value pairs. Each pair is an array where the first element is the key (Name) and the second is the value."}),"\n",(0,n.jsxs)(r.li,{children:["A record of ",(0,n.jsx)(r.code,{children:"string"})," keys and ",(0,n.jsx)(r.code,{children:"string"})," values."]}),"\n",(0,n.jsxs)(r.li,{children:["A ",(0,n.jsx)(r.code,{children:"string"}),", which will be parsed from ",(0,n.jsx)(r.a,{href:"https://url.spec.whatwg.org/#application/x-www-form-urlencoded",children:(0,n.jsx)(r.code,{children:"application/x-www-form-urlencoded"})})," format. The leading '?' character is ignored."]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"instance-properties",children:"Instance Properties"}),"\n",(0,n.jsx)(r.h3,{id:"readonly-urlsearchparamssize-number",children:(0,n.jsx)(r.code,{children:"readonly URLSearchParams.size: number"})}),"\n",(0,n.jsx)(r.p,{children:"Returns the number of search parameters present."}),"\n",(0,n.jsx)(r.h2,{id:"instance-methods",children:"Instance Methods"}),"\n",(0,n.jsx)(r.h3,{id:"urlsearchparamsappendname-string-value-string-void",children:(0,n.jsx)(r.code,{children:"URLSearchParams.append(name: string, value: string): void"})}),"\n",(0,n.jsx)(r.p,{children:"Appends a specified name-value pair as a new search parameter."}),"\n",(0,n.jsx)(r.h3,{id:"urlsearchparamsdeletename-string-value-string-void",children:(0,n.jsx)(r.code,{children:"URLSearchParams.delete(name: string, value?: string): void"})}),"\n",(0,n.jsx)(r.p,{children:"Removes search parameters that match the given name. If a value is provided, only parameters with that name-value pair are removed."}),"\n",(0,n.jsx)(r.h3,{id:"urlsearchparamsgetname-string-string--null",children:(0,n.jsx)(r.code,{children:"URLSearchParams.get(name: string): string | null"})}),"\n",(0,n.jsxs)(r.p,{children:["Returns the first value associated with the given search parameter ",(0,n.jsx)(r.code,{children:"name"})," or ",(0,n.jsx)(r.code,{children:"null"})," if not found."]}),"\n",(0,n.jsx)(r.h3,{id:"urlsearchparamsgetallname-string-string",children:(0,n.jsx)(r.code,{children:"URLSearchParams.getAll(name: string): string[]"})}),"\n",(0,n.jsxs)(r.p,{children:["Returns all the values associated with a given search parameter ",(0,n.jsx)(r.code,{children:"name"}),"."]}),"\n",(0,n.jsx)(r.h3,{id:"urlsearchparamshasname-string-value-string-boolean",children:(0,n.jsx)(r.code,{children:"URLSearchParams.has(name: string, value?: string): boolean"})}),"\n",(0,n.jsxs)(r.p,{children:["Determines whether the ",(0,n.jsx)(r.code,{children:"UrlSearchParams"})," object has a certain parameter, optionally with a specific value."]}),"\n",(0,n.jsx)(r.h3,{id:"urlsearchparamssetname-string-value-string-void",children:(0,n.jsx)(r.code,{children:"URLSearchParams.set(name: string, value: string): void"})}),"\n",(0,n.jsx)(r.p,{children:"Sets the value associated with a given parameter. If there are several matching parameters, it updates the first and removes the others."}),"\n",(0,n.jsx)(r.p,{children:"If the parameter does not exist, this method will append the name-value pair."}),"\n",(0,n.jsx)(r.h3,{id:"urlsearchparamssort-void",children:(0,n.jsx)(r.code,{children:"URLSearchParams.sort(): void"})}),"\n",(0,n.jsxs)(r.p,{children:["Sorts all name-value pairs in the ",(0,n.jsx)(r.code,{children:"UrlSearchParams"})," object by their names. The sorting is done by comparing the code units of the names. The relative order between pairs with equal names is preserved."]}),"\n",(0,n.jsx)(r.h3,{id:"urlsearchparamstostring-string",children:(0,n.jsx)(r.code,{children:"URLSearchParams.toString(): string"})}),"\n",(0,n.jsx)(r.p,{children:"Returns a query string suitable for use in a URL."}),"\n",(0,n.jsx)(r.h3,{id:"urlsearchparamssymboliterator-iteratorstring-string",children:(0,n.jsx)(r.code,{children:"URLSearchParams[Symbol.iterator](): Iterator<[string, string]>"})}),"\n",(0,n.jsxs)(r.p,{children:["Returns an iterator over the list of search parameter name-value pairs. This makes ",(0,n.jsx)(r.code,{children:"URLSearchParams"})," instances ",(0,n.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol",children:"iterable"}),"."]}),"\n",(0,n.jsx)(r.h3,{id:"urlsearchparamsentries-iteratorstring-string",children:(0,n.jsx)(r.code,{children:"URLSearchParams.entries(): Iterator<[string, string]>"})}),"\n",(0,n.jsx)(r.p,{children:"Returns an iterator over the list of search parameter name-value pairs."}),"\n",(0,n.jsx)(r.h3,{id:"urlsearchparamskeys-iteratorstring",children:(0,n.jsx)(r.code,{children:"URLSearchParams.keys(): Iterator<string>"})}),"\n",(0,n.jsx)(r.p,{children:"Returns an iterator over the search parameter names."}),"\n",(0,n.jsx)(r.h3,{id:"urlsearchparamsvalues-iteratorstring",children:(0,n.jsx)(r.code,{children:"URLSearchParams.values(): Iterator<string>"})}),"\n",(0,n.jsx)(r.p,{children:"Returns an iterator over the search parameter values."}),"\n",(0,n.jsx)(r.h3,{id:"urlsearchparamsforeachcallback-value-string-name-string-parent-urlsearchparams--void-void",children:(0,n.jsx)(r.code,{children:"URLSearchParams.forEach(callback: (value: string, name: string, parent: URLSearchParams) => void): void"})}),"\n",(0,n.jsxs)(r.p,{children:["Calls the callback for each search parameter. Note that the search parameter value is the ",(0,n.jsx)(r.em,{children:"first"})," callback argument, while the name is the second argument."]})]})}function d(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}}}]);