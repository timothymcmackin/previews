"use strict";(self.webpackChunketherlink_docs=self.webpackChunketherlink_docs||[]).push([[96840],{96840:(e,n,a)=>{a.d(n,{onSessionProposal:()=>o});var s=a(87366),i=a(39624);async function o(e){const{wallet:n,walletConnectClient:a,event:o,chains:t,onConnect:c}=e,r=n.getAccount();if(!r)throw new Error("No account connected to provided wallet");const p=o.verifyContext?.verified?.origin;p&&await async function({walletConnectClient:e,origin:n}){const a=await(0,i.Rx)();for(const i of a)i.origin===n&&await(0,s.$b)({session:i,walletConnectClient:e})}({origin:p,walletConnectClient:a});const l=await async function({account:e,walletConnectClient:n,sessionProposal:a,chains:s}){if(!a.params.requiredNamespaces?.eip155&&!a.params.optionalNamespaces?.eip155)throw new Error("No EIP155 namespace found in Wallet Connect session proposal");const i={chains:[...Array.from(new Set([...a.params.requiredNamespaces?.eip155?.chains?.map((n=>`${n}:${e.address}`))??[],...a.params.optionalNamespaces?.eip155?.chains?.map((n=>`${n}:${e.address}`))??[],...s?.map((n=>`eip155:${n.id}:${e.address}`))??[]]))],methods:[...a.params.requiredNamespaces?.eip155?.methods??[],...a.params.optionalNamespaces?.eip155?.methods??[]],events:[...a.params.requiredNamespaces?.eip155?.events??[],...a.params.optionalNamespaces?.eip155?.events??[]]},o=await n.approve({id:a.id,namespaces:{eip155:{accounts:i.chains,methods:i.methods,events:i.events}}}),t=await o.acknowledged();return{topic:t.topic,origin:a.verifyContext?.verified?.origin||"Unknown origin"}}({account:r,walletConnectClient:a,sessionProposal:o,chains:t});await(0,i.Aj)(l),n.subscribe("disconnect",(()=>{(0,s.$b)({session:l,walletConnectClient:a})})),c?.(l)}}}]);