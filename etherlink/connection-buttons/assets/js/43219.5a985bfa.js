"use strict";(self.webpackChunketherlink_docs=self.webpackChunketherlink_docs||[]).push([[43219],{43219:(a,e,t)=>{t.d(e,{fulfillRequest:()=>n});var s=t(67347);async function n(a){const{wallet:e,walletConnectClient:n,thirdwebClient:i,event:{topic:r,id:c,params:{chainId:o,request:h}},handlers:l}=a,d=e.getAccount();if(!d)throw new Error("No account connected to provided wallet");let p;try{switch(h.method){case"personal_sign":if(l?.personal_sign)p=await l.personal_sign({account:d,params:h.params});else{const{handleSignRequest:a}=await Promise.resolve().then(t.bind(t,35382));p=await a({account:d,params:h.params})}break;case"eth_sign":if(l?.eth_sign)p=await l.eth_sign({account:d,params:h.params});else{const{handleSignRequest:a}=await Promise.resolve().then(t.bind(t,35382));p=await a({account:d,params:h.params})}break;case"eth_signTypedData":if(l?.eth_signTypedData)p=await l.eth_signTypedData({account:d,params:h.params});else{const{handleSignTypedDataRequest:a}=await Promise.resolve().then(t.bind(t,73088));p=await a({account:d,params:h.params})}break;case"eth_signTypedData_v4":if(l?.eth_signTypedData_v4)p=await l.eth_signTypedData_v4({account:d,params:h.params});else{const{handleSignTypedDataRequest:a}=await Promise.resolve().then(t.bind(t,73088));p=await a({account:d,params:h.params})}break;case"eth_signTransaction":if(l?.eth_signTransaction)p=await l.eth_signTransaction({account:d,params:h.params});else{const{handleSignTransactionRequest:a}=await Promise.resolve().then(t.bind(t,10774));p=await a({account:d,params:h.params})}break;case"eth_sendTransaction":{const a=(0,s.$)(o);if(l?.eth_sendTransaction)p=await l.eth_sendTransaction({account:d,chainId:a,params:h.params});else{const{handleSendTransactionRequest:e}=await Promise.resolve().then(t.bind(t,38184));p=await e({account:d,chainId:a,thirdwebClient:i,params:h.params})}break}case"eth_sendRawTransaction":{const a=(0,s.$)(o);if(l?.eth_sendRawTransaction)p=await l.eth_sendRawTransaction({account:d,chainId:a,params:h.params});else{const{handleSendRawTransactionRequest:e}=await Promise.resolve().then(t.bind(t,74082));p=await e({account:d,chainId:a,params:h.params})}break}case"wallet_addEthereumChain":if(!l?.wallet_addEthereumChain)throw new Error("Unsupported request method: wallet_addEthereumChain");p=await l.wallet_addEthereumChain({wallet:e,params:h.params});break;case"wallet_switchEthereumChain":if(l?.wallet_switchEthereumChain)p=await l.wallet_switchEthereumChain({wallet:e,params:h.params});else{const{handleSwitchChain:a}=await Promise.resolve().then(t.bind(t,9409));p=await a({wallet:e,params:h.params})}break;default:{const a=l?.[h.method];if(!a)throw new Error(`Unsupported request method: ${h.method}`);p=await a({account:d,chainId:(0,s.$)(o),params:h.params})}}}catch(m){p={code:"object"==typeof m&&null!==m&&"code"in m?m.code:500,message:"object"==typeof m&&null!==m&&"message"in m?m.message:"Unknown error"}}n.respond({topic:r,response:{id:c,jsonrpc:"2.0",result:p}})}}}]);