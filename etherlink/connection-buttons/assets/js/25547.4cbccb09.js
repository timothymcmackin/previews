"use strict";(self.webpackChunketherlink_docs=self.webpackChunketherlink_docs||[]).push([[25547],{25547:(e,t,n)=>{n.d(t,{upload:()=>y});var i=n(46126),r=n(75100),a=n(96033),s=n(54507),f=n(25108);function o(e){return globalThis.File&&e instanceof File}function l(e){return!!e&&(!!(0,a.L)(e,["data","name"])&&!("string"!=typeof e.name||"string"!=typeof e.data&&!(0,s.lq)(e.data)))}function u(e,t){if(o(e)&&o(t)){if(e.name===t.name&&e.lastModified===t.lastModified&&e.size===t.size)return!0}else{if((0,s.lq)(e)&&(0,s.lq)(t))return(0,s.AY)(e,t);if(l(e)&&l(t)&&e.name===t.name){if("string"==typeof e.data&&"string"==typeof t.data)return e.data===t.data;if((0,s.lq)(e.data)&&(0,s.lq)(t.data))return(0,s.AY)(e.data,t.data)}}return!1}function p(e){return o(e)||(0,s.lq)(e)||l(e)}function c(e,t=[]){if(p(e))return t.push(e),t;if("object"==typeof e){if(!e)return t;if(Array.isArray(e))for(const n of e)c(n,t);else Object.keys(e).map((n=>c(e[n],t)))}return t}function m(e,t){if(p(e)){if(t.length)return t.shift();f.warn("Not enough URIs to replace all files in object.")}return"object"==typeof e&&e?Array.isArray(e)?e.map((e=>m(e,t))):Object.fromEntries(Object.entries(e).map((([e,n])=>[e,m(n,t)]))):e}function d(e){return"string"==typeof e?function(e){if(e.includes("/ipfs/"))return`ipfs://${e.split("/ipfs/")[1]}`;return e}(e):"object"==typeof e&&e?p(e)?e:Array.isArray(e)?e.map((e=>d(e))):Object.fromEntries(Object.entries(e).map((([e,t])=>[e,d(t)]))):e}async function y(e){if(0===e.files.length)return null;let t;if(e.files.map((e=>p(e)||"string"==typeof e)).every((e=>!!e)))t=e.files;else{let n=e.files;n=d(n);const i=c(n);if(i.length){const t=await y({...e,files:i});n=m(n,Array.isArray(t)?t:[t])}t=n.map((e=>"string"==typeof e?e:(0,r.P)(e)))}const a=new FormData,{fileNames:s,form:f}=function(e,t,n){const i=new Map,r=[];for(let s=0;s<t.length;s++){const a=t[s];let f="",p=a;if(o(a))if(n?.rewriteFileNames){let e="";if(a.name){const t=a.name.lastIndexOf(".");t>-1&&(e=a.name.substring(t))}f=`${s+n.rewriteFileNames.fileStartNumber}${e}`}else f=`${a.name}`;else l(a)?(p=a.data,f=n?.rewriteFileNames?`${s+n.rewriteFileNames.fileStartNumber}`:`${a.name}`):f=n?.rewriteFileNames?`${s+n.rewriteFileNames.fileStartNumber}`:`${s}`;const c=n?.uploadWithoutDirectory?"files":`files/${f}`;if(i.has(f)){if(u(i.get(f),a)){r.push(f);continue}throw new Error(`[DUPLICATE_FILE_NAME_ERROR] File name ${f} was passed for more than one different file.`)}i.set(f,a),r.push(f),e.append("file",new Blob([p]),c)}const a={name:"Storage SDK",keyvalues:{...n?.metadata}};return e.append("pinataMetadata",JSON.stringify(a)),n?.uploadWithoutDirectory&&e.append("pinataOptions",JSON.stringify({wrapWithDirectory:!1})),{form:e,fileNames:r.map((e=>encodeURIComponent(e)))}}(a,t,e),h=(0,i.t)();if("browser"===h||"node"===h){const{uploadBatch:t}=await n.e(85810).then(n.bind(n,85810)),i=await t(e.client,f,s,e);return 1===e.files.length?i[0]:i}throw new Error("Please, use the uploadMobile function in mobile environments.")}}}]);