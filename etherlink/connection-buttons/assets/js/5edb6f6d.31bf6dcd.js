"use strict";(self.webpackChunketherlink_docs=self.webpackChunketherlink_docs||[]).push([[11509],{3278:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>h});var s=t(85893),r=t(11151);const i={title:"Etherlink architecture"},o=void 0,a={id:"network/architecture",title:"Etherlink architecture",description:"Etherlink's main components are its nodes and the sequencer.",source:"@site/docs/network/architecture.md",sourceDirName:"network",slug:"/network/architecture",permalink:"/previews/etherlink/connection-buttons/network/architecture",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1723465189e3,frontMatter:{title:"Etherlink architecture"},sidebar:"documentationSidebar",previous:{title:"Development toolkits",permalink:"/previews/etherlink/connection-buttons/building-on-etherlink/development-toolkits"},next:{title:"Fee structure",permalink:"/previews/etherlink/connection-buttons/network/fees"}},l={},h=[{value:"High-level diagram",id:"high-level-diagram",level:2},{value:"Sequencer",id:"sequencer",level:2},{value:"Nodes",id:"nodes",level:2},{value:"Transaction lifecycle",id:"transaction-lifecycle",level:2},{value:"Standard transaction processing",id:"standard-transaction-processing",level:3},{value:"Delayed inbox transaction processing",id:"delayed-inbox-transaction-processing",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Etherlink's main components are its nodes and the sequencer."}),"\n",(0,s.jsxs)(n.p,{children:["These components are instances of binaries in the ",(0,s.jsx)(n.a,{href:"https://tezos.gitlab.io/introduction/tezos.html",children:"Octez software suite"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"high-level-diagram",children:"High-level diagram"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"A high-level diagram of Etherlink architecture, showing the interaction between the nodes and the sequencer",src:t(67691).Z+"",width:"1100",height:"785"})}),"\n",(0,s.jsx)(n.h2,{id:"sequencer",children:"Sequencer"}),"\n",(0,s.jsx)(n.p,{children:"Etherlink relies on a sequencer to publish transactions.\nIt receives transactions from EVM nodes, puts them in order, and packages them into a blueprint, which is a group of Etherlink transactions."}),"\n",(0,s.jsx)(n.p,{children:"Each blueprint contains:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A list of transactions"}),"\n",(0,s.jsxs)(n.li,{children:["A list of transactions that are currently in the delayed inbox, as described in ",(0,s.jsx)(n.a,{href:"#transaction-lifecycle",children:"Transaction lifecycle"})]}),"\n",(0,s.jsx)(n.li,{children:"The hash of the previous blueprint"}),"\n",(0,s.jsx)(n.li,{children:"The timestamp of the blueprint."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The sequencer publishes each blueprint in two ways:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"It publishes them to EVM nodes, which can consider the transactions final as long as they trust that the sequencer will publish them to layer 1."}),"\n",(0,s.jsx)(n.li,{children:"It publishes them to Tezos layer 1, which finalizes the transactions."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The sequencer is the primary way that Etherlink transactions are processed.\nHowever, to protect the system from censorship and any other problems with the sequencer, Etherlink provides a backup way of handling transactions; see ",(0,s.jsx)(n.a,{href:"#transaction-lifecycle",children:"Transaction lifecycle"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The sequencer is an instance of the ",(0,s.jsx)(n.code,{children:"octez-evm-node"})," binary running in sequencer mode.\nOnly members of the Sequencer Committee can run instances of the sequencer in sequencer mode."]}),"\n",(0,s.jsxs)(n.p,{children:["The sequencer is an instance of the ",(0,s.jsx)(n.code,{children:"octez-evm-node"})," binary running in sequencer mode."]}),"\n",(0,s.jsx)(n.h2,{id:"nodes",children:"Nodes"}),"\n",(0,s.jsx)(n.p,{children:"Etherlink relies on three types of nodes, with instances of each type running in different modes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["EVM nodes (",(0,s.jsx)(n.code,{children:"octez-evm-node"}),"): The EVM nodes running in sequencer observer mode maintain a local copy of the Etherlink context and expose a ",(0,s.jsx)(n.a,{href:"https://ethereum.org/en/developers/docs/apis/json-rpc/",children:"JSON RPC API"}),"-compliant endpoint for clients to submit transactions to.\nThey forward these transactions to the sequencer and receive transactions from the sequencer, which they use to update their state.\nThey also check Smart Rollup nodes to verify that these transactions make it to Tezos layer 1."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Smart Rollup nodes (",(0,s.jsx)(n.code,{children:"octez-smart-rollup-node"}),"): Smart Rollup nodes store the state of the Etherlink blockchain from the perspective of Tezos layer 1.\nThey monitor the Tezos layer 1 Smart Rollup inbox, filter the inbox to Etherlink-related messages, process them, and update their states."]}),"\n",(0,s.jsx)(n.p,{children:"Importantly, the Smart Rollup nodes store the state of Etherlink based on the information that they get from layer 1, not on information from EVM nodes or the sequencer."}),"\n",(0,s.jsxs)(n.p,{children:["These Smart Rollup nodes run in different modes depending on the needs of the people who run them.\nThe ",(0,s.jsx)(n.code,{children:"octez-smart-rollup-node"})," binary has many different modes, but these are the primary modes for Etherlink:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Nodes running in observer mode follow the state of the rollup by monitoring layer 1 and updating their states."}),"\n",(0,s.jsx)(n.li,{children:"Nodes running in operator mode update their states like nodes running in observer mode.\nThey also have the critical role of securing the Etherlink Smart Rollup by publishing commitments to layer 1 and playing refutation games."}),"\n",(0,s.jsx)(n.li,{children:"The sequencer can use a node running in batcher mode to publish transactions to layer 1.\nIt can also use a node running in operator mode to publish transactions."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["For more information about Smart Rollup nodes in general, see ",(0,s.jsx)(n.a,{href:"https://docs.tezos.com/architecture/smart-rollups",children:"Smart Rollups"})," on docs.tezos.com and ",(0,s.jsx)(n.a,{href:"https://tezos.gitlab.io/shell/smart_rollup_node.html",children:"Smart Rollup Node"})," in the Octez documentation."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Tezos layer 1 nodes (",(0,s.jsx)(n.code,{children:"octez-node"}),"): Layer 1 nodes are responsible for the state of layer 1.\nIn addition to ordinary layer 1 transactions, they receive Etherlink transactions from the sequencer.\nThen the baking nodes publish the Etherlink transactions in the Smart Rollup inbox in layer 1 blocks.\nFor more information about Tezos layer 1 and its nodes, see ",(0,s.jsx)(n.a,{href:"https://docs.tezos.com/architecture",children:"Architecture"})," on docs.tezos.com."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"transaction-lifecycle",children:"Transaction lifecycle"}),"\n",(0,s.jsx)(n.p,{children:"Etherlink has a standard method of processing transactions and a backup method that protects it from censorship and network problems."}),"\n",(0,s.jsx)(n.h3,{id:"standard-transaction-processing",children:"Standard transaction processing"}),"\n",(0,s.jsx)(n.p,{children:"The lifecycle of a typical operation under normal circumstances is as follows:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"A user submits a transaction to an EVM node."}),"\n",(0,s.jsx)(n.li,{children:"The EVM node forwards the transaction to the sequencer."}),"\n",(0,s.jsx)(n.li,{children:"The sequencer puts the transaction in its queue as soon as possible (less than 500ms after receiving it in a nominal scenario)."}),"\n",(0,s.jsx)(n.li,{children:"The sequencer puts the transaction into a blueprint."}),"\n",(0,s.jsx)(n.li,{children:"The sequencer publishes the blueprint to the EVM nodes, which update their states based on the transactions in the blueprint."}),"\n",(0,s.jsx)(n.li,{children:"The sequencer publishes the blueprint to the Smart Rollup inbox on layer 1 via a Smart Rollup node running in operator or batcher mode."}),"\n",(0,s.jsx)(n.li,{children:"The Smart Rollup nodes tracking the state of Etherlink fetch the blueprint from the Smart Rollup inbox, read its transactions, and update their states."}),"\n",(0,s.jsx)(n.li,{children:"The EVM nodes check the state of the Smart Rollup nodes to verify that blueprints have successfully and faithfully been finalized on layer 1."}),"\n",(0,s.jsx)(n.li,{children:"The Smart Rollup nodes running in operator mode post hashes of Etherlink's state to layer 1 as commitments."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This diagram summarizes the transaction process:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"A more detailed diagram of Etherlink architecture, showing the flow of transactions and blueprints",src:t(7177).Z+"",width:"1383",height:"1292"})}),"\n",(0,s.jsx)(n.h3,{id:"delayed-inbox-transaction-processing",children:"Delayed inbox transaction processing"}),"\n",(0,s.jsxs)(n.p,{children:["Under normal circumstances, the sequencer handles all incoming transactions fairly and packages them into blueprints to finalize them.\nIf the sequencer doesn't include transactions promptly for any reason, Etherlink provides a backup method of processing transactions that does not rely on the sequencer.\nThis method allows users to add transactions to an area of storage called the ",(0,s.jsx)(n.em,{children:"delayed inbox"})," and to force Etherlink to include them."]}),"\n",(0,s.jsx)(n.p,{children:"Transactions that run via the delayed inbox follow this lifecycle:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:'A user submits an Etherlink transaction to a Tezos layer 1 smart contract called the "delayed bridge" contract.\nThis transaction includes the address of the Etherlink Smart Rollup and the transaction to run on Etherlink encoded via recursive-length prefix (RLP).\nThe user must also include 1 tez with the transaction to prevent spam; this amount is hardcoded in the smart contract and is subject to change.'}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"The delayed bridge contract writes the transaction to the Smart Rollup inbox."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The Etherlink Smart Rollup nodes receive the message, verify that it came from the delayed bridge contract by checking its address, and add it to the delayed inbox, which is a specific area of storage named ",(0,s.jsx)(n.code,{children:"delayed-inbox"}),".\nThis address is hard-coded in the Etherlink kernel."]}),"\n",(0,s.jsx)(n.p,{children:"At this point, the sequencer has 12 hours or 1600 layer 1 blocks to include the transaction, whichever is longer.\nThis delay is to give the sequencer time to catch up if it is trying to include transactions normally and the network is slow for some reason."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"If the sequencer is running normally, it processes the transaction in the delayed inbox in the same way that it processes other transactions.\nThen, when the Smart Rollup nodes receive the blueprint with the transaction as in the standard transaction process, they remove it from the delayed inbox.\nThe only way to remove a transaction from the delayed inbox is to process it."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"If the sequencer has not included the transaction at the end of the delay, the Smart Rollup nodes take over the blueprint creation process by following these steps:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Each time the Smart Rollup nodes run the Etherlink kernel (at every layer 1 block level), they check to see if the delay has passed for any delayed inbox transactions."}),"\n",(0,s.jsx)(n.li,{children:"If any transaction needs to be forced, the nodes retrieve all transactions in the delayed inbox, even if they haven't been in the delayed inbox longer than the delay."}),"\n",(0,s.jsx)(n.li,{children:"The nodes package these transactions into a blueprint and process the transactions in the same way as they process transactions in blueprints that come from the sequencer."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"In this way, transactions in the delayed inbox take precedence over the sequencer.\nIf the kernel (via the Smart Rollup nodes) generates a blueprint, that blueprint results in a new branch of the Etherlink chain, and the states of the sequencer and the Smart Rollup nodes diverge.\nIt becomes the responsibility of the sequencer to reorganize itself to build blueprints on top of the kernel-generated blueprint."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The delayed bridge contract is deployed to Tezos layer 1 Mainnet at ",(0,s.jsx)(n.a,{href:"https://better-call.dev/mainnet/KT1AZeXH8qUdLMfwN2g7iwiYYSZYG4RrwhCj",children:"KT1AZeXH8qUdLMfwN2g7iwiYYSZYG4RrwhCj"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},7177:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/architecture-full-865889ba76cccb78ed23ce04a1fbc8f4.png"},67691:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/architecture-high-level-a84deab25bba4b6131471a47d90a1055.png"},11151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>o});var s=t(67294);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);