"use strict";(self.webpackChunketherlink_docs=self.webpackChunketherlink_docs||[]).push([[81125],{76616:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>h,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var t=r(85893),s=r(11151);const i={title:"Indexing Etherlink contracts with The Graph",sidebar_label:"Indexing contracts"},a=void 0,o={id:"building-on-etherlink/indexing-graph",title:"Indexing Etherlink contracts with The Graph",description:"Getting historical data on a smart contract can be frustrating when building a dApp. The Graph provides an easy way to query smart contract data through APIs known as subgraphs. The Graph\u2019s infrastructure relies on a decentralized network of indexers, enabling your dApp to become truly decentralized.",source:"@site/docs/building-on-etherlink/indexing-graph.mdx",sourceDirName:"building-on-etherlink",slug:"/building-on-etherlink/indexing-graph",permalink:"/previews/etherlink/connection-buttons/building-on-etherlink/indexing-graph",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1729626443e3,frontMatter:{title:"Indexing Etherlink contracts with The Graph",sidebar_label:"Indexing contracts"},sidebar:"documentationSidebar",previous:{title:"Verifying contracts",permalink:"/previews/etherlink/connection-buttons/building-on-etherlink/verifying-contracts"},next:{title:"Tokens",permalink:"/previews/etherlink/connection-buttons/building-on-etherlink/tokens"}},h={},l=[{value:"Quick start",id:"quick-start",level:2},{value:"Initialize your subgraph project",id:"initialize-your-subgraph-project",level:2},{value:"Deploy &amp; publish",id:"deploy--publish",level:2},{value:"Query your subgraph",id:"query-your-subgraph",level:2},{value:"Appendix",id:"appendix",level:2},{value:"Sample query",id:"sample-query",level:3},{value:"Sample code",id:"sample-code",level:3},{value:"Additional resources:",id:"additional-resources",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Getting historical data on a smart contract can be frustrating when building a dApp. ",(0,t.jsx)(n.a,{href:"https://thegraph.com/",children:"The Graph"})," provides an easy way to query smart contract data through APIs known as subgraphs. The Graph\u2019s infrastructure relies on a decentralized network of indexers, enabling your dApp to become truly decentralized."]}),"\n",(0,t.jsx)(n.p,{children:"Both Etherlink Mainnet & Testnet are supported by The Graph."}),"\n",(0,t.jsx)(n.h2,{id:"quick-start",children:"Quick start"}),"\n",(0,t.jsx)(n.p,{children:"These subgraphs only take a few minutes to set up. To get started, follow these three steps:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Initialize your subgraph project"}),"\n",(0,t.jsx)(n.li,{children:"Deploy & publish"}),"\n",(0,t.jsx)(n.li,{children:"Query from your dApp"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Here\u2019s a step by step walk through:"}),"\n",(0,t.jsx)(n.h2,{id:"initialize-your-subgraph-project",children:"Initialize your subgraph project"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Create a subgraph on Subgraph Studio\u2060"}),"\n",(0,t.jsxs)(n.p,{children:["Go to the ",(0,t.jsx)(n.a,{href:"https://thegraph.com/studio/",children:"Subgraph Studio"})," and connect your wallet. Once your wallet is connected, you can begin by clicking \u201cCreate a Subgraph\u201d. When choosing a name, it is recommended to use Title Case: \u201cSubgraph Name Chain Name.\u201d"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Create a Subgraph",src:r(20332).Z+"",width:"854",height:"765"})}),"\n",(0,t.jsx)(n.p,{children:"You will then land on your subgraph\u2019s page. All the CLI commands you need will be visible on the right side of the page:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"CLI commands",src:r(41111).Z+"",width:"1174",height:"942"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Install the Graph-CLI\u2060"}),"\n",(0,t.jsx)(n.p,{children:"On your local machine run the following:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npm install -g @graphprotocol/graph-cli\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Initialize your subgraph\u2060"}),"\n",(0,t.jsx)(n.p,{children:"You can copy this directly from your subgraph page to include your specific subgraph slug:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"graph init --studio <SUBGRAPH_SLUG>\n"})}),"\n",(0,t.jsx)(n.p,{children:"You\u2019ll be prompted to provide some info on your subgraph like this:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"cli sample",src:r(72748).Z+"",width:"518",height:"300"})}),"\n",(0,t.jsxs)(n.p,{children:["Simply have your contract ",(0,t.jsx)(n.a,{href:"https://docs.etherlink.com/building-on-etherlink/verifying-contracts",children:"verified on the block explorer"})," and the CLI will automatically obtain the ABI and set up your subgraph. The default settings will generate an entity for each event."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"deploy--publish",children:"Deploy & publish"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Deploy to Subgraph Studio\u2060"}),"\n",(0,t.jsx)(n.p,{children:"First run these commands:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ graph codegen\n$ graph build\n"})}),"\n",(0,t.jsx)(n.p,{children:"Then run these to authenticate and deploy your subgraph. You can copy these commands directly from your subgraph\u2019s page in Studio to include your specific deploy key and subgraph slug:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ graph auth --studio <DEPLOY_KEY>\n$ graph deploy --studio <SUBGRAPH_SLUG>\n"})}),"\n",(0,t.jsx)(n.p,{children:"You will be asked for a version label. You can enter something like v0.0.1, but you\u2019re free to choose the format."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Test your subgraph\u2060"}),"\n",(0,t.jsx)(n.p,{children:"You can test your subgraph by making a sample query in the playground section. The Details tab will show you an API endpoint. You can use that endpoint to test from your dApp."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Playground",src:r(35312).Z+"",width:"1139",height:"706"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Publish Your subgraph to The Graph\u2019s decentralized network"}),"\n",(0,t.jsx)(n.p,{children:"Once your subgraph is ready to be put into production, you can publish it to the decentralized network. On your subgraph\u2019s page in Subgraph Studio, click on the Publish button:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"publish button",src:r(3663).Z+"",width:"1322",height:"356"})}),"\n",(0,t.jsx)(n.p,{children:"Before you can query your subgraph, Indexers need to begin serving queries on it. In order to streamline this process, you can curate your own subgraph using GRT, The Graph's token."}),"\n",(0,t.jsx)(n.p,{children:"When publishing, you\u2019ll see the option to curate your subgraph. As of May 2024, it is recommended that you curate your own subgraph with at least 3,000 GRT to ensure that it is indexed and available for querying as soon as possible."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Publish screen",src:r(87740).Z+"",width:"1025",height:"853"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note:"})," The Graph's smart contracts are all on Arbitrum One, even though your subgraph is indexing data from Etherlink, Ethereum or any other ",(0,t.jsx)(n.a,{href:"https://thegraph.com/docs/en/developing/supported-networks/",children:"supported chain"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"query-your-subgraph",children:"Query your subgraph"}),"\n",(0,t.jsx)(n.p,{children:"Congratulations! You can now query your subgraph on the decentralized network!"}),"\n",(0,t.jsx)(n.p,{children:"For any subgraph on the decentralized network, you can start querying it by passing a GraphQL query into the subgraph\u2019s query URL which can be found at the top of its Explorer page."}),"\n",(0,t.jsxs)(n.p,{children:["Here\u2019s an example from the ",(0,t.jsx)(n.a,{href:"https://thegraph.com/explorer/subgraphs/HdVdERFUe8h61vm2fDyycHgxjsde5PbB832NHgJfZNqK",children:"CryptoPunks Ethereum subgraph"})," by Messari:"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Query URL",src:r(36918).Z+"",width:"1600",height:"530"})}),"\n",(0,t.jsx)(n.p,{children:"The query URL for this subgraph is:"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"https://gateway-arbitrum.network.thegraph.com/api/"}),(0,t.jsx)(n.strong,{children:"[api-key]"}),(0,t.jsx)(n.code,{children:"/subgraphs/id/HdVdERFUe8h61vm2fDyycgxjsde5PbB832NHgJfZNqK"})]}),"\n",(0,t.jsx)(n.p,{children:"Now, you simply need to\xa0 fill in your own API Key to start sending GraphQL queries to this endpoint."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Getting your own API key"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"API keys",src:r(16841).Z+"",width:"1600",height:"503"})}),"\n",(0,t.jsx)(n.p,{children:"In Subgraph Studio, you\u2019ll see the \u201cAPI Keys\u201d menu at the top of the page. Here you can create API Keys."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"appendix",children:"Appendix"}),"\n",(0,t.jsx)(n.h3,{id:"sample-query",children:"Sample query"}),"\n",(0,t.jsx)(n.p,{children:"This query shows the most expensive CryptoPunks sold."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:"{\n  trades(orderBy: priceETH, orderDirection: desc) {\n    priceETH\n    tokenId\n  }\n}\n\n"})}),"\n",(0,t.jsx)(n.p,{children:"Passing this into the query URL returns this result:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'{\n  "data": {\n    "trades": [\n      {\n        "priceETH": "124457.067524886018255505",\n        "tokenId": "9998"\n      },\n      {\n        "priceETH": "8000",\n        "tokenId": "5822"\n      },\n//      ...\n'})}),"\n",(0,t.jsx)("aside",{children:(0,t.jsxs)(n.p,{children:["\ud83d\udca1 Trivia: Looking at the top sales on ",(0,t.jsx)(n.a,{href:"https://cryptopunks.app/cryptopunks/topsales",children:"CryptoPunks website"})," it looks like the top sale is Punk #5822, not #9998. Why? Because they censor the flash-loan sale that happened."]})}),"\n",(0,t.jsx)(n.h3,{id:"sample-code",children:"Sample code"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"const axios = require('axios');\n\nconst graphqlQuery = `{\n  trades(orderBy: priceETH, orderDirection: desc) {\n    priceETH\n    tokenId\n  }\n}`;\nconst queryUrl = 'https://gateway-arbitrum.network.thegraph.com/api/[api-key]/subgraphs/id/HdVdERFUe8h61vm2fDyycHgxjsde5PbB832NHgJfZNqK'\n\nconst graphQLRequest = {\n  method: 'post',\n  url: queryUrl,\n  data: {\n    query: graphqlQuery,\n  },\n};\n\n// Send the GraphQL query\naxios(graphQLRequest)\n  .then((response) => {\n    // Handle the response here\n    const data = response.data.data\n    console.log(data)\n\n  })\n  .catch((error) => {\n    // Handle any errors\n    console.error(error);\n  });\n"})}),"\n",(0,t.jsx)(n.h3,{id:"additional-resources",children:"Additional resources:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["To explore all the ways you can optimize & customize your subgraph for a better performance, read more about ",(0,t.jsx)(n.a,{href:"https://thegraph.com/docs/en/developing/creating-a-subgraph/",children:"creating a subgraph here"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["For more information about querying data from your subgraph, read more ",(0,t.jsx)(n.a,{href:"https://thegraph.com/docs/en/querying/querying-the-graph/",children:"here"}),"."]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},16841:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/thegraph-query-api-key-462473c78d5ba406d5b717869cd2427a.png"},36918:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/thegraph-query-url-435030bbb20d959667a2176198b50a6a.png"},41111:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/thegraph-studio-cli-commands-1a73a3293a12eb4593eab3e184bcc460.png"},20332:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/thegraph-studio-create-subgraph-24795097f89a7efea7316005c70dfbb4.png"},35312:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/thegraph-studio-playground-b30434891f97fb9578217746536a1e45.png"},3663:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/thegraph-studio-publish-button-8dae8456bf106a97c7c7c0d990d2bd4f.png"},87740:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/thegraph-studio-publish-modal-293f32bb4d9c80adfce13be73b1b8430.png"},72748:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/thegraph-thegraph-cli-initialize-output-666e15c011d6526a64a322d6d0737488.png"},11151:(e,n,r)=>{r.d(n,{Z:()=>o,a:()=>a});var t=r(67294);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);