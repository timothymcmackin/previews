"use strict";(self.webpackChunktezos_developer_docs=self.webpackChunktezos_developer_docs||[]).push([[782],{54304:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"tutorials/create-nfts/send-transactions","title":"Part 3: Sending transactions","description":"To send a transaction to Tezos, a dApp creates the transaction, including its parameters.","source":"@site/docs/tutorials/create-nfts/send-transactions.md","sourceDirName":"tutorials/create-nfts","slug":"/tutorials/create-nfts/send-transactions","permalink":"/previews/docs/ledger/tutorials/create-nfts/send-transactions","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1734498000000,"frontMatter":{"title":"Part 3: Sending transactions","authors":"Tim McMackin","last_update":{"date":"18 December 2024"}},"sidebar":"tutorialsSidebar","previous":{"title":"Part 2: Connecting to wallets","permalink":"/previews/docs/ledger/tutorials/create-nfts/connect-wallet"},"next":{"title":"Part 4: Creating the contract","permalink":"/previews/docs/ledger/tutorials/create-nfts/create-contract"}}');var s=n(74848),o=n(28453);const r={title:"Part 3: Sending transactions",authors:"Tim McMackin",last_update:{date:"18 December 2024"}},i=void 0,c={},l=[{value:"The pre-deployed contract",id:"the-pre-deployed-contract",level:2},{value:"Minting NFTs",id:"minting-nfts",level:2},{value:"Viewing the NFT in your wallet",id:"viewing-the-nft-in-your-wallet",level:2}];function d(t){const e={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:"To send a transaction to Tezos, a dApp creates the transaction, including its parameters.\nThen it sends the transaction to the user's wallet application.\nWith the user's approval, the wallet encrypts (\"signs\") the transaction with the user's private key and sends it to Tezos."}),"\n",(0,s.jsx)(e.p,{children:'In this section, you add functions to the application that send a transaction that creates ("mints") an NFT on Tezos.\nThe transaction calls a pre-deployed smart contract that manages NFTs.\nIn a later section, you will deploy your own contract to manage your NFTs, but for now you can use the pre-deployed contract to learn about how it works.'}),"\n",(0,s.jsx)(e.h2,{id:"the-pre-deployed-contract",children:"The pre-deployed contract"}),"\n",(0,s.jsxs)(e.p,{children:["You can see the pre-deployed contract by looking up its address ",(0,s.jsx)(e.code,{children:"KT1SRdvmiXjQxtY78sefFY2qrCHNpNttWZXq"})," on a block explorer such as these:"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://ghostnet.tzkt.io/KT1SRdvmiXjQxtY78sefFY2qrCHNpNttWZXq",children:"https://ghostnet.tzkt.io/KT1SRdvmiXjQxtY78sefFY2qrCHNpNttWZXq"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://better-call.dev/ghostnet/KT1SRdvmiXjQxtY78sefFY2qrCHNpNttWZXq",children:"https://better-call.dev/ghostnet/KT1SRdvmiXjQxtY78sefFY2qrCHNpNttWZXq"})}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["The block explorer shows the transactions that the contract has received and information about the tokens that it manages.\nUsually the block explorer has a ",(0,s.jsx)(e.strong,{children:"Tokens"})," tab for contracts that manage tokens.\nFor example, Better Call Dev shows the tokens like this:"]}),"\n",(0,s.jsx)("img",{src:"/img/tutorials/create-nfts-transaction-existing-tokens.png",alt:"The tokens in the pre-deployed contract",style:{width:300}}),"\n",(0,s.jsx)(e.p,{children:"Most tokens have metadata that describes what the token represents.\nFor example, the first token on the pre-deployed contract has this metadata:"}),"\n",(0,s.jsx)("img",{src:"/img/tutorials/create-nfts-transaction-token-metadata.png",alt:"The metadata of one token",style:{width:300}}),"\n",(0,s.jsx)(e.p,{children:"Normally, contracts that manage tokens have restrictions on who can mint tokens, but for the purposes of the tutorial, this contract allows any account to mint NFTs."}),"\n",(0,s.jsx)(e.h2,{id:"minting-nfts",children:"Minting NFTs"}),"\n",(0,s.jsx)(e.p,{children:"To call a smart contract, you need the address of the contract, the name of  the entrypoint to call, and a properly formatted parameter."}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["In the ",(0,s.jsx)(e.code,{children:"App.svelte"})," file, in the ",(0,s.jsx)(e.code,{children:"<script>"})," section, add a constant with the address of the pre-deployed contract:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'const nftContractAddress = "KT1Lr8m7HgfY5UF6nXDDcXDxDgEmKyMeds1b";\n'})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Add a constant with a pre-deployed image.\nThe application will use this image to represent the NFT in wallet applications."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'const defaultImage = "https://gateway.pinata.cloud/ipfs/QmRCp4Qc8afPrEqtM1YdRvNagWCsFGXHgGjbBYrmNsBkcE";\n'})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["Add a function called ",(0,s.jsx)(e.code,{children:"createNFT"})," that creates an NFT, first checking if the button is active because the wallet is connected:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'if (!buttonActive) {\n  return;\n}\nbuttonActive = false;\nstatusMessage = "Minting NFT; please wait...";\n'})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Further inside the function, create the metadata for the token:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'// Create token metadata\nconst metadata = new MichelsonMap();\nmetadata.set("name", stringToBytes("My Token"));\nmetadata.set("symbol", stringToBytes("Tok"));\nmetadata.set("decimals", stringToBytes("0"));\nmetadata.set("artifactUri", stringToBytes(defaultImage));\nmetadata.set("displayUri", stringToBytes(defaultImage));\nmetadata.set("thumbnailUri", stringToBytes(defaultImage));\n'})}),"\n",(0,s.jsx)(e.p,{children:"These are the metadata fields that the pre-deployed contract expects for new tokens.\nWhen you create your own contract you can define the fields, but these fields are commonly used for Tezos FA2 tokens, including NFTs."}),"\n",(0,s.jsxs)(e.p,{children:["Note that the value of the ",(0,s.jsx)(e.code,{children:"decimals"})," field is set to zero because the token cannot be divided like a fungible token can."]}),"\n",(0,s.jsx)(e.p,{children:"Also note that each field is converted from a string to bytes because token metadata is stored as a key-value map with string keys and byte values."}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Create the parameter for the transaction:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"const mintItem = {\n  to_: address,\n  metadata: metadata,\n};\n\nconst mintParameter = [mintItem];\n"})}),"\n",(0,s.jsxs)(e.p,{children:["There is no standard way that FA2 contracts mint tokens; in fact, FA2 contracts are not required to have a ",(0,s.jsx)(e.code,{children:"mint"})," entrypoint.\nIn this case, the mint entrypoint accepts a list of tokens to create, with each list item including the address of the token owner and the metadata for the new token.\nYou can set up your contract to mint tokens in any way."]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["Within a ",(0,s.jsx)(e.code,{children:"try/catch"})," block, create an object that represents the contract and call its ",(0,s.jsx)(e.code,{children:"mint"})," entrypoint by adding this code:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'try {\n  Tezos.setWalletProvider(wallet);\n\n  console.log("getting contract");\n  const nftContract = await Tezos.wallet.at(nftContractAddress);\n\n  console.log("minting");\n  const op = await nftContract.methodsObject.mint(mintParameter).send();\n\n  console.log(`Waiting for ${op.opHash} to be confirmed...`);\n  const hash = await op.confirmation(2).then(() => op.opHash);\n  console.log(`Operation injected: https://ghostnet.tzkt.io/${hash}`);\n} catch (error) {\n  console.error("Error minting NFT:", error);\n} finally {\n  statusMessage = "Ready to mint another NFT.";\n  buttonActive = true;\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["When you call the ",(0,s.jsx)(e.code,{children:"Tezos.wallet.at()"})," method, Taquito creates an object that represents the contract.\nThis object has a ",(0,s.jsx)(e.code,{children:"methodsObject"})," property that has a method for each entrypoint in the contract.\nIn this way, the ",(0,s.jsx)(e.code,{children:"nftContract.methodsObject.mint()"})," method represents a call to the contract's ",(0,s.jsx)(e.code,{children:"mint"})," entrypoint."]}),"\n",(0,s.jsx)(e.p,{children:"The complete function looks like this:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'const createNFT = async () => {\nif (!buttonActive) {\n  return;\n}\nbuttonActive = false;\nstatusMessage = "Minting NFT; please wait...";\n\n// Create token metadata\nconst metadata = new MichelsonMap();\nmetadata.set("name", stringToBytes("My Token"));\nmetadata.set("symbol", stringToBytes("Tok"));\nmetadata.set("decimals", stringToBytes("0"));\nmetadata.set("artifactUri", stringToBytes(defaultImage));\nmetadata.set("displayUri", stringToBytes(defaultImage));\nmetadata.set("thumbnailUri", stringToBytes(defaultImage));\n\nconst mintItem = {\n  to_: address,\n  metadata: metadata,\n};\n\nconst mintParameter = [mintItem];\n\ntry {\n  Tezos.setWalletProvider(wallet);\n\n  console.log("getting contract");\n  const nftContract = await Tezos.wallet.at(nftContractAddress);\n\n  console.log("minting");\n  const op = await nftContract.methodsObject.mint(mintParameter).send();\n\n  console.log(`Waiting for ${op.opHash} to be confirmed...`);\n  const hash = await op.confirmation(2).then(() => op.opHash);\n  console.log(`Operation injected: https://ghostnet.tzkt.io/${hash}`);\n} catch (error) {\n  console.error("Error minting NFT:", error);\n} finally {\n  statusMessage = "Ready to mint another NFT.";\n  buttonActive = true;\n}\n\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["In the ",(0,s.jsx)(e.code,{children:"<main>"})," section, add a button to call the ",(0,s.jsx)(e.code,{children:"createNFT"})," function.\nThe ",(0,s.jsx)(e.code,{children:"<main>"})," section looks like this:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'<main>\n  <h1>Create NFTs</h1>\n\n  <div class="card">\n    {#if wallet}\n      <p>The address of the connected wallet is {address}.</p>\n      <p>Its balance in tez is {balance}.</p>\n      <button on:click={disconnectWallet}>Disconnect wallet</button>\n      <button on:click={createNFT}>Create NFT</button>\n    {:else}\n      <button on:click={connectWallet}>Connect wallet</button>\n    {/if}\n    <p>{statusMessage}</p>\n  </div>\n</main>\n'})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["Run the application with the command ",(0,s.jsx)(e.code,{children:"npm run dev"})," and connect your wallet as you did previously."]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["Click the ",(0,s.jsx)(e.strong,{children:"Create NFT"})," button and approve the transaction in your wallet."]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Verify that the NFT was created by looking up the transaction hash in a block explorer.\nHere are some ways to get the transaction hash:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Open the browser console and find the message that starts with ",(0,s.jsx)(e.code,{children:"Operation injected"}),"."]}),"\n",(0,s.jsx)(e.li,{children:"Click the link in the confirmation window in your wallet application."}),"\n",(0,s.jsx)(e.li,{children:"Open the contract in a block explorer and look at the most recent transaction or search for your address in its recent transactions."}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["For example, ",(0,s.jsx)(e.a,{href:"https://ghostnet.tzkt.io/oopNizDc1p6uuCLsbEP4LEzUvgiJefPFe6W9QZur9kfZzDui9bb/19762971",children:"this transaction"})," shows the address of the token creator, the ",(0,s.jsx)(e.code,{children:"mint"})," entrypoint, and the name of the new token:"]}),"\n",(0,s.jsx)("img",{src:"/img/tutorials/create-nfts-transaction-completed-transaction.png",alt:"The completed transaction",style:{width:300}}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"viewing-the-nft-in-your-wallet",children:"Viewing the NFT in your wallet"}),"\n",(0,s.jsx)(e.p,{children:"Because the contract follows the FA2 standard, Tezos wallets can show information about it.\nHowever, your wallet is not immediately aware that you have the token.\nYou can add the token to your wallet manually to see it and work with it in your wallet:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:'In your wallet, go to the tab that shows NFTs, which is usually called "Collectibles" or "NFTs."'}),"\n",(0,s.jsx)(e.p,{children:"For example, the Temple wallet shows NFTs on the Collectibles tab:"}),"\n",(0,s.jsx)("img",{src:"/img/tutorials/create-nfts-transaction-temple-no-nfts.png",alt:"The Collectibles tab of the Temple wallet, showing no NFTs",style:{width:300}}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["Add the predefined contract address ",(0,s.jsx)(e.code,{children:"KT1Lr8m7HgfY5UF6nXDDcXDxDgEmKyMeds1b"})," as a source of NFTs."]}),"\n",(0,s.jsxs)(e.p,{children:["For example, in Temple, click ",(0,s.jsx)(e.strong,{children:"Manage assets list > Manage"}),", click ",(0,s.jsx)(e.strong,{children:"Add Collectible"}),", add the contract address in the ",(0,s.jsx)(e.strong,{children:"Address"})," field, and click ",(0,s.jsx)(e.strong,{children:"Add Asset"}),":"]}),"\n",(0,s.jsx)("img",{src:"/img/tutorials/create-nfts-transaction-temple-add-contract.png",alt:"Adding a contract to Temple",style:{width:300}}),"\n",(0,s.jsx)(e.p,{children:"In most cases you can leave the asset ID blank and the wallet will retrieve all of your tokens in the contract."}),"\n",(0,s.jsx)(e.p,{children:"Now the wallet shows the NFT:"}),"\n",(0,s.jsx)("img",{src:"/img/tutorials/create-nfts-transaction-temple-show-nft.png",alt:"An NFT in the Temple wallet",style:{width:300}}),"\n",(0,s.jsx)(e.p,{children:"You can click the token to see information about it and to send it to another account.\nBecause the contract is FA2-compliant, wallets can perform operations on the token without any further information."}),"\n",(0,s.jsx)("img",{src:"/img/tutorials/create-nfts-transaction-temple-show-nft-info.png",alt:"An NFT in the Temple wallet",style:{width:300}}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["Now you can create NFTs with your application and the built-in contract.\nIn the next section you start creating your own contract to create NFTs your own way.\nContinue to ",(0,s.jsx)(e.a,{href:"/tutorials/create-nfts/create-contract",children:"Part 4: Creating the contract"}),"."]})]})}function h(t={}){const{wrapper:e}={...(0,o.R)(),...t.components};return e?(0,s.jsx)(e,{...t,children:(0,s.jsx)(d,{...t})}):d(t)}},28453:(t,e,n)=>{n.d(e,{R:()=>r,x:()=>i});var a=n(96540);const s={},o=a.createContext(s);function r(t){const e=a.useContext(o);return a.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function i(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(s):t.components||s:r(t.components),a.createElement(o.Provider,{value:e},t.children)}}}]);