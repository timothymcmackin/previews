"use strict";(self.webpackChunktezos_developer_docs=self.webpackChunktezos_developer_docs||[]).push([[6926],{19157:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"tutorials/build-an-nft-marketplace/part-2","title":"Part 2: Buying and selling tokens","description":"In this section, you give users the ability to list a bottle for sale and buy bottles that are listed for sale.","source":"@site/docs/tutorials/build-an-nft-marketplace/part-2.md","sourceDirName":"tutorials/build-an-nft-marketplace","slug":"/tutorials/build-an-nft-marketplace/part-2","permalink":"/previews/docs/ledger/tutorials/build-an-nft-marketplace/part-2","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1716350400000,"frontMatter":{"title":"Part 2: Buying and selling tokens","authors":"Benjamin Fuentes (Marigold)","last_update":{"date":"22 May 2024"}},"sidebar":"tutorialsSidebar","previous":{"title":"Part 1: Minting tokens","permalink":"/previews/docs/ledger/tutorials/build-an-nft-marketplace/part-1"},"next":{"title":"Part 3: Managing tokens with quantities","permalink":"/previews/docs/ledger/tutorials/build-an-nft-marketplace/part-3"}}');var r=t(74848),o=t(28453);const s={title:"Part 2: Buying and selling tokens",authors:"Benjamin Fuentes (Marigold)",last_update:{date:"22 May 2024"}},i=void 0,l={},d=[{value:"Updating the smart contract",id:"updating-the-smart-contract",level:2},{value:"Adding a selling page to the web application",id:"adding-a-selling-page-to-the-web-application",level:2},{value:"Add a catalog and sales page",id:"add-a-catalog-and-sales-page",level:2},{value:"Summary",id:"summary",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"In this section, you give users the ability to list a bottle for sale and buy bottles that are listed for sale."}),"\n",(0,r.jsxs)(n.p,{children:["You can continue from your code from part 1 or start from the completed version here: ",(0,r.jsx)(n.a,{href:"https://github.com/marigold-dev/training-nft-1/tree/main/solution",children:"https://github.com/marigold-dev/training-nft-1/tree/main/solution"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"If you start from the completed version, run these commands to install dependencies for the web application:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm i\ncd ./app\nyarn install\ncd ..\n"})}),"\n",(0,r.jsx)(n.h2,{id:"updating-the-smart-contract",children:"Updating the smart contract"}),"\n",(0,r.jsx)(n.p,{children:"To allow users to buy and sell tokens, the contract must have entrypoints that allow users to offer a token for sale and to buy a token that is offered for sale.\nThe contract storage must store the tokens that are offered for sale and their prices."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Update the contract storage to store the tokens that are offered for sale:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.code,{children:"nft.jsligo"})," file, before the definition of the ",(0,r.jsx)(n.code,{children:"storage"})," type, add a type that represents a token that is offered for sale:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsligo",children:"export type offer = {\n  owner : address,\n  price : nat\n};\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Add a map named ",(0,r.jsx)(n.code,{children:"offers"})," that maps token IDs to their offer prices to the ",(0,r.jsx)(n.code,{children:"Extension"})," type.\nNow the ",(0,r.jsx)(n.code,{children:"Extension"})," type looks like this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsligo",children:"export type Extension = {\n  administrators: set<address>,\n  offers: map<nat, offer>, //user sells an offer\n};\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.code,{children:"nft.storageList.jsligo"})," file, add an empty map for the offers by adding this code:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsligo",children:",\n  offers: Map.empty as map<nat, Contract.offer>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now the ",(0,r.jsx)(n.code,{children:"nft.storageList.jsligo"})," file looks like this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsligo",children:'#import "nft.jsligo" "Contract"\n\n#import "@ligo/fa/lib/fa2/nft/extendable_nft.impl.jsligo" "FA2Impl"\n\nconst default_storage: Contract.storage = {\n    extension: {\n        administrators: Set.literal(\n            list(["tz1VSUr8wwNhLAzempoch5d6hLRiTh8Cjcjb" as address])\n        ) as set<address>,\n        offers: Map.empty as map<nat, Contract.offer>\n    },\n    ledger: Big_map.empty as FA2Impl.ledger,\n    metadata: Big_map.literal(\n        list(\n            [\n                ["", bytes `tezos-storage:data`],\n                [\n                    "data",\n                    bytes\n                    `{\n            "name":"FA2 NFT Marketplace",\n            "description":"Example of FA2 implementation",\n            "version":"0.0.1",\n            "license":{"name":"MIT"},\n            "authors":["Marigold<contact@marigold.dev>"],\n            "homepage":"https://marigold.dev",\n            "source":{\n              "tools":["Ligo"],\n              "location":"https://github.com/ligolang/contract-catalogue/tree/main/lib/fa2"},\n            "interfaces":["TZIP-012"],\n            "errors": [],\n            "views": []\n            }`\n                ]\n            ]\n        )\n    ) as FA2Impl.TZIP16.metadata,\n    token_metadata: Big_map.empty as FA2Impl.TZIP12.tokenMetadata,\n    operators: Big_map.empty as FA2Impl.operators,\n};\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["As you did in the previous step, make sure that the administrators in the ",(0,r.jsx)(n.code,{children:"nft.storageList.jsligo"})," file includes an address that you can use to mint tokens."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.code,{children:"nft.jsligo"})," file, add a ",(0,r.jsx)(n.code,{children:"sell"})," entrypoint that creates an offer for a token that the sender owns:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsligo",children:'   @entry\n const sell = ([token_id, price]: [nat, nat], s: storage): ret => {\n   //check balance of seller\n   const sellerBalance = FA2Impl.get_balance([Tezos.get_source(), token_id], s);\n   if (sellerBalance != (1 as nat)) return failwith("2");\n   //need to allow the contract itself to be an operator on behalf of the seller\n   const newOperators =\n     FA2Impl.add_operator(\n       s.operators,\n       Tezos.get_source(),\n       Tezos.get_self_address(),\n       token_id\n     );\n   //DECISION CHOICE: if offer already exists, we just override it\n   return [\n     list([]) as list<operation>,\n     {\n       ...s,\n       extension: {\n         ...s.extension,\n         offers: Map.add(\n           token_id,\n           { owner: Tezos.get_source(), price: price },\n           s.extension.offers\n         )\n       },\n       operators: newOperators\n     }\n   ]\n };\n'})}),"\n",(0,r.jsx)(n.p,{children:"This function accepts the ID of the token and the selling price as parameters.\nIt verifies that the transaction sender owns the token.\nThen it adds the contract itself as an operator of the token, which allows it to transfer the token without getting permission from the seller later.\nFinally, it adds the offer and updated operators to the storage."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Add a ",(0,r.jsx)(n.code,{children:"buy"})," entrypoint:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsligo",children:'@entry\n const buy = ([token_id, seller]: [nat, address], s: storage): ret => {\n   //search for the offer\n   return match(Map.find_opt(token_id, s.extension.offers)) {\n     when (None()):\n       failwith("3")\n     when (Some(offer)):\n       do {\n         //check if amount have been paid enough\n         if (Tezos.get_amount() < offer.price * (1 as mutez)) return failwith(\n           "5"\n         );\n         // prepare transfer of XTZ to seller\n         const op =\n           Tezos.transaction(\n             unit,\n             offer.price * (1 as mutez),\n             Tezos.get_contract_with_error(seller, "6")\n           );\n         //transfer tokens from seller to buyer\n         const ledger =\n           FA2Impl.transfer_token_from_user_to_user(\n             s.ledger,\n             token_id,\n             seller,\n             Tezos.get_source()\n           );\n         //remove offer\n         return [\n           list([op]) as list<operation>,\n           {\n             ...s,\n             ledger: ledger,\n             extension: {\n               ...s.extension,\n               offers: Map.update(token_id, None(), s.extension.offers),\n             }\n           }\n         ]\n       }\n   }\n };\n'})}),"\n",(0,r.jsx)(n.p,{children:"This entrypoint accepts the token ID and seller as parameters.\nIt retrieves the offer from storage and verifies that the transaction sender sent enough tez to satisfy the offer price.\nThen it transfers the token to the buyer, transfers the sale price to the seller, and removes the offer from storage."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Compile and deploy the new contract:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'TAQ_LIGO_IMAGE=ligolang/ligo:1.6.0 taq compile nft.jsligo\ntaq deploy nft.tz -e "testing"\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"adding-a-selling-page-to-the-web-application",children:"Adding a selling page to the web application"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Stop the web application if it is running."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Generate the TypeScript classes and start the server:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"taq generate types ./app/src\ncd ./app\nyarn dev\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["On the mint page in the ",(0,r.jsx)(n.code,{children:"./src/MintPage.tsx"})," file, fix all ",(0,r.jsx)(n.strong,{children:"extension"})," relative errors by replacing ",(0,r.jsx)(n.code,{children:"storage.extension"})," with ",(0,r.jsx)(n.code,{children:"storage.extension.administrators"})," in each occurrence."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Open the sale page in the ",(0,r.jsx)(n.code,{children:"./src/OffersPage.tsx"})," file and replace it with this code:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { InfoOutlined } from '@mui/icons-material';\nimport SellIcon from '@mui/icons-material/Sell';\n\nimport * as api from '@tzkt/sdk-api';\n\nimport {\n  Box,\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  CardMedia,\n  ImageList,\n  InputAdornment,\n  Pagination,\n  TextField,\n  Tooltip,\n  Typography,\n  useMediaQuery,\n} from '@mui/material';\nimport Paper from '@mui/material/Paper';\nimport BigNumber from 'bignumber.js';\nimport { useFormik } from 'formik';\nimport { useSnackbar } from 'notistack';\nimport React, { Fragment, useEffect, useState } from 'react';\nimport * as yup from 'yup';\nimport { UserContext, UserContextType } from './App';\nimport ConnectButton from './ConnectWallet';\nimport { TransactionInvalidBeaconError } from './TransactionInvalidBeaconError';\nimport { address, nat } from './type-aliases';\n\nconst itemPerPage: number = 6;\n\nconst validationSchema = yup.object({\n  price: yup\n    .number()\n    .required('Price is required')\n    .positive('ERROR: The number must be greater than 0!'),\n});\n\ntype Offer = {\n  owner: address;\n  price: nat;\n};\n\nexport default function OffersPage() {\n  api.defaults.baseUrl = 'https://api.ghostnet.tzkt.io';\n\n  const [selectedTokenId, setSelectedTokenId] = React.useState<number>(0);\n  const [currentPageIndex, setCurrentPageIndex] = useState<number>(1);\n\n  let [offersTokenIDMap, setOffersTokenIDMap] = React.useState<\n    Map<string, Offer>\n  >(new Map());\n  let [ownerTokenIds, setOwnerTokenIds] = React.useState<Set<string>>(\n    new Set()\n  );\n\n  const {\n    nftContrat,\n    nftContratTokenMetadataMap,\n    userAddress,\n    storage,\n    refreshUserContextOnPageReload,\n    Tezos,\n    setUserAddress,\n    setUserBalance,\n    wallet,\n  } = React.useContext(UserContext) as UserContextType;\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const formik = useFormik({\n    initialValues: {\n      price: 0,\n    },\n    validationSchema: validationSchema,\n    onSubmit: (values) => {\n      console.log('onSubmit: (values)', values, selectedTokenId);\n      sell(selectedTokenId, values.price);\n    },\n  });\n\n  const initPage = async () => {\n    if (storage) {\n      console.log('context is not empty, init page now');\n      ownerTokenIds = new Set();\n      offersTokenIDMap = new Map();\n\n      const token_metadataBigMapId = (\n        storage.token_metadata as unknown as { id: BigNumber }\n      ).id.toNumber();\n\n      const token_ids = await api.bigMapsGetKeys(token_metadataBigMapId, {\n        micheline: 'Json',\n        active: true,\n      });\n\n      await Promise.all(\n        token_ids.map(async (token_idKey) => {\n          const token_idNat = new BigNumber(token_idKey.key) as nat;\n\n          let owner = await storage.ledger.get(token_idNat);\n          if (owner === userAddress) {\n            ownerTokenIds.add(token_idKey.key);\n\n            const ownerOffers = await storage.extension.offers.get(\n              token_idNat\n            );\n            if (ownerOffers)\n              offersTokenIDMap.set(token_idKey.key, ownerOffers);\n\n            console.log(\n              'found for ' +\n                owner +\n                ' on token_id ' +\n                token_idKey.key +\n                ' with balance ' +\n                1\n            );\n          } else {\n            console.log('skip to next token id');\n          }\n        })\n      );\n      setOwnerTokenIds(new Set(ownerTokenIds)); //force refresh\n      setOffersTokenIDMap(new Map(offersTokenIDMap)); //force refresh\n    } else {\n      console.log('context is empty, wait for parent and retry ...');\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      console.log('after a storage changed');\n      await initPage();\n    })();\n  }, [storage]);\n\n  useEffect(() => {\n    (async () => {\n      console.log('on Page init');\n      await initPage();\n    })();\n  }, []);\n\n  const sell = async (token_id: number, price: number) => {\n    try {\n      const op = await nftContrat?.methods\n        .sell(\n          BigNumber(token_id) as nat,\n          BigNumber(price * 1000000) as nat //to mutez\n        )\n        .send();\n\n      await op?.confirmation(2);\n\n      enqueueSnackbar(\n        'Wine collection (token_id=' +\n          token_id +\n          ') offer for ' +\n          1 +\n          ' units at price of ' +\n          price +\n          ' XTZ',\n        { variant: 'success' }\n      );\n\n      refreshUserContextOnPageReload(); //force all app to refresh the context\n    } catch (error) {\n      console.table(`Error: ${JSON.stringify(error, null, 2)}`);\n      let tibe: TransactionInvalidBeaconError =\n        new TransactionInvalidBeaconError(error);\n      enqueueSnackbar(tibe.data_message, {\n        variant: 'error',\n        autoHideDuration: 10000,\n      });\n    }\n  };\n\n  const isDesktop = useMediaQuery('(min-width:1100px)');\n  const isTablet = useMediaQuery('(min-width:600px)');\n\n  return (\n    <Paper>\n      <Typography style={{ paddingBottom: '10px' }} variant=\"h5\">\n        Sell my bottles\n      </Typography>\n      {ownerTokenIds && ownerTokenIds.size != 0 ? (\n        <Fragment>\n          <Pagination\n            page={currentPageIndex}\n            onChange={(_, value) => setCurrentPageIndex(value)}\n            count={Math.ceil(\n              Array.from(ownerTokenIds.entries()).length / itemPerPage\n            )}\n            showFirstButton\n            showLastButton\n          />\n\n          <ImageList\n            cols={\n              isDesktop ? itemPerPage / 2 : isTablet ? itemPerPage / 3 : 1\n            }\n          >\n            {Array.from(ownerTokenIds.entries())\n              .filter((_, index) =>\n                index >= currentPageIndex * itemPerPage - itemPerPage &&\n                index < currentPageIndex * itemPerPage\n                  ? true\n                  : false\n              )\n              .map(([token_id]) => (\n                <Card key={token_id + '-' + token_id.toString()}>\n                  <CardHeader\n                    avatar={\n                      <Tooltip\n                        title={\n                          <Box>\n                            <Typography>\n                              {' '}\n                              {'ID : ' + token_id.toString()}{' '}\n                            </Typography>\n                            <Typography>\n                              {'Description : ' +\n                                nftContratTokenMetadataMap.get(token_id)\n                                  ?.description}\n                            </Typography>\n                          </Box>\n                        }\n                      >\n                        <InfoOutlined />\n                      </Tooltip>\n                    }\n                    title={nftContratTokenMetadataMap.get(token_id)?.name}\n                  />\n                  <CardMedia\n                    sx={{ width: 'auto', marginLeft: '33%' }}\n                    component=\"img\"\n                    height=\"100px\"\n                    image={nftContratTokenMetadataMap\n                      .get(token_id)\n                      ?.thumbnailUri?.replace(\n                        'ipfs://',\n                        'https://gateway.pinata.cloud/ipfs/'\n                      )}\n                  />\n\n                  <CardContent>\n                    <Box>\n                      <Typography variant=\"body2\">\n                        {offersTokenIDMap.get(token_id)\n                          ? 'Traded : ' +\n                            1 +\n                            ' (price : ' +\n                            offersTokenIDMap\n                              .get(token_id)\n                              ?.price.dividedBy(1000000) +\n                            ' Tz)'\n                          : ''}\n                      </Typography>\n                    </Box>\n                  </CardContent>\n\n                  <CardActions>\n                    {!userAddress ? (\n                      <Box marginLeft=\"5vw\">\n                        <ConnectButton\n                          Tezos={Tezos}\n                          nftContratTokenMetadataMap={\n                            nftContratTokenMetadataMap\n                          }\n                          setUserAddress={setUserAddress}\n                          setUserBalance={setUserBalance}\n                          wallet={wallet}\n                        />\n                      </Box>\n                    ) : (\n                      <form\n                        style={{ width: '100%' }}\n                        onSubmit={(values) => {\n                          setSelectedTokenId(Number(token_id));\n                          formik.handleSubmit(values);\n                        }}\n                      >\n                        <span>\n                          <TextField\n                            type=\"number\"\n                            name=\"price\"\n                            label=\"price\"\n                            placeholder=\"Enter a price\"\n                            variant=\"filled\"\n                            value={formik.values.price}\n                            onChange={formik.handleChange}\n                            error={\n                              formik.touched.price &&\n                              Boolean(formik.errors.price)\n                            }\n                            helperText={\n                              formik.touched.price && formik.errors.price\n                            }\n                            InputProps={{\n                              endAdornment: (\n                                <InputAdornment position=\"end\">\n                                  <Button\n                                    type=\"submit\"\n                                    aria-label=\"add to favorites\"\n                                  >\n                                    <SellIcon /> Sell\n                                  </Button>\n                                </InputAdornment>\n                              ),\n                            }}\n                          />\n                        </span>\n                      </form>\n                    )}\n                  </CardActions>\n                </Card>\n              ))}{' '}\n          </ImageList>\n        </Fragment>\n      ) : (\n        <Typography sx={{ py: '2em' }} variant=\"h4\">\n          Sorry, you don't own any bottles, buy or mint some first\n        </Typography>\n      )}\n    </Paper>\n  );\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This page shows the bottles that the connected account owns and allows the user to select bottles for sale.\nWhen the user selects bottles and adds a sale price, the page calls the ",(0,r.jsx)(n.code,{children:"sell"})," entrypoint with this code:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"nftContrat?.methods\n  .sell(BigNumber(token_id) as nat, BigNumber(price * 1000000) as nat)\n  .send();\n"})}),"\n",(0,r.jsx)(n.p,{children:"This code multiplies the price by 1,000,000 because the UI shows prices in tez but the contract records prices in mutez.\nThen the contract creates an offer for the selected token."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"As you did in the previous part, connect an administrator's wallet to the application and create at least one NFT.\nThe new contract that you deployed in this section has no NFTs to start with."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Offer a bottle for sale:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Open the application and click ",(0,r.jsx)(n.strong,{children:"Trading > Sell bottles"}),".\nThe sale page opens and shows the bottles that you own, as in this picture:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"The Sell bottle page shows the bottles that you can offer for sale",src:t(52905).A+"",width:"1361",height:"913"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Set the price for a bottle and then click ",(0,r.jsx)(n.strong,{children:"Sell"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Approve the transaction in your wallet and wait for the page to refresh."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:'When the page refreshes, the bottle updates to show "Traded" and the offer price, as in this picture:'}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"The bottle marked available for sale",src:t(42224).A+"",width:"656",height:"614"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"add-a-catalog-and-sales-page",children:"Add a catalog and sales page"}),"\n",(0,r.jsx)(n.p,{children:"In this section, you add a catalog page to show the bottles that are on sale and allow users to buy them."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Open the file ",(0,r.jsx)(n.code,{children:"./src/WineCataloguePage.tsx"})," and replace it with this code:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { InfoOutlined } from '@mui/icons-material';\nimport ShoppingCartIcon from '@mui/icons-material/ShoppingCart';\nimport {\n  Box,\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  CardMedia,\n  ImageList,\n  Pagination,\n  Tooltip,\n  useMediaQuery,\n} from '@mui/material';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\n\nimport BigNumber from 'bignumber.js';\nimport { useFormik } from 'formik';\nimport { useSnackbar } from 'notistack';\nimport React, { Fragment, useState } from 'react';\nimport * as yup from 'yup';\nimport { UserContext, UserContextType } from './App';\nimport ConnectButton from './ConnectWallet';\nimport { TransactionInvalidBeaconError } from './TransactionInvalidBeaconError';\nimport { address, nat } from './type-aliases';\n\nconst itemPerPage: number = 6;\n\ntype OfferEntry = [nat, Offer];\n\ntype Offer = {\n  owner: address;\n  price: nat;\n};\n\nconst validationSchema = yup.object({});\n\nexport default function WineCataloguePage() {\n  const {\n    Tezos,\n    nftContratTokenMetadataMap,\n    setUserAddress,\n    setUserBalance,\n    wallet,\n    userAddress,\n    nftContrat,\n    refreshUserContextOnPageReload,\n    storage,\n  } = React.useContext(UserContext) as UserContextType;\n  const [selectedOfferEntry, setSelectedOfferEntry] =\n    React.useState<OfferEntry | null>(null);\n\n  const formik = useFormik({\n    initialValues: {\n      quantity: 1,\n    },\n    validationSchema: validationSchema,\n    onSubmit: (values) => {\n      console.log('onSubmit: (values)', values, selectedOfferEntry);\n      buy(selectedOfferEntry!);\n    },\n  });\n  const { enqueueSnackbar } = useSnackbar();\n  const [currentPageIndex, setCurrentPageIndex] = useState<number>(1);\n\n  const buy = async (selectedOfferEntry: OfferEntry) => {\n    try {\n      const op = await nftContrat?.methods\n        .buy(\n          BigNumber(selectedOfferEntry[0]) as nat,\n          selectedOfferEntry[1].owner\n        )\n        .send({\n          amount: selectedOfferEntry[1].price.toNumber(),\n          mutez: true,\n        });\n\n      await op?.confirmation(2);\n\n      enqueueSnackbar(\n        'Bought ' +\n          1 +\n          ' unit of Wine collection (token_id:' +\n          selectedOfferEntry[0] +\n          ')',\n        {\n          variant: 'success',\n        }\n      );\n\n      refreshUserContextOnPageReload(); //force all app to refresh the context\n    } catch (error) {\n      console.table(`Error: ${JSON.stringify(error, null, 2)}`);\n      let tibe: TransactionInvalidBeaconError =\n        new TransactionInvalidBeaconError(error);\n      enqueueSnackbar(tibe.data_message, {\n        variant: 'error',\n        autoHideDuration: 10000,\n      });\n    }\n  };\n  const isDesktop = useMediaQuery('(min-width:1100px)');\n  const isTablet = useMediaQuery('(min-width:600px)');\n  return (\n    <Paper>\n      <Typography style={{ paddingBottom: '10px' }} variant=\"h5\">\n        Wine catalogue\n      </Typography>\n\n      {storage?.extension.offers && storage?.extension.offers.size != 0 ? (\n        <Fragment>\n          <Pagination\n            page={currentPageIndex}\n            onChange={(_, value) => setCurrentPageIndex(value)}\n            count={Math.ceil(\n              Array.from(storage?.extension.offers.entries()).length /\n                itemPerPage\n            )}\n            showFirstButton\n            showLastButton\n          />\n          <ImageList\n            cols={\n              isDesktop ? itemPerPage / 2 : isTablet ? itemPerPage / 3 : 1\n            }\n          >\n            {Array.from(storage?.extension.offers.entries())\n\n              .filter((_, index) =>\n                index >= currentPageIndex * itemPerPage - itemPerPage &&\n                index < currentPageIndex * itemPerPage\n                  ? true\n                  : false\n              )\n              .map(([token_id, offer]) => (\n                <Card key={offer.owner + '-' + token_id.toString()}>\n                  <CardHeader\n                    avatar={\n                      <Tooltip\n                        title={\n                          <Box>\n                            <Typography>\n                              {' '}\n                              {'ID : ' + token_id.toString()}{' '}\n                            </Typography>\n                            <Typography>\n                              {'Description : ' +\n                                nftContratTokenMetadataMap.get(\n                                  token_id.toString()\n                                )?.description}\n                            </Typography>\n                            <Typography>\n                              {'Seller : ' + offer.owner}{' '}\n                            </Typography>\n                          </Box>\n                        }\n                      >\n                        <InfoOutlined />\n                      </Tooltip>\n                    }\n                    title={\n                      nftContratTokenMetadataMap.get(token_id.toString())\n                        ?.name\n                    }\n                  />\n                  <CardMedia\n                    sx={{ width: 'auto', marginLeft: '33%' }}\n                    component=\"img\"\n                    height=\"100px\"\n                    image={nftContratTokenMetadataMap\n                      .get(token_id.toString())\n                      ?.thumbnailUri?.replace(\n                        'ipfs://',\n                        'https://gateway.pinata.cloud/ipfs/'\n                      )}\n                  />\n\n                  <CardContent>\n                    <Box>\n                      <Typography variant=\"body2\">\n                        {' '}\n                        {'Price : ' +\n                          offer.price.dividedBy(1000000) +\n                          ' XTZ'}\n                      </Typography>\n                    </Box>\n                  </CardContent>\n\n                  <CardActions>\n                    {!userAddress ? (\n                      <Box marginLeft=\"5vw\">\n                        <ConnectButton\n                          Tezos={Tezos}\n                          nftContratTokenMetadataMap={\n                            nftContratTokenMetadataMap\n                          }\n                          setUserAddress={setUserAddress}\n                          setUserBalance={setUserBalance}\n                          wallet={wallet}\n                        />\n                      </Box>\n                    ) : (\n                      <form\n                        style={{ width: '100%' }}\n                        onSubmit={(values) => {\n                          setSelectedOfferEntry([token_id, offer]);\n                          formik.handleSubmit(values);\n                        }}\n                      >\n                        <Button type=\"submit\" aria-label=\"add to favorites\">\n                          <ShoppingCartIcon /> BUY\n                        </Button>\n                      </form>\n                    )}\n                  </CardActions>\n                </Card>\n              ))}\n          </ImageList>\n        </Fragment>\n      ) : (\n        <Typography sx={{ py: '2em' }} variant=\"h4\">\n          Sorry, there is not NFT to buy yet, you need to mint or sell\n          bottles first\n        </Typography>\n      )}\n    </Paper>\n  );\n}\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Disconnect your administrator account from the application and connect with a different account that has enough tez to buy a bottle."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["In the web application, click ",(0,r.jsx)(n.strong,{children:"Trading > Wine catalogue"}),".\nThe page looks like this:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"The catalog page shows one bottle for sale",src:t(76649).A+"",width:"1359",height:"907"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Buy a bottle by clicking ",(0,r.jsx)(n.strong,{children:"Buy"})," and confirming the transaction in your wallet."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["When the transaction completes, click ",(0,r.jsx)(n.strong,{children:"Trading > Sell bottles"})," and see that you own the bottle and that you can offer it for sale."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsx)(n.p,{children:"Now you and other users can buy and sell NFTs from the marketplace dApp."}),"\n",(0,r.jsx)(n.p,{children:"In the next part, you create a different type of token, called a single-asset token.\nInstead of creating multiple token types with a quantity of exactly 1 as with the NFTs in this part, you create a single token type with any quantity you want."}),"\n",(0,r.jsxs)(n.p,{children:["For the complete content of the contract and web app at the end of this part, see the completed part 2 app at ",(0,r.jsx)(n.a,{href:"https://github.com/marigold-dev/training-nft-2",children:"https://github.com/marigold-dev/training-nft-2"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["To continue, go to ",(0,r.jsx)(n.a,{href:"/tutorials/build-an-nft-marketplace/part-3",children:"Part 3: Managing tokens with quantities"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},42224:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/nft-markeplace-2-traded-bottle-e844d5485de47836da922cec61231a5c.png"},76649:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/nft-marketplace-2-buy-f1114d180b1f2ced98b64dee40650a73.png"},52905:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/nft-marketplace-2-sell-4a99bd0637ab53deec2c84553e407e0c.png"},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var a=t(96540);const r={},o=a.createContext(r);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);