"use strict";(self.webpackChunktezos_developer_docs=self.webpackChunktezos_developer_docs||[]).push([[3384],{20967:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"tutorials/build-files-archive-with-dal/get-dal-params","title":"Part 2: Getting the DAL parameters","description":"The Data Availability Layer stores information about the available data in layer 1 blocks.","source":"@site/docs/tutorials/build-files-archive-with-dal/get-dal-params.md","sourceDirName":"tutorials/build-files-archive-with-dal","slug":"/tutorials/build-files-archive-with-dal/get-dal-params","permalink":"/previews/docs/ledger/tutorials/build-files-archive-with-dal/get-dal-params","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1707886800000,"frontMatter":{"title":"Part 2: Getting the DAL parameters","authors":"Tezos Core Developers","last_update":{"date":"14 February 2024"}},"sidebar":"tutorialsSidebar","previous":{"title":"Part 1: Setting up an environment","permalink":"/previews/docs/ledger/tutorials/build-files-archive-with-dal/set-up-environment"},"next":{"title":"Part 3: Getting slot information","permalink":"/previews/docs/ledger/tutorials/build-files-archive-with-dal/get-slot-info"}}');var s=n(74848),r=n(28453);const i={title:"Part 2: Getting the DAL parameters",authors:"Tezos Core Developers",last_update:{date:"14 February 2024"}},l=void 0,o={},h=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Fetching the DAL parameters in a kernel",id:"fetching-the-dal-parameters-in-a-kernel",level:2},{value:"Deploying the Smart Rollup and starting a node",id:"deploying-the-smart-rollup-and-starting-a-node",level:2},{value:"Setting up a deployment script",id:"setting-up-a-deployment-script",level:2}];function c(e){const t={a:"a",code:"code",em:"em",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["The Data Availability Layer stores information about the available data in layer 1 blocks.\nEach block has several byte-vectors called ",(0,s.jsx)(t.em,{children:"slots"}),", each with a maximum size.\nDAL users can add information about the available data as a ",(0,s.jsx)(t.em,{children:"commitment"})," in a slot.\nThese commitments refer to the data that is stored on the DAL, which stores the data in ",(0,s.jsx)(t.em,{children:"pages"})," as shown in this diagram:"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Two example blocks with different DAL slots in use in each",src:n(16557).A+"",width:"1820",height:"820"})}),"\n",(0,s.jsxs)(t.p,{children:["The data is broken into pages to ensure that each piece of data can fit in a single Tezos operation.\nThis data must fit in a single operation to allow the Smart Rollup refutation game to work, in which every execution step of the Smart Rollup must be provable to layer 1.\nFor more information about Smart Rollups, see ",(0,s.jsx)(t.a,{href:"/architecture/smart-rollups",children:"Smart Rollups"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"When clients add data, they must specify which slot to add it to.\nNote that because the DAL is permissionless, clients may try to add data to the same slot in the same block.\nIn this case, the first operation in the block takes precedence, which leaves the baker that creates the block in control of which data makes it into the block.\nOther operations that try to add data to the same slot fail."}),"\n",(0,s.jsx)(t.p,{children:"The number and size of these slots can change.\nDifferent networks can have different DAL parameters.\nFuture changes to the protocol may allow the DAL to resize dynamically based on usage."}),"\n",(0,s.jsx)(t.p,{children:"Therefore, clients must get information about the DAL before sending data to it.\nIn these steps, you set up a simple Smart Rollup to get the current DAL parameters and print them to the log."}),"\n",(0,s.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(t.p,{children:["Before you begin, make sure that you have installed the prerequisites and set up an environment and an account as described in ",(0,s.jsx)(t.a,{href:"/tutorials/build-files-archive-with-dal/set-up-environment",children:"Part 1: Setting up an environment"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"fetching-the-dal-parameters-in-a-kernel",children:"Fetching the DAL parameters in a kernel"}),"\n",(0,s.jsxs)(t.p,{children:["To get the DAL parameters, you can use built-in functions in the Tezos ",(0,s.jsx)(t.a,{href:"https://crates.io/crates/tezos-smart-rollup",children:"Rust SDK"}),"."]}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["In a folder for your project, create a file named ",(0,s.jsx)(t.code,{children:"Cargo.toml"})," with this code:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-toml",children:'[package]\nname = "files_archive"\nversion = "0.1.0"\nedition = "2021"\n\n[lib]\ncrate-type = ["cdylib", "lib"]\n\n[dependencies]\ntezos-smart-rollup = { version = "0.2.2", features = [ "proto-alpha" ] }\n'})}),"\n",(0,s.jsxs)(t.p,{children:["As a reminder, the kernel of a Smart Rollup is a WASM program.\nThe ",(0,s.jsx)(t.code,{children:"proto-alpha"})," feature is necessary to get access to the functions specific to the DAL because they are not yet released in the main version of the Smart Rollup toolkit."]}),"\n",(0,s.jsxs)(t.p,{children:["If you need a text editor inside the Docker container, you can run ",(0,s.jsx)(t.code,{children:"sudo apk add nano"})," to install the ",(0,s.jsx)(t.a,{href:"https://www.nano-editor.org/",children:"Nano text editor"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Create a file named ",(0,s.jsx)(t.code,{children:"src/lib.rs"})," to be the kernel."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["In the ",(0,s.jsx)(t.code,{children:"src/lib.rs"})," file, add this code:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-rust",children:'use tezos_smart_rollup::{kernel_entry, prelude::*};\n\npub fn entry<R: Runtime>(host: &mut R) {\n    let param = host.reveal_dal_parameters();\n    debug_msg!(host, "{:?}\\n", param);\n}\n\nkernel_entry!(entry);\n'})}),"\n",(0,s.jsx)(t.p,{children:"This function gets the DAL parameters of the currently connected network and prints them to the log."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["From the folder that contains the ",(0,s.jsx)(t.code,{children:"Cargo.toml"})," file, run these commands to build the kernel:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"cargo build --release --target wasm32-unknown-unknown\ncp target/wasm32-unknown-unknown/release/files_archive.wasm .\n"})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Run these commands to get the installer kernel, which is a version of the kernel that contains only enough information to download and install the full kernel:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'cargo install tezos-smart-rollup-installer\nexport PATH="${HOME}/.local/bin:${PATH}"\nsmart-rollup-installer get-reveal-installer \\\n    -P _rollup_node/wasm_2_0_0 \\\n    -u files_archive.wasm \\\n    -o installer.hex\n'})}),"\n",(0,s.jsxs)(t.p,{children:["For more information about optimizing the kernel and using installer kernels, see the tutorial ",(0,s.jsx)(t.a,{href:"/tutorials/smart-rollup",children:"Deploy a Smart Rollup"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Now the Smart Rollup is ready to deploy."}),"\n",(0,s.jsx)(t.h2,{id:"deploying-the-smart-rollup-and-starting-a-node",children:"Deploying the Smart Rollup and starting a node"}),"\n",(0,s.jsx)(t.p,{children:"Follow these steps to deploy the Smart Rollup to Weeklynet and start a node:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Run this command to deploy the Smart Rollup, replacing ",(0,s.jsx)(t.code,{children:"$MY_ACCOUNT"})," with your account alias and ",(0,s.jsx)(t.code,{children:"$ENDPOINT"})," with the RPC endpoint:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'octez-client --endpoint ${ENDPOINT} \\\n    originate smart rollup files_archive from ${MY_ACCOUNT} \\\n    of kind wasm_2_0_0 of type unit with kernel "$(cat installer.hex)" \\\n    --burn-cap 2.0 --force\n'})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Start the node with this command:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"octez-smart-rollup-node --endpoint ${ENDPOINT} \\\n    run observer for files_archive with operators \\\n    --data-dir ./_rollup_node --log-kernel-debug\n"})}),"\n",(0,s.jsx)(t.p,{children:"For simplicity, this command runs the Smart Rollup in observer mode, which does not require a stake of 10,000 tez to publish commitments."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Open a new terminal window in the same environment.\nIf you are using a Docker container, you can enter the container with the ",(0,s.jsx)(t.code,{children:"docker exec"})," command, as in ",(0,s.jsx)(t.code,{children:"docker exec -it my-image /bin/sh"}),".\nTo get the name of the Docker container, you run the ",(0,s.jsx)(t.code,{children:"docker ps"})," command."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Run this command to watch the node's log:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"tail -F _rollup_node/kernel.log\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"The log prints the current DAL parameters, as in this example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"RollupDalParameters { number_of_slots: 32, attestation_lag: 4, slot_size: 65536, page_size: 4096 }\nRollupDalParameters { number_of_slots: 32, attestation_lag: 4, slot_size: 65536, page_size: 4096 }\nRollupDalParameters { number_of_slots: 32, attestation_lag: 4, slot_size: 65536, page_size: 4096 }\nRollupDalParameters { number_of_slots: 32, attestation_lag: 4, slot_size: 65536, page_size: 4096 }\nRollupDalParameters { number_of_slots: 32, attestation_lag: 4, slot_size: 65536, page_size: 4096 }\n"})}),"\n",(0,s.jsx)(t.p,{children:"These parameters are:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"number_of_slots"}),": The number of slots in each block"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"slot_size"}),": The size of each slot in bytes"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"page_size"}),": The size of each page in bytes"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"attestation_lag"}),": The number of subsequent blocks in which bakers can attest that the data is available; if enough attestations are available by the time this number of blocks have been created, the data becomes available to Smart Rollups"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"setting-up-a-deployment-script",children:"Setting up a deployment script"}),"\n",(0,s.jsx)(t.p,{children:"In later parts of this tutorial, you will update and redeploy the Smart Rollup multiple times.\nTo simplify the process, you can use this script:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'#!/usr/bin/bash\n\nalias="${1}"\n\nset -e\n\ncargo build --release --target wasm32-unknown-unknown\n\nrm -rf _rollup_node\n\ncp target/wasm32-unknown-unknown/release/files_archive.wasm .\n\nsmart-rollup-installer get-reveal-installer -P _rollup_node/wasm_2_0_0 \\\n  -u files_archive.wasm -o installer.hex\n\noctez-client --endpoint ${ENDPOINT} \\\n  originate smart rollup files_archive from "${alias}" of kind wasm_2_0_0 \\\n  of type unit with kernel "$(cat installer.hex)" --burn-cap 2.0 --force\n\noctez-smart-rollup-node --endpoint ${ENDPOINT} \\\n  run observer for files_archive with operators --data-dir _rollup_node \\\n  --dal-node http://localhost:10732 --log-kernel-debug\n'})}),"\n",(0,s.jsxs)(t.p,{children:["To use it, save it in a file with an ",(0,s.jsx)(t.code,{children:"sh"})," extension, such as ",(0,s.jsx)(t.code,{children:"deploy_smart_rollup.sh"})," and give it executable permission.\nThen you can run it any tme you update the ",(0,s.jsx)(t.code,{children:"lib.rs"})," or ",(0,s.jsx)(t.code,{children:"Cargo.toml"})," files to deploy a new Smart Rollup by passing your account alias, as in this example:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"./deploy_smart_rollup.sh $MY_ACCOUNT\n"})}),"\n",(0,s.jsxs)(t.p,{children:["If you run this script and see an error that says that the file was not found, update the first line of the script (the shebang) to the path to your shell interpreter.\nFor example, if you are using the Tezos Docker image, the path is ",(0,s.jsx)(t.code,{children:"/bin/sh"}),", so the first line becomes ",(0,s.jsx)(t.code,{children:"#!/bin/sh"}),".\nThen try the command ",(0,s.jsx)(t.code,{children:"./deploy_smart_rollup.sh $MY_ACCOUNT"})," again."]}),"\n",(0,s.jsxs)(t.p,{children:["In the next section, you will get information about the state of slots in the DAL.\nSee ",(0,s.jsx)(t.a,{href:"/tutorials/build-files-archive-with-dal/get-slot-info",children:"Part 3: Getting slot information"}),"."]})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},16557:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/dal-slots-in-blocks-2e9eb68ec209cd840e938d4aa57eb8c1.png"},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var a=n(96540);const s={},r=a.createContext(s);function i(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);