"use strict";(self.webpackChunktezos_developer_docs=self.webpackChunktezos_developer_docs||[]).push([[7935],{27182:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"smart-contracts/languages/smartpy","title":"SmartPy","description":"SmartPy is a comprehensive solution for developing, testing, and deploying smart contracts on Tezos. With its easy-to-use Python syntax, developers can create contracts in a familiar and intuitive way, while SmartPy\'s type inference provides added safety.","source":"@site/docs/smart-contracts/languages/smartpy.md","sourceDirName":"smart-contracts/languages","slug":"/smart-contracts/languages/smartpy","permalink":"/previews/docs/biel-chatbot/smart-contracts/languages/smartpy","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1712203200000,"frontMatter":{"title":"SmartPy","authors":"Mathias Hiron and Maxime Sallerin","last_update":{"date":"4 April 2024"},"dependencies":{"smartpy":"0.20.0"}},"sidebar":"documentationSidebar","previous":{"title":"LIGO","permalink":"/previews/docs/biel-chatbot/smart-contracts/languages/ligo"},"next":{"title":"Archetype","permalink":"/previews/docs/biel-chatbot/smart-contracts/languages/archetype"}}');var r=n(74848),s=n(28453);const i={title:"SmartPy",authors:"Mathias Hiron and Maxime Sallerin",last_update:{date:"4 April 2024"},dependencies:{smartpy:"0.20.0"}},o=void 0,c={},l=[{value:"Test scenarios",id:"test-scenarios",level:2},{value:"FA2 library",id:"fa2-library",level:2},{value:"Online IDE",id:"online-ide",level:2},{value:"Explorer",id:"explorer",level:2},{value:"Example",id:"example",level:2},{value:"Further reading",id:"further-reading",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"SmartPy is a comprehensive solution for developing, testing, and deploying smart contracts on Tezos. With its easy-to-use Python syntax, developers can create contracts in a familiar and intuitive way, while SmartPy's type inference provides added safety."}),"\n",(0,r.jsxs)(t.p,{children:["To get started with SmartPy, see the tutorial ",(0,r.jsx)(t.a,{href:"/tutorials/smart-contract/smartpy",children:"Deploy a smart contract with SmartPy"}),", the ",(0,r.jsx)(t.a,{href:"https://smartpy.io/tutorial",children:"tutorial"})," on smartpy.io, or ",(0,r.jsx)(t.a,{href:"https://opentezos.com/smartpy/write-contract-smartpy/",children:"Smart contract development with SmartPy"})," on opentezos.com."]}),"\n",(0,r.jsx)(t.h2,{id:"test-scenarios",children:"Test scenarios"}),"\n",(0,r.jsx)(t.p,{children:"SmartPy allows you test contracts in simulated scenarios, including complex cases with multiple interacting contracts. Then SmartPy compiles the contracts to Michelson for deployment. SmartPy can also automatically upload metadata and other files to IPFS directly from the test scenario."}),"\n",(0,r.jsx)(t.h2,{id:"fa2-library",children:"FA2 library"}),"\n",(0,r.jsxs)(t.p,{children:["SmartPy provides a library of classes that you can extend to create FA2 token contracts. The library provides basic functionality for NFTs, fungible tokens, and single-asset token contracts and mixins that change how the tokens work. For more information, see ",(0,r.jsx)(t.a,{href:"https://smartpy.io/manual/libraries/FA2-lib/overview",children:"FA2lib"})," in the SmartPy documentation."]}),"\n",(0,r.jsx)(t.h2,{id:"online-ide",children:"Online IDE"}),"\n",(0,r.jsxs)(t.p,{children:["The SmartPy ",(0,r.jsx)(t.a,{href:"https://smartpy.dev/ide",children:"online IDE"})," offers a user-friendly interface for trying out the language directly in a web browser. It comes with an origination feature for deployment of contracts to the blockchain at the click of a button. For those who prefer to write smart contracts and tests in their favourite editor, you can also install SmartPy locally."]}),"\n",(0,r.jsx)(t.h2,{id:"explorer",children:"Explorer"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.a,{href:"https://smartpy.io/explorer",children:"SmartPy explorer"})," allows you to explore and interact with with already deployed contracts. It presents contract data as SmartPy values, such as records and variants, to make interacting with contracts easier."]}),"\n",(0,r.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Here is a simple SmartPy contract and test scenario:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'import smartpy as sp\n\n@sp.module\ndef main():\n    class StoreGreeting(sp.Contract):\n        def __init__(self, greeting):  # Note the indentation\n            # Initialize the storage with a string passed at deployment time\n            # Cast the greeting parameter to a string\n            sp.cast(greeting, sp.string)\n            self.data.greeting = greeting\n\n        @sp.entrypoint  # Note the indentation\n        def replace(self, params):\n            self.data.greeting = params.text\n\n        @sp.entrypoint  # Note the indentation\n        def append(self, params):\n            self.data.greeting += params.text\n\n# Automated tests that run on simulation\n@sp.add_test()\ndef test():\n    # Initialize the test scenario\n    scenario = sp.test_scenario("Test scenario", main)\n    scenario.h1("StoreGreeting")\n\n    # Initialize the contract and pass the starting value\n    contract = main.StoreGreeting("Hello")\n    scenario += contract\n\n    # Verify that the value in storage was set correctly\n    scenario.verify(contract.data.greeting == "Hello")\n\n    # Test the entrypoints and check the new storage value\n    contract.replace(text = "Hi")\n    contract.append(text = ", there!")\n    scenario.verify(contract.data.greeting == "Hi, there!")\n'})}),"\n",(0,r.jsx)(t.h2,{id:"further-reading",children:"Further reading"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://smartpy.io/manual/introduction/overview",children:"SmartPy documentation"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://smartpy.dev/ide",children:"Online IDE"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://opentezos.com/smartpy",children:"OpenTezos"})}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var a=n(96540);const r={},s=a.createContext(r);function i(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);