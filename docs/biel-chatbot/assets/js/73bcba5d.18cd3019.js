"use strict";(self.webpackChunktezos_developer_docs=self.webpackChunktezos_developer_docs||[]).push([[8136],{94857:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>i});const a=JSON.parse('{"id":"unity/reference/API","title":"Unity SDK API object","description":"The Unity SDK class TezosSDK.Tezos.API.TezosAPI, which is available at runtime as the TezosManager.Instance.Tezos.API object, provides information about the Tezos blockchain, such as what tokens accounts or contracts control.","source":"@site/docs/unity/reference/API.md","sourceDirName":"unity/reference","slug":"/unity/reference/API","permalink":"/previews/docs/biel-chatbot/unity/reference/API","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1701838800000,"frontMatter":{"title":"Unity SDK API object","sidebar_label":"API object","authors":"Tim McMackin","last_update":{"date":"6 December 2023"}},"sidebar":"documentationSidebar","previous":{"title":"Reference","permalink":"/previews/docs/biel-chatbot/unity/reference"},"next":{"title":"DAppMetadata object","permalink":"/previews/docs/biel-chatbot/unity/reference/DAppMetadata"}}');var o=t(74848),r=t(28453);const s={title:"Unity SDK API object",sidebar_label:"API object",authors:"Tim McMackin",last_update:{date:"6 December 2023"}},c=void 0,l={},i=[{value:"Properties",id:"properties",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>GetTezosBalance()</code>",id:"gettezosbalance",level:3},{value:"<code>ReadView()</code>",id:"readview",level:3},{value:"<code>GetTokensForOwner()</code>",id:"gettokensforowner",level:3},{value:"<code>GetOwnersForToken()</code>",id:"getownersfortoken",level:3},{value:"<code>GetOwnersForContract()</code>",id:"getownersforcontract",level:3},{value:"<code>IsHolderOfContract()</code>",id:"isholderofcontract",level:3},{value:"<code>IsHolderOfToken()</code>",id:"isholderoftoken",level:3},{value:"<code>GetTokenMetadata()</code>",id:"gettokenmetadata",level:3},{value:"<code>GetContractMetadata()</code>",id:"getcontractmetadata",level:3},{value:"<code>GetTokensForContract()</code>",id:"gettokensforcontract",level:3},{value:"<code>GetOperationStatus()</code>",id:"getoperationstatus",level:3},{value:"<code>GetLatestBlockLevel()</code>",id:"getlatestblocklevel",level:3},{value:"<code>GetAccountCounter()</code>",id:"getaccountcounter",level:3},{value:"<code>GetOriginatedContractsForOwner()</code>",id:"getoriginatedcontractsforowner",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["The Unity SDK class ",(0,o.jsx)(n.code,{children:"TezosSDK.Tezos.API.TezosAPI"}),", which is available at runtime as the ",(0,o.jsx)(n.code,{children:"TezosManager.Instance.Tezos.API"})," object, provides information about the Tezos blockchain, such as what tokens accounts or contracts control."]}),"\n",(0,o.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,o.jsx)(n.p,{children:"None."}),"\n",(0,o.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,o.jsx)(n.h3,{id:"gettezosbalance",children:(0,o.jsx)(n.code,{children:"GetTezosBalance()"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"IEnumerator GetTezosBalance(Action<ulong> callback, string address);\n"})}),"\n",(0,o.jsx)(n.p,{children:"Returns the balance of the specified account address in mutez."}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'public void RunGetTezosBalance()\n{\n    Debug.Log("Getting balance");\n    var routine = TezosManager.Instance.Tezos.API.GetTezosBalance(\n        callback: HandleTezosBalance,\n        address: myAddress\n    );\n    StartCoroutine(routine);\n}\n\nprivate void HandleTezosBalance(ulong balanceMutez)\n{\n    Debug.Log(balanceMutez/1000000);\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"readview",children:(0,o.jsx)(n.code,{children:"ReadView()"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"IEnumerator ReadView(\n    string contractAddress,\n    string entrypoint,\n    string input,\n    Action<JsonElement> callback);\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Returns the response from a contract ",(0,o.jsx)(n.a,{href:"/smart-contracts/views",children:"view"}),".\nNote that the ",(0,o.jsx)(n.code,{children:"input"})," parameter must be a Michelson-encoded object, as in the following example, which passes an integer and string parameter to the view:"]}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'public void RunReadView()\n{\n    var input = new MichelinePrim\n        {\n            Prim = PrimType.Pair,\n            Args = new List<IMicheline>\n                {\n                    new MichelineInt(2),\n                    new MichelineString("hello")\n                }\n        }.ToJson();\n\n    var routine = TezosManager.Instance.Tezos.API.ReadView(\n        contractAddress: TezosManager.Instance.Tezos.TokenContract.Address,\n        entrypoint: viewName,\n        input: input,\n        callback: HandleRunReadView\n    );\n    StartCoroutine(routine);\n}\n\npublic void HandleRunReadView(JsonElement viewResponse)\n{\n    Debug.Log(viewResponse);\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"gettokensforowner",children:(0,o.jsx)(n.code,{children:"GetTokensForOwner()"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"IEnumerator GetTokensForOwner(\n    Action<IEnumerable<TokenBalance>> callback,\n    string owner,\n    bool withMetadata,\n    long maxItems,\n    TokensForOwnerOrder orderBy);\n"})}),"\n",(0,o.jsx)(n.p,{children:"Gets the tokens that an account owns."}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'public void RunGetTokensForOwner()\n{\n    var routine = TezosManager.Instance.Tezos.API.GetTokensForOwner(\n        callback: HandleTokenBalances,\n        owner: myAddress,\n        withMetadata: true,\n        maxItems: 10,\n        orderBy: new TokensForOwnerOrder.ByLastTimeAsc(0)\n    );\n    StartCoroutine(routine);\n}\n\nprivate void HandleTokenBalances(IEnumerable<TokenBalance> tokenBalances)\n{\n    List<TokenBalance> tokens = new List<TokenBalance>(tokenBalances);\n    foreach (var tb in tokens)\n    {\n        Debug.Log($"{tb.Balance} tokens on contract {tb.TokenContract.Address}");\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"getownersfortoken",children:(0,o.jsx)(n.code,{children:"GetOwnersForToken()"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"IEnumerator GetOwnersForToken(\n    Action<IEnumerable<TokenBalance>> callback,\n    string contractAddress,\n    uint tokenId,\n    long maxItems,\n    OwnersForTokenOrder orderBy);\n"})}),"\n",(0,o.jsx)(n.p,{children:"Gets the accounts that own the specified token."}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'public void RunGetOwnersForToken()\n{\n    var routine = TezosManager.Instance.Tezos.API.GetOwnersForToken(\n        callback: HandleTokenOwners,\n        contractAddress: TezosManager.Instance.Tezos.TokenContract.Address,\n        tokenId: 0,\n        maxItems: 10,\n        orderBy: new OwnersForTokenOrder.ByLastTimeAsc(0)\n    );\n    StartCoroutine(routine);\n}\n\nprivate void HandleTokenOwners(IEnumerable<TokenBalance> tokenBalances)\n{\n    List<TokenBalance> tokens = new List<TokenBalance>(tokenBalances);\n    foreach (var tb in tokens)\n    {\n        Debug.Log($"{tb.Balance} tokens on contract {tb.TokenContract.Address}");\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"getownersforcontract",children:(0,o.jsx)(n.code,{children:"GetOwnersForContract()"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"IEnumerator GetOwnersForContract(\n    Action<IEnumerable<TokenBalance>> callback,\n    string contractAddress,\n    long maxItems,\n    OwnersForContractOrder orderBy);\n"})}),"\n",(0,o.jsx)(n.p,{children:"Gets the accounts that own tokens on the specified contract."}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'public void RunGetOwnersForContract()\n{\n    var routine = TezosManager.Instance.Tezos.API.GetOwnersForContract(\n        callback: HandleOwnersForContract,\n        contractAddress: TezosManager.Instance.Tezos.TokenContract.Address,\n        maxItems: 10,\n        orderBy: new OwnersForContractOrder.ByLastTimeAsc(0)\n    );\n    StartCoroutine(routine);\n}\n\nprivate void HandleOwnersForContract(IEnumerable<TokenBalance> tokenBalances)\n{\n    List<TokenBalance> tokens = new List<TokenBalance>(tokenBalances);\n    foreach (var tb in tokens)\n    {\n        Debug.Log($"{tb.Owner} owns {tb.Balance} tokens on contract {tb.TokenContract.Address}");\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"isholderofcontract",children:(0,o.jsx)(n.code,{children:"IsHolderOfContract()"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"IEnumerator IsHolderOfContract(\n    Action<bool> callback,\n    string wallet,\n    string contractAddress);\n"})}),"\n",(0,o.jsx)(n.p,{children:"Returns true if the specified account owns any token in the specified contract."}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"public void GetIsHolderOfContract()\n{\n    var routine = TezosManager.Instance.Tezos.API.IsHolderOfContract(\n        callback: HandleIsHolderOfContract,\n        wallet: myAddress,\n        contractAddress: TezosManager.Instance.Tezos.TokenContract.Address\n    );\n    StartCoroutine(routine);\n}\n\nprivate void HandleIsHolderOfContract(bool response)\n{\n    Debug.Log(response);\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"isholderoftoken",children:(0,o.jsx)(n.code,{children:"IsHolderOfToken()"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"IEnumerator IsHolderOfToken(\n    Action<bool> callback,\n    string wallet,\n    string contractAddress,\n    uint tokenId);\n"})}),"\n",(0,o.jsx)(n.p,{children:"Returns true if the specified account owns the specified token in the specified contract."}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"public void GetIsHolderOfToken()\n{\n    var routine = TezosManager.Instance.Tezos.API.IsHolderOfToken(\n        callback: HandleIsHolderOfToken,\n        wallet: myAddress,\n        contractAddress: TezosManager.Instance.Tezos.TokenContract.Address,\n        tokenId: 0\n    );\n    StartCoroutine(routine);\n}\n\nprivate void HandleIsHolderOfToken(bool response)\n{\n    Debug.Log(response);\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"gettokenmetadata",children:(0,o.jsx)(n.code,{children:"GetTokenMetadata()"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"IEnumerator GetTokenMetadata(\n    Action<TokenMetadata> callback,\n    string contractAddress,\n    uint tokenId);\n"})}),"\n",(0,o.jsx)(n.p,{children:"Gets the metadata for the specified token."}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'public void RunGetTokenMetadata()\n{\n    var routine = TezosManager.Instance.Tezos.API.GetTokenMetadata(\n        callback: HandleGetTokenMetadata,\n        contractAddress: TezosManager.Instance.Tezos.TokenContract.Address,\n        tokenId: 0\n    );\n    StartCoroutine(routine);\n}\n\nprivate void HandleGetTokenMetadata(JsonElement tokenMetadata)\n{\n    Debug.Log(tokenMetadata.GetProperty("name"));\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"getcontractmetadata",children:(0,o.jsx)(n.code,{children:"GetContractMetadata()"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"public IEnumerator GetContractMetadata(\n    Action<JsonElement> callback,\n    string contractAddress);\n"})}),"\n",(0,o.jsx)(n.p,{children:"Gets the metadata for the specified contract.\nMost contracts, including the built-in FA2 contract, do not have metadata."}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"public void RunGetContractMetadata()\n{\n    var routine = TezosManager.Instance.Tezos.API.GetContractMetadata(\n        callback: HandleGetContractMetadata,\n        contractAddress: TezosManager.Instance.Tezos.TokenContract.Address\n    );\n    StartCoroutine(routine);\n}\n\nprivate void HandleGetContractMetadata(JsonElement contractMetadata)\n{\n    Debug.Log(contractMetadata);\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"gettokensforcontract",children:(0,o.jsx)(n.code,{children:"GetTokensForContract()"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"IEnumerator GetTokensForContract(\n    Action<IEnumerable<Token>> callback,\n    string contractAddress,\n    bool withMetadata,\n    long maxItems,\n    TokensForContractOrder orderBy);\n"})}),"\n",(0,o.jsx)(n.p,{children:"Gets the tokens in a contract."}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"public void RunGetTokensForContract()\n{\n    timesCalled = 0;\n    var routine = TezosManager.Instance.Tezos.API.GetTokensForContract(\n        callback: HandleGetTokensForContract,\n        contractAddress: TezosManager.Instance.Tezos.TokenContract.Address,\n        withMetadata: true,\n        maxItems: 10,\n        orderBy: new TokensForContractOrder.ByLastTimeAsc(0)\n    );\n    StartCoroutine(routine);\n}\n\nprivate void HandleGetTokensForContract(IEnumerable<Token> tokenList)\n{\n    List<Token> tokens = new List<Token>(tokenList);\n    foreach (var tk in tokens)\n    {\n        Debug.Log(tk.TokenId);\n    }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The callback returns a list of tokens, but not all of the fields in the ",(0,o.jsx)(n.code,{children:"Token"})," objects are populated by default.\nYou can populate the fields you want to retrieve by editing the ",(0,o.jsx)(n.code,{children:"GetTokensForContract"})," method of the ",(0,o.jsx)(n.code,{children:"TezosSDK.Tezos.API.TezosAPI"})," class."]}),"\n",(0,o.jsxs)(n.p,{children:["The methods in this class retrieves information about Tezos via the ",(0,o.jsx)(n.a,{href:"https://tzkt.io/",children:"TZKT"})," block explorer.\nTo change the information that the ",(0,o.jsx)(n.code,{children:"GetTokensForContract"})," method retrieves, update the URL to add fields."]}),"\n",(0,o.jsx)(n.p,{children:"The default URL looks like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'var url =\n    $"tokens?contract={contractAddress}&select=contract,tokenId as token_id" +\n    $"{(withMetadata ? ",metadata as token_metadata" : "")},holdersCount as holders_count,id," +\n    $"lastTime as last_time&{sort}&limit={maxItems}";\n'})}),"\n",(0,o.jsxs)(n.p,{children:["To get the total supply of each token type, add the ",(0,o.jsx)(n.code,{children:"totalSupply"})," field to the URL, like this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'var url =\n    $"tokens?contract={contractAddress}&select=contract,tokenId as token_id" +\n    $"{(withMetadata ? ",metadata as token_metadata" : "")},holdersCount as holders_count,id," +\n    $"totalSupply as total_supply," +\n    $"lastTime as last_time&{sort}&limit={maxItems}";\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Now when you run the ",(0,o.jsx)(n.code,{children:"GetTokensForContract"})," method, the data passed to the callback includes the total supply of each token:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'private void HandleGetTokensForContract(IEnumerable<Token> tokenList)\n{\n    List<Token> tokens = new List<Token>(tokenList);\n    foreach (var tk in tokens)\n    {\n        Debug.Log($"Token ID {tk.TokenId} has total supply {tk.TotalSupply} among {tk.HoldersCount} holders");\n    }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["For information about what fields you can add to this URL, see the ",(0,o.jsx)(n.a,{href:"https://api.tzkt.io/",children:"TZKT API reference"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"getoperationstatus",children:(0,o.jsx)(n.code,{children:"GetOperationStatus()"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"IEnumerator GetOperationStatus(\n    Action<bool?> callback,\n    string operationHash);\n"})}),"\n",(0,o.jsx)(n.p,{children:"Returns true if the specified operation was successful, false if it failed, or null (or HTTP 204) if it doesn't exist."}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'public void HandleTransfer()\n{\n    TezosManager\n        .Instance\n        .Tezos\n        .TokenContract\n        .Transfer(\n            completedCallback: TransferCompleted,\n            destination: address.text,\n            tokenId: int.Parse(id.text),\n            amount: int.Parse(amount.text));\n}\n\nprivate void TransferCompleted(string txHash)\n{\n    Debug.Log($"Transfer complete with transaction hash {txHash}");\n    var routine = TezosManager.Instance.Tezos.API.GetOperationStatus(\n        callback: HandleGetOperationStatus,\n        operationHash: txHash\n    );\n    StartCoroutine(routine);\n}\n\nprivate void HandleGetOperationStatus(bool? result)\n{\n    Debug.Log(result);\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"getlatestblocklevel",children:(0,o.jsx)(n.code,{children:"GetLatestBlockLevel()"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"IEnumerator GetLatestBlockLevel(\n    Action<int> callback);\n"})}),"\n",(0,o.jsx)(n.p,{children:"Returns the block level, or the number of blocks since the genesis block."}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"public void RunGetLatestBlockLevel()\n{\n    var routine = TezosManager.Instance.Tezos.API.GetLatestBlockLevel(\n        callback: HandleGetLatestBlockLevel\n    );\n    StartCoroutine(routine);\n}\n\nprivate void HandleGetLatestBlockLevel(int blockLevel)\n{\n    Debug.Log(blockLevel);\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"getaccountcounter",children:(0,o.jsx)(n.code,{children:"GetAccountCounter()"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"IEnumerator GetAccountCounter(\n    Action<int> callback,\n    string address);\n"})}),"\n",(0,o.jsx)(n.p,{children:"Returns the counter for implicit accounts, which is a unique number that you can use to ensure that transactions are not duplicated."}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"public void RunGetAccountCounter()\n{\n    var routine = TezosManager.Instance.Tezos.API.GetAccountCounter(\n        callback: HandleGetAccountCounter,\n        address: myAddress\n    );\n    StartCoroutine(routine);\n}\n\nprivate void HandleGetAccountCounter(int counter)\n{\n    Debug.Log(counter);\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"getoriginatedcontractsforowner",children:(0,o.jsx)(n.code,{children:"GetOriginatedContractsForOwner()"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"IEnumerator GetOriginatedContractsForOwner(\n    Action<IEnumerable<TokenContract>> callback,\n    string creator,\n    string codeHash,\n    long maxItems,\n    OriginatedContractsForOwnerOrder orderBy);\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Gets the contracts that the specified account deployed (originated).\nOptionally, you can pass the hash of a contract to return only contracts that match that hash.\nFor example, the hash of the contract in the ",(0,o.jsx)(n.a,{href:"/unity/reference/TokenContract",children:(0,o.jsx)(n.code,{children:"TokenContract"})})," object is in the ",(0,o.jsx)(n.code,{children:"Resources/Contracts/FA2TokenContractCodeHash.txt"})," file."]}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'public void RunGetOriginatedContractsForOwner()\n{\n    var routine = TezosManager.Instance.Tezos.API.GetOriginatedContractsForOwner(\n        callback: HandleGetOriginatedContractsForOwner,\n        creator: myAddress,\n        codeHash: "",\n        maxItems: 10,\n        orderBy: new OriginatedContractsForOwnerOrder.ByLastActivityTimeAsc(0)\n\n    );\n    StartCoroutine(routine);\n}\n\nprivate void HandleGetOriginatedContractsForOwner(IEnumerable<TokenContract> contractList)\n{\n    List<TokenContract> contracts = new List<TokenContract>(contractList);\n    foreach (var contract in contracts)\n    {\n        Debug.Log(contract.Address);\n    }\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var a=t(96540);const o={},r=a.createContext(o);function s(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);