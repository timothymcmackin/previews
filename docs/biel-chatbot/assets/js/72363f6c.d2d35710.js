"use strict";(self.webpackChunktezos_developer_docs=self.webpackChunktezos_developer_docs||[]).push([[3705],{66755:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"unity/quickstart","title":"Quickstart","description":"Follow these steps to install the Tezos Unity SDK in an existing Unity project and start using it.","source":"@site/docs/unity/quickstart.md","sourceDirName":"unity","slug":"/unity/quickstart","permalink":"/previews/docs/biel-chatbot/unity/quickstart","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1704949200000,"frontMatter":{"title":"Quickstart","authors":"Tim McMackin","last_update":{"date":"11 January 2024"}},"sidebar":"documentationSidebar","previous":{"title":"Tezos Unity SDK","permalink":"/previews/docs/biel-chatbot/unity"},"next":{"title":"Tutorial scenes","permalink":"/previews/docs/biel-chatbot/unity/scenes"}}');var a=t(74848),o=t(28453);const i={title:"Quickstart",authors:"Tim McMackin",last_update:{date:"11 January 2024"}},r=void 0,c={},l=[{value:"Installing the SDK",id:"installing-the-sdk",level:2},{value:"Enabling WebGL support",id:"enabling-webgl-support",level:2},{value:"Connecting to wallets",id:"connecting-to-wallets",level:2},{value:"Deploying contracts",id:"deploying-contracts",level:2},{value:"Creating tokens",id:"creating-tokens",level:2},{value:"Transferring tokens",id:"transferring-tokens",level:2},{value:"Getting token balances",id:"getting-token-balances",level:2},{value:"Uploading files to IPFS",id:"uploading-files-to-ipfs",level:2},{value:"Signing messages",id:"signing-messages",level:2},{value:"Changing the RPC node",id:"changing-the-rpc-node",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Follow these steps to install the Tezos Unity SDK in an existing Unity project and start using it."}),"\n",(0,a.jsx)(n.p,{children:"These instructions cover:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Installing the SDK into an existing Unity project"}),"\n",(0,a.jsx)(n.li,{children:"Testing that the SDK works in your project"}),"\n",(0,a.jsx)(n.li,{children:"Connecting to a user's Tezos wallet"}),"\n",(0,a.jsx)(n.li,{children:"Creating and managing tokens"}),"\n",(0,a.jsx)(n.li,{children:"Prompting the user to sign messages"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"installing-the-sdk",children:"Installing the SDK"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["In your Unity project, in the Package Manager panel, click the ",(0,a.jsx)(n.code,{children:"+"})," symbol and then click ",(0,a.jsx)(n.strong,{children:"Add package from git URL"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Enter the URL ",(0,a.jsx)(n.code,{children:"https://github.com/trilitech/tezos-unity-sdk.git"})," and click ",(0,a.jsx)(n.strong,{children:"Add"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"The Package Manager panel downloads and installs the SDK.\nYou can see its assets in the Project panel under Packages > Tezos Unity SDK."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Ensure that you have a Tezos-compatible wallet configured for the Ghostnet testnet on your mobile device.\nFor instructions, see ",(0,a.jsx)(n.a,{href:"/developing/wallet-setup",children:"Installing and funding a wallet"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["If you want to publish the project to WebGL, follow the steps in ",(0,a.jsx)(n.a,{href:"#enabling-webgl-support",children:"Enabling WebGL support"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["To import the tutorial scenes, see ",(0,a.jsx)(n.a,{href:"/unity/scenes",children:"Scenes"}),"."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"enabling-webgl-support",children:"Enabling WebGL support"}),"\n",(0,a.jsx)(n.p,{children:"The Unity SDK provides a WebGL template that you can use to publish Unity projects to run in a web browser.\nFollow these steps to set up the Tezos SDK to work with WebGL:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["In the Unity Editor, go to the Project panel and expand the ",(0,a.jsx)(n.strong,{children:"Packages > Tezos Unity SDK > WebGLFrontend"})," folder."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["From the ",(0,a.jsx)(n.code,{children:"WebGLFrontend/output"})," folder, copy the ",(0,a.jsx)(n.code,{children:"StreamingAssets"})," and ",(0,a.jsx)(n.code,{children:"WebGLTemplates"})," folders into the ",(0,a.jsx)(n.code,{children:"Assets"})," folder of your project."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Select the AirGap template to use in the WebGL build:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Click ",(0,a.jsx)(n.strong,{children:"Edit > Project Settings"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Go to the ",(0,a.jsx)(n.strong,{children:"Player"})," tab."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["On the Player tab, go to the ",(0,a.jsx)(n.strong,{children:"WebGL settings"})," tab."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Under ",(0,a.jsx)(n.strong,{children:"Resolution and Presentation"}),", select the AirGap WebGL template, as shown in this picture:"]}),"\n",(0,a.jsx)("img",{src:"/img/unity/unity-webgl-template.png",alt:"The project settings, with the Airgap WebGL template selected",style:{width:500}}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["To enable copy and paste in the WebGL build, double-click ",(0,a.jsx)(n.code,{children:"_WebGLCopyAndPaste.unitypackage"}),", which is in the ",(0,a.jsx)(n.code,{children:"WebGLFrontend/output"})," folder of the SDK, to install it."]}),"\n",(0,a.jsx)(n.p,{children:"This package automatically enables copy and paste on selectable text fields, such as the account address field in the WalletConnection tutorial scene."}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"connecting-to-wallets",children:"Connecting to wallets"}),"\n",(0,a.jsx)(n.p,{children:"Connecting to a user's wallet is a prerequisite to working with Tezos in any application.\nAccessing the wallet allows your project to see the tokens in it and to prompt the user to submit transactions, but it does not give your project direct control over the wallet.\nUsers must still confirm all transactions in their wallet application."}),"\n",(0,a.jsx)(n.p,{children:"Using a wallet application in this way saves you from having to implement payment processing and security in your application.\nGame developers can also use the wallet and its account as a unique account identifier and as the user's inventory."}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Copy the ",(0,a.jsx)(n.code,{children:"TezosAuthenticator"})," and ",(0,a.jsx)(n.code,{children:"TezosManager"})," prefabs to your scene.\nThese prefabs provide prerequisites to use Tezos in a scene and help connect to accounts.\nFor more information about them, see ",(0,a.jsx)(n.a,{href:"/unity/prefabs",children:"Prefabs"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"TezosAuthenticator"})," prefab automatically adds features that connect to users' wallets.\nIf you copy these prefabs into your scene and run it, it shows a QR code or connection buttons that Tezos wallet applications can scan to connect with the application.\nWhether it shows the QR code or buttons depends on whether the project is running in standalone, mobile, or WebGL mode."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Add features to your project to use the connected account.\nFor example, the ",(0,a.jsx)(n.code,{children:"Tutorials/Common/Scripts/WalletInfoUI.cs"})," file responds to the ",(0,a.jsx)(n.code,{children:"WalletConnected"})," event, which runs when the user approves the connection in their wallet application.\nYou can use this event to get the address of the connected account, as in this code:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"private void Start()\n{\n    addressText.text = NOT_CONNECTED_TEXT;\n\n    // Subscribe to events;\n    TezosManager.Instance.EventManager.WalletConnected += OnWalletConnected;\n    TezosManager.Instance.EventManager.WalletDisconnected += OnWalletDisconnected;\n}\n\nprivate void OnWalletConnected(WalletInfo walletInfo)\n{\n    // We can get the address from the wallet\n    addressText.text = TezosManager.Instance.Wallet.GetWalletAddress();\n    // Or from the event data\n    addressText.text = walletInfo.Address;\n}\n\nprivate void OnWalletDisconnected(WalletInfo walletInfo)\n{\n    addressText.text = NOT_CONNECTED_TEXT;\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"You can use this address as a user's account ID because Tezos account addresses are unique."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["To respond to other events, add listeners for the events that the SDK provides.\nYou can see these events and their return values in the ",(0,a.jsx)(n.a,{href:"/unity/reference/EventManager",children:"EventManager object"}),"."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["For an example, see the ",(0,a.jsx)(n.a,{href:"/unity/scenes#wallet-connection-scene",children:"WalletConnection tutorial scene"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"deploying-contracts",children:"Deploying contracts"}),"\n",(0,a.jsx)(n.p,{children:"Contracts are backend programs that run on the Tezos blockchains.\nSmart contracts can do many tasks, but for gaming they have two main purposes:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"They handle tokens, which are digital assets stored on the blockchain"}),"\n",(0,a.jsx)(n.li,{children:"They provide backend logic that users can trust because it cannot change"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The ContractAndMinting tutorial scene shows how to deploy a contract from a Unity project."}),"\n",(0,a.jsx)(n.p,{children:"The SDK provides a built-in contract that you can use instead of writing your own.\nThis contract manages different kinds of tokens."}),"\n",(0,a.jsxs)(n.p,{children:["To deploy the built-in contract, call the ",(0,a.jsx)(n.a,{href:"/unity/reference/TokenContract#deploy",children:(0,a.jsx)(n.code,{children:"TokenContract.Deploy()"})})," method and pass a callback function:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public void DeployContract()\n{\n    TezosManager\n        .Instance\n        .Tezos\n        .TokenContract\n        .Deploy(OnContractDeployed);\n}\n\nprivate void OnContractDeployed(string contractAddress)\n{\n    Debug.Log(contractAddress);\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The project sends the deployment transaction to the connected wallet, which must approve the transaction and pay the related fees.\nThe SDK stores the address of the contract as ",(0,a.jsx)(n.a,{href:"/unity/reference/TokenContract",children:(0,a.jsx)(n.code,{children:"TokenContract.address"})}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["For an example, see the ",(0,a.jsx)(n.a,{href:"/unity/scenes#contractandminting-scene",children:"ContractAndMinting tutorial scene"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"creating-tokens",children:"Creating tokens"}),"\n",(0,a.jsxs)(n.p,{children:["To create a token type, call the contract's ",(0,a.jsx)(n.code,{children:"mint"})," entrypoint and pass these parameters:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"A callback function to run when the token is created"}),"\n",(0,a.jsx)(n.li,{children:"The metadata for the token, which includes a name and description, URIs to preview media or thumbnails, and how many decimal places the token can be broken into"}),"\n",(0,a.jsx)(n.li,{children:"The destination account that owns the new tokens, which can be a user account, this smart contract, or any other smart contract"}),"\n",(0,a.jsx)(n.li,{children:"The number of tokens to create"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"For example, this code creates a token type with a quantity of 100:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'// Get the address of the connected wallet\nvar initialOwner = TezosManager\n    .Instance\n    .Wallet\n    .GetWalletAddress();\n\n// To preview the IPFS-hosted image:\n// https://ipfs.io/ipfs/QmX4t8ikQgjvLdqTtL51v6iVun9tNE7y7Txiw4piGQVNgK\nconst string imageAddress = "ipfs://QmX4t8ikQgjvLdqTtL51v6iVun9tNE7y7Txiw4piGQVNgK";\n\n// Prepare metadata\nvar tokenMetadata = new TokenMetadata\n{\n    Name = "My token",\n    Description = "Description for my token",\n    Symbol = "MYTOKEN",\n    Decimals = "0",\n    DisplayUri = imageAddress,\n    ArtifactUri = imageAddress,\n    ThumbnailUri = imageAddress\n};\n\n// Call the "mint" entrypoint of the contract\nTezosManager\n    .Instance\n    .Tezos\n    .TokenContract\n    .Mint(\n        completedCallback: OnTokenMinted,\n        tokenMetadata: tokenMetadata,\n        destination: initialOwner,\n        amount: 100);\n\n// This callback is triggered after the contract call successfully completes and the resulting transaction is recorded on the blockchain.\nprivate void OnTokenMinted(TokenBalance tokenBalance)\n{\n    Debug.Log($"Successfully minted token with Token ID {tokenBalance.TokenId}");\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["For an example, see the ",(0,a.jsx)(n.a,{href:"/unity/scenes#contractandminting-scene",children:"ContractAndMinting tutorial scene"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"transferring-tokens",children:"Transferring tokens"}),"\n",(0,a.jsxs)(n.p,{children:["To transfer tokens, call the contract's ",(0,a.jsx)(n.code,{children:"Transfer"})," entrypoint and pass these parameters:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"A callback function to run when the transfer is complete"}),"\n",(0,a.jsx)(n.li,{children:"The account to transfer the tokens to"}),"\n",(0,a.jsx)(n.li,{children:"The ID of the token"}),"\n",(0,a.jsx)(n.li,{children:"The amount of tokens to transfer"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["This example transfers 12 tokens with the ID 5 to the account in the variable ",(0,a.jsx)(n.code,{children:"destinationAccountAddress"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'public void HandleTransfer()\n{\n    TezosManager\n        .Instance\n        .Tezos\n        .TokenContract\n        .Transfer(\n            completedCallback: TransferCompleted,\n            destination: destinationAccountAddress,\n            tokenId: 5,\n            amount: 12);\n}\n\nprivate void TransferCompleted(string txHash)\n{\n    Logger.LogDebug($"Transfer complete with transaction hash {txHash}");\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["For a complete example, see the ",(0,a.jsx)(n.a,{href:"/unity/scenes#transfer-scene",children:"Transfer tutorial scene"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"getting-token-balances",children:"Getting token balances"}),"\n",(0,a.jsxs)(n.p,{children:["To get the tokens that the connected account owns, call the ",(0,a.jsx)(n.a,{href:"/unity/reference/API#gettokensforowner",children:(0,a.jsx)(n.code,{children:"API.GetTokensForOwner()"})})," method in a coroutine.\nThis example prints information about the tokens that the account owns to the log:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'private void Start()\n{\n    // Subscribe to account connection event\n    TezosManager.Instance.EventManager.WalletConnected += OnWalletConnected;\n}\n\nprivate void OnWalletConnected(WalletInfo walletInfo)\n{\n    // Address of the connected wallet\n    var address = walletInfo.Address;\n\n    // Prepare the coroutine to fetch the tokens\n    var routine = TezosManager.Instance.Tezos.API.GetTokensForOwner(\n        OnTokensFetched, // Callback to be called when the tokens are fetched\n        address, true, 10_000, new TokensForOwnerOrder.ByLastTimeAsc(0));\n\n    StartCoroutine(routine);\n}\n\nprivate void OnTokensFetched(IEnumerable<TokenBalance> tokenBalances)\n{\n    var walletAddress = TezosManager.Instance.Wallet.GetWalletAddress();\n    var contractAddress = TezosManager.Instance.Tezos.TokenContract.Address;\n\n    var tokens = new List<TokenBalance>(tokenBalances);\n\n    // Filter the tokens by the current contract address\n    var filteredTokens = tokens.Where(tb => tb.TokenContract.Address == contractAddress).ToList();\n\n    if (filteredTokens.Count > 0)\n    {\n        foreach (var tb in filteredTokens)\n        {\n            Debug.Log($"{walletAddress} has {tb.Balance} tokens on contract {tb.TokenContract.Address}");\n            Debug.Log(tb.TokenMetadata);\n        }\n    }\n    else\n    {\n        Debug.Log($"{walletAddress} has no tokens in the active contract");\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"uploading-files-to-ipfs",children:"Uploading files to IPFS"}),"\n",(0,a.jsx)(n.p,{children:"The InterPlanetary File System (IPFS) is a protocol and peer-to-peer network for storing and sharing data in a distributed file system.\nBlockchain developers use it to store data such as token images and metadata."}),"\n",(0,a.jsxs)(n.p,{children:["The SDK provides tools to upload to IPFS by using the ",(0,a.jsx)(n.a,{href:"https://pinata.cloud/",children:"Pinata"})," API, but you can set up IPFS upload in other ways."]}),"\n",(0,a.jsxs)(n.p,{children:["To use the SDK, create instances of the Tezos Configuration and Data Provider Configuration objects and put your Pinata JWT (not the API key or secret) in the ",(0,a.jsx)(n.code,{children:"TezosConfigSO"})," object's Pinata Api Key field."]}),"\n",(0,a.jsxs)(n.p,{children:["To use the SDK, see the code in the ",(0,a.jsx)(n.code,{children:"UploadImageButton.cs"})," file, which handles uploading files in the IPFSUpload scene.\nIt has a UI upload button that triggers this method, which uses the built-in Pinata uploader to upload the file and get the URL for it:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'public void HandleUploadClick()\n{\n    if (string.IsNullOrEmpty(TezosManager.Instance.Config.PinataApiKey))\n    {\n        Logger.LogError("Can not proceed without Pinata API key.");\n        return;\n    }\n\n    var uploader = UploaderFactory.GetPinataUploader(TezosManager.Instance.Config.PinataApiKey);\n\n    var uploadCoroutine = uploader.UploadFile(ipfsUrl =>\n    {\n        Logger.LogDebug($"File uploaded, url is {ipfsUrl}");\n    });\n\n    StartCoroutine(uploadCoroutine);\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["For a complete example, see the ",(0,a.jsx)(n.a,{href:"/unity/scenes#ipfsupload-scene",children:"IPFSUpload tutorial scene"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"signing-messages",children:"Signing messages"}),"\n",(0,a.jsx)(n.p,{children:"You can also use the connection to the user's wallet to prompt them to sign messages.\nSigning a message proves that it came from a specific user's wallet because the wallet encrypts the message with the user's account's key."}),"\n",(0,a.jsx)(n.p,{children:'For example, this code prompts the user to sign the message "This message came from my account."\nThen, the callback verifies that the signature is valid and that it came from the user\'s account:'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'string payload = "This message came from my account.";\n\nprivate void Start()\n{\n    // Subscribe to the wallet event\n    TezosManager.Instance.EventManager.PayloadSigned += OnPayloadSigned;\n\n    TezosManager.Instance.Wallet.RequestSignPayload(SignPayloadType.micheline, payload);\n}\n\nprivate void OnPayloadSigned(SignResult obj)\n{\n    // Result is true if the message is signed correctly\n    // And that it came from the currently-connected wallet\n    var result = TezosManager.Instance.Wallet.VerifySignedPayload(SignPayloadType.micheline, payload);\n\n    Debug.Log($"Payload verification response: {result}");\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"changing-the-rpc-node",children:"Changing the RPC node"}),"\n",(0,a.jsxs)(n.p,{children:["As described in ",(0,a.jsx)(n.a,{href:"/architecture/nodes#the-rpc-interface",children:"The RPC interface"}),", Tezos clients including the Unity SDK send transactions to RPC nodes.\nBy default, the SDK sends requests to a public RPC node that uses the Ghostnet test network, where you can test transactions without spending real tez.\nFor more information about test networks, see ",(0,a.jsx)(n.a,{href:"/developing/testnets",children:"Testing on testnets"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["If you need to change the RPC node that the SDK uses, such as if the default node is overloaded or if you are ready to send transactions to Mainnet, you can set the RPC node by creating an instance of the ",(0,a.jsx)(n.a,{href:"/unity/reference/TezosConfigSO",children:"TezosConfigSO scriptable object"})," and setting the node in the ",(0,a.jsx)(n.strong,{children:"Rpc Url Format"})," field, as in this picture:"]}),"\n",(0,a.jsx)("img",{src:"/img/unity/unity-ipfs-scene-config.png",alt:"Adding the Pinata API key and the data provider to the TezosConfigSO object",style:{width:300}}),"\n",(0,a.jsx)(n.p,{children:"Then, drag this instance of the TezosConfigSO scriptable object to the Config field of the TezosManager prefab."}),"\n",(0,a.jsxs)(n.p,{children:["For more examples of how to work with the SDK, see ",(0,a.jsx)(n.a,{href:"/unity/scenes",children:"Tutorial scenes"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var s=t(96540);const a={},o=s.createContext(a);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);