"use strict";(self.webpackChunktezos_developer_docs=self.webpackChunktezos_developer_docs||[]).push([[8594],{7763:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"unity/reference/TokenContract","title":"Unity SDK TokenContract object","description":"The Unity SDK class TezosSDK.Tezos.API.Models.TokenContract, which is available at runtime as the TezosManager.Instance.Tezos.TokenContract object, provides a built-in FA2-compatible smart contract and convenience methods to work with it.","source":"@site/docs/unity/reference/TokenContract.md","sourceDirName":"unity/reference","slug":"/unity/reference/TokenContract","permalink":"/previews/docs/biel-chatbot/unity/reference/TokenContract","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1701838800000,"frontMatter":{"title":"Unity SDK TokenContract object","sidebar_label":"TokenContract object","authors":"Tim McMackin","last_update":{"date":"6 December 2023"}},"sidebar":"documentationSidebar","previous":{"title":"TezosConfigSO scriptable object","permalink":"/previews/docs/biel-chatbot/unity/reference/TezosConfigSO"},"next":{"title":"Wallet object","permalink":"/previews/docs/biel-chatbot/unity/reference/Wallet"}}');var r=t(74848),a=t(28453);const s={title:"Unity SDK TokenContract object",sidebar_label:"TokenContract object",authors:"Tim McMackin",last_update:{date:"6 December 2023"}},c=void 0,i={},d=[{value:"Properties",id:"properties",level:2},{value:"Entrypoints",id:"entrypoints",level:2},{value:"Constructors",id:"constructors",level:3},{value:"<code>Deploy()</code>",id:"deploy",level:3},{value:"<code>Mint()</code>",id:"mint",level:3},{value:"<code>Transfer()</code>",id:"transfer",level:3}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["The Unity SDK class ",(0,r.jsx)(n.code,{children:"TezosSDK.Tezos.API.Models.TokenContract"}),", which is available at runtime as the ",(0,r.jsx)(n.code,{children:"TezosManager.Instance.Tezos.TokenContract"})," object, provides a built-in FA2-compatible smart contract and convenience methods to work with it."]}),"\n",(0,r.jsxs)(n.p,{children:["For information about FA2 contracts and tokens, see ",(0,r.jsx)(n.a,{href:"/architecture/tokens/FA2",children:"FA2 tokens"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The Michelson source code of the built-in contract is in the ",(0,r.jsx)(n.code,{children:"Resources/Contracts"})," folder of the SDK."]}),"\n",(0,r.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsxs)(n.p,{children:["These properties are populated after you deploy the contract with the ",(0,r.jsx)(n.code,{children:"Deploy()"})," method:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Address"}),": The address of the deployed contract"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"TokensCount"}),": The total number of token types in the contract"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"LastActivityTime"}),": The timestamp of the last time tokens were minted or transferred"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"entrypoints",children:"Entrypoints"}),"\n",(0,r.jsx)(n.p,{children:"The built-in contract has the entrypoints that the FA2 standard requires and a few other entrypoints for the convenience of developers."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"transfer"}),": Transfers tokens from a source account to one or more destination accounts.\nIts parameters are the address of the source account and a list of destination accounts, each with the token ID and amount to transfer.\nFor a simpler way to transfer tokens, see the ",(0,r.jsx)(n.a,{href:"#transfer",children:(0,r.jsx)(n.code,{children:"Transfer()"})})," method."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"mint"}),": Creates a token type and one or more tokens of that type.\nIts parameters are the address of the owner of the new tokens, the amount of tokens to create, and the metadata for the token type.\nThis entrypoint can be called only by the current administrator account.\nFor a simpler way to create tokens, see the ",(0,r.jsx)(n.a,{href:"#mint",children:(0,r.jsx)(n.code,{children:"Mint()"})})," method."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"balance_of"}),": Sends information about an owner's token balance to another contract.\nIts parameters are a callback contract that accepts a list of token IDs and the amount that the specified account owns.\nFor a simpler way to get information about token ownership, see the ",(0,r.jsx)(n.a,{href:"/unity/reference/API#gettokensforowner",children:(0,r.jsx)(n.code,{children:"API.GetTokensForOwner()"})})," method."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"update_operators"}),": Adds or removes operators for the specified token owners and token IDs.\nIts parameters are a list of commands to add or remove operators for token owners and IDs.\nFor information about operators, see ",(0,r.jsx)(n.a,{href:"/architecture/tokens/FA2#operators",children:"Operators"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"set_administrator"}),": Changes the account that can mint tokens.\nIts parameter is the address of the new administrator account.\nThis entrypoint can be called only by the current administrator account."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"set_metadata"}),": Creates or changes a metadata field in the specified contract's storage.\nIts parameters are a key-value pair for the new or updated metadata value.\nThis metadata is a value in the contract's storage, which is different from the metadata returned by the ",(0,r.jsx)(n.a,{href:"/unity/reference/API#getcontractmetadata",children:(0,r.jsx)(n.code,{children:"API.GetContractMetadata()"})})," method.\nThis entrypoint can be called only by the current administrator account."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"set_pause"}),": Sets the value of the ",(0,r.jsx)(n.code,{children:"paused"})," storage field.\nWhen this field is set to true, tokens can be minted but not transferred between accounts.\nThis entrypoint can be called only by the current administrator account."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["For examples of calling these entrypoints, see ",(0,r.jsx)(n.a,{href:"/unity/managing-contracts#calling-contracts",children:"Calling the built-in contract"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"constructors",children:"Constructors"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"new TokenContract();\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This constructor is for internal use.\nTo deploy the built-in contract, use the ",(0,r.jsx)(n.code,{children:"Deploy()"})," method."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"new TokenContract(string address);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Initializes a ",(0,r.jsx)(n.code,{children:"TokenContract"})," object with a copy of the built-in contract that you have deployed already."]}),"\n",(0,r.jsxs)(n.p,{children:["To deploy the built-in contract, use the ",(0,r.jsx)(n.a,{href:"#deploy",children:(0,r.jsx)(n.code,{children:"Deploy()"})})," method."]}),"\n",(0,r.jsx)(n.h3,{id:"deploy",children:(0,r.jsx)(n.code,{children:"Deploy()"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"void Deploy(Action<string> completedCallback)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Deploys (originates) a contract based on the built-in contract, including prompting the connected wallet to pay the origination fees."}),"\n",(0,r.jsxs)(n.p,{children:["The SDK stores the address of the contract with the Unity ",(0,r.jsx)(n.a,{href:"https://docs.unity3d.com/ScriptReference/PlayerPrefs.html",children:"PlayerPrefs"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"completedCallback"}),": A callback method to run when the contract is deployed, which receives the address of the new contract"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public void HandleDeploy()\n{\n    TezosManager.Instance.Tezos.TokenContract.Deploy(OnContractDeployed);\n}\n\nprivate void OnContractDeployed(string contractAddress)\n{\n    Debug.Log(contractAddress);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"mint",children:(0,r.jsx)(n.code,{children:"Mint()"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"void Mint(\n    Action<TokenBalance> completedCallback,\n    TokenMetadata tokenMetadata,\n    string destination,\n    int amount)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Calls the ",(0,r.jsx)(n.code,{children:"Mint"})," entrypoint of the contract to create a token type and mint tokens."]}),"\n",(0,r.jsx)(n.p,{children:"Parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"completedCallback"}),": A callback method to run when the token is minted, which receives a ",(0,r.jsx)(n.code,{children:"TokenBalance"})," object with information about the new token"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"tokenMetadata"}),": A ",(0,r.jsx)(n.code,{children:"TokenMetadata"})," object with information about the new token"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"destination"}),": The account that owns the new token, which can be a user account or a smart contract account"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"amount"}),": The number of tokens of the new type to create"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'var initialOwner = TezosManager\n    .Instance\n    .Wallet\n    .GetWalletAddress();\n\nconst string imageAddress = "ipfs://QmX4t8ikQgjvLdqTtL51v6iVun9tNE7y7Txiw4piGQVNgK";\n\nvar tokenMetadata = new TokenMetadata\n{\n    Name = "My token",\n    Description = "Description for my token",\n    Symbol = "MYTOKEN",\n    Decimals = "0",\n    DisplayUri = imageAddress,\n    ArtifactUri = imageAddress,\n    ThumbnailUri = imageAddress\n};\n\nTezosManager\n    .Instance\n    .Tezos\n    .TokenContract\n    .Mint(\n        completedCallback: OnTokenMinted,\n        tokenMetadata: tokenMetadata,\n        destination: initialOwner,\n        amount: 100);\n\nprivate void OnTokenMinted(TokenBalance tokenBalance)\n{\n    Debug.Log($"Successfully minted token with Token ID {tokenBalance.TokenId}");\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"transfer",children:(0,r.jsx)(n.code,{children:"Transfer()"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"void Transfer(\n    Action<string> completedCallback,\n    string destination,\n    int tokenId,\n    int amount)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Transfers tokens from the currently connected account to the destination account."}),"\n",(0,r.jsx)(n.p,{children:"Parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"completedCallback"}),": A callback method to run when the token is minted, which receives the hash of the transfer transaction"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"destination"}),": The account to send the token to, which can be a user account or a smart contract account"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"tokenId"}),": The ID of the token to transfer"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"amount"}),": The number of tokens to transfer"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public void HandleTransfer()\n{\n    TezosManager\n        .Instance\n        .Tezos\n        .TokenContract\n        .Transfer(\n            completedCallback: TransferCompleted,\n            destination: address.text,\n            tokenId: int.Parse(id.text),\n            amount: int.Parse(amount.text));\n}\n\nprivate void TransferCompleted(string txHash)\n{\n    Logger.LogDebug($"Transfer complete with transaction hash {txHash}");\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var o=t(96540);const r={},a=o.createContext(r);function s(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);