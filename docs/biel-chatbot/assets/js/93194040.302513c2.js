"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2397],{47409:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"unity/managing-tokens","title":"Managing tokens","description":"Tezos supports a variety of types of tokens, including:","source":"@site/docs/unity/managing-tokens.md","sourceDirName":"unity","slug":"/unity/managing-tokens","permalink":"/previews/docs/biel-chatbot/unity/managing-tokens","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1731992400000,"frontMatter":{"title":"Managing tokens","authors":"Tim McMackin","last_update":{"date":"19 November 2024"}},"sidebar":"documentationSidebar","previous":{"title":"Calling contracts","permalink":"/previews/docs/biel-chatbot/unity/calling-contracts"},"next":{"title":"Upgrading","permalink":"/previews/docs/biel-chatbot/unity/upgrading"}}');var i=t(74848),r=t(28453);const s={title:"Managing tokens",authors:"Tim McMackin",last_update:{date:"19 November 2024"}},o=void 0,c={},l=[{value:"FA2 tokens",id:"fa2-tokens",level:2},{value:"FA2 token contracts",id:"fa2-token-contracts",level:2},{value:"Creating (minting) tokens",id:"creating-minting-tokens",level:2},{value:"Transferring tokens",id:"transferring-tokens",level:2},{value:"Getting token balances",id:"getting-token-balances",level:2},{value:"Destroying (burning) tokens",id:"destroying-burning-tokens",level:2}];function h(n){const e={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:"Tezos supports a variety of types of tokens, including:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Fungible tokens, which are collections of interchangeable tokens with a quantity that you define.\nFungible tokens can be quantifiable commodities like in-game currency, fuel, ammunition, or energy, or they can be identical items with a limited quantity."}),"\n",(0,i.jsx)(e.li,{children:"Non-fungible tokens (NFTs), which are unique assets with only one unit.\nGames use NFTs for items that are unique and must not be duplicated."}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"You can create as many tokens and types of tokens as you need in one contract, but each transaction to create or transfer tokens incurs fees."}),"\n",(0,i.jsxs)(e.p,{children:["For more information about tokens, see ",(0,i.jsx)(e.a,{href:"/architecture/tokens",children:"Tokens"}),"."]}),"\n",(0,i.jsx)(e.h2,{id:"fa2-tokens",children:"FA2 tokens"}),"\n",(0,i.jsxs)(e.p,{children:["While you can create tokens that behave in any way that you want them to behave, it's best to create tokens that follow a standard.\nThe Tezos ",(0,i.jsx)(e.a,{href:"/architecture/tokens#token-standards",children:"FA standards"})," enforce a standard format for tokens which allows applications like games, wallets, and block explorers to work with them in a consistent way.\nFor example, if you create an FA-compatible token and use it in a Unity application, players can look up information about their tokens in block explorers and transfer them with their wallets without interacting with the Unity application."]}),"\n",(0,i.jsx)(e.p,{children:"For this reason, Unity applications should use FA tokens whenever possible."}),"\n",(0,i.jsxs)(e.p,{children:["The most popular and commonly-supported FA standard is ",(0,i.jsx)(e.a,{href:"/architecture/tokens/FA2",children:"FA2"}),", so the examples on this page are for working with FA2 tokens.\nFA2 tokens can be fungible tokens or non-fungible tokens, which makes the standard flexible enough for most use cases."]}),"\n",(0,i.jsx)(e.h2,{id:"fa2-token-contracts",children:"FA2 token contracts"}),"\n",(0,i.jsxs)(e.p,{children:["To create and work with FA2 tokens you must deploy an FA2-compatible smart contract.\nFor examples of FA2 contracts, see ",(0,i.jsx)(e.a,{href:"/smart-contracts/samples",children:"Sample smart contracts"}),".\nYou can also use the tutorial ",(0,i.jsx)(e.a,{href:"/tutorials/smartpy-fa2-fungible",children:"Create a fungible token with the SmartPy FA2 library"})," to walk through the process of creating, customizing, and deploying an FA2 contract."]}),"\n",(0,i.jsx)(e.admonition,{type:"note",children:(0,i.jsx)(e.p,{children:"The rest of this page assumes that you are using FA2 tokens."})}),"\n",(0,i.jsx)(e.admonition,{type:"note",children:(0,i.jsxs)(e.p,{children:["You can use block explorers for help formatting the parameters for contract calls.\nSee ",(0,i.jsx)(e.a,{href:"/unity/calling-contracts#encoding-parameters-as-json-strings",children:"Encoding parameters as JSON strings"}),"."]})}),"\n",(0,i.jsx)(e.h2,{id:"creating-minting-tokens",children:"Creating (minting) tokens"}),"\n",(0,i.jsxs)(e.p,{children:["The FA2 standard does not require contracts to have a ",(0,i.jsx)(e.code,{children:"mint"})," entrypoint that creates tokens, but many do.\nThe ",(0,i.jsx)(e.code,{children:"mint"})," entrypoint may be limited so only certain accounts can call it, or it may have other restrictions.\nIf a contract does not have a ",(0,i.jsx)(e.code,{children:"mint"})," entrypoint, it was created with all of the tokens that it will ever have and therefore no more tokens can be minted."]}),"\n",(0,i.jsxs)(e.p,{children:["A typical FA2 ",(0,i.jsx)(e.code,{children:"mint"})," entrypoint accepts the token ID, the number of tokens to create, and the initial owner of the new tokens.\nFor example, the contract ",(0,i.jsx)(e.code,{children:"KT1Nhr9Bmhy7kcUmezRxbbDybh5buNnrVLTY"})," has a ",(0,i.jsx)(e.code,{children:"mint"})," entrypoint that accepts this parameter in JSON format:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'"schema:list:object": [\n    {\n        "to_:address": "address",\n        "token:or": {\n            "existing:nat": "nat",\n            "new:map_flat:string:bytes": {\n                "string": "bytes"\n            }\n        },\n        "amount:nat": "nat"\n    }\n]\n'})}),"\n",(0,i.jsx)(e.p,{children:"The equivalent Michelson parameter looks like this:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-michelson",children:"(list %mint (pair (address %to_)\n                 (pair (or %token (nat %existing) (map %new string bytes)) (nat %amount))))\n"})}),"\n",(0,i.jsxs)(e.p,{children:["In this case, the ",(0,i.jsx)(e.code,{children:"mint"})," entrypoint can create tokens of an existing type or create a new type of token."]}),"\n",(0,i.jsxs)(e.p,{children:["As described in ",(0,i.jsx)(e.a,{href:"/unity/calling-contracts#encoding-parameters",children:"Encoding parameters"}),", you can encode the parameter for the call as a Micheline object via the Netezos library or as a JSON string."]}),"\n",(0,i.jsx)(e.p,{children:"To encode the parameter as a JSON object, you can fill in the fields on the block explorer and generate a JSON file like this example, which mints 10 tokens of type 0:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-csharp",children:'var mintJsonString = "[{\\"prim\\":\\"Pair\\",\\"args\\":[{\\"string\\":\\"tz1QCVQinE8iVj1H2fckqx6oiM85CNJSK9Sx\\"},{\\"prim\\":\\"Pair\\",\\"args\\":[{\\"prim\\":\\"Left\\",\\"args\\":[{\\"int\\":\\"0\\"}]},{\\"int\\":\\"10\\"}]}]}]";\n\nvar mintTokensRequest = new OperationRequest\n{\n   Destination = "KT1HP6uMwf829cDgwynZJ4rDvjLCZmfYjja1",\n   EntryPoint = "mint",\n   Arg = mintJsonString,\n   Amount = "0",\n};\n\nvar response = await TezosAPI.RequestOperation(mintTokensRequest);\n'})}),"\n",(0,i.jsxs)(e.p,{children:["To encode the parameter with the Netezos library, use primitives organized by pairs.\nIn this example, the parameter uses a Left value in an Or primitive to represent the Micheline field ",(0,i.jsx)(e.code,{children:"nat %existing"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-csharp",children:'// Owner of the new tokens\nvar to_ = new MichelineString("tz1QCVQinE8iVj1H2fckqx6oiM85CNJSK9Sx");\n// Number of tokens to mint\nvar amount = new MichelineInt(10);\nvar token = new MichelinePrim\n{\n    Prim = PrimType.Pair, // Existing token type\n    Args = new List<IMicheline>\n    {\n        new MichelinePrim\n        {\n            Prim = PrimType.Left,\n            Args = new List<IMicheline>\n            {\n                // ID of token type\n                new MichelineInt(0),\n            }\n        },\n        amount\n    }\n};\n\nvar parameter = new MichelineArray\n{\n    new MichelinePrim\n    {\n        Prim = PrimType.Pair,\n        Args = new List<IMicheline>\n                {\n                    to_,\n                    token\n                }\n    }\n}.ToJson();\n\nvar mintTokensRequest = new OperationRequest\n{\n   Destination = "KT1HP6uMwf829cDgwynZJ4rDvjLCZmfYjja1",\n   EntryPoint = "mint",\n   Arg = parameter,\n   Amount = "0",\n};\n\nvar response = await TezosAPI.RequestOperation(mintTokensRequest);\n'})}),"\n",(0,i.jsx)(e.h2,{id:"transferring-tokens",children:"Transferring tokens"}),"\n",(0,i.jsxs)(e.p,{children:["To transfer tokens, pass the source account, target account, token ID, and quantity to the contract's ",(0,i.jsx)(e.code,{children:"transfer"})," entrypoint.\nThe account that sends the transfer call must be the owner or operator of the tokens.\nFor more information about token access control, see ",(0,i.jsx)(e.a,{href:"/architecture/tokens/FA2",children:"FA2 tokens"}),"."]}),"\n",(0,i.jsx)(e.p,{children:"This example transfers 2 tokens with the ID 7:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-csharp",children:'var transferTokensString = "[ { \\"prim\\": \\"Pair\\", \\"args\\": [ { \\"string\\": \\"tz1QCVQinE8iVj1H2fckqx6oiM85CNJSK9Sx\\" }, [ { \\"prim\\": \\"Pair\\", \\"args\\": [ { \\"string\\": \\"tz1hQKqRPHmxET8du3fNACGyCG8kZRsXm2zD\\" }, { \\"prim\\": \\"Pair\\", \\"args\\": [ { \\"int\\": \\"7\\" }, { \\"int\\": \\"2\\" } ] } ] } ] ] } ]";\n\nvar transferTokensRequest = new OperationRequest\n{\n    Destination = "KT1Nhr9Bmhy7kcUmezRxbbDybh5buNnrVLTY",\n    EntryPoint = "transfer",\n    Arg = transferTokensString,\n    Amount = "0",\n};\n\nvar response = await TezosAPI.RequestOperation(transferTokensRequest);\n'})}),"\n",(0,i.jsx)(e.p,{children:"This code runs the same operation, but it uses Netezos types instead of raw JSON:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-csharp",children:'// Source account\nvar from_ = new MichelineString("tz1QCVQinE8iVj1H2fckqx6oiM85CNJSK9Sx");\n// Target account\nvar to_ = new MichelineString("tz1hQKqRPHmxET8du3fNACGyCG8kZRsXm2zD");\n// Token ID\nvar tokenId = new MichelineInt(7);\n// Amount\nvar amount = new MichelineInt(2);\n\nvar parameter = new MichelineArray\n{\n    new MichelinePrim\n    {\n        Prim = PrimType.Pair,\n        Args = new List<IMicheline>\n        {\n            from_,\n            new MichelineArray\n            {\n                new MichelinePrim\n                {\n                    Prim = PrimType.Pair,\n                    Args = new List<IMicheline>\n                    {\n                        to_,\n                        new MichelinePrim\n                        {\n                            Prim = PrimType.Pair,\n                            Args = new List<IMicheline>\n                            {\n                                tokenId,\n                                amount\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}.ToJson();\n\nvar transferTokensRequest = new OperationRequest\n{\n    Destination = "KT1Nhr9Bmhy7kcUmezRxbbDybh5buNnrVLTY",\n    EntryPoint = "transfer",\n    Arg = parameter,\n    Amount = "0",\n};\n\nvar response = await TezosAPI.RequestOperation(transferTokensRequest);\n'})}),"\n",(0,i.jsx)(e.h2,{id:"getting-token-balances",children:"Getting token balances"}),"\n",(0,i.jsxs)(e.p,{children:["You can get information about the tokens in a contract by passing the address of the contract and the maximum number of tokens to return to the ",(0,i.jsx)(e.code,{children:"TezosAPI.GetTokens()"})," method.\nThe response is a list of ",(0,i.jsx)(e.code,{children:"TokenData"})," objects with information about the tokens:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-csharp",children:'var tokenList = await TezosAPI.GetTokens<List<TokenData>>("KT1Nhr9Bmhy7kcUmezRxbbDybh5buNnrVLTY", 20);\nforeach (TokenData token in tokenList)\n{\n    Debug.Log($"Token ID {token.TokenId} has {token.HoldersCount} owners.");\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"destroying-burning-tokens",children:"Destroying (burning) tokens"}),"\n",(0,i.jsxs)(e.p,{children:["The FA2 standard does not have a standard way of burning tokens.\nSome FA2 implementations have a ",(0,i.jsx)(e.code,{children:"burn"})," entrypoint.\nIn other cases, if you want to make tokens unusable, send them to an address that doesn't exist or to an account that you can't use.\nFor example, you can create an account in a wallet app, send the tokens to it, and delete the private key for the account."]})]})}function d(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(h,{...n})}):h(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>o});var a=t(96540);const i={},r=a.createContext(i);function s(n){const e=a.useContext(r);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),a.createElement(r.Provider,{value:e},n.children)}}}]);