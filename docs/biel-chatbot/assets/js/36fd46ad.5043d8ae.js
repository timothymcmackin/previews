"use strict";(self.webpackChunktezos_developer_docs=self.webpackChunktezos_developer_docs||[]).push([[7527],{54647:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"smart-contracts/views","title":"Views","description":"Views are a way for contracts to expose information to other contracts and to off-chain consumers.","source":"@site/docs/smart-contracts/views.md","sourceDirName":"smart-contracts","slug":"/smart-contracts/views","permalink":"/previews/docs/biel-chatbot/smart-contracts/views","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1712030400000,"frontMatter":{"title":"Views","authors":"Mathias Hiron (Nomadic Labs), Sasha Aldrick (TriliTech), Tim McMackin (TriliTech)","last_update":{"date":"2 April 2024"}},"sidebar":"documentationSidebar","previous":{"title":"Private transactions (Sapling)","permalink":"/previews/docs/biel-chatbot/smart-contracts/sapling"},"next":{"title":"Events","permalink":"/previews/docs/biel-chatbot/smart-contracts/events"}}');var s=t(74848),i=t(28453);const r={title:"Views",authors:"Mathias Hiron (Nomadic Labs), Sasha Aldrick (TriliTech), Tim McMackin (TriliTech)",last_update:{date:"2 April 2024"}},c=void 0,o={},l=[{value:"Types of views",id:"types-of-views",level:2},{value:"Examples",id:"examples",level:2},{value:"Creating views in JsLIGO",id:"creating-views-in-jsligo",level:2},{value:"Calling views in JsLIGO",id:"calling-views-in-jsligo",level:2},{value:"Creating views in SmartPy",id:"creating-views-in-smartpy",level:2},{value:"Calling views in SmartPy",id:"calling-views-in-smartpy",level:2},{value:"Calling views with Taquito",id:"calling-views-with-taquito",level:2},{value:"Calling views with the Octez client",id:"calling-views-with-the-octez-client",level:2},{value:"Implementation details",id:"implementation-details",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Views are a way for contracts to expose information to other contracts and to off-chain consumers."}),"\n",(0,s.jsx)(n.p,{children:"Views help you get around a limitation in smart contracts: a smart contract can't access another contract's storage.\nSmart contracts can provide information via callbacks, but using a callback means calling entrypoints, which is an asynchronous action."}),"\n",(0,s.jsx)(n.p,{children:"By contrast, views are synchronous; a contract can call a view and use the information that it returns immediately."}),"\n",(0,s.jsx)(n.p,{children:"Like entrypoints, views can accept parameters, access the contract's storage, and call other views.\nUnlike entrypoints, views return a value directly to the caller.\nHowever, views can't cause side effects, so they can't create operations, including calling smart contracts and transferring tez.\nViews also can't change the contract storage."}),"\n",(0,s.jsxs)(n.p,{children:["Off-chain users can run a view without creating a transaction, which is a convenient way to get information from a smart contract.\nFor example, you can use the Octez client ",(0,s.jsx)(n.code,{children:"run view"})," command to run a view from the command line."]}),"\n",(0,s.jsx)(n.h2,{id:"types-of-views",children:"Types of views"}),"\n",(0,s.jsxs)(n.p,{children:["Contracts can store the source code of their views either ",(0,s.jsx)(n.em,{children:"on-chain"})," or ",(0,s.jsx)(n.em,{children:"off-chain"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The code of on-chain views is stored in the smart contract code itself, like entrypoints."}),"\n",(0,s.jsx)(n.li,{children:"The code of off-chain views is stored externally, usually in decentralized data storage such as IPFS.\nThe contract metadata has information about its off-chain views that consumers such as indexers and other dApps use to know what off-chain views are available and to run them."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"On-chain and off-chain views have the same capabilities and limitations."}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.p,{children:"Views can provide information about tokens.\nYou can use views to provide an account's balance of a token type or the total amount of a token in circulation."}),"\n",(0,s.jsx)(n.p,{children:"DEXs can provide the exchange rate between two tokens or the amount of liquidity in the pool."}),"\n",(0,s.jsx)(n.p,{children:"Instead of repeating certain logic in multiple places, you can put the logic in a view and use it from different smart contracts."}),"\n",(0,s.jsx)(n.h2,{id:"creating-views-in-jsligo",children:"Creating views in JsLIGO"}),"\n",(0,s.jsxs)(n.p,{children:["Views in LIGO look like entrypoints because they receive the input values and storage as parameters, but they have the ",(0,s.jsx)(n.code,{children:"@view"})," annotation instead of the ",(0,s.jsx)(n.code,{children:"@entry"})," annotation.\nThey return a value instead of a list of operations and the new value of the storage."]}),"\n",(0,s.jsx)(n.p,{children:"This JsLIGO view returns the larger of two numbers:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type get_larger_input = [int, int];\n\n@view\nconst get_larger = (input: get_larger_input, _s: storage): int => {\n  const [a, b] = input;\n  if (a > b) {\n    return a;\n  }\n  return b;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"This view returns a value from a big-map in storage:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'type storageType = big_map<string, string>;\n\n@view\nconst get_balance = (key: string, s: storageType): string => {\n  const valOpt = Big_map.find_opt(key, s);\n  return match(valOpt) {\n    when(Some(val)): val;\n    when(None): "";\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"calling-views-in-jsligo",children:"Calling views in JsLIGO"}),"\n",(0,s.jsxs)(n.p,{children:["This JsLIGO code calls the ",(0,s.jsx)(n.code,{children:"get_larger"})," view from the previous example by passing the target contract address, parameters, and view name to the ",(0,s.jsx)(n.code,{children:"Tezos.call_view()"})," function:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'@entry\nconst callView = (_i: unit, _s: storage): return_type => {\n  const resultOpt: option<int> = Tezos.call_view(\n    "get_larger", // Name of the view\n    [4, 5], // Parameters to pass\n    "KT1Uh4MjPoaiFbyJyv8TcsZVpsbE2fNm9VKX" as address // Address of the contract\n  );\n  return match(resultOpt) {\n    when (None):\n      failwith("Something went wrong");\n    when (Some(result)):\n      [list([]), result];\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"If the view takes no parameters, pass a Unit type for the parameter:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const unitValue: unit = [];\nconst resultOpt: option<int> = Tezos.call_view(\n  "no_param_view", // Name of the view\n  unitValue, // No parameter\n  "KT1Uh4MjPoaiFbyJyv8TcsZVpsbE2fNm9VKX" as address // Address of the contract\n);\n'})}),"\n",(0,s.jsx)(n.h2,{id:"creating-views-in-smartpy",children:"Creating views in SmartPy"}),"\n",(0,s.jsxs)(n.p,{children:["Views in SmartPy look like entrypoints because they receive the ",(0,s.jsx)(n.code,{children:"self"})," object and input values as parameters, but they have the ",(0,s.jsx)(n.code,{children:"@sp.onchain_view"})," annotation instead of the ",(0,s.jsx)(n.code,{children:"@sp.entrypoint"})," annotation."]}),"\n",(0,s.jsx)(n.p,{children:"This SmartPy contract has a view that returns a value from a big-map in storage:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'@sp.module\ndef main():\n\n    storage_type: type = sp.big_map[sp.address, sp.nat]\n\n    class MyContract(sp.Contract):\n        def __init__(self):\n            self.data = sp.big_map()\n            sp.cast(self.data, storage_type)\n\n        @sp.entrypoint\n        def add(self, addr, value):\n            currentVal = self.data.get(addr, default=0)\n            self.data[addr] = currentVal + value\n\n        @sp.onchain_view\n        def getValue(self, addr):\n          return self.data.get(addr, default=0)\n\n@sp.add_test()\ndef test():\n    scenario = sp.test_scenario("Callviews", main)\n    contract = main.MyContract()\n    scenario += contract\n\n    alice = sp.test_account("Alice")\n    bob = sp.test_account("Bob")\n\n    # Test the entrypoint\n    contract.add(addr = alice.address, value = 5)\n    contract.add(addr = alice.address, value = 5)\n    contract.add(addr = bob.address, value = 4)\n    scenario.verify(contract.data[alice.address] == 10)\n    scenario.verify(contract.data[bob.address] == 4)\n\n    # Test the view\n    scenario.verify(contract.getValue(alice.address) == 10)\n    scenario.verify(contract.getValue(bob.address) == 4)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"calling-views-in-smartpy",children:"Calling views in SmartPy"}),"\n",(0,s.jsxs)(n.p,{children:["In SmartPy tests, you can call views in the contract just like you call entrypoints.\nHowever, due to a limitation in SmartPy, if the view accepts multiple parameters, you must pass those parameters in a record.\nFor example, to call the ",(0,s.jsx)(n.code,{children:"get_larger"})," view in the previous example, use this code:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"viewResult = contract.get_larger(sp.record(a = 4, b = 5))\nscenario.verify(viewResult == 5)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To call a view in an entrypoint, pass the view name, target contract address, parameters, and return type to the ",(0,s.jsx)(n.code,{children:"sp.view()"})," function, as in this example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'@sp.entrypoint\ndef callView(self, a, b):\n    sp.cast(a, sp.int)\n    sp.cast(b, sp.int)\n    viewResponseOpt = sp.view(\n        "get_larger",  # Name of the view\n        sp.address("KT1K6kivc91rZoDeCqEWjH8YqDn3iz6iEZkj"),  # Address of the contract\n        sp.record(a=a, b=b),  # Parameters to pass\n        sp.int  # Return type of the view\n    )\n    if viewResponseOpt.is_some():\n        self.data.myval = viewResponseOpt.unwrap_some()\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If the view takes no parameters, pass ",(0,s.jsx)(n.code,{children:"()"})," for the parameter:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'viewResponseOpt = sp.view(\n    "no_param_view",  # Name of the view\n    sp.address("KT1K6kivc91rZoDeCqEWjH8YqDn3iz6iEZkj"),  # Address of the contract\n    (),  # No parameter\n    sp.int  # Return type of the view\n)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"calling-views-with-taquito",children:"Calling views with Taquito"}),"\n",(0,s.jsxs)(n.p,{children:["Calling a view with Taquito is similar to calling entrypoints.\nWhen you create an object to represent the contract, its ",(0,s.jsx)(n.code,{children:"contractViews"})," property has a method for each view, which you can call as in this example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'const viewContractAddress = "KT1K6kivc91rZoDeCqEWjH8YqDn3iz6iEZkj";\nconst contract = await Tezos.wallet.at(viewContractAddress);\nconst result = await contract.contractViews.get_larger({a: 2, b: 12})\n  .executeView({ viewCaller: viewContractAddress });\nconsole.log(result);\n'})}),"\n",(0,s.jsx)(n.h2,{id:"calling-views-with-the-octez-client",children:"Calling views with the Octez client"}),"\n",(0,s.jsxs)(n.p,{children:["To call a view with the Octez client, use the ",(0,s.jsx)(n.code,{children:"run view"})," command, as in this example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'octez-client run view "get_larger" on contract "KT1Uh4MjPoaiFbyJyv8TcsZVpsbE2fNm9VKX" with input "Pair 4 5"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If the view takes no parameters, you can pass Unit or omit the ",(0,s.jsx)(n.code,{children:"with input"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"implementation-details",children:"Implementation details"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Octez: ",(0,s.jsx)(n.a,{href:"https://octez.tezos.com/docs/active/views.html",children:"On-chain views"})]}),"\n",(0,s.jsxs)(n.li,{children:["Archetype: ",(0,s.jsx)(n.a,{href:"https://archetype-lang.org/docs/reference/declarations/view",children:"View"})]}),"\n",(0,s.jsxs)(n.li,{children:["SmartPy: ",(0,s.jsx)(n.a,{href:"https://smartpy.io/manual/scenarios/testing_contracts#testing-expressions-views-and-lambdas",children:"Testing expressions"})]}),"\n",(0,s.jsxs)(n.li,{children:["LIGO: ",(0,s.jsx)(n.a,{href:"https://ligolang.org/docs/protocol/hangzhou#on-chain-views",children:"On-chain views"})]}),"\n",(0,s.jsxs)(n.li,{children:["Taquito: ",(0,s.jsx)(n.a,{href:"https://tezostaquito.io/docs/on_chain_views",children:"On-chain views"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var a=t(96540);const s={},i=a.createContext(s);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);