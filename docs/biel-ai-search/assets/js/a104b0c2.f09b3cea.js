"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4476],{14661:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"tutorials/create-nfts/create-contract","title":"Part 4: Creating the contract","description":"Up to this point, your web application used a pre-deployed smart contract to manage tokens.","source":"@site/docs/tutorials/create-nfts/create-contract.md","sourceDirName":"tutorials/create-nfts","slug":"/tutorials/create-nfts/create-contract","permalink":"/previews/docs/biel-ai-search/tutorials/create-nfts/create-contract","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1737090000000,"frontMatter":{"title":"Part 4: Creating the contract","authors":"Tim McMackin","last_update":{"date":"17 January 2025"}},"sidebar":"tutorialsSidebar","previous":{"title":"Part 3: Sending transactions","permalink":"/previews/docs/biel-ai-search/tutorials/create-nfts/send-transactions"},"next":{"title":"Part 5: Showing token information","permalink":"/previews/docs/biel-ai-search/tutorials/create-nfts/show-info"}}');var i=n(74848),s=n(28453);const r={title:"Part 4: Creating the contract",authors:"Tim McMackin",last_update:{date:"17 January 2025"}},o=void 0,c={},l=[{value:"The SmartPy FA2 library",id:"the-smartpy-fa2-library",level:2},{value:"Loading a template in the SmartPy online IDE",id:"loading-a-template-in-the-smartpy-online-ide",level:2},{value:"The contract template",id:"the-contract-template",level:2},{value:"Customizing the contract template",id:"customizing-the-contract-template",level:2},{value:"Deploying the contract",id:"deploying-the-contract",level:2},{value:"Using the contract in your application",id:"using-the-contract-in-your-application",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Up to this point, your web application used a pre-deployed smart contract to manage tokens.\nIn this section, you create and deploy your own smart contract to control your own tokens.\nCreating your own smart contract allows you to customize the tokens and their behavior, such as their metadata, how they are minted, transferred, and burned, and the rules for creating, transferring, and destroying them."}),"\n",(0,i.jsxs)(t.p,{children:["The contract that you create in this section is written in the SmartPy language, which is a language for contracts based on Python.\nFor more information about SmartPy, see ",(0,i.jsx)(t.a,{href:"/smart-contracts/languages/smartpy",children:"SmartPy"})," in this documentation or the complete documentation for ",(0,i.jsx)(t.a,{href:"https://smartpy.io/",children:"SmartPy"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"the-smartpy-fa2-library",children:"The SmartPy FA2 library"}),"\n",(0,i.jsx)(t.p,{children:"SmartPy provides a library that helps you create FA2-compatible token contracts.\nInstead of having to write all of the code yourself, you can import code from the FA2 library that controls how the contract and its tokens behave.\nThen you can customize the behavior and run tests to verify that your contract works before you deploy it."}),"\n",(0,i.jsxs)(t.p,{children:["For more information about the SmartPy FA2 library, see ",(0,i.jsx)(t.a,{href:"https://smartpy.io/manual/libraries/FA2-lib/overview",children:"FA2 Lib"})," in the SmartPy documentation."]}),"\n",(0,i.jsx)(t.h2,{id:"loading-a-template-in-the-smartpy-online-ide",children:"Loading a template in the SmartPy online IDE"}),"\n",(0,i.jsx)(t.p,{children:"You can work with SmartPy contracts in any text or code editor, but an easy way to with with contracts without installing anything is to use the SmartPy online IDE.\nThis IDE includes templates for smart contracts and can compile, test, and deploy contracts directly in the browser."}),"\n",(0,i.jsx)(t.p,{children:"Follow these steps to create a contract using a template for FA2 NFTs:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Open the SmartPy online IDE at ",(0,i.jsx)(t.a,{href:"https://smartpy.io/ide",children:"https://smartpy.io/ide"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["From the Welcome popup, go to the ",(0,i.jsx)(t.strong,{children:"TEMPLATES"})," tab, expand ",(0,i.jsx)(t.strong,{children:"Token contracts"}),' and click the template named "Example NFT contract using the FA2 library."']}),"\n",(0,i.jsx)("img",{src:"/img/tutorials/create-nfts-contract-template-window.png",alt:"Selecting the template in the SmartPy IDE",style:{width:300}}),"\n",(0,i.jsxs)(t.p,{children:["If the Welcome popup doesn't appear, click the ",(0,i.jsx)(t.strong,{children:"TEMPLATES"})," button at the top right of the editor."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Specify a name for the new contract such as ",(0,i.jsx)(t.code,{children:"fa2-nft"})," and click ",(0,i.jsx)(t.strong,{children:"IMPORT CONTRACT"}),".\nThe IDE loads the contract template in the editor."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"the-contract-template",children:"The contract template"}),"\n",(0,i.jsx)(t.p,{children:"To use the SmartPy FA2 library in a contract, you create a contract like any other SmartPy contract.\nThen you import one base class from the library and as many mixins as you want."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Base classes provide the functionality for a single type of FA token:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"main.Nft"}),": Non-fungible tokens, which are unique digital assets"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"main.Fungible"}),": Fungible tokens, which are interchangeable assets, like tez or other cryptocurrencies"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"main.SingleAsset"}),": Single-asset tokens, which are a simplified case of fungible tokens, allowing only one token type per contract"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Mixins provide additional features.\nSome of these mixins include:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"main.Admin"}),": Provides the ",(0,i.jsx)(t.code,{children:"is_administrator"})," method and the ",(0,i.jsx)(t.code,{children:"set_administrator"})," entrypoint to control the administrator of the contract."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"main.BurnNft"}),": Provides a ",(0,i.jsx)(t.code,{children:"burn"})," entrypoint that destroys tokens."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"main.MintNft"}),": Provides a ",(0,i.jsx)(t.code,{children:"mint"})," entrypoint that creates tokens.\nThis mixin requires the ",(0,i.jsx)(t.code,{children:"main.Admin"})," mixin and by default allows only the administrator to mint tokens."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"main.OnchainviewBalanceOf"}),": Provides a view that returns information about who owns tokens."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["For more information, see ",(0,i.jsx)(t.a,{href:"https://smartpy.io/manual/libraries/FA2-lib/base_classes",children:"Base classes"})," and ",(0,i.jsx)(t.a,{href:"https://smartpy.io/manual/libraries/FA2-lib/mixins",children:"Mixins"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["Note the order of the base class and mixins; they must be imported and initialized in a specific order to work properly.\nThere is information on the ordering in comments in the template and in the ",(0,i.jsx)(t.a,{href:"https://smartpy.io/manual/libraries/FA2-lib/overview",children:"FA2 lib"})," documentation.\nThe main part of the contract template looks like this:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-smartpy",children:'import smartpy as sp\nfrom smartpy.templates import fa2_lib as fa2\n\n# Main template for FA2 contracts\nmain = fa2.main\n\n\n@sp.module\ndef my_module():\n    import main\n\n    # Order of inheritance: [Admin], [<policy>], <base class>, [<other mixins>].\n    class MyNFTContract(\n        main.Admin,\n        main.Nft,\n        main.MintNft,\n        main.BurnNft,\n        main.OnchainviewBalanceOf,\n    ):\n        def __init__(self, admin_address, contract_metadata, ledger, token_metadata):\n            """Initializes the contract with NFT functionalities.\n            The base class is required; all mixins are optional.\n            The initialization must follow this order:\n\n            - Other mixins such as OnchainviewBalanceOf, MintNFT, and BurnNFT\n            - Base class: NFT\n            - Transfer policy\n            - Admin\n            """\n\n            # Initialize on-chain balance view\n            main.OnchainviewBalanceOf.__init__(self)\n\n            # Initialize the NFT-specific entrypoints\n            main.BurnNft.__init__(self)\n            main.MintNft.__init__(self)\n\n            # Initialize the NFT base class\n            main.Nft.__init__(self, contract_metadata, ledger, token_metadata)\n\n            main.Admin.__init__(self, admin_address)\n'})}),"\n",(0,i.jsx)(t.h2,{id:"customizing-the-contract-template",children:"Customizing the contract template"}),"\n",(0,i.jsxs)(t.p,{children:["You can customize the contract by using a different base class, using different mixins, or overriding the entrypoints that the base class and mixins provide.\nFor example, ",(0,i.jsx)(t.a,{href:"https://github.com/trilitech/tutorial-applications/tree/main/create-nfts/contract/pre-deployed-fa2-nft.py",children:"the pre-deployed contract"})," overrides the internal function ",(0,i.jsx)(t.code,{children:"is_administrator_"})," to allow anyone to mint a token, not just the administrator as in most NFT contracts."]}),"\n",(0,i.jsx)(t.p,{children:"Many token contracts change the metadata from the default, so in these steps you set up custom metadata for your tokens:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["After the contract code but before the test code that begins with ",(0,i.jsx)(t.code,{children:"@sp.add_test()"}),", add a function to encode token metadata in the format that the contract stores it in:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-smartpy",children:'# Create token metadata\n# Adapted from fa2.make_metadata\ndef create_metadata(symbol, name, decimals, displayUri, artifactUri, description, thumbnailUri):\n    return sp.map(\n        l={\n            "name": sp.scenario_utils.bytes_of_string(name),\n            "decimals": sp.scenario_utils.bytes_of_string("%d" % decimals),\n            "symbol": sp.scenario_utils.bytes_of_string(symbol),\n            "displayUri": sp.scenario_utils.bytes_of_string(displayUri),\n            "artifactUri": sp.scenario_utils.bytes_of_string(artifactUri),\n            "description": sp.scenario_utils.bytes_of_string(description),\n            "thumbnailUri": sp.scenario_utils.bytes_of_string(thumbnailUri),\n        }\n    )\n'})}),"\n",(0,i.jsx)(t.p,{children:"This function accepts metadata fields and encodes them as a map where the key is a string and the value is a series of bytes."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Optional: Customize the metadata by adding or removing fields."}),"\n",(0,i.jsx)(t.p,{children:"Later you will change the web application to include this metadata in the mint transaction."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Update the metadata in the test to use this function by removing this code:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-smartpy",children:'# Define initial token metadata and ownership\ntok0_md = fa2.make_metadata(name="Token Zero", decimals=1, symbol="Tok0")\ntok1_md = fa2.make_metadata(name="Token One", decimals=1, symbol="Tok1")\ntok2_md = fa2.make_metadata(name="Token Two", decimals=1, symbol="Tok2")\ntoken_metadata = [tok0_md, tok1_md, tok2_md]\nledger = {0: alice.address, 1: alice.address, 2: bob.address}\n'})}),"\n",(0,i.jsx)(t.p,{children:"and replacing it with this code:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-smartpy",children:'# Precreated image on IPFS\ntoken_thumb_uri = "https://gateway.pinata.cloud/ipfs/QmRCp4Qc8afPrEqtM1YdRvNagWCsFGXHgGjbBYrmNsBkcE"\n\n# Define initial token metadata and ownership\ntok0_md = create_metadata(\n        "Tok0",\n        "Token Zero",\n        0,\n        token_thumb_uri,\n        token_thumb_uri,\n        "My first token",\n        token_thumb_uri,\n)\ntok1_md = create_metadata(\n        "Tok1",\n        "Token One",\n        0,\n        token_thumb_uri,\n        token_thumb_uri,\n        "My second token",\n        token_thumb_uri,\n)\ntok2_md = create_metadata(\n        "Tok2",\n        "Token Two",\n        0,\n        token_thumb_uri,\n        token_thumb_uri,\n        "My third token",\n        token_thumb_uri,\n)\ntoken_metadata = [tok0_md, tok1_md, tok2_md]\nledger = {0: alice.address, 1: alice.address, 2: bob.address}\n'})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Optional: Edit the metadata for these three tokens.\nYou can change the names, symbols, and descriptions or replace the default picture with a picture of your own.\nUsually, developers store token media such as pictures with the InterPlanetary File System (IPFS) protocol using a tool such as ",(0,i.jsx)(t.a,{href:"https://www.pinata.cloud/",children:"Pinata"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Set yourself as the administrator of the contract:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Replace the line ",(0,i.jsx)(t.code,{children:'admin = sp.test_account("Admin")'})," with this line, using your address for ",(0,i.jsx)(t.code,{children:"<MY_ADDRESS>"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-smartpy",children:'admin = sp.address("<MY_ADDRESS>")\n'})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Replace these lines:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-smartpy",children:"contract = my_module.MyNFTContract(\n    admin.address, sp.big_map(), ledger, token_metadata\n)\n"})}),"\n",(0,i.jsx)(t.p,{children:"with these lines:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-smartpy",children:"contract = my_module.MyNFTContract(\n    admin, sp.big_map(), ledger, token_metadata\n)\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Above the code of the contract, click ",(0,i.jsx)(t.strong,{children:"Run Code"})," to compile the contract and run the tests:"]}),"\n",(0,i.jsx)("img",{src:"/img/tutorials/create-nfts-contract-template-run-code.png",alt:"Running the contract and tests",style:{width:300}}),"\n",(0,i.jsxs)(t.p,{children:["If you see an error, make sure that your code matches ",(0,i.jsx)(t.a,{href:"https://github.com/trilitech/tutorial-applications/tree/main/create-nfts/contract/fa2-from-template.py",children:"the completed contract file"})]}),"\n",(0,i.jsx)(t.p,{children:"If the contract compiles and the tests pass, the IDE shows the starting value of the contract storage and the results of the tests in the right-hand pane:"}),"\n",(0,i.jsx)("img",{src:"/img/tutorials/create-nfts-contract-template-completed-tests.png",alt:"Information about the compiled contract and completed tests",style:{width:300}}),"\n",(0,i.jsx)(t.p,{children:"This storage includes your address as the administrator and test account addresses as the starting token owners.\nOptionally, you can change the starting token owner address like you changed the admin address."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"deploying-the-contract",children:"Deploying the contract"}),"\n",(0,i.jsx)(t.p,{children:"When you are satisfied with the contract and its tests, you can originate (deploy) it to the test network."}),"\n",(0,i.jsx)(t.p,{children:"Originating the contract includes specifying the initial value for its storage.\nThe IDE generates this value based on how you originated the contract in the tests.\nThe tests used generated test accounts, so if you want to have control over the contract you must change the addresses in this generated storage value."}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["In the IDE, under the section that shows the origination storage values for the contract, click ",(0,i.jsx)(t.strong,{children:"Deploy contract"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["In the Michelson pop-up window, click ",(0,i.jsx)(t.strong,{children:"Continue"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"In the Direct Network Contract Origination window, under Node and Network, select the Ghostnet network."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"In the Wallet section, connect your wallet."}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.strong,{children:"Beacon"})," tab allows you to connect to most wallet types.\nIf you can't connect your wallet, you can click the ",(0,i.jsx)(t.strong,{children:"Secret key"})," tab and enter your account's secret key directly."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Click ",(0,i.jsx)(t.strong,{children:"ESTIMATE COST FROM RPC"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["When you are ready to deploy the contract, go to the Deploy Contract section and click ",(0,i.jsx)(t.strong,{children:"DEPLOY CONTRACT"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["In the Pre-Signature Information window, click ",(0,i.jsx)(t.strong,{children:"Accept"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Approve the transaction in your wallet."}),"\n",(0,i.jsx)(t.p,{children:"When the contract is deployed successfully, the page shows the new contract address under Origination Result, as in this picture:"}),"\n",(0,i.jsx)("img",{src:"/img/tutorials/create-nfts-contract-template-deployed.png",alt:"The address of the new contract",style:{width:300}}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Click ",(0,i.jsx)(t.strong,{children:"OPEN EXPLORER"})," to view the contract in the SmartPy block explorer.\nFrom this block explorer, you can click the links to see the contract in other block explorers."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Copy the address of the new contract."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"using-the-contract-in-your-application",children:"Using the contract in your application"}),"\n",(0,i.jsx)(t.p,{children:"Now your contract is deployed and you can use it in the frontend application to create NFTs with it."}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["In your application's ",(0,i.jsx)(t.code,{children:"App.svelte"})," file, update this line with the address of your deployed contract:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:'const nftContractAddress = "KT1Lr8m7HgfY5UF6nXDDcXDxDgEmKyMeds1b";\n'})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"If you changed the metadata by adding or removing fields, make updates in the file to change the token metadata to match.\nRemember that the format for metadata fields is a string and a sequence of bytes, as in the current code:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:'metadata.set("name", stringToBytes("My Token"));\nmetadata.set("symbol", stringToBytes("Tok"));\nmetadata.set("decimals", stringToBytes("0"));\nmetadata.set("artifactUri", stringToBytes(defaultImage));\nmetadata.set("displayUri", stringToBytes(defaultImage));\nmetadata.set("description", stringToBytes("A token I minted"));\nmetadata.set("thumbnailUri", stringToBytes(defaultImage));\n'})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Restart the web application and mint tokens with it from your administrator account.\nThe web application creates the NFTs on your new contract just like it did on the prebuilt contract.\nYou can use the address of the contract or the link in the log to look them up on a block explorer."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["In the next section you use Taquito to retrieve information about your tokens from the contract and show them on the web application.\nContinue to ",(0,i.jsx)(t.a,{href:"/tutorials/create-nfts/show-info",children:"Part 5: Showing token information"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var a=n(96540);const i={},s=a.createContext(i);function r(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);