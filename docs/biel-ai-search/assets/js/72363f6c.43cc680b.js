"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3705],{66755:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"unity/quickstart","title":"Quickstart","description":"Follow these steps to install the Tezos Unity SDK in an existing Unity project and start using it.","source":"@site/docs/unity/quickstart.md","sourceDirName":"unity","slug":"/unity/quickstart","permalink":"/previews/docs/biel-ai-search/unity/quickstart","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1737608400000,"frontMatter":{"title":"Quickstart","authors":"Tim McMackin","last_update":{"date":"23 January 2025"}},"sidebar":"documentationSidebar","previous":{"title":"Tezos Unity SDK","permalink":"/previews/docs/biel-ai-search/unity"},"next":{"title":"Connecting accounts","permalink":"/previews/docs/biel-ai-search/unity/connecting-accounts"}}');var s=t(74848),o=t(28453);const a={title:"Quickstart",authors:"Tim McMackin",last_update:{date:"23 January 2025"}},c=void 0,r={},l=[{value:"Installing the SDK",id:"installing-the-sdk",level:2},{value:"Connecting to wallets",id:"connecting-to-wallets",level:2},{value:"Signing messages",id:"signing-messages",level:2},{value:"Calling smart contracts",id:"calling-smart-contracts",level:2},{value:"Uploading files to IPFS",id:"uploading-files-to-ipfs",level:2},{value:"Changing the RPC node",id:"changing-the-rpc-node",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Follow these steps to install the Tezos Unity SDK in an existing Unity project and start using it."}),"\n",(0,s.jsx)(n.p,{children:"These instructions cover:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Installing the SDK into an existing Unity project"}),"\n",(0,s.jsx)(n.li,{children:"Testing that the SDK works in your project"}),"\n",(0,s.jsx)(n.li,{children:"Connecting to a user's Tezos wallet"}),"\n",(0,s.jsx)(n.li,{children:"Prompting the user to sign messages"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"installing-the-sdk",children:"Installing the SDK"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["In your Unity project, in the Package Manager panel, click the ",(0,s.jsx)(n.code,{children:"+"})," symbol and then click ",(0,s.jsx)(n.strong,{children:"Add package from git URL"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Enter the URL ",(0,s.jsx)(n.code,{children:"https://github.com/trilitech/tezos-unity-sdk.git"})," and click ",(0,s.jsx)(n.strong,{children:"Add"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"You can set a specific version of the SDK, such as version 4.0.0, by adding it to the end of the URL, as in this example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"https://github.com/trilitech/tezos-unity-sdk.git#4.0.0\n"})}),"\n",(0,s.jsx)(n.p,{children:"The Package Manager panel downloads and installs the SDK.\nYou can see its assets in the Project panel under Packages > Tezos Unity SDK."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Ensure that you have a Tezos-compatible wallet configured for the Ghostnet test network on your mobile device.\nBy default, the SDK uses Ghostnet instead of Tezos Mainnet.\nFor instructions, see ",(0,s.jsx)(n.a,{href:"/developing/wallet-setup",children:"Installing and funding a wallet"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"connecting-to-wallets",children:"Connecting to wallets"}),"\n",(0,s.jsx)(n.p,{children:"Connecting to a user's wallet is a prerequisite to working with Tezos in any application.\nAccessing the wallet allows your project to see the tokens in it and to prompt the user to submit transactions, but it does not give your project direct control over the wallet.\nUsers must still confirm all transactions in their wallet application."}),"\n",(0,s.jsx)(n.p,{children:"Using a wallet application in this way saves you from having to implement payment processing and security in your application.\nGame developers can also use the wallet and its account as a unique account identifier and as the user's inventory."}),"\n",(0,s.jsx)(n.p,{children:"The SDK supports three types of wallets:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Tezos wallets that connect through the Beacon protocol, such as Temple"}),"\n",(0,s.jsxs)(n.li,{children:["Tezos social wallets that connect to a federated identity login through ",(0,s.jsx)(n.a,{href:"https://wallet.kukai.app",children:"Kukai"})]}),"\n",(0,s.jsx)(n.li,{children:"Ethereum wallets that connect through the WalletConnect protocol, such as MetaMask"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The SDK can connect to these wallets in different ways depending on the platform.\nFor example, in a WebGL application, it can show a QR code to allow the user to scan it with a wallet app on a mobile device.\nIf the Unity application is running on a mobile app, it can open Tezos wallets on the mobile device directly, known as a ",(0,s.jsx)(n.em,{children:"deep link"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["For more details, see ",(0,s.jsx)(n.a,{href:"/unity/connecting-accounts",children:"Connecting accounts"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"These instructions are for connecting to Tezos wallets through the Beacon protocol:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"In the Unity project, add a button that users click to connect their wallet and a button that users click to disconnect their wallet.\nYou will add code to these buttons in a later step.\nYou can also use a single button and change its behavior to connect or disconnect based on whether there is a currently connected wallet."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Add a RawImage component to the project to hold the QR code and make it square and large enough that mobile devices can scan it."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Add a TextMeshPro text field to show information about the connection, such as the account address."}),"\n",(0,s.jsx)(n.p,{children:"The scene looks similar to this example:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"An example of how the scene might look with information text, connection buttons, and a space for the QR code",src:t(35399).A+"",width:"1324",height:"714"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["In your Unity project, add a class in a script file to hold the code for the connection operations.\nThe class must inherit from the Unity ",(0,s.jsx)(n.code,{children:"MonoBehaviour"})," class, as in this example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using System;\nusing Netezos.Encoding;\nusing Tezos.API;\nusing Tezos.Operation;\nusing Tezos.QR;\nusing Tezos.WalletProvider;\nusing TMPro;\nusing UnityEngine;\nusing UnityEngine.UI;\n\npublic class MyScripts : MonoBehaviour\n{\n    [SerializeField] private QrCodeGenerator _qrCodeGenerator;\n    [SerializeField] private TMP_Text        _infoText;\n    [SerializeField] private Button          _connectButton;\n    [SerializeField] private Button          _disconnectButton;\n\n    private async void Awake()\n    {\n        await TezosAPI.WaitUntilSDKInitialized();\n\n        // Check for prior connections\n        if (TezosAPI.IsConnected()) _infoText.text = TezosAPI.GetConnectionAddress();\n\n        // Run functions when users click buttons\n        _connectButton.onClick.AddListener(OnConnectClicked);\n        _disconnectButton.onClick.AddListener(OnDisconnectClicked);\n\n        // Generate QR code when user connects\n        TezosAPI.PairingRequested += OnPairingRequested;\n    }\n\n    private void OnPairingRequested(string data)\n    {\n        _qrCodeGenerator.SetQrCode(data);\n    }\n\n    private async void OnConnectClicked()\n    {\n        // Connect to a Beacon wallet (such as Temple)\n        var walletProviderData = new WalletProviderData { WalletType = WalletType.BEACON };\n        try\n        {\n            var result = await TezosAPI.ConnectWallet(walletProviderData);\n            _infoText.text = result.WalletAddress;\n        }\n        catch (WalletConnectionRejected e)\n        {\n            _infoText.text = "Wallet connection rejected";\n            Debug.LogError($"Wallet connection rejected. {e.Message}\\n{e.StackTrace}");\n        }\n        catch (Exception e)\n        {\n            Debug.LogException(e);\n        }\n    }\n\n    private async void OnDisconnectClicked()\n    {\n        // Disconnect the currently connected wallet\n        try\n        {\n            var result = await TezosAPI.Disconnect();\n            _infoText.text = "Disconnected";\n        }\n        catch (Exception e)\n        {\n            Debug.LogException(e);\n        }\n    }\n\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"This code includes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Objects that represent the buttons, the QR code generator (from the class ",(0,s.jsx)(n.code,{children:"Tezos.QR.QrCodeGenerator"}),"), and a text field to show information on the screen"]}),"\n",(0,s.jsxs)(n.li,{children:["An ",(0,s.jsx)(n.code,{children:"Awake()"})," (or ",(0,s.jsx)(n.code,{children:"Start()"}),") method that waits for the ",(0,s.jsx)(n.code,{children:"TezosAPI.WaitUntilSDKInitialized()"})," method to complete, which indicates that the SDK is ready"]}),"\n",(0,s.jsx)(n.li,{children:"A check to see if a wallet is already connected, because Beacon can automatically remember previously connected wallets"}),"\n",(0,s.jsx)(n.li,{children:"Listeners to run when users click the buttons, in this case a connect button and a disconnect button"}),"\n",(0,s.jsx)(n.li,{children:"A method to generate the QR code to connect to a mobile application"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["In the Unity editor, create an object on the canvas to represent the script ",(0,s.jsx)(n.code,{children:"QrCodeGenerator.cs"}),", which is available in the Project panel at ",(0,s.jsx)(n.code,{children:"Packages/Tezos Unity SDK/Runtime/Scripts/QR/QrCodeGenerator.cs"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Bind the RawImage component to the ",(0,s.jsx)(n.code,{children:"Raw Image"})," field of the script, as in this image:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Binding the image to the QR code generator script",src:t(49572).A+"",width:"724",height:"224"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"On the component that represents your script, drag the connection buttons, text information field, RawImage component, and QR code generator script to bind them to the objects in your script, as in this image:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Binding the buttons and QR code generator script to the objects in your script",src:t(16034).A+"",width:"730",height:"336"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Play the scene."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"When the scene loads, click the connection button."}),"\n",(0,s.jsxs)(n.p,{children:["The Unity player may try to open a URL that starts with ",(0,s.jsx)(n.code,{children:"tezos://"}),".\nThe SDK is trying to connect to a Tezos wallet on a mobile device.\nYou can safely ignore and close this popup."]}),"\n",(0,s.jsx)(n.p,{children:"The application shows a QR code."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"In your Tezos wallet, scan the QR code and connect to the application."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"If the connection is correct, the text field shows the address of the connected account."}),"\n",(0,s.jsx)(n.p,{children:"Now the application is connected to the wallet and can submit transactions for it to approve and messages for it to sign."}),"\n",(0,s.jsx)(n.h2,{id:"signing-messages",children:"Signing messages"}),"\n",(0,s.jsx)(n.p,{children:"You can use the connection to the user's wallet to prompt them to sign messages.\nSigning a message proves that it came from a specific user's wallet because the wallet encrypts the message with the user's account's key.\nIn this way, game developers can make players sign a message as a way of validating their identity."}),"\n",(0,s.jsx)(n.p,{children:'For example, this code prompts the user to sign the message "This message came from my account."\nThen it uses the Netezos library to verify that the payload was signed by the currently connected account:'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'string payload = "This message came from my account.";\n\nvar result = await TezosAPI.RequestSignPayload(\n    new SignPayloadRequest\n    {\n        Payload = payload,\n        SigningType = SignPayloadType.MICHELINE\n    }\n);\n\nvar publicKey = string.Empty;\nif (TezosAPI.IsWalletConnected())\npublicKey = TezosAPI.GetWalletConnectionData().PublicKey;\nif (TezosAPI.IsSocialLoggedIn())\npublicKey = TezosAPI.GetSocialLoginData().PublicKey;\n\nvar verified = NetezosExtensions.VerifySignature(\n    publicKey,\n    Beacon.Sdk.Beacon.Sign.SignPayloadType.micheline,\n    payload,\n    result.Signature\n);\nDebug.Log($"Signature verified: {verified}");\n'})}),"\n",(0,s.jsx)(n.h2,{id:"calling-smart-contracts",children:"Calling smart contracts"}),"\n",(0,s.jsx)(n.p,{children:"Smart contracts are backend programs that run on the Tezos blockchains.\nSmart contracts can do many tasks, but for gaming they have two main purposes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"They handle tokens, which are digital assets stored on the blockchain"}),"\n",(0,s.jsx)(n.li,{children:"They provide backend logic that users can trust because it cannot change"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"To call a smart contract, the Unity application must be connected to a wallet.\nThe application sends the smart contract transaction to the user's wallet for approval."}),"\n",(0,s.jsxs)(n.p,{children:["For example, this code sends a transaction to the entrypoint ",(0,s.jsx)(n.code,{children:"increment"})," of the smart contract ",(0,s.jsx)(n.code,{children:"KT1R2LTg3mQoLvHtUjo2xSi7RMBUJ1sJkDiD"}),", passes the parameter ",(0,s.jsx)(n.code,{children:"5"}),", and includes zero tez tokens.\nWhen the transaction completes successfully, it logs the hash of the transaction.\nYou can use this hash to look up information about the transaction in a ",(0,s.jsx)(n.a,{href:"/developing/information/block-explorers",children:"block explorer"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'private async void Awake()\n{\n    await TezosAPI.WaitUntilSDKInitialized();\n\n    _connectButton.onClick.AddListener(OnConnectClicked);\n    _disconnectButton.onClick.AddListener(OnDisconnectClicked);\n    _requestOperationButton.onClick.AddListener(OnRequestOperationClicked);\n\n    TezosAPI.OperationResulted += OperationResulted;\n}\n\nprivate async void OnRequestOperationClicked()\n{\n    try\n    {\n        var request = new OperationRequest\n        {\n            // Contract to call\n            Destination = "KT1R2LTg3mQoLvHtUjo2xSi7RMBUJ1sJkDiD",\n            // Entrypoint to call\n            EntryPoint = "increment",\n            // Parameter to pass, as a Michelson expression\n            Arg = new MichelineInt(5).ToJson(),\n            // Amount of tez to send with the transaction\n            Amount = "0",\n        };\n        var response = await TezosAPI.RequestOperation(request);\n    }\n    catch (Exception e) when (e is WalletOperationRejected or SocialOperationFailed)\n    {\n        Debug.LogError($"Operation failed: {e.Message}");\n    }\n    catch (Exception e)\n    {\n        Debug.LogError($"Unexpected error during operation: {e.Message}");\n    }\n}\n\nprivate void OperationResulted(OperationResponse operationResponse)\n{\n    Debug.Log("Transaction hash: " + operationResponse.TransactionHash);\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["For more information, see ",(0,s.jsx)(n.a,{href:"/unity/calling-contracts",children:"Calling contracts"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"uploading-files-to-ipfs",children:"Uploading files to IPFS"}),"\n",(0,s.jsx)(n.p,{children:"The InterPlanetary File System (IPFS) is a protocol and peer-to-peer network for storing and sharing data in a distributed file system.\nBlockchain developers use it to store data such as token images and metadata."}),"\n",(0,s.jsxs)(n.p,{children:["The SDK provides tools to upload to IPFS by using the ",(0,s.jsx)(n.a,{href:"https://pinata.cloud/",children:"Pinata"})," API, but you can set up IPFS upload in other ways."]}),"\n",(0,s.jsxs)(n.p,{children:["To upload files to IPFS, put your Pinata API JWT (not the API key) in the ",(0,s.jsx)(n.code,{children:"Pinata Api Token"})," field of the ",(0,s.jsx)(n.code,{children:"Assets/Tezos/Resources/TezosConfig.asset"})," object.\nThen you can upload to IPFS with this code:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public void HandleUploadClick()\n{\n    var pinataToken = ConfigGetter.GetOrCreateConfig<TezosConfig>().PinataApiToken;\n    if (string.IsNullOrEmpty(pinataToken))\n    {\n        Logger.LogError("Can not proceed without Pinata API key.");\n        return;\n    }\n\n    var uploader = UploaderFactory.GetPinataUploader(pinataToken);\n\n    var uploadCoroutine = uploader.UploadFile(ipfsUrl =>\n    {\n        Logger.LogDebug($"File uploaded, url is {ipfsUrl}");\n    });\n\n    StartCoroutine(uploadCoroutine);\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"When this code runs, the UI opens a file selection window and prompts the user to select a file."}),"\n",(0,s.jsx)(n.h2,{id:"changing-the-rpc-node",children:"Changing the RPC node"}),"\n",(0,s.jsxs)(n.p,{children:["As described in ",(0,s.jsx)(n.a,{href:"/architecture/nodes#the-rpc-interface",children:"The RPC interface"}),", Tezos clients including the Unity SDK send transactions to RPC nodes.\nBy default, the SDK sends requests to a public RPC node that uses the Ghostnet test network, where you can test transactions without spending real tez.\nFor more information about test networks, see ",(0,s.jsx)(n.a,{href:"/developing/testnets",children:"Testing on testnets"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If you need to change the RPC node that the SDK uses, such as if the default node is overloaded or if you are ready to send transactions to Mainnet, you can set the RPC node by editing the TezosConfig scriptable object at ",(0,s.jsx)(n.code,{children:"Assets/Tezos/Resources/TezosConfig.asset"})," and setting the RPC URL in the ",(0,s.jsx)(n.strong,{children:"Rpc Url Format"})," field, as in this picture:"]}),"\n",(0,s.jsx)("img",{src:"/img/unity/unity-ipfs-scene-config.png",alt:"Adding the Pinata API key and the data provider to the TezosConfig object",style:{width:300}})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},49572:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/unity-quickstart-bind-rawimage-905f621c4f0ef4d9ef48ae09092589e5.png"},16034:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/unity-quickstart-scripts-beacon-905c50d95d0388c452d63900457301cc.png"},35399:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/unity-scene-layout-beacon-95c75078a28b61c8968f9c92cd31cc3e.png"},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var i=t(96540);const s={},o=i.createContext(s);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);