"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8136],{94857:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>r});const a=JSON.parse('{"id":"unity/reference/API","title":"Unity SDK TezosAPI object","description":"The Unity SDK class Tezos.API.TezosAPI provides methods for many Tezos-related tasks, including connecting to wallets, sending transactions to Tezos, and getting information about about the Tezos blockchain, such as what tokens accounts or contracts control.","source":"@site/docs/unity/reference/API.md","sourceDirName":"unity/reference","slug":"/unity/reference/API","permalink":"/previews/docs/biel-ai-search/unity/reference/API","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1733374800000,"frontMatter":{"title":"Unity SDK TezosAPI object","sidebar_label":"TezosAPI object","authors":"Tim McMackin","last_update":{"date":"5 December 2024"}},"sidebar":"documentationSidebar","previous":{"title":"Reference","permalink":"/previews/docs/biel-ai-search/unity/reference"},"next":{"title":"Events","permalink":"/previews/docs/biel-ai-search/unity/reference/events"}}');var i=t(74848),o=t(28453);const s={title:"Unity SDK TezosAPI object",sidebar_label:"TezosAPI object",authors:"Tim McMackin",last_update:{date:"5 December 2024"}},c=void 0,l={},r=[{value:"Properties",id:"properties",level:2},{value:"Initialization methods",id:"initialization-methods",level:2},{value:"<code>WaitUntilSDKInitialized()</code>",id:"waituntilsdkinitialized",level:3},{value:"Wallet connection methods",id:"wallet-connection-methods",level:2},{value:"<code>ConnectWallet()</code>",id:"connectwallet",level:3},{value:"<code>SocialLogIn()</code>",id:"sociallogin",level:3},{value:"<code>Disconnect()</code>",id:"disconnect",level:3},{value:"Wallet information methods",id:"wallet-information-methods",level:2},{value:"<code>IsConnected()</code>",id:"isconnected",level:3},{value:"<code>GetConnectionAddress()</code>",id:"getconnectionaddress",level:3},{value:"<code>IsWalletConnected()</code>",id:"iswalletconnected",level:3},{value:"<code>IsSocialLoggedIn()</code>",id:"issocialloggedin",level:3},{value:"<code>GetWalletConnectionData()</code>",id:"getwalletconnectiondata",level:3},{value:"<code>GetSocialLoginData()</code>",id:"getsociallogindata",level:3},{value:"<code>GetWalletProvider()</code>",id:"getwalletprovider",level:3},{value:"<code>GetSocialProvider()</code>",id:"getsocialprovider",level:3},{value:"Tezos information methods",id:"tezos-information-methods",level:2},{value:"<code>GetBalance()</code>",id:"getbalance",level:3},{value:"<code>ReadView()</code>",id:"readview",level:3},{value:"<code>GetTokens()</code>",id:"gettokens",level:3},{value:"<code>GetTokenMetadata()</code>",id:"gettokenmetadata",level:3},{value:"Transaction methods",id:"transaction-methods",level:2},{value:"<code>RequestOperation()</code>",id:"requestoperation",level:3},{value:"<code>GetOperationStatus()</code>",id:"getoperationstatus",level:3},{value:"<code>RequestSignPayload()</code>",id:"requestsignpayload",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["The Unity SDK class ",(0,i.jsx)(n.code,{children:"Tezos.API.TezosAPI"})," provides methods for many Tezos-related tasks, including connecting to wallets, sending transactions to Tezos, and getting information about about the Tezos blockchain, such as what tokens accounts or contracts control."]}),"\n",(0,i.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsx)(n.p,{children:"None."}),"\n",(0,i.jsx)(n.h2,{id:"initialization-methods",children:"Initialization methods"}),"\n",(0,i.jsx)(n.h3,{id:"waituntilsdkinitialized",children:(0,i.jsx)(n.code,{children:"WaitUntilSDKInitialized()"})}),"\n",(0,i.jsx)(n.p,{children:"Waits until the SDK is fully initialized.\nUse this method at startup before trying to connect to wallets or use other features of the SDK."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static async UniTask WaitUntilSDKInitialized()\n"})}),"\n",(0,i.jsx)(n.h2,{id:"wallet-connection-methods",children:"Wallet connection methods"}),"\n",(0,i.jsx)(n.h3,{id:"connectwallet",children:(0,i.jsx)(n.code,{children:"ConnectWallet()"})}),"\n",(0,i.jsxs)(n.p,{children:["Sends a request to a user's wallet to connect a Beacon or WalletConnect wallet to the application.\nTo connect social wallets, use ",(0,i.jsx)(n.a,{href:"#sociallogin",children:(0,i.jsx)(n.code,{children:"SocialLogIn()"})}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static async UniTask<WalletProviderData> ConnectWallet(WalletProviderData walletProviderData);\n"})}),"\n",(0,i.jsx)(n.p,{children:"If a wallet is already connected, this method either throws an exception (if a social wallet is connected) or returns the current connection information (if a Beacon or WalletConnect wallet is connected)."}),"\n",(0,i.jsxs)(n.p,{children:["This method triggers the ",(0,i.jsx)(n.code,{children:"WalletConnected"})," or ",(0,i.jsx)(n.code,{children:"WalletConnectionFailed"})," events, depending on whether the connection was successful or not."]}),"\n",(0,i.jsxs)(n.p,{children:["When the ",(0,i.jsx)(n.code,{children:"WalletType"})," field of the ",(0,i.jsx)(n.code,{children:"WalletProviderData"})," parameter is set to ",(0,i.jsx)(n.code,{children:"WalletType.BEACON"}),", this method automatically picks the correct way to connect to wallets:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["In WebGL applications, it uses the ",(0,i.jsx)(n.code,{children:"TezosSDK.Beacon.BeaconConnectorWebGl"})," class to trigger the browser to connect to a wallet app in a browser plugin."]}),"\n",(0,i.jsxs)(n.li,{children:["In all other applications, it uses the ",(0,i.jsx)(n.code,{children:"TezosSDK.Beacon.BeaconConnectorDotNet"}),' class to generate a QR code to connect to a wallet app on a mobile device or use a "deep link" to connect to a wallet on the same mobile device that is running the application.']}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["When the ",(0,i.jsx)(n.code,{children:"WalletType"})," field of the ",(0,i.jsx)(n.code,{children:"WalletProviderData"})," parameter is set to ",(0,i.jsx)(n.code,{children:"WalletType.WALLETCONNECT"}),", this method opens the WalletConnect SDK's popup window, which provides deep links and a QR code to connect EVM wallets."]}),"\n",(0,i.jsxs)(n.p,{children:["For more information about connecting to wallets, see ",(0,i.jsx)(n.a,{href:"/unity/connecting-accounts",children:"Connecting accounts"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"sociallogin",children:(0,i.jsx)(n.code,{children:"SocialLogIn()"})}),"\n",(0,i.jsx)(n.p,{children:"Initiates a social login session and returns information about the connection."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static async UniTask<SocialProviderData> SocialLogIn(SocialProviderData socialProviderData);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This method triggers the ",(0,i.jsx)(n.code,{children:"SocialLoggedIn"})," event."]}),"\n",(0,i.jsx)(n.h3,{id:"disconnect",children:(0,i.jsx)(n.code,{children:"Disconnect()"})}),"\n",(0,i.jsx)(n.p,{children:"Disconnects the currently connected wallet and returns true if a wallet was connected or false if no wallet was connected."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static async UniTask<bool> Disconnect()\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This method triggers the ",(0,i.jsx)(n.code,{children:"WalletDisconnected"})," or ",(0,i.jsx)(n.code,{children:"SocialLoggedOut"})," event, depending on the type of wallet connection."]}),"\n",(0,i.jsx)(n.h2,{id:"wallet-information-methods",children:"Wallet information methods"}),"\n",(0,i.jsx)(n.h3,{id:"isconnected",children:(0,i.jsx)(n.code,{children:"IsConnected()"})}),"\n",(0,i.jsx)(n.p,{children:"Returns true if any kind of wallet is connected to the application and false if not."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static bool IsConnected()\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This method returns true if a Beacon, WalletConnect, or social wallet is connected.\nTo check for Beacon and WalletConnect connections specifically, use ",(0,i.jsx)(n.a,{href:"#iswalletconnected",children:(0,i.jsx)(n.code,{children:"IsWalletConnected()"})}),".\nTo check for social wallets specifically, use ",(0,i.jsx)(n.a,{href:"#issocialloggedin",children:(0,i.jsx)(n.code,{children:"IsSocialLoggedIn()"})}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"getconnectionaddress",children:(0,i.jsx)(n.code,{children:"GetConnectionAddress()"})}),"\n",(0,i.jsx)(n.p,{children:"Returns the connected address or an empty string if no wallet is connected."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static string GetConnectionAddress()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"iswalletconnected",children:(0,i.jsx)(n.code,{children:"IsWalletConnected()"})}),"\n",(0,i.jsx)(n.p,{children:"Returns true if a Beacon or WalletConnect wallet is connected."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static bool IsWalletConnected()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"issocialloggedin",children:(0,i.jsx)(n.code,{children:"IsSocialLoggedIn()"})}),"\n",(0,i.jsx)(n.p,{children:"Returns true if a social wallet is connected."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static bool IsSocialLoggedIn()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"getwalletconnectiondata",children:(0,i.jsx)(n.code,{children:"GetWalletConnectionData()"})}),"\n",(0,i.jsx)(n.p,{children:"Retrieves information about the current wallet connection."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static WalletProviderData GetWalletConnectionData()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"getsociallogindata",children:(0,i.jsx)(n.code,{children:"GetSocialLoginData()"})}),"\n",(0,i.jsx)(n.p,{children:"Retrieves information about the current social wallet connection."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cshar",children:"public static SocialProviderData GetSocialLoginData();\n"})}),"\n",(0,i.jsx)(n.h3,{id:"getwalletprovider",children:(0,i.jsx)(n.code,{children:"GetWalletProvider()"})}),"\n",(0,i.jsx)(n.p,{children:"Returns the internal object that the SDK uses to represent the connection to Beacon and WalletConnect wallets."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static IWalletProvider GetWalletProvider<T>()\n"})}),"\n",(0,i.jsx)(n.p,{children:"To use this method you must specify the type of wallet provider that the Unity application is using."}),"\n",(0,i.jsx)(n.p,{children:"Example for WebGL applications:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"BeaconWebGLProvider walletProvider = TezosAPI.GetWalletProvider<BeaconWebGLProvider>();\nDebug.Log(walletProvider.WalletType);\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example for mobile applications:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"BeaconMobileProvider walletProvider = TezosAPI.GetWalletProvider<BeaconMobileProvider>();\nDebug.Log(walletProvider.WalletType);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"getsocialprovider",children:(0,i.jsx)(n.code,{children:"GetSocialProvider()"})}),"\n",(0,i.jsx)(n.p,{children:"Returns the internal object that the SDK uses to represent the connection to social wallets."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static ISocialLoginProvider GetSocialProvider<T>()\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"KukaiMobileProvider walletProvider = TezosAPI.GetSocialProvider<KukaiMobileProvider>();\nDebug.Log(walletProvider.WalletType);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"tezos-information-methods",children:"Tezos information methods"}),"\n",(0,i.jsx)(n.h3,{id:"getbalance",children:(0,i.jsx)(n.code,{children:"GetBalance()"})}),"\n",(0,i.jsx)(n.p,{children:"Fetches the balance of the connected account in mutez, as a string."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static async UniTask<string> GetBalance()\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public void RunGetBalance()\n{\n    try\n    {\n        var balance = ulong.Parse(await TezosAPI.GetBalance());\n        float convertedBalance = balance / 1000000f;\n        Debug.Log($"Balance: {balance} tez");\n    }\n    catch (Exception e)\n    {\n        Debug.LogError($"Balance fetch error: {e.Message}");\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"readview",children:(0,i.jsx)(n.code,{children:"ReadView()"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns the response from a contract ",(0,i.jsx)(n.a,{href:"/smart-contracts/views",children:"view"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static UniTask<T> ReadView<T>(string contractAddress, string entrypoint, string input)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note that the ",(0,i.jsx)(n.code,{children:"input"})," parameter must be a Michelson-encoded object, as in the following example, which passes a string parameter to the view:"]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'var result = await TezosAPI.ReadView<string>("KT1K46vZTMEe8bnacFvFQfgHtNDKniEauRMJ", "simple", "\\"String value\\"");\nDebug.Log("View response: " + result);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"gettokens",children:(0,i.jsx)(n.code,{children:"GetTokens()"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns the tokens for a given contract or account address as a list of ",(0,i.jsx)(n.code,{children:"TokenData"})," objects."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static UniTask<T>  GetTokens<T>(\n    string address,\n    int    limit = 100\n)\n"})}),"\n",(0,i.jsx)(n.p,{children:"This example gets information about the tokens in a contract:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'var tokenList = await TezosAPI.GetTokens<List<TokenData>>("KT1HP6uMwf829cDgwynZJ4rDvjLCZmfYjja1", 5);\nforeach (TokenData token in tokenList)\n{\n    Debug.Log($"Token ID: {token.TokenId} has {token.HoldersCount} owners");\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"This example gets the tokens that a user account holds:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'var tokenList = await TezosAPI.GetTokens<List<TokenData>>("tz1QCVQinE8iVj1H2fckqx6oiM85CNJSK9Sx", 5);\nforeach (TokenData token in tokenList)\n{\n    Debug.Log($"Contract: {token.Contract.Address} ID: {token.TokenId}");\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"gettokenmetadata",children:(0,i.jsx)(n.code,{children:"GetTokenMetadata()"})}),"\n",(0,i.jsx)(n.p,{children:"Gets the metadata for the specified token."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static UniTask<JsonElement> GetTokenMetadata(\n    string contractAddress,\n    uint   tokenId\n);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"transaction-methods",children:"Transaction methods"}),"\n",(0,i.jsx)(n.h3,{id:"requestoperation",children:(0,i.jsx)(n.code,{children:"RequestOperation()"})}),"\n",(0,i.jsx)(n.p,{children:"Sends a Tezos transaction and returns an object with the hash of the transaction."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static async UniTask<OperationResponse> RequestOperation(OperationRequest operationRequest)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This method triggers the ",(0,i.jsx)(n.code,{children:"OperationResulted"})," event."]}),"\n",(0,i.jsxs)(n.p,{children:["For examples, see ",(0,i.jsx)(n.a,{href:"/unity/calling-contracts",children:"Calling contracts"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["To send an Etherlink transaction, use the Reown SDK as described in ",(0,i.jsx)(n.a,{href:"/unity/calling-contracts#calling-etherlink-contracts",children:"Calling Etherlink contracts"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"getoperationstatus",children:(0,i.jsx)(n.code,{children:"GetOperationStatus()"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static UniTask<bool> GetOperationStatus(string operationHash)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns true if the specified operation was successful, false if it failed, or null (or HTTP 204) if it doesn't exist."}),"\n",(0,i.jsx)(n.h3,{id:"requestsignpayload",children:(0,i.jsx)(n.code,{children:"RequestSignPayload()"})}),"\n",(0,i.jsx)(n.p,{children:"Prompts the connected wallet to sign a payload and returns the signed payload."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static async UniTask<SignPayloadResponse> RequestSignPayload(SignPayloadRequest operationRequest)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This method triggers the ",(0,i.jsx)(n.code,{children:"SigningResulted"})," event."]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'private async void Start()\n{\n    TezosAPI.SigningResulted += SigningResulted;\n\n    await TezosAPI.WaitUntilSDKInitialized();\n}\n\npublic async void SignPayloadClick()\n{\n    try\n    {\n        var payload = "Hello World!";\n        var bytes = Encoding.UTF8.GetBytes(payload);\n        var hexPayload = BitConverter.ToString(bytes);\n        hexPayload = hexPayload.Replace("-", "");\n        hexPayload = "05" + hexPayload;\n        var result = await TezosAPI.RequestSignPayload(\n            new SignPayloadRequest\n            {\n                Payload = hexPayload,\n                SigningType = SignPayloadType.MICHELINE\n            }\n        );\n        Debug.Log($"Signature: {result.Signature}");\n    }\n    catch (Exception e)\n    {\n        Debug.Log($"{e.Message}");\n        Debug.Log($"{e.StackTrace}");\n    }\n}\n\npublic void SigningResulted(SignPayloadResponse response)\n{\n    Debug.Log("SigningResulted");\n    Debug.Log(response);\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var a=t(96540);const i={},o=a.createContext(i);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);