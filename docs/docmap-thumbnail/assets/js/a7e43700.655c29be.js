"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8854],{55776:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"smart-contracts/deploying","title":"Deploying smart contracts","description":"Introduction","source":"@site/docs/smart-contracts/deploying.md","sourceDirName":"smart-contracts","slug":"/smart-contracts/deploying","permalink":"/previews/docs/docmap-thumbnail/smart-contracts/deploying","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1707800400000,"frontMatter":{"title":"Deploying smart contracts","authors":"Yuxin Li","last_update":{"date":"13 February 2024"},"dependencies":{"octez":21.2,"smartpy":"0.20.0","ligo":"1.9.2"}},"sidebar":"documentationSidebar","previous":{"title":"Creating smart contracts","permalink":"/previews/docs/docmap-thumbnail/smart-contracts/creating"},"next":{"title":"Entrypoints","permalink":"/previews/docs/docmap-thumbnail/smart-contracts/entrypoints"}}');var a=t(74848),r=t(28453);const s={title:"Deploying smart contracts",authors:"Yuxin Li",last_update:{date:"13 February 2024"},dependencies:{octez:21.2,smartpy:"0.20.0",ligo:"1.9.2"}},o=void 0,c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Deploying a smart contract",id:"deploying-a-smart-contract",level:2},{value:"Deploying via terminal",id:"deploying-via-terminal",level:3},{value:"Deploying via online IDE",id:"deploying-via-online-ide",level:3},{value:"Compiling the initial storage value",id:"compiling-the-initial-storage-value",level:2},{value:"Compiling LIGO storage values",id:"compiling-ligo-storage-values",level:3},{value:"Compiling SmartPy storage values",id:"compiling-smartpy-storage-values",level:3},{value:"Interacting with the contract",id:"interacting-with-the-contract",level:2},{value:"Interacting through command lines",id:"interacting-through-command-lines",level:3},{value:"Interacting via blockchain explorers",id:"interacting-via-blockchain-explorers",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsxs)(n.p,{children:["In Tezos, deploying a smart contract is often referred to as \u201corigination\u201d. This process essentially creates a new account that holds the smart contract's script. Contracts originated in this manner have addresses that start with ",(0,a.jsx)(n.code,{children:"KT1"}),", which distinguishes them from the user accounts with addresses beginning with ",(0,a.jsx)(n.code,{children:"tz1"}),", ",(0,a.jsx)(n.code,{children:"tz2"}),", or ",(0,a.jsx)(n.code,{children:"tz3"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Compile your contract and its initial storage"}),"\n",(0,a.jsx)(n.li,{children:"Set up an wallet account on Tezos with some tez to pay the fees"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"deploying-a-smart-contract",children:"Deploying a smart contract"}),"\n",(0,a.jsx)(n.p,{children:"Generally, there are two methods for deploying your smart contracts: either using the command line in your terminal or deploying through an online IDE."}),"\n",(0,a.jsx)(n.h3,{id:"deploying-via-terminal",children:"Deploying via terminal"}),"\n",(0,a.jsx)(n.p,{children:"The first one is to deploy through your terminal. Here is the syntax for the Tezos command line to deploy a smart contract:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"octez-client originate contract CONTRACT_NAME transferring AMOUNT_TEZ from FROM_USER \\\n             running MICHELSON_FILE \\\n             --init 'INITIAL_STORAGE' --burn-cap GAZ_FEE\n"})}),"\n",(0,a.jsx)(n.p,{children:"where:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"CONTRACT_NAME"})," is the name given to the contract."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"MICHELSON_FILE"})," is the path for the Michelson smart contract code (.tz file)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"AMOUNT_TEZ"})," is the quantity of tez being transferred to the newly deployed contract. If a contract balance reaches 0 then it is deactivated."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"FROM_USER"})," account from which the tez are taken (and transferred to the new contract)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"INITIAL_STORAGE"})," is a Michelson expression. The --init parameter is used to specify the initial state of the storage."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"GAZ_FEE"})," is a specified maximal fee the user is willing to pay for this operation (using the --burn-cap parameter)."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"deploying-via-online-ide",children:"Deploying via online IDE"}),"\n",(0,a.jsx)(n.p,{children:"As for deploying through your online IDE, if you are using LIGO or SmartPy programming languages, you can deploy your smart contracts through their respective online IDEs."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://smartpy.io/",children:"SmartPy online IDE"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://ligolang.org/?lang=jsligo",children:"LIGO online IDE"})}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"compiling-the-initial-storage-value",children:"Compiling the initial storage value"}),"\n",(0,a.jsx)(n.p,{children:"When you deploy a contract, you initialize its storage.\nThe initial value of the storage must be a Micheline value, which is the format for variables in Michelson smart contracts.\nThe high-level languages provide tools to compile the initial values of smart contracts into Micheline values."}),"\n",(0,a.jsx)(n.h3,{id:"compiling-ligo-storage-values",children:"Compiling LIGO storage values"}),"\n",(0,a.jsxs)(n.p,{children:["For LIGO smart contracts, you can use the ",(0,a.jsx)(n.code,{children:"ligo compile storage"})," command.\nFor example, assume that a JsLIGO contract has a storage value that includes a list of integers, a string, and an integer:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsligo",children:"type storage = [\n  list<int>,\n  string,\n  int,\n];\n"})}),"\n",(0,a.jsx)(n.p,{children:"When this contract is compiled to Michelson, the storage line of the contract looks like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-michelson",children:"storage (pair (list int) string int) ;\n"})}),"\n",(0,a.jsxs)(n.p,{children:["To compile an initial value to this format, you can pass a JsLIGO value to the ",(0,a.jsx)(n.code,{children:"ligo compile storage"})," command, as in this example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"ligo compile storage MyContract.jsligo '[list([1,2,3,4]), \"start\", 0]'\n"})}),"\n",(0,a.jsx)(n.p,{children:"The result is the Micheline value, as in this example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-michelson",children:'(Pair { 1 ; 2 ; 3 ; 4 } "start" 0)\n'})}),"\n",(0,a.jsx)(n.p,{children:"Then you can use this Micheline value as the initial storage value for the contract:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"octez-client originate contract MyContract \\\n  transferring 0 from my_account \\\n  running MyContract.tz --init '(Pair { 1 ; 2 ; 3 ; 4 } \"start\" 0)' \\\n  --burn-cap 1\n"})}),"\n",(0,a.jsx)(n.h3,{id:"compiling-smartpy-storage-values",children:"Compiling SmartPy storage values"}),"\n",(0,a.jsxs)(n.p,{children:["SmartPy lets you set the initial value of the contract storage in the smart contract code in the ",(0,a.jsx)(n.code,{children:"__init__"})," function.\nFor example, this contract defines three storage variables and sets their initial values:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import smartpy as sp\n\n@sp.module\ndef main():\n    class MyList(sp.Contract):\n        def __init__(self):\n            self.data.ListOfIntegers = [1,2,3,4]\n            self.data.MyString = "hello"\n            self.data.MyInteger = 5\n'})}),"\n",(0,a.jsx)(n.p,{children:"Now you can compile and deploy the contract via the online IDE with these starting values."}),"\n",(0,a.jsxs)(n.p,{children:["If you want to deploy the contract with the Octez client, add a test to the contract and run the test with the command ",(0,a.jsx)(n.code,{children:"python MyContract.py"}),".\nOne of the files this command creates ends in ",(0,a.jsx)(n.code,{children:"storage.tz"})," and contains the Micheline value of the initial storage, as in this example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'(Pair {1; 2; 3; 4} (Pair 5 "hello"))\n'})}),"\n",(0,a.jsx)(n.p,{children:"Then you can use this Micheline value as the initial storage value for the contract:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"octez-client originate contract MyContract \\\n  transferring 0 from my_account \\\n  running MyContract.tz --init '(Pair { 1 ; 2 ; 3 ; 4 } \"start\" 0)' \\\n  --burn-cap 1\n"})}),"\n",(0,a.jsx)(n.h2,{id:"interacting-with-the-contract",children:"Interacting with the contract"}),"\n",(0,a.jsx)(n.p,{children:"When you have successfully originated the smart contract and it is included in a baked block, there are two ways to interact with it: through command lines or through a block explorer."}),"\n",(0,a.jsx)(n.h3,{id:"interacting-through-command-lines",children:"Interacting through command lines"}),"\n",(0,a.jsx)(n.p,{children:"The first method involves interacting with the contract's entry points using command lines."}),"\n",(0,a.jsxs)(n.p,{children:["For example, suppose you have a smart contract with an entrypoint called ",(0,a.jsx)(n.code,{children:"update_data"}),", which takes an integer as an argument to update some data in its storage. Here's how you might invoke this entrypoint:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"octez-client call CONTRACT_NAME from YOUR_ACCOUNT_ADDRESS \\\n             --arg 'New_Integer_Value' \\\n             --entrypoint update_data \\\n             --burn-cap FEE_LIMIT\n"})}),"\n",(0,a.jsx)(n.p,{children:"Where:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"CONTRACT_NAME"}),": Identifier or the address of the contract that you want to interact with."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"YOUR_ACCOUNT_ADDRESS"})," Your own account address that will initiate the transaction."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"--arg"}),":  Argument that you're passing to the entrypoint, in this case, an integer value. You need to format this according to the expected input in the contract's Michelson code."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"--entrypoint"}),": Method in the smart contract that you're calling."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"--burn-cap"}),":  The maximum fee you are willing to spend for this transaction to be included in the blockchain."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Here's an example with hypothetical values filled in:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"octez-client call KT1Vsw5kh4P1Vn... from tz1VSUr8wwNhLAzempoch5d6hLRiTh8Cjcjb \\\n             --arg '42' \\\n             --entrypoint update_data \\\n             --burn-cap 0.05\n"})}),"\n",(0,a.jsx)(n.p,{children:"Where:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"KT1Vsw5kh4P1Vn..."}),": Contract address."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"tz1VSUr8wwNhLAzempoch5d6hLRiTh8Cjcjb"}),": User's account address."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"'42'"}),": New integer value you wish to pass to the update_data entrypoint."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"0.05"}),": Maximum amount of tez you're willing to pay in fees."]}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["Always ensure that you check the documentation specific to the smart contract you are interacting with, as the expected arguments (",(0,a.jsx)(n.code,{children:"--arg"}),") and the name of the entrypoint (",(0,a.jsx)(n.code,{children:"--entrypoint"}),") can vary widely depending on the contract's design and purpose."]})}),"\n",(0,a.jsx)(n.h3,{id:"interacting-via-blockchain-explorers",children:"Interacting via blockchain explorers"}),"\n",(0,a.jsx)(n.p,{children:"A blockchain explorer is an efficient and user-friendly tool that enables you to interact with deployed contracts. In the Tezos ecosystem, there are two main blockchain explorers:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://better-call.dev/",children:"Better Call Dev"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://tzkt.io/",children:"TzKT"})}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"To interact with a contract, copy its address into one of these blockchain explorers. Below is the user interface for interacting with a contract through Better Call Dev:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"UI for Better Call Dev",src:t(26198).A+"",width:"2550",height:"1460"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},26198:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/better-call-afdcc1575d505219c566ef6dc1743e55.png"},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(96540);const a={},r=i.createContext(a);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);