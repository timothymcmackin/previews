"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6809],{81840:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"smart-contracts/data-types/complex-data-types","title":"Complex data types","description":"Tezos contracts support these complex data types.","source":"@site/docs/smart-contracts/data-types/complex-data-types.md","sourceDirName":"smart-contracts/data-types","slug":"/smart-contracts/data-types/complex-data-types","permalink":"/previews/docs/docmap-thumbnail/smart-contracts/data-types/complex-data-types","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1718596800000,"frontMatter":{"title":"Complex data types","authors":"Mathias Hiron (Nomadic Labs), Sasha Aldrick (TriliTech), Tim McMackin (TriliTech)","last_update":{"date":"17 June 2024"}},"sidebar":"documentationSidebar","previous":{"title":"Primitive data types","permalink":"/previews/docs/docmap-thumbnail/smart-contracts/data-types/primitive-data-types"},"next":{"title":"Cryptographic data types","permalink":"/previews/docs/docmap-thumbnail/smart-contracts/data-types/crypto-data-types"}}');var i=n(74848),a=n(28453);const r={title:"Complex data types",authors:"Mathias Hiron (Nomadic Labs), Sasha Aldrick (TriliTech), Tim McMackin (TriliTech)",last_update:{date:"17 June 2024"}},l=void 0,c={},o=[{value:"Pairs",id:"pairs",level:2},{value:"Right combs",id:"right-combs",level:3},{value:"Binary trees",id:"binary-trees",level:3},{value:"Implementation details",id:"implementation-details",level:3},{value:"Records",id:"records",level:2},{value:"Implementation details",id:"implementation-details-1",level:3},{value:"Options",id:"options",level:2},{value:"Using options instead of failures",id:"using-options-instead-of-failures",level:3},{value:"When not to use options",id:"when-not-to-use-options",level:3},{value:"Implementation details",id:"implementation-details-2",level:3},{value:"Big-maps and maps",id:"big-maps",level:2},{value:"Big-maps vs maps",id:"big-maps-vs-maps",level:3},{value:"Example contract using big-maps",id:"example-contract-using-big-maps",level:3},{value:"Implementation details",id:"implementation-details-3",level:3},{value:"Lists",id:"lists",level:2},{value:"Implementation details",id:"implementation-details-4",level:3},{value:"Sets",id:"sets",level:2},{value:"Implementation details",id:"implementation-details-5",level:3},{value:"Variants and Unions",id:"variants",level:2},{value:"Implementation details",id:"implementation-details-6",level:3},{value:"Lambdas",id:"lambdas",level:2},{value:"Implementation details",id:"implementation-details-7",level:3},{value:"Tickets",id:"tickets",level:2},{value:"Passing tickets",id:"passing-tickets",level:3},{value:"Ticket features",id:"ticket-features",level:3},{value:"Guaranteed origin",id:"guaranteed-origin",level:4},{value:"Immutability of the wrapped value",id:"immutability-of-the-wrapped-value",level:4},{value:"Splitting and joining tickets",id:"splitting-and-joining-tickets",level:4},{value:"Benefits of tickets used as tokens",id:"benefits-of-tickets-used-as-tokens",level:3},{value:"Operations on tickets",id:"operations-on-tickets",level:3},{value:"Implementation details",id:"implementation-details-8",level:3},{value:"Unit",id:"unit",level:2},{value:"Implementation details",id:"implementation-details-9",level:3}];function d(e){const t={a:"a",admonition:"admonition",annotation:"annotation",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",msub:"msub",p:"p",pre:"pre",semantics:"semantics",span:"span",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Tezos contracts support these complex data types.\nThe high-level languages may implement these data types slightly differently, but they all behave the same way in the compiled Michelson code:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#pairs",children:"Pairs"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#records",children:"Records"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#options",children:"Options"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#big-maps",children:"Big-maps and maps"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#lists",children:"Lists"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#sets",children:"Sets"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#variants",children:"Variants and Unions"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#lambdas",children:"Lambdas"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#tickets",children:"Tickets"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#unit",children:"Unit"})}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"This list is intended for general information for developers and is not intended to be comprehensive.\nFor a complete list of data types that are available, see the reference information for the language that you are using:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Michelson: ",(0,i.jsx)(t.a,{href:"https://tezos.gitlab.io/michelson-reference/#types",children:"Types"})]}),"\n",(0,i.jsxs)(t.li,{children:["LIGO: ",(0,i.jsx)(t.a,{href:"https://ligolang.org/docs/intro/introduction?lang=jsligo",children:"Introduction"})]}),"\n",(0,i.jsxs)(t.li,{children:["Archetype: ",(0,i.jsx)(t.a,{href:"https://archetype-lang.org/docs/reference/types",children:"Types"})]}),"\n",(0,i.jsxs)(t.li,{children:["SmartPy: ",(0,i.jsx)(t.a,{href:"https://smartpy.io/manual/introduction/overview",children:"Overview"})]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"pairs",children:"Pairs"}),"\n",(0,i.jsxs)(t.p,{children:["A pair is a complex type made of two other types.\nFor example, a pair of an ",(0,i.jsx)(t.code,{children:"int"})," and a ",(0,i.jsx)(t.code,{children:"string"})," can hold a value such as ",(0,i.jsx)(t.code,{children:'(42, "Hello")'}),".\nLanguages have instructions to create pairs and to extract the left or right value from a pair."]}),"\n",(0,i.jsx)(t.p,{children:"Pairs can be nested, which makes it possible to create more complex structures with many values of different types.\nThe two main ways to nest pars is by using right combs or binary trees:"}),"\n",(0,i.jsx)(t.h3,{id:"right-combs",children:"Right combs"}),"\n",(0,i.jsx)(t.p,{children:"The most common way to nest pairs on Tezos is to create a right comb.\nA right comb is a pair whose second element is a pair, whose second element is a pair, and so on."}),"\n",(0,i.jsxs)(t.p,{children:["For example, this right comb stores an int, a string, and a bool using nested pairs: ",(0,i.jsx)(t.code,{children:'{-42; {"Hello"; True}}'}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["To add another unit, the right value of the most nested pair becomes a pair, as in this example: ",(0,i.jsx)(t.code,{children:'{-42; {"Hello"; {True; 21}}}'}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["This is a way to create a Tuple (a sequence of elements of different types) using only pairs.\nBecause right combs are used often in Michelson, there are shorter ways to express them.\nFor example, the notation ",(0,i.jsx)(t.code,{children:'{42; "Hello"; True; 21}'})," is equivalent to ",(0,i.jsx)(t.code,{children:'{-42; {"Hello"; {True; 21}}}'}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"binary-trees",children:"Binary trees"}),"\n",(0,i.jsx)(t.p,{children:"Another way to use pairs to combine multiple values is to use a binary tree layout.\nIn this layout, both sides of the main pair contain a pair, then both sides of these pairs contain pairs, and so on."}),"\n",(0,i.jsxs)(t.p,{children:["Here is an example of a binary tree: ",(0,i.jsx)(t.code,{children:'{{-42; "Hello"}; {True; 21}}'})]}),"\n",(0,i.jsxs)(t.p,{children:["The binary tree layout is more efficient than a right comb when accessing arbitrary elements.\nFor example, to access the last element, you can get the second element of the main pair (",(0,i.jsx)(t.code,{children:"{True; 21}"}),") and the second element of that pair (",(0,i.jsx)(t.code,{children:"21"}),").\nIf the tree is balanced, the number of operations to get to any element is\n",(0,i.jsxs)(t.span,{className:"katex",children:[(0,i.jsx)(t.span,{className:"katex-mathml",children:(0,i.jsx)(t.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(t.semantics,{children:[(0,i.jsxs)(t.mrow,{children:[(0,i.jsx)(t.mi,{children:"O"}),(0,i.jsx)(t.mo,{stretchy:"false",children:"("}),(0,i.jsxs)(t.msub,{children:[(0,i.jsxs)(t.mrow,{children:[(0,i.jsx)(t.mi,{children:"log"}),(0,i.jsx)(t.mo,{children:"\u2061"})]}),(0,i.jsx)(t.mn,{children:"2"})]}),(0,i.jsx)(t.mo,{stretchy:"false",children:"("}),(0,i.jsx)(t.mi,{children:"s"}),(0,i.jsx)(t.mi,{children:"i"}),(0,i.jsx)(t.mi,{children:"z"}),(0,i.jsx)(t.mi,{children:"e"}),(0,i.jsx)(t.mo,{stretchy:"false",children:")"}),(0,i.jsx)(t.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(t.annotation,{encoding:"application/x-tex",children:"O(\\log_2 (size))"})]})})}),(0,i.jsx)(t.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(t.span,{className:"base",children:[(0,i.jsx)(t.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(t.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,i.jsx)(t.span,{className:"mopen",children:"("}),(0,i.jsxs)(t.span,{className:"mop",children:[(0,i.jsxs)(t.span,{className:"mop",children:["lo",(0,i.jsx)(t.span,{style:{marginRight:"0.01389em"},children:"g"})]}),(0,i.jsx)(t.span,{className:"msupsub",children:(0,i.jsxs)(t.span,{className:"vlist-t vlist-t2",children:[(0,i.jsxs)(t.span,{className:"vlist-r",children:[(0,i.jsx)(t.span,{className:"vlist",style:{height:"0.207em"},children:(0,i.jsxs)(t.span,{style:{top:"-2.4559em",marginRight:"0.05em"},children:[(0,i.jsx)(t.span,{className:"pstrut",style:{height:"2.7em"}}),(0,i.jsx)(t.span,{className:"sizing reset-size6 size3 mtight",children:(0,i.jsx)(t.span,{className:"mord mtight",children:"2"})})]})}),(0,i.jsx)(t.span,{className:"vlist-s",children:"\u200b"})]}),(0,i.jsx)(t.span,{className:"vlist-r",children:(0,i.jsx)(t.span,{className:"vlist",style:{height:"0.2441em"},children:(0,i.jsx)(t.span,{})})})]})})]}),(0,i.jsx)(t.span,{className:"mopen",children:"("}),(0,i.jsx)(t.span,{className:"mord mathnormal",children:"s"}),(0,i.jsx)(t.span,{className:"mord mathnormal",children:"i"}),(0,i.jsx)(t.span,{className:"mord mathnormal",children:"ze"}),(0,i.jsx)(t.span,{className:"mclose",children:"))"})]})})]}),", whereas for a right comb, it's ",(0,i.jsxs)(t.span,{className:"katex",children:[(0,i.jsx)(t.span,{className:"katex-mathml",children:(0,i.jsx)(t.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(t.semantics,{children:[(0,i.jsxs)(t.mrow,{children:[(0,i.jsx)(t.mi,{children:"O"}),(0,i.jsx)(t.mo,{stretchy:"false",children:"("}),(0,i.jsx)(t.mi,{children:"s"}),(0,i.jsx)(t.mi,{children:"i"}),(0,i.jsx)(t.mi,{children:"z"}),(0,i.jsx)(t.mi,{children:"e"}),(0,i.jsx)(t.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(t.annotation,{encoding:"application/x-tex",children:"O(size)"})]})})}),(0,i.jsx)(t.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(t.span,{className:"base",children:[(0,i.jsx)(t.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(t.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,i.jsx)(t.span,{className:"mopen",children:"("}),(0,i.jsx)(t.span,{className:"mord mathnormal",children:"s"}),(0,i.jsx)(t.span,{className:"mord mathnormal",children:"i"}),(0,i.jsx)(t.span,{className:"mord mathnormal",children:"ze"}),(0,i.jsx)(t.span,{className:"mclose",children:")"})]})})]}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"implementation-details",children:"Implementation details"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Michelson: ",(0,i.jsx)(t.a,{href:"https://tezos.gitlab.io/michelson-reference/#type-pair",children:"Pairs"})]}),"\n",(0,i.jsxs)(t.li,{children:["LIGO: ",(0,i.jsx)(t.a,{href:"https://ligolang.org/docs/language-basics/sets-lists-tuples#tuples",children:"Tuples"})]}),"\n",(0,i.jsxs)(t.li,{children:["SmartPy: ",(0,i.jsx)(t.a,{href:"https://smartpy.io/manual/data-types/tuples",children:"Tuples"})]}),"\n",(0,i.jsxs)(t.li,{children:["Archetype: ",(0,i.jsx)(t.a,{href:"https://archetype-lang.org/docs/language-basics/composite#tuple",children:"Composite types"}),", ",(0,i.jsx)(t.a,{href:"https://archetype-lang.org/docs/reference/types#tuple",children:"Tuple"})]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"records",children:"Records"}),"\n",(0,i.jsxs)(t.p,{children:["To make it easier to create type that combine multiple elements, high-level languages provide the ",(0,i.jsx)(t.code,{children:"record"})," data type.\nThe ",(0,i.jsx)(t.code,{children:"record"})," data type assigns a name to each element, which makes it much easier to get the element that you need because you don't have to remember the location of the element in the data.\nRecords are similar to Python dictionaries and JavaScript objects."]}),"\n",(0,i.jsx)(t.p,{children:"Different high-level languages represent records in different ways, but here is a simple abstract representation of a record definition:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"type person: record\n\t- age: nat\n\t- name: string\n\t- registered: bool\n"})}),"\n",(0,i.jsx)(t.p,{children:"Here is an abstract example of a value of that record type:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'person: record\n\t- age: 21\n\t- name: "Laura"\n\t- registered: True\n'})}),"\n",(0,i.jsx)(t.p,{children:"When you compile the high-level code, Michelson represents records with nested pairs and annotations."}),"\n",(0,i.jsx)(t.p,{children:'In most cases, you can nest records.\nFor example, if you have a record type named "address," you can add it as an element to the previous record like this:'}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"type person: record\n- age: nat\n- name: string\n- registered: bool\n- homeAddress: record\n\t- number: nat\n\t- street: string\n\t- city: string\n\t- zipcode: nat\n\t- country: string\n"})}),"\n",(0,i.jsx)(t.h3,{id:"implementation-details-1",children:"Implementation details"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Archetype: ",(0,i.jsx)(t.a,{href:"https://archetype-lang.org/docs/language-basics/composite#record",children:"Record"})]}),"\n",(0,i.jsxs)(t.li,{children:["LIGO: ",(0,i.jsx)(t.a,{href:"https://ligolang.org/docs/language-basics/maps-records#records",children:"Records"})]}),"\n",(0,i.jsxs)(t.li,{children:["SmartPy: ",(0,i.jsx)(t.a,{href:"https://smartpy.io/manual/data-types/records",children:"Records"})]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"options",children:"Options"}),"\n",(0,i.jsxs)(t.p,{children:["Options represent a value that may or may not be defined.\nPrimitive types do not provide the possibility of a null or empty value; for example, an ",(0,i.jsx)(t.code,{children:"int"})," type must always contain a number.\nIf you want to include the possibility that a value is unknown, undefined, or nonexistent, you can make a type into an option.\nFor example, an option based on an ",(0,i.jsx)(t.code,{children:"int"})," type can hold a number or no value at all.\nYou can create an ",(0,i.jsx)(t.code,{children:"option"})," type based on almost any other type."]}),"\n",(0,i.jsxs)(t.p,{children:["For example, an ",(0,i.jsx)(t.code,{children:"option"})," type based on an ",(0,i.jsx)(t.code,{children:"int"})," is denoted as ",(0,i.jsx)(t.code,{children:"option<int>"})," and can contain these values:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["An ",(0,i.jsx)(t.code,{children:"int"})," value, represented as ",(0,i.jsx)(t.code,{children:"Some(42)"})]}),"\n",(0,i.jsxs)(t.li,{children:["No value, represented as ",(0,i.jsx)(t.code,{children:"None"})]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["Each time that you manipulate the value within an ",(0,i.jsx)(t.code,{children:"option"})," you must check if it contains a value or not."]}),"\n",(0,i.jsx)(t.p,{children:"The features available for options are:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Creating an option that contains a given value (",(0,i.jsx)(t.code,{children:"SOME"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:["Creating an option that contains nothing (",(0,i.jsx)(t.code,{children:"NONE"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:["Testing if an option contains something or none (",(0,i.jsx)(t.code,{children:"IF_NONE"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:["Getting the value contained in an option (",(0,i.jsx)(t.code,{children:"IF_NONE"}),")"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"using-options-instead-of-failures",children:"Using options instead of failures"}),"\n",(0,i.jsx)(t.p,{children:"Options are used for operations that can't always provide a result, which allows the code to handle the situation without failing and leads to good programming practice."}),"\n",(0,i.jsxs)(t.p,{children:["Here are a few examples where an ",(0,i.jsx)(t.code,{children:"option"})," is used:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Converting an ",(0,i.jsx)(t.code,{children:"int"})," to a ",(0,i.jsx)(t.code,{children:"nat"})," returns an ",(0,i.jsx)(t.code,{children:"option"}),", which is ",(0,i.jsx)(t.code,{children:"None"})," if the ",(0,i.jsx)(t.code,{children:"int"})," is negative"]}),"\n",(0,i.jsxs)(t.li,{children:["Dividing (",(0,i.jsx)(t.code,{children:"EDIV"}),"), returns ",(0,i.jsx)(t.code,{children:"None"})," when trying to divide by zero"]}),"\n",(0,i.jsxs)(t.li,{children:["Extracting a portion of a ",(0,i.jsx)(t.code,{children:"string"})," or a ",(0,i.jsx)(t.code,{children:"bytes"})," value returns ",(0,i.jsx)(t.code,{children:"None"})," if the extract is beyond the bounds of the value"]}),"\n",(0,i.jsxs)(t.li,{children:["Fetching a value for a given key in a ",(0,i.jsx)(t.code,{children:"big-map"})," or ",(0,i.jsx)(t.code,{children:"map"})," returns ",(0,i.jsx)(t.code,{children:"None"})," if the entry doesn't exist"]}),"\n",(0,i.jsxs)(t.li,{children:["Fetching the contract that corresponds to an ",(0,i.jsx)(t.code,{children:"address"})," returns ",(0,i.jsx)(t.code,{children:"None"})," if the ",(0,i.jsx)(t.code,{children:"address"})," is not a contract"]}),"\n",(0,i.jsxs)(t.li,{children:["Unpacking ",(0,i.jsx)(t.code,{children:"bytes"})," returns ",(0,i.jsx)(t.code,{children:"None"})," if the data is not valid"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"when-not-to-use-options",children:"When not to use options"}),"\n",(0,i.jsxs)(t.p,{children:["Using an ",(0,i.jsx)(t.code,{children:"option"})," is convenient when you need it, but it makes the corresponding code harder to write and read and slightly slower and more costly."]}),"\n",(0,i.jsx)(t.p,{children:"When a value may be undefined only at the initial contract deployment, it may be more convenient and efficient to initialize the value instead of making it an option, as in these examples:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["For a ",(0,i.jsx)(t.code,{children:"timestamp"}),", consider initializing it with epoch: January 1st, 1970."]}),"\n",(0,i.jsxs)(t.li,{children:["For an ",(0,i.jsx)(t.code,{children:"address"}),", consider initializing it with the address of the owner of the contract.\nAlternatively (but harder to understand without comments), you can use the special null address, ",(0,i.jsx)(t.code,{children:'"tz1burnburnburnburnburnburnburjAYjjX"'}),", which does not correspond to an actual account"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"implementation-details-2",children:"Implementation details"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Michelson: ",(0,i.jsx)(t.a,{href:"https://tezos.gitlab.io/michelson-reference/#type-option",children:"Options"})]}),"\n",(0,i.jsxs)(t.li,{children:["LIGO: ",(0,i.jsx)(t.a,{href:"https://ligolang.org/docs/language-basics/unit-option-pattern-matching#optional-values",children:"Optional values"})]}),"\n",(0,i.jsxs)(t.li,{children:["SmartPy: ",(0,i.jsx)(t.a,{href:"https://smartpy.io/manual/data-types/options-and-variants",children:"Options and variants"})]}),"\n",(0,i.jsxs)(t.li,{children:["Archetype: ",(0,i.jsx)(t.a,{href:"https://archetype-lang.org/docs/reference/types#option%3CT%3E",children:"Options"})]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"big-maps",children:"Big-maps and maps"}),"\n",(0,i.jsx)(t.p,{children:"Smart contracts often need to store a database of records where each record is identified by a key and can be fetched quickly."}),"\n",(0,i.jsx)(t.p,{children:"For example, an NFT contract may store a database of NFTs, each identified by a unique numeric ID.\nFor each NFT it stores metadata, such as the current owner."}),"\n",(0,i.jsxs)(t.p,{children:["A ",(0,i.jsx)(t.code,{children:"big-map"})," is a key-value store that associates values to different keys.\nThis example big-map uses ",(0,i.jsx)(t.code,{children:"int"})," and ",(0,i.jsx)(t.code,{children:"string"})," types to associate numbers with their names:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'{\n\tElt 1 "One";\n\tElt 3 "Three";\n\tElt 12 "Twelve";\n\tElt 24 "Twenty four"\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The main operations available for ",(0,i.jsx)(t.code,{children:"big-maps"})," are:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Creating an empty ",(0,i.jsx)(t.code,{children:"big-map"})," (",(0,i.jsx)(t.code,{children:"EMPTY_BIG_MAP"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:["Checking if there is an entry for a given key (",(0,i.jsx)(t.code,{children:"MEM"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:["Accessing the entry associated with a given key (",(0,i.jsx)(t.code,{children:"GET"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:["Assigning an entry to a given key (",(0,i.jsx)(t.code,{children:"UPDATE"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:["Deleting the entry for a given key (",(0,i.jsx)(t.code,{children:"UPDATE"}),")"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"big-maps-vs-maps",children:"Big-maps vs maps"}),"\n",(0,i.jsxs)(t.p,{children:["Big-maps are a special type of ",(0,i.jsx)(t.code,{children:"map"})," type that is optimized so that it can contain very large amounts of data without necessarily causing issues with gas limits.\nThis is because the content of a big-map is lazily deserialized; only the entries that are manipulated by a contract are deserialized/reserialized, as opposed to maps and all the other data types, where all of the content is deserialized/reserialized for each call of the contract."]}),"\n",(0,i.jsx)(t.p,{children:"This makes big-maps more useful in practice than maps, because using maps can quickly cause gas consumption issues if the number of entries gets large."}),"\n",(0,i.jsx)(t.p,{children:"Maps support all the features of big-maps plus these:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Iterating through each element of the map, and applying some code to it (",(0,i.jsx)(t.code,{children:"ITER"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:["Getting the size (number of elements) of the map (",(0,i.jsx)(t.code,{children:"SIZE"}),")"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Furthermore, unlike big-maps, maps can be passed as parameters and included in records or big-maps.\nYou cannot pass big-maps as parameters or include them in records because doing so would require manipulating the serialized content of the big-map and defeat the purpose of big-maps."}),"\n",(0,i.jsx)(t.p,{children:"In general, developers use big-maps unless there is a good reason to use maps because big-maps tend to be more efficient as they get large, which future-proofs the contract.\nIf you choose to use a map, take precautions and optimize your code."}),"\n",(0,i.jsx)(t.h3,{id:"example-contract-using-big-maps",children:"Example contract using big-maps"}),"\n",(0,i.jsx)(t.p,{children:"Here is a table representing an example of a contract that uses two big-maps:"}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Storage"}),(0,i.jsx)("th",{children:"Entrypoint effects"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:[(0,i.jsx)("code",{children:"nextID"}),": ",(0,i.jsx)("code",{children:"int"}),":"]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("code",{children:"tokens"}),": ",(0,i.jsx)("code",{children:"big-map"}),":",(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:[(0,i.jsx)("code",{children:"tokenID"}),": ",(0,i.jsx)("code",{children:"int"})]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("code",{children:"owner"}),": ",(0,i.jsx)("code",{children:"address"})]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("code",{children:"author"}),": ",(0,i.jsx)("code",{children:"address"})]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("code",{children:"metadata"}),": ",(0,i.jsx)("code",{children:"string"})]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("code",{children:"price"}),": ",(0,i.jsx)("code",{children:"tez"})]})]})]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("code",{children:"ledger"}),": ",(0,i.jsx)("code",{children:"big-map"}),(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:[(0,i.jsx)("code",{children:"key"}),": ",(0,i.jsx)("code",{children:"address"})]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("code",{children:"value"}),": ",(0,i.jsx)("code",{children:"tez"})]})]})]})]})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:[(0,i.jsx)("code",{children:"buy(tokenID)"}),(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:["Checks that ",(0,i.jsx)("code",{children:"tokens[tokenID] exists"})]}),(0,i.jsx)("li",{children:"Check that the amount transferred is correct"}),(0,i.jsx)("li",{children:"Send 5% of the price to the author of the token"}),(0,i.jsxs)("li",{children:["If ",(0,i.jsx)("code",{children:"ledger[owner]"})," doesn\u2019t exist, create it with ",(0,i.jsx)("code",{children:"value=0"})]}),(0,i.jsx)("li",{children:"Add the price minus 5% to ledger[owner].value"}),(0,i.jsx)("li",{children:"Replace owner with the caller in the token metadata"}),(0,i.jsx)("li",{children:"Increase price by 10% in the token"})]})]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("code",{children:"mint(metadata, price)"}),(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:["Create a new entry in tokens, with key ",(0,i.jsx)("code",{children:"nextID"})]}),(0,i.jsx)("li",{children:"Set owner and author to the address of the caller"}),(0,i.jsx)("li",{children:"Set metadata and price to input values"}),(0,i.jsxs)("li",{children:["Increment ",(0,i.jsx)("code",{children:"nextID"})]})]})]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("code",{children:"claim()"}),(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:["Verify that ",(0,i.jsx)("code",{children:"ledger[caller]"})," exists"]}),(0,i.jsxs)("li",{children:["Create a transaction to send ",(0,i.jsx)("code",{children:"ledger[caller].value"})," to caller"]}),(0,i.jsxs)("li",{children:["Delete ",(0,i.jsx)("code",{children:"ledger[caller]"})]})]})]})]})})]})})]}),"\n",(0,i.jsx)(t.h3,{id:"implementation-details-3",children:"Implementation details"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Michelson: ",(0,i.jsx)(t.a,{href:"https://tezos.gitlab.io/michelson-reference/#type-big_map",children:"Big-maps"})]}),"\n",(0,i.jsxs)(t.li,{children:["Archetype: ",(0,i.jsx)(t.a,{href:"https://archetype-lang.org/docs/reference/instructions/asset",children:"Assets"}),", ",(0,i.jsx)(t.a,{href:"https://archetype-lang.org/docs/language-basics/container#map",children:"Map"})]}),"\n",(0,i.jsxs)(t.li,{children:["LIGO: ",(0,i.jsx)(t.a,{href:"https://ligolang.org/docs/language-basics/maps-records#maps",children:"Maps"}),", ",(0,i.jsx)(t.a,{href:"https://ligolang.org/docs/language-basics/maps-records#big-maps",children:"Big-maps"})]}),"\n",(0,i.jsxs)(t.li,{children:["SmartPy: ",(0,i.jsx)(t.a,{href:"https://smartpy.io/manual/data-types/lists-sets-and-maps#maps",children:"Maps"})]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"lists",children:"Lists"}),"\n",(0,i.jsx)(t.p,{children:"Lists can store and iterate through values of the same type.\nFor example, they can do these operations:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Inserting an element at the beginning of a list (",(0,i.jsx)(t.code,{children:"CONS"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:["Getting the first element and the rest of a list (",(0,i.jsx)(t.code,{children:"IF_CONS"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:["Iterating through a list (",(0,i.jsx)(t.code,{children:"ITER"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:["Getting the number of items in a list (",(0,i.jsx)(t.code,{children:"SIZE"}),")"]}),"\n"]}),"\n",(0,i.jsx)(t.admonition,{title:"High-level language list methods",type:"note",children:(0,i.jsx)(t.p,{children:"Some high level languages may offer additional features such as getting an extract of a list.\nRefer to the language documentation to see what is supported."})}),"\n",(0,i.jsx)(t.admonition,{title:"List security considerations",type:"warning",children:(0,i.jsx)(t.p,{children:"To prevent attacks, make sure that the number of elements in a list can't be increased arbitrarily.\nAn attacker could make the list increase and cause problems.\nIn general, use big-maps to store large amounts of data."})}),"\n",(0,i.jsx)(t.h3,{id:"implementation-details-4",children:"Implementation details"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Michelson: ",(0,i.jsx)(t.a,{href:"https://tezos.gitlab.io/michelson-reference/#type-list",children:"Lists"})]}),"\n",(0,i.jsxs)(t.li,{children:["SmartPy: ",(0,i.jsx)(t.a,{href:"https://smartpy.io/manual/data-types/lists-sets-and-maps#lists",children:"List"})]}),"\n",(0,i.jsxs)(t.li,{children:["Archetype: ",(0,i.jsx)(t.a,{href:"https://archetype-lang.org/docs/language-basics/container#list",children:"List"})]}),"\n",(0,i.jsxs)(t.li,{children:["LIGO: ",(0,i.jsx)(t.a,{href:"https://ligolang.org/docs/reference/list-reference",children:"List"})]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"sets",children:"Sets"}),"\n",(0,i.jsxs)(t.p,{children:["Like lists, sets contain elements of the same data type, but in sets, each element can be present only once.\nSets are ordered, and the order is the natural order of the values in the set; see ",(0,i.jsx)(t.a,{href:"/smart-contracts/logic/comparing",children:"Comparing values"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"The main operations available on sets are:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Creating an empty set (",(0,i.jsx)(t.code,{children:"EMPTY_SET"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:["Adding an element to the set (",(0,i.jsx)(t.code,{children:"UPDATE"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:["Removing an element from the set (",(0,i.jsx)(t.code,{children:"UPDATE"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:["Checking if an element is present in the set (",(0,i.jsx)(t.code,{children:"MEM"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:["Iterating through the set in the order of the value of the elements (",(0,i.jsx)(t.code,{children:"ITER"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:["Getting the number of items in the set (",(0,i.jsx)(t.code,{children:"SIZE"}),")"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"implementation-details-5",children:"Implementation details"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Michelson: ",(0,i.jsx)(t.a,{href:"https://tezos.gitlab.io/active/michelson.html#operations-on-sets",children:"Operations on sets"})]}),"\n",(0,i.jsxs)(t.li,{children:["Archetype: ",(0,i.jsx)(t.a,{href:"https://archetype-lang.org/docs/language-basics/container#set",children:"Set"})]}),"\n",(0,i.jsxs)(t.li,{children:["SmartPy: ",(0,i.jsx)(t.a,{href:"https://smartpy.io/manual/data-types/lists-sets-and-maps#sets",children:"Set"})]}),"\n",(0,i.jsxs)(t.li,{children:["LIGO: ",(0,i.jsx)(t.a,{href:"https://ligolang.org/docs/reference/set-reference",children:"Set"})]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"variants",children:"Variants and Unions"}),"\n",(0,i.jsxs)(t.p,{children:["A variant (or union) can hold values of multiple types.\nFor example, a variant can hold either an ",(0,i.jsx)(t.code,{children:"int"})," or a ",(0,i.jsx)(t.code,{children:"string"}),"."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"When you use a variant, you can check which of the types it holds and run corresponding code."}),"\n",(0,i.jsx)(t.li,{children:"Variants are used internally as a way to implement entrypoints"}),"\n",(0,i.jsx)(t.li,{children:"Some high-level languages use variants to implement enumerations, which is a type that has a list of valid named values."}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"implementation-details-6",children:"Implementation details"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Michelson: ",(0,i.jsx)(t.a,{href:"https://tezos.gitlab.io/michelson-reference/#type-or",children:"Or"})]}),"\n",(0,i.jsxs)(t.li,{children:["LIGO: ",(0,i.jsx)(t.a,{href:"https://ligolang.org/docs/language-basics/unit-option-pattern-matching#variant-types",children:"Variant types"})]}),"\n",(0,i.jsxs)(t.li,{children:["SmartPy: ",(0,i.jsx)(t.a,{href:"https://smartpy.io/manual/data-types/options-and-variants",children:"Options and variants"})]}),"\n",(0,i.jsxs)(t.li,{children:["Archetype: ",(0,i.jsx)(t.a,{href:"https://archetype-lang.org/docs/language-basics/composite#enum",children:"Enum"})]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"lambdas",children:"Lambdas"}),"\n",(0,i.jsx)(t.p,{children:"A lambda is a piece of code that is also a value.\nIt can be stored or passed as a parameter to an entrypoint."}),"\n",(0,i.jsx)(t.p,{children:"The code of a lambda takes parameters and returns a value but it has no side effects.\nUnlike other code, it doesn't have access to the contract storage and cannot modify the storage."}),"\n",(0,i.jsx)(t.p,{children:"Here are some common uses for lambdas:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Lambdas allow you to reuse code in multiple places when the language does not support reuse.\nIn high-level languages, you can reuse code with functions or similar structures, but in Michelson, you may need to use a lambda for the same purpose."}),"\n",(0,i.jsx)(t.li,{children:"Lambdas can make parts of a contract upgradeable.\nFor example, the contact can store some of its logic in a lambda and an admin can call an entrypoint to change the lambda to change how the contract works.\nNote that the ability to upgrade the contract can cause users to worry about the trustworthiness of the contract."}),"\n",(0,i.jsx)(t.li,{children:"You can use lambdas to implement a generic multi-sig or DAO contract where a proposal takes the form of a lambda that performs some action and people vote on whether to execute the action or not."}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"implementation-details-7",children:"Implementation details"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Michelson: ",(0,i.jsx)(t.a,{href:"https://tezos.gitlab.io/michelson-reference/#type-lambda",children:"Lambdas"})]}),"\n",(0,i.jsxs)(t.li,{children:["Archetype: ",(0,i.jsx)(t.a,{href:"https://archetype-lang.org/docs/reference/expressions/builtins#apply_lambda%28f%20:%20lambda%3CA%20*%20T,%20R%3E,%20x%20:%20A%29",children:"apply_lambda"})]}),"\n",(0,i.jsxs)(t.li,{children:["SmartPy: ",(0,i.jsx)(t.a,{href:"https://smartpy.io/manual/syntax/lambdas",children:"Lambdas"})]}),"\n",(0,i.jsxs)(t.li,{children:["LIGO: ",(0,i.jsx)(t.a,{href:"https://ligolang.org/docs/language-basics/functions#anonymous-functions-aka-lambdas",children:"Anonymous functions"})]}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://opentezos.com/smart-contracts/simplified-contracts/#dao-decentralized-autonomous-organization",children:"Simplified DAO contract"})}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"tickets",children:"Tickets"}),"\n",(0,i.jsx)(t.p,{children:"A ticket is a data type that includes security mechanisms that make it suitable for issuing new tokens or granting portable permissions.\nTickets cannot be duplicated, so a single contract is always in control of a ticket.\nIn this way, a ticket can represent control over something or permission to do something."}),"\n",(0,i.jsx)(t.p,{children:"A ticket contains three pieces of information:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["The address of the contract that created it, called the ",(0,i.jsx)(t.em,{children:"ticketer"})]}),"\n",(0,i.jsxs)(t.li,{children:["Some data with a type and value assigned by the contract, called the ",(0,i.jsx)(t.em,{children:"wrapped value"})," or the ",(0,i.jsx)(t.em,{children:"payload"})," of the ticket"]}),"\n",(0,i.jsx)(t.li,{children:"An amount in the form of a natural number"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:'Tickets have a type, which is based on the type of the data.\nFor example, a ticket with a payload of a string value is referred to as a "string ticket."'}),"\n",(0,i.jsx)(t.p,{children:"The ticket's information is public and can be read by any contract that holds the ticket."}),"\n",(0,i.jsx)(t.h3,{id:"passing-tickets",children:"Passing tickets"}),"\n",(0,i.jsx)(t.p,{children:"Contracts can pass tickets to entrypoints to change which contract is in control of the ticket.\nIf contract A passes a ticket to contract B, contract A loses all access to the ticket.\nContracts can pass tickets to other contracts via entrypoints accepting a ticket of the correct type; contracts can also pass tickets to user accounts."}),"\n",(0,i.jsx)(t.h3,{id:"ticket-features",children:"Ticket features"}),"\n",(0,i.jsx)(t.p,{children:"There are three main features at the core of tickets, each associated with one of its three pieces of information:"}),"\n",(0,i.jsx)(t.h4,{id:"guaranteed-origin",children:"Guaranteed origin"}),"\n",(0,i.jsx)(t.p,{children:"The ticketer address always refers to the contract that created the ticket.\nContracts can't change the ticketer address or create tickets that reference other contracts as the creator."}),"\n",(0,i.jsx)(t.h4,{id:"immutability-of-the-wrapped-value",children:"Immutability of the wrapped value"}),"\n",(0,i.jsx)(t.p,{children:"The data stored in a ticket (the wrapped value) can't be changed after the creation of the ticket, even by the contract that created it."}),"\n",(0,i.jsx)(t.h4,{id:"splitting-and-joining-tickets",children:"Splitting and joining tickets"}),"\n",(0,i.jsx)(t.p,{children:"The contract that creates the ticket sets the initial amount to any natural number.\nFrom then on, contracts that control tickets can change them in the following ways:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"SPLIT_TICKET"}),": A contract splits a ticket into two tickets.\nBoth new tickets have the same ticketer address and payload, but the amount of the initial ticket is split between the two.\nThe initial ticket is destroyed."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"JOIN_TICKETS"}),": A contract merges two tickets into a single ticket.\nThe tickets must have the same ticketer address and payload.\nThe new ticket has the same ticketer address and payload as the originals, and its amount is the sum of the amounts of the joined tickets.\nThe two initial tickets are destroyed."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"For example, a contract can create a single ticket with a large amount and send it to another contract.\nThe other contract can split the ticket and send the resulting tickets to other contracts, which can split and join the ticket.\nEventually, many contracts may have a ticket that was split from the original or one of its descendants.\nThe ticketer address and payload stays the same for all of these tickets and the sum of the amounts is always the same as the amount of the original ticket."}),"\n",(0,i.jsx)(t.admonition,{title:"Differentiating tickets",type:"note",children:(0,i.jsx)(t.p,{children:"Because the only identifying information of a ticket is the address of the contract that created it and its payload, it is possible to create multiple indistinguishable tickets.\nFor example, a contract can create multiple tickets with the same payload.\nAfter other contracts split and join these tickets, there is no on-chain way to tell which descendant ticket can from which original ticket.\nFor this reason, your code should verify the address of the contract that mints tickets before trusting them."})}),"\n",(0,i.jsx)(t.h3,{id:"benefits-of-tickets-used-as-tokens",children:"Benefits of tickets used as tokens"}),"\n",(0,i.jsxs)(t.p,{children:["The key benefit of ",(0,i.jsx)(t.code,{children:"tickets"})," is that they continue existing independently of the contract that issued them.\nThis is very different from how tokens are usually managed, such as tokens that use the FA 1.2 or FA 2 standards.\nSuch tokens are fully under the control of the issuing contract; for example, transferring such a token may only be done by calling the smart contract that issued it.\nWrapping can be used as a way to work around this, but this is not technically transferring the token itself.\nThis helps bring extra trust in the value of the tokens represented by tickets, because there is no risk of the tokens suddenly becoming unusable if the issuing contract fails.\nTickets increase the decentralization of tokens and make them behave more like the native tez token, but with many more features and additional trust."]}),"\n",(0,i.jsx)(t.h3,{id:"operations-on-tickets",children:"Operations on tickets"}),"\n",(0,i.jsx)(t.p,{children:"Contracts can run these operations on tickets:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Creating a new ticket with a given content and amount, and the current contract as the ticketer (",(0,i.jsx)(t.code,{children:"TICKET"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:["Reading a ticket, which returns the three values contained in the ticket plus the ticket itself (",(0,i.jsx)(t.code,{children:"READ_TICKET"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:["Splitting a ticket into two tickets with the same content and ticketer, but splitting the amount (",(0,i.jsx)(t.code,{children:"SPLIT_TICKET"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:["Joining two tickets that have the same content and ticketer into a new ticket with the sum of the amounts (",(0,i.jsx)(t.code,{children:"JOIN_TICKETS"}),")"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"implementation-details-8",children:"Implementation details"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Michelson: ",(0,i.jsx)(t.a,{href:"https://tezos.gitlab.io/michelson-reference/#type-ticket",children:"Tickets"})]}),"\n",(0,i.jsxs)(t.li,{children:["LIGO: ",(0,i.jsx)(t.a,{href:"https://ligolang.org/docs/reference/current-reference#tickets",children:"Tickets"})]}),"\n",(0,i.jsxs)(t.li,{children:["Archetype: ",(0,i.jsx)(t.a,{href:"https://archetype-lang.org/docs/reference/expressions/builtins/#create_ticket%28s%20:%20T,%20n%20:%20nat%29",children:"create_ticket and related"})]}),"\n",(0,i.jsxs)(t.li,{children:["SmartPy: ",(0,i.jsx)(t.a,{href:"https://smartpy.io/manual/data-types/tickets",children:"Tickets"})]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"unit",children:"Unit"}),"\n",(0,i.jsxs)(t.p,{children:["In Tezos, the ",(0,i.jsx)(t.code,{children:"unit"})," type contains a single value that holds no information.\nSmart contracts use unit values as placeholders where a variable is required but no other information is needed.\nIt is the input type of functions taking no input, the output type of functions producing no output, and the storage type of contracts storing no information."]}),"\n",(0,i.jsxs)(t.p,{children:["For example, if a LIGO entrypoint receives no parameter, the data type of the entrypoint's parameter is ",(0,i.jsx)(t.code,{children:"unit"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-jsligo",children:"@entry\nconst myentrypoint = (_unusedParameter: unit, store: storageType): returnType => {\n  // ...\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Similarly, if you call this entrypoint with the Octez client and omit the ",(0,i.jsx)(t.code,{children:"--arg"})," argument to pass no parameter, the client passes unit in the background."]}),"\n",(0,i.jsxs)(t.p,{children:["Unit is a concept that Tezos inherits from OCaml; see ",(0,i.jsx)(t.a,{href:"https://ocaml.org/docs/tour-of-ocaml#side-effects-and-the-unit-type",children:"Side-Effects and the unit Type"})," in the OCaml documentation."]}),"\n",(0,i.jsx)(t.h3,{id:"implementation-details-9",children:"Implementation details"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Michelson: ",(0,i.jsx)(t.a,{href:"https://tezos.gitlab.io/michelson-reference/#type-unit",children:"Unit"})]}),"\n",(0,i.jsxs)(t.li,{children:["LIGO: ",(0,i.jsx)(t.a,{href:"https://ligolang.org/docs/next/data-types/variants#unit",children:"Unit"})]}),"\n",(0,i.jsxs)(t.li,{children:["Archetype: ",(0,i.jsx)(t.a,{href:"https://archetype-lang.org/docs/reference/types/#unit",children:"Unit"})]}),"\n",(0,i.jsxs)(t.li,{children:["SmartPy: ",(0,i.jsx)(t.a,{href:"https://smartpy.io/manual/data-types/unit",children:"Unit"})]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var s=n(96540);const i={},a=s.createContext(i);function r(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);