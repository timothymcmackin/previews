"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1873],{4832:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"unity/scenes","title":"Unity SDK tutorial scenes","description":"The SDK includes tutorial scenes that demonstrate how to use the SDK.","source":"@site/docs/unity/scenes.md","sourceDirName":"unity","slug":"/unity/scenes","permalink":"/previews/docs/docmap-thumbnail/unity/scenes","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1730696400000,"frontMatter":{"title":"Unity SDK tutorial scenes","sidebar_label":"Tutorial scenes","authors":"Tim McMackin","last_update":{"date":"4 November 2024"}}}');var s=t(74848),i=t(28453);const a={title:"Unity SDK tutorial scenes",sidebar_label:"Tutorial scenes",authors:"Tim McMackin",last_update:{date:"4 November 2024"}},r=void 0,c={},l=[{value:"Setup instructions",id:"setup-instructions",level:2},{value:"Tutorials scene",id:"tutorials-scene",level:2},{value:"Wallet Connection scene",id:"wallet-connection-scene",level:2},{value:"ContractAndMinting scene",id:"contractandminting-scene",level:2},{value:"Transfer scene",id:"transfer-scene",level:2},{value:"IPFSUpload scene",id:"ipfsupload-scene",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"The SDK includes tutorial scenes that demonstrate how to use the SDK."}),"\n",(0,s.jsxs)(n.p,{children:["Before using any of the scenes, install a Tezos-compatible wallet on a mobile device and get some test tez tokens that you can use to pay transaction fees.\nFor instructions, see ",(0,s.jsx)(n.a,{href:"/developing/wallet-setup",children:"Installing and funding a wallet"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"setup-instructions",children:"Setup instructions"}),"\n",(0,s.jsxs)(n.p,{children:["After you have installed the SDK according to the instructions in the ",(0,s.jsx)(n.a,{href:"/unity/quickstart",children:"Quickstart"}),", you can import the tutorial scenes from the Package Manager panel:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"In the Package Manager panel, click the Tezos Unity SDK package."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["In the package information, go to the ",(0,s.jsx)(n.strong,{children:"Samples"})," tab."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Under ",(0,s.jsx)(n.strong,{children:"Tutorials"}),", click ",(0,s.jsx)(n.strong,{children:"Import"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["In the Project panel, expand ",(0,s.jsx)(n.strong,{children:"Assets > Samples > Tezos Unity SDK > [SDK version number] > Tutorials"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Add the tutorial scenes to the build settings:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Click ",(0,s.jsx)(n.strong,{children:"File > Build Settings"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Drag these scenes from the Project panel to the ",(0,s.jsx)(n.strong,{children:"Scenes in Build"})," list:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Tutorials/ContractAndMinting/_ContractAndMinting"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Tutorials/IPFSUpload/_IPFSUpload"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Tutorials/TransferToken/_TransferToken"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Tutorials/WalletConnection/_WalletConnection"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The Build Settings window looks like this:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"The Build Settings window, showing the tutorial scenes that are included in the build",src:t(52693).A+"",width:"972",height:"283"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Close the Build Settings window."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Optional: To use the IPFSUpload scene, set up your Pinata key as described in ",(0,s.jsx)(n.a,{href:"#ipfsupload-scene",children:"IPFSUpload scene"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["In the Tutorials folder, double-click the ",(0,s.jsx)(n.strong,{children:"_Tutorials"})," scene."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Click the ",(0,s.jsx)(n.strong,{children:"Play"})," button to start the scene."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The Tutorials scene shows links to the other tutorial scenes.\nClick a link to run a scene.\nFor more information about these scenes, see the sections below."}),"\n",(0,s.jsx)(n.h2,{id:"tutorials-scene",children:"Tutorials scene"}),"\n",(0,s.jsx)(n.p,{children:"This scene includes buttons that link to the other scenes."}),"\n",(0,s.jsx)(n.h2,{id:"wallet-connection-scene",children:"Wallet Connection scene"}),"\n",(0,s.jsx)(n.p,{children:"This scene shows how to use the TezosAuthenticator prefab to connect to a user's wallet and get information about their account."}),"\n",(0,s.jsxs)(n.p,{children:["The scene uses the platform type to determine how to connect to a user's wallet.\nIn the TezosAuthenticator ",(0,s.jsx)(n.code,{children:"SetPlatformFlags"})," function, it checks what platform it is running on:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"private void SetPlatformFlags()\n{\n    _isMobile = Application.platform == RuntimePlatform.IPhonePlayer ||\n                        Application.platform == RuntimePlatform.Android;\n    _isWebGL = Application.platform == RuntimePlatform.WebGLPlayer;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then based on the platform, it shows different buttons for different connection types:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"// Activate deepLinkButton when on mobile or WebGL, but not authenticated\ndeepLinkButton.SetActive(_isMobile || _isWebGL);\n\n// Activate socialLoginButton only when on WebGL and not authenticated\nsocialLoginButton.SetActive(_isWebGL);\n\n// Activate qrCodePanel only on standalone and not authenticated\nqrCodePanel.SetActive(!_isMobile && !_isWebGL);\n"})}),"\n",(0,s.jsx)(n.p,{children:"These buttons correspond to the ways that the SDK can connect to wallets:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"For mobile and WebGL platforms, the scene shows a button that links directly to a wallet app, such as a browser plugin or mobile app"}),"\n",(0,s.jsx)(n.li,{children:"For WebGL platforms, the scene shows a button that links to social wallets, such as Kukai"}),"\n",(0,s.jsx)(n.li,{children:"For standalone platforms, the scene shows a QR code that you can scan in any Tezos-compatible wallet app"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This picture of the Wallet Connection scene in standalone mode shows the QR code automatically generated by the TezosAuthenticator prefab:"}),"\n",(0,s.jsx)("img",{src:"/img/unity/unity-walletconnection-scene-qrcode-unconnected.png",alt:"The start of the WalletConnection scene, with no account information, showing a QR code",style:{width:300}}),"\n",(0,s.jsx)(n.p,{children:"This picture of the Wallet Connection scene in WebGL mode shows the deep link and social connection buttons:"}),"\n",(0,s.jsx)("img",{src:"/img/unity/unity-walletconnection-scene-webgl-unconnected.png",alt:"The start of the WalletConnection scene, with no account information, showing deep link and social connection buttons",style:{width:300}}),"\n",(0,s.jsxs)(n.p,{children:["These UI elements call the ",(0,s.jsx)(n.code,{children:"Wallet.Connect()"})," method with the ",(0,s.jsx)(n.code,{children:"walletProvider"})," parameter set to ",(0,s.jsx)(n.code,{children:"WalletProviderType.beacon"})," for the direct links or QR code connections and the ",(0,s.jsx)(n.code,{children:"walletProvider"})," parameter set to ",(0,s.jsx)(n.code,{children:"WalletProviderType.kukai"})," for the social wallet connections."]}),"\n",(0,s.jsx)(n.p,{children:"After the user approves the connection in the wallet, the scene shows the address of the connected account and its balance, as in the following picture.\nAt the bottom of the scene there is a logout button that closes the connection."}),"\n",(0,s.jsx)("img",{src:"/img/unity/unity-walletconnection-scene-connected.png",alt:"The Wallet Connection scene with a connected account",style:{width:300}}),"\n",(0,s.jsx)(n.h2,{id:"contractandminting-scene",children:"ContractAndMinting scene"}),"\n",(0,s.jsx)(n.p,{children:"This scene shows how to deploy a smart contract to Tezos and create tokens with it."}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.em,{children:"smart contract"})," is a program stored on the blockchain.\nSmart contracts can do many things, but the main thing that game developers use them for is to manage ",(0,s.jsx)(n.em,{children:"tokens"}),", which are assets that are stored on Tezos.\nIn this case, the smart contract keeps track of tokens, their metadata, and who owns them."]}),"\n",(0,s.jsxs)(n.p,{children:["The SDK comes with a sample smart contract that allows a Unity project to create tokens.\nYou can customize these tokens, give them to users, and treat them like the players' in-game inventories.\nThe Michelson source code of the built-in contract is in the ",(0,s.jsx)(n.code,{children:"Resources/Contracts"})," folder of the SDK, but it isn't very human-readable.\nFor a list of the entrypoints in the contract, see TokenContract object.\nFor an example of a deployed contract, see ",(0,s.jsx)(n.a,{href:"https://ghostnet.tzkt.io/KT1Nhr9Bmhy7kcUmezRxbbDybh5buNnrVLTY/entrypoints",children:"https://ghostnet.tzkt.io/KT1Nhr9Bmhy7kcUmezRxbbDybh5buNnrVLTY/entrypoints"}),"."]}),"\n",(0,s.jsx)(n.p,{children:'Like the Wallet Connection scene, you must first connect to a wallet.\nThen the scene shows the address of the connected account and enables the "Deploy Contract" and "Mint Token" buttons.'}),"\n",(0,s.jsx)(n.p,{children:'When you click "Deploy Contract," your connected wallet prompts you to confirm the transaction and pay the transaction fees.\nBecause you are connected to the test network, these are worthless testnet tokens and not real currency.\nThis process can take some time.'}),"\n",(0,s.jsxs)(n.p,{children:["The scene calls the ",(0,s.jsx)(n.code,{children:"TokenContract.Deploy()"})," method to deploy the contract to Tezos."]}),"\n",(0,s.jsxs)(n.p,{children:["When you confirm the transaction in the wallet app, you must wait for the contract to be deployed on Tezos.\nThe log in the Console panel shows a message that looks like ",(0,s.jsx)(n.code,{children:"Received operation with hash oopFjLYGTbZTEFsTh4p1YPnHR1Up1SNnvE5xk2SRaGH6PZ4ry56"}),", which is the address of the Tezos transaction that deployed the contract.\nThis process can take a few minutes."]}),"\n",(0,s.jsx)(n.p,{children:"For example, this is what the transaction looks like in the Temple wallet:"}),"\n",(0,s.jsx)("img",{src:"/img/unity/unity-contract-scene-origination-temple.png",alt:"Approving the contract deployment transaction in the wallet app",style:{width:300}}),"\n",(0,s.jsxs)(n.p,{children:["When the contract is deployed, the project updates to show the address of the contract, which starts with ",(0,s.jsx)(n.code,{children:"KT1"}),".\nThe project remembers the contract if you reload the scene later.\nTo see information about the deployed contract, copy this address and put it into a block explorer such as ",(0,s.jsx)(n.a,{href:"https://better-call.dev/",children:"Better Call Dev"})," or ",(0,s.jsx)(n.a,{href:"https://tzkt.io/",children:"tzkt.io"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"The block explorer shows information about the contract, including recent transactions, its source code, and the tokens it controls and their owners.\nCurrently, the block explorer shows only the origination transaction, which deployed the contract:"}),"\n",(0,s.jsx)("img",{src:"/img/unity/unity-contract-scene-origination.png",alt:"The newly originated contract on the block explorer",style:{width:500}}),"\n",(0,s.jsx)(n.p,{children:'Now you can go back to the Simulation panel in the Unity Editor and click "Mint Token."\nThe project gets approval in your wallet and then sends a transaction to the smart contract to create (mint) a token.\nLike the deployment transaction, it can take time for the transaction to complete and be confirmed on Tezos.'}),"\n",(0,s.jsx)(n.p,{children:'When the mint transaction is complete, the "Tokens Count" text in the scene updates to show the number of token types that have been minted with this contract.\nThe mint process creates a random number of tokens with this type.\nYour tokens can have a quantity of 1 to make them unique or a larger quantity to represent an amount of something.'}),"\n",(0,s.jsx)(n.p,{children:"You can also see the mint transaction on the block explorer.\nBecause the contract follows the FA2 standard for tokens, the block explorer also shows the tokens and information about them, as in this picture:"}),"\n",(0,s.jsx)("img",{src:"/img/unity/unity-contract-scene-token.png",alt:"The new token on the block explorer",style:{width:300}}),"\n",(0,s.jsxs)(n.p,{children:["The tokens that this scene creates have randomly generated metadata.\nTo change the metadata, open the ",(0,s.jsx)(n.code,{children:"TezosSDK/Examples/Contract/Scripts/MintToken.cs"})," file.\nThe file's ",(0,s.jsx)(n.code,{children:"HandleMint"})," function creates the token by generating random numbers, creating a metadata object for the token, and using the ",(0,s.jsx)(n.code,{children:"TokenContract.Mint()"})," method to send the mint transaction to the contract:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public void HandleMint()\n{\n    var tokenMetadata = CreateRandomTokenMetadata();\n    var destinationAddress = TezosManager.Instance.Wallet.GetWalletAddress();\n    var randomAmount = new Random().Next(1, 1024);\n\n    TezosManager.Instance.Tezos.TokenContract.Mint(OnTokenMinted, tokenMetadata, destinationAddress, randomAmount);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In your projects, you can set the metadata to store information about what the token represents.\nFor more information about working with tokens, see ",(0,s.jsx)(n.a,{href:"/unity/managing-tokens",children:"Managing tokens"})," and the tutorials ",(0,s.jsx)(n.a,{href:"/tutorials/create-nfts",children:"Create NFTs from a web application"})," and ",(0,s.jsx)(n.a,{href:"/tutorials/smartpy-fa2-fungible",children:"Create a fungible token with the SmartPy FA2 library"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"transfer-scene",children:"Transfer scene"}),"\n",(0,s.jsx)(n.p,{children:"This scene shows how to transfer tokens between accounts."}),"\n",(0,s.jsx)(n.p,{children:"Like the Wallet Connection scene, you must first connect to a wallet.\nBy default, the scene uses the contract that you deployed with the Contract scene.\nIt also shows the IDs of the tokens that you created with that contract, starting with 0."}),"\n",(0,s.jsx)(n.p,{children:"To transfer a token, make sure that the scene shows the address of the contract.\nThen, fill in the fields and click the Transfer button.\nThe scene looks like this:"}),"\n",(0,s.jsx)("img",{src:"/img/unity/unity-transfer-scene-address.png",alt:"The Transfer scene, showing information about the token to transfer",style:{width:300}}),"\n",(0,s.jsxs)(n.p,{children:["After you approve the transaction in your wallet app, the contract transfers the token to the new owner.\nYou can see the token owners by looking at the contract storage in a block explorer.\nFor example, in ",(0,s.jsx)(n.a,{href:"https://better-call.dev/",children:"Better Call Dev"}),", go to the Storage tab, expand the ",(0,s.jsx)(n.code,{children:"ledger"})," object, and look at the entries.\nFor example, this entry shows that the account that ends in ",(0,s.jsx)(n.code,{children:"2zD"})," owns 9 of the token with the ID 1:"]}),"\n",(0,s.jsx)("img",{src:"/img/unity/unity-transfer-scene-block-explorer-token-ownership.png",alt:"The block explorer's Storage tab, showing the account address and the quantity of a token it owns",style:{width:500}}),"\n",(0,s.jsxs)(n.p,{children:["The transfer tutorial scene uses the ",(0,s.jsx)(n.code,{children:"TokenContract.Transfer()"}),"method to transfer the token:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public void HandleTransfer()\n{\n    TezosManager\n        .Instance\n        .Tezos\n        .TokenContract\n        .Transfer(\n            completedCallback: TransferCompleted,\n            destination: address.text,\n            tokenId: int.Parse(id.text),\n            amount: int.Parse(amount.text));\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"This ledger of token ownership is stored in a big-map data type, which is serialized on Tezos to save space."}),"\n",(0,s.jsx)(n.h2,{id:"ipfsupload-scene",children:"IPFSUpload scene"}),"\n",(0,s.jsx)(n.p,{children:"This scene shows how to upload files to IPFS with the Pinata API."}),"\n",(0,s.jsx)(n.p,{children:"The InterPlanetary File System (IPFS) is a protocol and peer-to-peer network for storing and sharing data in a distributed file system.\nBlockchain developers use it to store data such as token images and metadata."}),"\n",(0,s.jsxs)(n.p,{children:["To use the scene, create instances of the ",(0,s.jsx)(n.code,{children:"TezosConfigSO"})," and ",(0,s.jsx)(n.code,{children:"DataProviderConfigSO"})," objects and connect them to the scene:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Get a Pinata API key from ",(0,s.jsx)(n.a,{href:"https://pinata.cloud/",children:"Pinata"})," and copy the JWT for the key."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["In the Project view, right-click ",(0,s.jsx)(n.strong,{children:"Assets"})," and then click ",(0,s.jsx)(n.strong,{children:"Create > Tezos > Data Provider Configuration"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["In the Project view, right-click ",(0,s.jsx)(n.strong,{children:"Assets"})," and then click ",(0,s.jsx)(n.strong,{children:"Create > Tezos > Configuration"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["With the new ",(0,s.jsx)(n.code,{children:"TezosConfigSO"})," object selected, go to the Inspector panel and put your Pinata JWT (not your key or secret key) in the ",(0,s.jsx)(n.strong,{children:"Pinata Api Key"})," field."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["With the ",(0,s.jsx)(n.code,{children:"TezosConfigSO"})," object still selected, drag the ",(0,s.jsx)(n.code,{children:"DataProviderConfigSO"})," object to the ",(0,s.jsx)(n.code,{children:"Data Provider Config"})," field."]}),"\n",(0,s.jsxs)(n.p,{children:["The Inspector panel for the ",(0,s.jsx)(n.code,{children:"TezosConfigSO"})," object looks like this, with your Pinata API key:"]}),"\n",(0,s.jsx)("img",{src:"/img/unity/unity-ipfs-scene-config.png",alt:"Adding the Pinata API key and the data provider to the TezosConfigSO object",style:{width:300}}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Open the IPFSUpload scene."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["In the Hierarchy panel, select the ",(0,s.jsx)(n.code,{children:"TezosManager"})," object.\nThe ",(0,s.jsx)(n.code,{children:"TezosManager"})," object opens in the Inspector panel."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["From the Assets folder in the Project panel, drag the ",(0,s.jsx)(n.code,{children:"TezosConfigSO"})," object with your Pinata key to the ",(0,s.jsx)(n.code,{children:"config"})," field of the ",(0,s.jsx)(n.code,{children:"TezosManager"})," object."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Now you can run the scene and use your Pinata key to upload files to IPFS."}),"\n",(0,s.jsx)(n.p,{children:"When you run the scene, it shows a button that opens a file selection window, uploads that file to IPFS, and returns the IPFS URI that you can use to access the file later."}),"\n",(0,s.jsxs)(n.p,{children:["The relevant code is in the ",(0,s.jsx)(n.code,{children:"UploadImageButton.cs"})," script that is bound to the upload button:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public void HandleUploadClick()\n{\n    if (string.IsNullOrEmpty(TezosManager.Instance.Config.PinataApiKey))\n    {\n        Logger.LogError("Can not proceed without Pinata API key.");\n        return;\n    }\n\n    var uploader = UploaderFactory.GetPinataUploader(TezosManager.Instance.Config.PinataApiKey);\n\n    var uploadCoroutine = uploader.UploadFile(ipfsUrl =>\n    {\n        Logger.LogDebug($"File uploaded, url is {ipfsUrl}");\n    });\n\n    StartCoroutine(uploadCoroutine);\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},52693:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/unity-tutorial-scene-build-8ef61ef05782d9bd3d4b27fb9fb5d0cd.png"},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var o=t(96540);const s={},i=o.createContext(s);function a(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);