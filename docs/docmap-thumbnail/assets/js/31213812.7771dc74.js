"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[292],{35459:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"tutorials/build-an-nft-marketplace/part-1","title":"Part 1: Minting tokens","description":"To start working with the application, you create a Taqueria project and use it to deploy an FA2 contract.","source":"@site/docs/tutorials/build-an-nft-marketplace/part-1.md","sourceDirName":"tutorials/build-an-nft-marketplace","slug":"/tutorials/build-an-nft-marketplace/part-1","permalink":"/previews/docs/docmap-thumbnail/tutorials/build-an-nft-marketplace/part-1","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1716350400000,"frontMatter":{"title":"Part 1: Minting tokens","authors":"Benjamin Fuentes (Marigold)","last_update":{"date":"22 May 2024"}},"sidebar":"tutorialsSidebar","previous":{"title":"Build an NFT marketplace","permalink":"/previews/docs/docmap-thumbnail/tutorials/build-an-nft-marketplace"},"next":{"title":"Part 2: Buying and selling tokens","permalink":"/previews/docs/docmap-thumbnail/tutorials/build-an-nft-marketplace/part-2"}}');var i=t(74848),s=t(28453);const o={title:"Part 1: Minting tokens",authors:"Benjamin Fuentes (Marigold)",last_update:{date:"22 May 2024"}},r=void 0,l={},c=[{value:"Creating a Taqueria project",id:"creating-a-taqueria-project",level:2},{value:"Creating an FA2 contract from a template",id:"creating-an-fa2-contract-from-a-template",level:2},{value:"Creating the frontend application",id:"creating-the-frontend-application",level:2},{value:"Adding a mint page",id:"adding-a-mint-page",level:2},{value:"Minting NFTs",id:"minting-nfts",level:2},{value:"Displaying tokens",id:"displaying-tokens",level:2},{value:"Summary",id:"summary",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"To start working with the application, you create a Taqueria project and use it to deploy an FA2 contract.\nThen you set up a web application to mint NFTs by calling the contract's mint endpoint and uploading an image and metadata to IPFS."}),"\n",(0,i.jsxs)(n.p,{children:["Before you begin, make sure that you have installed the tools in the ",(0,i.jsx)(n.a,{href:"/tutorials/build-an-nft-marketplace#prerequisites",children:"Prerequisites"})," section."]}),"\n",(0,i.jsx)(n.h2,{id:"creating-a-taqueria-project",children:"Creating a Taqueria project"}),"\n",(0,i.jsx)(n.p,{children:"Taqueria manages the project structure and keeps it up to date.\nFor example, when you deploy a new smart contract, Taqueria automatically updates the web app to send transactions to that new smart contract.\nFollow these steps to set up a Taqueria project:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"On the command-line terminal, run these commands to set up a Taqueria project and install the LIGO and Taquito plugins:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"taq init nft-marketplace\ncd nft-marketplace\ntaq install @taqueria/plugin-ligo\ntaq install @taqueria/plugin-taquito\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Install the ",(0,i.jsx)(n.code,{children:"ligo/fa"})," library, which provides templates for creating FA2 tokens:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'echo \'{ "name": "app", "dependencies": { "@ligo/fa": "^1.4.2" } }\' >> ligo.json\nTAQ_LIGO_IMAGE=ligolang/ligo:1.6.0 taq ligo --command "install @ligo/fa"\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This command can take some time because it downloads and installs the ",(0,i.jsx)(n.code,{children:"@ligo/fa"})," package."]}),"\n",(0,i.jsx)(n.h2,{id:"creating-an-fa2-contract-from-a-template",children:"Creating an FA2 contract from a template"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"ligo/fa"})," library provides a template that saves you from having to implement all of the FA2 standard yourself.\nFollow these steps to create a contract that is based on the template and implements the required endpoints:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Create a contract to manage your NFTs:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"taq create contract nft.jsligo\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Open the ",(0,i.jsx)(n.code,{children:"contracts/nft.jsligo"})," file in any text editor and replace the default code with this code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsligo",children:'#import "@ligo/fa/lib/fa2/nft/extendable_nft.impl.jsligo" "FA2Impl"\n\n /* ERROR MAP FOR UI DISPLAY or TESTS\n       const errorMap : map<string,string> = Map.literal(list([\n         ["0", "Enter a positive and not null amount"],\n         ["1", "Operation not allowed, you need to be administrator"],\n         ["2", "You cannot sell more than your current balance"],\n         ["3", "Cannot find the offer you entered for buying"],\n         ["4", "You entered a quantity to buy than is more than the offer quantity"],\n         ["5", "Not enough funds, you need to pay at least quantity * offer price to get the tokens"],\n         ["6", "Cannot find the contract relative to implicit address"],\n       ]));\n   */\n export type Extension = { administrators: set<address> };\n\n export type storage = FA2Impl.storage<Extension>; // extension administrators\n\n\n type ret = [list<operation>, storage];\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The first line of this code imports the FA2 template as the ",(0,i.jsx)(n.code,{children:"FA2Impl"})," object.\nThen, the code defines error messages for the contract."]}),"\n",(0,i.jsx)(n.p,{children:"The code defines a type for the contract storage, which contains these values:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"administrators"}),": A list of accounts that are authorized to mint NFTs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ledger"}),": The ledger that keeps track of token ownership"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"metadata"}),": The metadata for the contract itself, based on the TZIP-16 standard for contract metadata"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"token_metadata"}),": The metadata for the tokens, based on the TZIP-12 standard for token metadata"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"operators"}),": Information about ",(0,i.jsx)(n.em,{children:"operators"}),", accounts that are authorized to transfer tokens on behalf of the owners"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The code also defines the type for the value that entrypoints return: a list of operations and the new value of the storage."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Add code to implement the required ",(0,i.jsx)(n.code,{children:"transfer"}),", ",(0,i.jsx)(n.code,{children:"balance_of"}),", and ",(0,i.jsx)(n.code,{children:"update_operators"})," entrypoints:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsligo",children:"\n @entry\n const transfer = (p: FA2Impl.TZIP12.transfer, s: storage): ret => {\n   const ret2: [list<operation>, storage] = FA2Impl.transfer(p, s);\n   return [\n     ret2[0],\n     {\n       ...s,\n       ledger: ret2[1].ledger,\n       metadata: ret2[1].metadata,\n       token_metadata: ret2[1].token_metadata,\n       operators: ret2[1].operators,\n     }\n   ]\n };\n\n @entry\n const balance_of = (p: FA2Impl.TZIP12.balance_of, s: storage): ret => {\n   const ret2: [list<operation>, storage] = FA2Impl.balance_of(p, s);\n   return [\n     ret2[0],\n     {\n       ...s,\n       ledger: ret2[1].ledger,\n       metadata: ret2[1].metadata,\n       token_metadata: ret2[1].token_metadata,\n       operators: ret2[1].operators,\n     }\n   ]\n };\n\n @entry\n const update_operators = (p: FA2Impl.TZIP12.update_operators, s: storage): ret => {\n   const ret2: [list<operation>, storage] = FA2Impl.update_operators(p, s);\n   return [\n     ret2[0],\n     {\n       ...s,\n       ledger: ret2[1].ledger,\n       metadata: ret2[1].metadata,\n       token_metadata: ret2[1].token_metadata,\n       operators: ret2[1].operators,\n     }\n   ]\n };\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You will add other entrypoints later, but these are the three entrypoints that every FA2 contract must have.\nBecause these required entrypoints must have specific parameters, the code re-uses types from the ",(0,i.jsx)(n.code,{children:"FA2Impl"})," object for those parameters.\nFor example, the ",(0,i.jsx)(n.code,{children:"FA2Impl.TZIP12.transfer"})," type represents the parameters for transferring tokens, including a source account and a list of target accounts, token types, and amounts."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"transfer"})," entrypoint accepts information about the tokens to transfer.\nThis implementation uses the ",(0,i.jsx)(n.code,{children:"FA2Impl.NFT.transfer"})," function from the template to avoid having to re-implement what happens when tokens are transferred."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"balance_of"})," entrypoint sends information about an owner's token balance to another contract.\nThis implementation re-uses the ",(0,i.jsx)(n.code,{children:"FA2Impl.NFT.balance_of"})," function."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"update_operators"})," entrypoint updates the operators for a specified account.\nThis implementation re-uses the ",(0,i.jsx)(n.code,{children:"FA2Impl.NFT.update_operators"})," function."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["After those entrypoints, add code for the ",(0,i.jsx)(n.code,{children:"mint"})," entrypoint:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsligo",children:'\n @entry\n const mint = (\n   [token_id, name, description, symbol, ipfsUrl]: [\n     nat,\n     bytes,\n     bytes,\n     bytes,\n     bytes\n   ],\n   s: storage\n ): ret => {\n   if (! Set.mem(Tezos.get_sender(), s.extension.administrators)) return failwith(\n     "1"\n   );\n   const token_info: map<string, bytes> =\n     Map.literal(\n       list(\n         [\n           ["name", name],\n           ["description", description],\n           ["interfaces", (bytes `["TZIP-12"]`)],\n           ["artifactUri", ipfsUrl],\n           ["displayUri", ipfsUrl],\n           ["thumbnailUri", ipfsUrl],\n           ["symbol", symbol],\n           ["decimals", (bytes `0`)]\n         ]\n       )\n     ) as map<string, bytes>;\n   return [\n     list([]) as list<operation>,\n     {\n       ...s,\n       ledger: Big_map.add(token_id, Tezos.get_sender(), s.ledger) as\n         FA2Impl.ledger,\n       token_metadata: Big_map.add(\n         token_id,\n         { token_id: token_id, token_info: token_info },\n         s.token_metadata\n       ),\n       operators: Big_map.empty as FA2Impl.operators,\n     }\n   ]\n };\n'})}),"\n",(0,i.jsx)(n.p,{children:"The FA2 standard does not require a mint entrypoint, but you can add one if you want to allow the contract to create more tokens after it is originated.\nIf you don't include a mint entrypoint or a way to create tokens, you must initialize the storage with all of the token information when you originate the contract.\nThis mint entrypoint accepts a name, description, symbol, and IPFS URL to an image.\nIt also accepts an ID number for the token, which the front end will manage; you could also set up the contract to remember the ID number for the next token."}),"\n",(0,i.jsxs)(n.p,{children:["First, this code verifies that the transaction sender is one of the administrators.\nThen it creates a token metadata object with information from the parameters and adds it to the ",(0,i.jsx)(n.code,{children:"token_metadata"})," big-map in the storage.\nNote that the ",(0,i.jsx)(n.code,{children:"decimals"})," metadata field is set to 0 because the token is an NFT and therefore doesn't need any decimal places in its quantity."]}),"\n",(0,i.jsxs)(n.p,{children:["Note that there is no built-in way to get the number of tokens in the contract code; the Bigmap does not have a function such as ",(0,i.jsx)(n.code,{children:"keys()"})," or ",(0,i.jsx)(n.code,{children:"length()"}),".\nIf you want to keep track of the number of tokens, you must add an element in the storage and increment it when tokens are created or destroyed.\nYou can also get the number of tokens by analyzing the contract's storage from an off-chain application."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Run one of these commands to accept or decline LIGO's analytics policy:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ligo analytics accept"})," to send analytics data to LIGO"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ligo analytics deny"})," to not send analytics data to LIGO"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Save the contract and compile it by running this command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"TAQ_LIGO_IMAGE=ligolang/ligo:1.6.0 taq compile nft.jsligo\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Taqueria compiles the contract to the file ",(0,i.jsx)(n.code,{children:"artifacts/nft.tz"}),".\nIt also creates the file ",(0,i.jsx)(n.code,{children:"nft.storageList.jsligo"}),", which contains the starting value of the contract storage."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Open the file ",(0,i.jsx)(n.code,{children:"contracts/nft.storageList.jsligo"})," and replace it with this code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsligo",children:'#import "nft.jsligo" "Contract"\n\n #import "@ligo/fa/lib/fa2/nft/extendable_nft.impl.jsligo" "FA2Impl"\n\n const default_storage: Contract.storage = {\n     extension: {\n         administrators: Set.literal(\n             list(["tz1VSUr8wwNhLAzempoch5d6hLRiTh8Cjcjb" as address])\n         ) as set<address>\n     },\n     ledger: Big_map.empty as FA2Impl.ledger,\n     metadata: Big_map.literal(\n         list(\n             [\n                 ["", bytes `tezos-storage:data`],\n                 [\n                     "data",\n                     bytes\n                     `{\n         "name":"FA2 NFT Marketplace",\n         "description":"Example of FA2 implementation",\n         "version":"0.0.1",\n         "license":{"name":"MIT"},\n         "authors":["Marigold<contact@marigold.dev>"],\n         "homepage":"https://marigold.dev",\n         "source":{\n           "tools":["Ligo"],\n           "location":"https://github.com/ligolang/contract-catalogue/tree/main/lib/fa2"},\n         "interfaces":["TZIP-012"],\n         "errors": [],\n         "views": []\n         }`\n                 ]\n             ]\n         )\n     ) as FA2Impl.TZIP16.metadata,\n     token_metadata: Big_map.empty as FA2Impl.TZIP12.tokenMetadata,\n     operators: Big_map.empty as FA2Impl.operators,\n };\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"This code sets the initial value of the storage.\nIn this case, the storage includes metadata about the contract and empty Bigmaps for the ledger, token metadata, and operators.\nIt sets the test account Alice as the administrator, which is the only account that can mint tokens."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Optional: Add your address as an administrator or replace Alice's address with your own.\nNote that only the addresses in the ",(0,i.jsx)(n.code,{children:"administrators"})," list will be able to create tokens."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Compile the contract:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"TAQ_LIGO_IMAGE=ligolang/ligo:1.6.0 taq compile nft.jsligo\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Use one of these options to set up a Ghostnet account to use to deploy (originate) the contract:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["To use your account, open the ",(0,i.jsx)(n.code,{children:".taq/config.local.testing.json"})," file and add your public key, address, and private key, so the file looks like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "networkName": "ghostnet",\n  "accounts": {\n    "taqOperatorAccount": {\n      "publicKey": "edpkvGfYw3LyB1UcCahKQk4rF2tvbMUk8GFiTuMjL75uGXrpvKXhjn",\n      "publicKeyHash": "tz1VSUr8wwNhLAzempoch5d6hLRiTh8Cjcjb",\n      "privateKey": "edsk3QoqBuvdamxouPhin7swCvkQNgq4jP5KZPbwWNnwdZpSpJiEbq"\n    }\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Then make sure that the account has tez on Ghostnet.\nUse the faucet at ",(0,i.jsx)(n.a,{href:"https://faucet.ghostnet.teztnets.com",children:"https://faucet.ghostnet.teztnets.com"})," to get tez if you need it."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"OR"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"To let Taqueria generate an account for you, follow these steps:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Run the command ",(0,i.jsx)(n.code,{children:'taq deploy nft.tz -e "testing"'}),", which will fail because you do not have an account configured in Taqueria.\nThe response includes the address of an account that Taqueria generated for you and added to the ",(0,i.jsx)(n.code,{children:".taq/config.local.testing.json"})," file automatically."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Fund the account from the faucet at ",(0,i.jsx)(n.a,{href:"https://faucet.ghostnet.teztnets.com",children:"https://faucet.ghostnet.teztnets.com"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Compile and deploy the contract to Ghostnet by running this command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'taq deploy nft.tz -e "testing"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Taqueria deploys the contract to Ghostnet and prints the address of the contract, as in this image:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"The output of the deployment command",src:t(24904).A+"",width:"480",height:"78"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Now the backend application is ready and you can start on the frontend application."}),"\n",(0,i.jsx)(n.h2,{id:"creating-the-frontend-application",children:"Creating the frontend application"}),"\n",(0,i.jsx)(n.p,{children:"To save time, this tutorial provides a starter React application."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"In a folder outside of your Taqueria project, clone the source material by running this command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/marigold-dev/training-nft-1.git\n"})}),"\n",(0,i.jsx)(n.p,{children:"This repository includes the starter application and the completed application that you can refer to later."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["In your Taqueria project, create a folder named ",(0,i.jsx)(n.code,{children:"app"})," that is at the same level as the ",(0,i.jsx)(n.code,{children:"contracts"})," folder."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["From the repository, copy the contents of the ",(0,i.jsx)(n.code,{children:"reactboilerplateapp"})," folder to the ",(0,i.jsx)(n.code,{children:"app"})," folder."]}),"\n",(0,i.jsxs)(n.p,{children:['For information about how this starter application was created, see the "Dapp" section of this tutorial: ',(0,i.jsx)(n.a,{href:"https://github.com/marigold-dev/training-dapp-1#construction_worker-dapp",children:"https://github.com/marigold-dev/training-dapp-1#construction_worker-dapp"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"From the root of your Taqueria project, run these commands to generate TypeScript types for the application:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"taq install @taqueria/plugin-contract-types\ntaq generate types ./app/src\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"IF YOU ARE ON A MAC"}),", edit the default ",(0,i.jsx)(n.code,{children:"dev"})," script in the ",(0,i.jsx)(n.code,{children:"app/package.json"})," file to look like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "scripts": {\n    "dev": "if test -f .env; then sed -i \'\' \\"s/\\\\(VITE_CONTRACT_ADDRESS *= *\\\\).*/\\\\1$(jq -r \'last(.tasks[]).output[0].address\' ../.taq/testing-state.json)/\\" .env ; else jq -r \'\\"VITE_CONTRACT_ADDRESS=\\" + last(.tasks[]).output[0].address\' ../.taq/testing-state.json > .env ; fi && vite"\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This is required on Mac computers because the ",(0,i.jsx)(n.code,{children:"sed"})," command behaves differently than on Unix computers."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Run these commands to install the dependencies for the application and start it:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd app\nyarn && yarn dev\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This application contains basic navigation and the ability to connect to wallets.\nFor a tutorial that includes connecting to wallets, see ",(0,i.jsx)(n.a,{href:"/tutorials/build-your-first-app",children:"Build a simple web application"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Because Taqueria automatically keeps track of your deployed contract, the application automatically accesses the contract and shows that there are no NFTs in it yet.\nThe application looks like this:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"The starter NFT marketplace application is showing no NFTs and a button to connect to wallets",src:t(92873).A+"",width:"1806",height:"1094"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"adding-a-mint-page",children:"Adding a mint page"}),"\n",(0,i.jsx)(n.p,{children:"The mint page uses a form that accepts information and an image and sends a transaction to the mint entrypoint:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Open the file ",(0,i.jsx)(n.code,{children:"./app/src/MintPage.tsx"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Replace the return value of the function (the ",(0,i.jsx)(n.code,{children:"<Paper>"})," tag) with the following code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<Paper>\n\n  {storage ? (\n    <Button\n      disabled={storage.extension.indexOf(userAddress! as address) < 0}\n      sx={{\n        p: 1,\n        position: "absolute",\n        right: "0",\n        display: formOpen ? "none" : "block",\n        zIndex: 1,\n      }}\n      onClick={toggleDrawer(!formOpen)}\n    >\n      {" Mint Form " +\n        (storage!.extension.indexOf(userAddress! as address) < 0\n          ? " (You are not admin)"\n          : "")}\n      <OpenWithIcon />\n    </Button>\n  ) : (\n    ""\n  )}\n\n  <SwipeableDrawer\n    onClose={toggleDrawer(false)}\n    onOpen={toggleDrawer(true)}\n    anchor="right"\n    open={formOpen}\n    variant="temporary"\n  >\n    <Toolbar\n      sx={\n        isTablet\n          ? { marginTop: "0", marginRight: "0" }\n          : { marginTop: "35px", marginRight: "125px" }\n      }\n    />\n    <Box\n      sx={{\n        width: isTablet ? "40vw" : "60vw",\n        borderColor: "text.secondary",\n        borderStyle: "solid",\n        borderWidth: "1px",\n\n        height: "calc(100vh - 64px)",\n      }}\n    >\n      <Button\n        sx={{\n          position: "absolute",\n          right: "0",\n          display: !formOpen ? "none" : "block",\n        }}\n        onClick={toggleDrawer(!formOpen)}\n      >\n        <Close />\n      </Button>\n      <form onSubmit={formik.handleSubmit}>\n        <Stack spacing={2} margin={2} alignContent={"center"}>\n          <Typography variant="h5">Mint a new collection</Typography>\n\n          <TextField\n            id="standard-basic"\n            name="token_id"\n            label="token_id"\n            value={formik.values.token_id}\n            disabled\n            variant="filled"\n          />\n          <TextField\n            id="standard-basic"\n            name="name"\n            label="name"\n            required\n            value={formik.values.name}\n            onChange={formik.handleChange}\n            error={formik.touched.name && Boolean(formik.errors.name)}\n            helperText={formik.touched.name && formik.errors.name}\n            variant="filled"\n          />\n          <TextField\n            id="standard-basic"\n            name="symbol"\n            label="symbol"\n            required\n            value={formik.values.symbol}\n            onChange={formik.handleChange}\n            error={formik.touched.symbol && Boolean(formik.errors.symbol)}\n            helperText={formik.touched.symbol && formik.errors.symbol}\n            variant="filled"\n          />\n          <TextField\n            id="standard-basic"\n            name="description"\n            label="description"\n            required\n            multiline\n            minRows={2}\n            value={formik.values.description}\n            onChange={formik.handleChange}\n            error={\n              formik.touched.description &&\n              Boolean(formik.errors.description)\n            }\n            helperText={\n              formik.touched.description && formik.errors.description\n            }\n            variant="filled"\n          />\n\n          {pictureUrl ? (\n            <img height={100} width={100} src={pictureUrl} />\n          ) : (\n            ""\n          )}\n          <Button variant="contained" component="label" color="primary">\n            <AddCircleOutlined />\n            Upload an image\n            <input\n              type="file"\n              hidden\n              name="data"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                const data = e.target.files ? e.target.files[0] : null;\n                if (data) {\n                  setFile(data);\n                }\n                e.preventDefault();\n              }}\n            />\n          </Button>\n\n          <Button variant="contained" type="submit">\n            Mint\n          </Button>\n        </Stack>\n      </form>\n    </Box>\n  </SwipeableDrawer>\n\n\n  <Typography variant="h5">Mint your wine collection</Typography>\n\n  {nftContratTokenMetadataMap.size != 0 ? (\n    "//TODO"\n  ) : (\n    <Typography sx={{ py: "2em" }} variant="h4">\n      Sorry, there is not NFT yet, you need to mint bottles first\n    </Typography>\n  )}\n</Paper>\n'})}),"\n",(0,i.jsx)(n.p,{children:"You may see errors in your IDE for missing code and imports that you will add later."}),"\n",(0,i.jsx)(n.p,{children:"This code shows an HTML form if the connected wallet is an administrator.\nThe form includes fields for a new NFT, including a button to upload an image."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Inside the ",(0,i.jsx)(n.code,{children:"MintPage"})," function, immediately before the ",(0,i.jsx)(n.code,{children:"return"})," statement, add this ",(0,i.jsx)(n.a,{href:"https://formik.org/",children:"Formik"})," form to manage the form:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const validationSchema = yup.object({\n  name: yup.string().required('Name is required'),\n  description: yup.string().required('Description is required'),\n  symbol: yup.string().required('Symbol is required'),\n});\n\nconst formik = useFormik({\n  initialValues: {\n    name: '',\n    description: '',\n    token_id: 0,\n    symbol: 'WINE',\n  } as TZIP21TokenMetadata,\n  validationSchema: validationSchema,\n  onSubmit: (values) => {\n    mint(values);\n  },\n});\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"After this code, add state variables for the image and its URL:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const [pictureUrl, setPictureUrl] = useState<string>('');\nconst [file, setFile] = useState<File | null>(null);\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Add this code to manage a drawer that appears to show the form:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"//open mint drawer if admin\nconst [formOpen, setFormOpen] = useState<boolean>(false);\n\nuseEffect(() => {\n  if (storage && storage.extension.indexOf(userAddress! as address) < 0)\n    setFormOpen(false);\n  else setFormOpen(true);\n}, [userAddress]);\n\nconst toggleDrawer =\n  (open: boolean) => (event: React.KeyboardEvent | React.MouseEvent) => {\n    if (\n      event.type === 'keydown' &&\n      ((event as React.KeyboardEvent).key === 'Tab' ||\n        (event as React.KeyboardEvent).key === 'Shift')\n    ) {\n      return;\n    }\n    setFormOpen(open);\n  };\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Add this ",(0,i.jsx)(n.code,{children:"mint"})," function:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const { enqueueSnackbar } = useSnackbar();\n\nconst mint = async (newTokenDefinition: TZIP21TokenMetadata) => {\n  try {\n    //IPFS\n    if (file) {\n      const formData = new FormData();\n      formData.append('file', file);\n\n      const requestHeaders: HeadersInit = new Headers();\n      requestHeaders.set(\n        'pinata_api_key',\n        `${import.meta.env.VITE_PINATA_API_KEY}`\n      );\n      requestHeaders.set(\n        'pinata_secret_api_key',\n        `${import.meta.env.VITE_PINATA_API_SECRET}`\n      );\n\n      const resFile = await fetch(\n        'https://api.pinata.cloud/pinning/pinFileToIPFS',\n        {\n          method: 'post',\n          body: formData,\n          headers: requestHeaders,\n        }\n      );\n\n      const responseJson = await resFile.json();\n      console.log('responseJson', responseJson);\n\n      const thumbnailUri = `ipfs://${responseJson.IpfsHash}`;\n      setPictureUrl(\n        `https://gateway.pinata.cloud/ipfs/${responseJson.IpfsHash}`\n      );\n\n      const op = await nftContrat!.methods\n        .mint(\n          new BigNumber(newTokenDefinition.token_id) as nat,\n          char2Bytes(newTokenDefinition.name!) as bytes,\n          char2Bytes(newTokenDefinition.description!) as bytes,\n          char2Bytes(newTokenDefinition.symbol!) as bytes,\n          char2Bytes(thumbnailUri) as bytes\n        )\n        .send();\n\n      //close directly the form\n      setFormOpen(false);\n      enqueueSnackbar(\n        'Wine collection is minting ... it will be ready on next block, wait for the confirmation message before minting another collection',\n        { variant: 'info' }\n      );\n\n      await op.confirmation(2);\n\n      enqueueSnackbar('Wine collection minted', { variant: 'success' });\n\n      refreshUserContextOnPageReload(); //force all app to refresh the context\n    }\n  } catch (error) {\n    console.table(`Error: ${JSON.stringify(error, null, 2)}`);\n    let tibe: TransactionInvalidBeaconError =\n      new TransactionInvalidBeaconError(error);\n    enqueueSnackbar(tibe.data_message, {\n      variant: 'error',\n      autoHideDuration: 10000,\n    });\n  }\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:"This function accepts the data that the user puts in the form.\nIt uploads the image to IPFS via Pinata and gets the IPFS hash, which identifies the published file and allows clients to request it later."}),"\n",(0,i.jsxs)(n.p,{children:["Then it calls the contract's ",(0,i.jsx)(n.code,{children:"mint"})," entrypoint and passes the NFT data as bytes, as the TZIP-12 standard requires for NFT metadata."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Add code to set the ID for the next NFT based on the number of tokens currently in the contract:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"useEffect(() => {\n  (async () => {\n    if (nftContratTokenMetadataMap && nftContratTokenMetadataMap.size > 0) {\n      formik.setFieldValue('token_id', nftContratTokenMetadataMap.size);\n    }\n  })();\n}, [nftContratTokenMetadataMap?.size]);\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Replace the imports at the top of the file with these imports:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { AddCircleOutlined, Close } from '@mui/icons-material';\nimport OpenWithIcon from '@mui/icons-material/OpenWith';\nimport {\n  Box,\n  Button,\n  Stack,\n  SwipeableDrawer,\n  TextField,\n  Toolbar,\n  useMediaQuery,\n} from '@mui/material';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\nimport { useFormik } from 'formik';\nimport React, { useEffect, useState } from 'react';\nimport * as yup from 'yup';\nimport { TZIP21TokenMetadata, UserContext, UserContextType } from './App';\nimport { useSnackbar } from 'notistack';\nimport { BigNumber } from 'bignumber.js';\nimport { address, bytes, nat } from './type-aliases';\nimport { char2Bytes } from '@taquito/utils';\nimport { TransactionInvalidBeaconError } from './TransactionInvalidBeaconError';\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Save the file."}),"\n",(0,i.jsxs)(n.p,{children:["For the complete content of the mint page, see the completed part 1 app at ",(0,i.jsx)(n.a,{href:"https://github.com/marigold-dev/training-nft-1",children:"https://github.com/marigold-dev/training-nft-1"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["In the file ",(0,i.jsx)(n.code,{children:"app/.env"}),", replace the default ",(0,i.jsx)(n.code,{children:"VITE_PINATA_API_KEY"})," and ",(0,i.jsx)(n.code,{children:"VITE_PINATA_API_SECRET"})," values with your Pinata API key and API secret.\nFor information about setting up a Pinata account, see ",(0,i.jsx)(n.a,{href:"/developing/ipfs",children:"Storing data and files with IPFS"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Now the form has a working mint page.\nIn the next section, you use it to mint NFTs."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"minting-nfts",children:"Minting NFTs"}),"\n",(0,i.jsx)(n.p,{children:"Mint at least one NFT so you can see it in the site and contract:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Open the site by going to ",(0,i.jsx)(n.a,{href:"http://localhost:5173",children:"http://localhost:5173"})," in your web browser.\nIf the site isn't running, go to the ",(0,i.jsx)(n.code,{children:"app"})," folder and run ",(0,i.jsx)(n.code,{children:"yarn dev"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Connect the administrator's wallet to the application."}),"\n",(0,i.jsxs)(n.p,{children:["The app goes to the ",(0,i.jsx)(n.code,{children:"/mint"})," page, which looks like this:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"The mint page shows the form to create tokens",src:t(93253).A+"",width:"1828",height:"1094"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Enter information about a bottle of wine."}),"\n",(0,i.jsx)(n.p,{children:"For example, you can use this information:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"name"}),": Saint Emilion - Franc la Rose"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"symbol"}),": SEMIL"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"description"}),": Grand cru 2007"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Upload a picture to represent a bottle of wine."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Click ",(0,i.jsx)(n.strong,{children:"Mint"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Approve the transaction in your wallet and wait for it to complete."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Waiting for confirmation that the NFT was minted",src:t(97886).A+"",width:"1362",height:"723"})}),"\n",(0,i.jsxs)(n.p,{children:["When the NFT has been minted, the application updates the UI but it does not have code to show the NFTs yet.\nYou can see the NFT by getting the contract address, which starts with ",(0,i.jsx)(n.code,{children:"KT1"}),", from the ",(0,i.jsx)(n.code,{children:"config.local.testing.json"})," file and looking it up in a block explorer."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, this is how ",(0,i.jsx)(n.a,{href:"https://ghostnet.tzkt.io/",children:"https://ghostnet.tzkt.io/"}),' shows the tokens in the contract, on the "Tokens" tab.\nBecause the contract is FA2-compatible, the block explorer automatically shows information about the tokens:']}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"The TzKT block explorer is showing the token in the contract",src:t(55499).A+"",width:"1134",height:"372"})}),"\n",(0,i.jsx)(n.p,{children:"Now the application can mint NFTs.\nIn the next section, you display the NFTs on a catalog page."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"displaying-tokens",children:"Displaying tokens"}),"\n",(0,i.jsx)(n.p,{children:"Follow these steps to show the tokens that you have minted:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["In the ",(0,i.jsx)(n.code,{children:"MintPage.tsx"})," file, replace the ",(0,i.jsx)(n.code,{children:'"//TODO"'})," comment with this code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"<Box sx={{ width: '70vw' }}>\n  <SwipeableViews\n    axis=\"x\"\n    index={activeStep}\n    onChangeIndex={handleStepChange}\n    enableMouseEvents\n  >\n    {Array.from(nftContratTokenMetadataMap!.entries()).map(\n      ([token_id, token]) => (\n        <Card\n          sx={{\n            display: 'block',\n            maxWidth: '80vw',\n            overflow: 'hidden',\n          }}\n          key={token_id.toString()}\n        >\n          <CardHeader\n            titleTypographyProps={\n              isTablet ? { fontSize: '1.5em' } : { fontSize: '1em' }\n            }\n            title={token.name}\n          />\n\n          <CardMedia\n            sx={\n              isTablet\n                ? {\n                    width: 'auto',\n                    marginLeft: '33%',\n                    maxHeight: '50vh',\n                  }\n                : { width: '100%', maxHeight: '40vh' }\n            }\n            component=\"img\"\n            image={token.thumbnailUri?.replace(\n              'ipfs://',\n              'https://gateway.pinata.cloud/ipfs/'\n            )}\n          />\n\n          <CardContent>\n            <Box>\n              <Typography>{'ID : ' + token_id}</Typography>\n              <Typography>{'Symbol : ' + token.symbol}</Typography>\n              <Typography>{'Description : ' + token.description}</Typography>\n            </Box>\n          </CardContent>\n        </Card>\n      )\n    )}\n  </SwipeableViews>\n  <MobileStepper\n    variant=\"text\"\n    steps={Array.from(nftContratTokenMetadataMap!.entries()).length}\n    position=\"static\"\n    activeStep={activeStep}\n    nextButton={\n      <Button\n        size=\"small\"\n        onClick={handleNext}\n        disabled={\n          activeStep ===\n          Array.from(nftContratTokenMetadataMap!.entries()).length - 1\n        }\n      >\n        Next\n        <KeyboardArrowRight />\n      </Button>\n    }\n    backButton={\n      <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\n        <KeyboardArrowLeft />\n        Back\n      </Button>\n    }\n  />\n</Box>\n"})}),"\n",(0,i.jsx)(n.p,{children:"This code gets data from the contract storage and shows it on the UI."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Add these constants in the ",(0,i.jsx)(n.code,{children:"MintPage"})," function:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const [activeStep, setActiveStep] = React.useState(0);\n\nconst handleNext = () => {\n  setActiveStep((prevActiveStep) => prevActiveStep + 1);\n};\n\nconst handleBack = () => {\n  setActiveStep((prevActiveStep) => prevActiveStep - 1);\n};\n\nconst handleStepChange = (step: number) => {\n  setActiveStep(step);\n};\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Replace the imports at the top of the file with these imports:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import SwipeableViews from 'react-swipeable-views';\nimport OpenWithIcon from '@mui/icons-material/OpenWith';\nimport {\n  Box,\n  Button,\n  CardHeader,\n  CardMedia,\n  MobileStepper,\n  Stack,\n  SwipeableDrawer,\n  TextField,\n  Toolbar,\n  useMediaQuery,\n} from '@mui/material';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport {\n  AddCircleOutlined,\n  Close,\n  KeyboardArrowLeft,\n  KeyboardArrowRight,\n} from '@mui/icons-material';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\nimport { useFormik } from 'formik';\nimport React, { useEffect, useState } from 'react';\nimport * as yup from 'yup';\nimport { TZIP21TokenMetadata, UserContext, UserContextType } from './App';\nimport { useSnackbar } from 'notistack';\nimport { BigNumber } from 'bignumber.js';\nimport { address, bytes, nat } from './type-aliases';\nimport { char2Bytes } from '@taquito/utils';\nimport { TransactionInvalidBeaconError } from './TransactionInvalidBeaconError';\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Open the web page in the browser again and see that the NFT you created is shown, as in this picture:"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"The mint page is showing one existing NFT",src:t(54184).A+"",width:"1372",height:"916"})}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsxs)(n.p,{children:["Now you can create FA2-compatible NFTs with the ",(0,i.jsx)(n.code,{children:"@ligo/fa"})," library and show them on a web page."]}),"\n",(0,i.jsx)(n.p,{children:"In the next section, you add the buy and sell functions to the smart contract and update the frontend application to allow these actions."}),"\n",(0,i.jsxs)(n.p,{children:["When you are ready, continue to ",(0,i.jsx)(n.a,{href:"/tutorials/build-an-nft-marketplace/part-2",children:"Part 2: Buying and selling tokens"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},54184:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/nft-marketplace-1-collection-d0af6db64fecdb699ea79b5820264c8e.png"},93253:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/nft-marketplace-1-mint-form-4060d6ccf65be8153c61111a11e4687b.png"},97886:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/nft-marketplace-1-minting-b74643fc75c2347affbd03a26368fadb.png"},55499:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/nft-marketplace-1-tzkt-token-0b8e0870fa8ada2b0bfc3ad12ba0274b.png"},92873:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/nft-marketplace-starter-1ce94928767597eecae560f56d192a38.png"},24904:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/taqueria-contract-deploy-result-63f455aec87e4c2ecbf015afa5560c45.png"},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var a=t(96540);const i={},s=a.createContext(i);function o(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);