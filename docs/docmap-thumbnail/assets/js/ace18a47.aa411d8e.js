"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1019],{56767:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"tutorials/dapp/part-2","title":"Part 2: Inter-contract calls and testing","description":"Previously, you learned how to create your first dApp.","source":"@site/docs/tutorials/dapp/part-2.md","sourceDirName":"tutorials/dapp","slug":"/tutorials/dapp/part-2","permalink":"/previews/docs/docmap-thumbnail/tutorials/dapp/part-2","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1716350400000,"frontMatter":{"title":"Part 2: Inter-contract calls and testing","authors":"Benjamin Fuentes (Marigold)","last_update":{"date":"22 May 2024"}},"sidebar":"tutorialsSidebar","previous":{"title":"Part 1: Create your minimum dApp on Tezos","permalink":"/previews/docs/docmap-thumbnail/tutorials/dapp/part-1"},"next":{"title":"Part 3: Tickets","permalink":"/previews/docs/docmap-thumbnail/tutorials/dapp/part-3"}}');var a=n(74848),o=n(28453);const r={title:"Part 2: Inter-contract calls and testing",authors:"Benjamin Fuentes (Marigold)",last_update:{date:"22 May 2024"}},c=void 0,i={},d=[{value:"Poke and Get Feedback sequence diagram",id:"poke-and-get-feedback-sequence-diagram",level:2},{value:"Get the code",id:"get-the-code",level:2},{value:"Modify the poke function",id:"modify-the-poke-function",level:2},{value:"Write unit tests",id:"write-unit-tests",level:2},{value:"Do an inter-contract call",id:"do-an-inter-contract-call",level:2},{value:"Use views instead of inter-contract call",id:"use-views-instead-of-inter-contract-call",level:2},{value:"Write mutation tests",id:"write-mutation-tests",level:2},{value:"Update the frontend",id:"update-the-frontend",level:2},{value:"Summary",id:"summary",level:2}];function l(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",img:"img",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"Previously, you learned how to create your first dApp.\nIn this second session, you will enhance your skills on:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"How to do inter-contract calls."}),"\n",(0,a.jsx)(t.li,{children:"How to use views."}),"\n",(0,a.jsx)(t.li,{children:"How to do unit & mutation tests."}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"On the first version of the Poke game, you were able to poke any deployed contract. Now, you will add a new function to store on the trace an additional feedback message coming from another contract."}),"\n",(0,a.jsx)(t.h2,{id:"poke-and-get-feedback-sequence-diagram",children:"Poke and Get Feedback sequence diagram"}),"\n",(0,a.jsx)(t.mermaid,{value:"sequenceDiagram\n  Note left of User: Prepare to poke Smartcontract2 though Smartcontract1\n  User->>Smartcontract1: pokeAndGetFeedback(Smartcontract2)\n  Smartcontract1->>Smartcontract2 : getFeedback()\n  Smartcontract2->>Smartcontract1 : pokeAndGetFeedbackCallback([Tezos.get_self_address(),store.feedback])\n  Note left of Smartcontract1: store Smartcontract2 address + feedback from Smartcontract2"}),"\n",(0,a.jsx)(t.h2,{id:"get-the-code",children:"Get the code"}),"\n",(0,a.jsxs)(t.p,{children:["Get the code from the first session: ",(0,a.jsx)(t.a,{href:"https://github.com/marigold-dev/training-dapp-1/blob/main/solution",children:"https://github.com/marigold-dev/training-dapp-1/blob/main/solution"})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"git clone https://github.com/marigold-dev/training-dapp-1.git\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Reuse the code from the previous smart contract: ",(0,a.jsx)(t.a,{href:"https://github.com/marigold-dev/training-dapp-1/blob/main/solution/contracts/pokeGame.jsligo",children:"https://github.com/marigold-dev/training-dapp-1/blob/main/solution/contracts/pokeGame.jsligo"})]}),"\n",(0,a.jsx)(t.p,{children:"Install all libraries locally:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"cd solution && npm i && cd app && yarn install && cd ..\n"})}),"\n",(0,a.jsx)(t.h2,{id:"modify-the-poke-function",children:"Modify the poke function"}),"\n",(0,a.jsx)(t.p,{children:"Change the storage to reflect the changes:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"If you poke directly, you must register the contract's owner's address and no feedback."}),"\n",(0,a.jsx)(t.li,{children:"If you poke and ask to get feedback from another contract, then you register the other contract address and an additional feedback message.\nHere is the new sequence diagram of the poke function."}),"\n"]}),"\n",(0,a.jsx)(t.mermaid,{value:"sequenceDiagram\n  Note left of User: Prepare to poke Smartcontract1\n  User->>Smartcontract1: poke()\n  Note left of Smartcontract1: store User address + no feedback"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Edit ",(0,a.jsx)(t.code,{children:"./contracts/pokeGame.jsligo"})," and replace the storage definition with this one:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsligo",children:"export type pokeMessage = {\n    receiver : address,\n    feedback : string\n};\n\nexport type storage = {\n    pokeTraces : map<address, pokeMessage>,\n    feedback : string\n};\n"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Replace your poke function with these lines:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsligo",children:'@entry\nconst poke = (_ : unit, store : storage) : return_ => {\n    let feedbackMessage = {receiver : Tezos.get_self_address() ,feedback: ""};\n    return [  list([]) as list<operation>, {...store,\n        pokeTraces : Map.add(Tezos.get_source(), feedbackMessage, store.pokeTraces) }];\n};\n'})}),"\n",(0,a.jsx)(t.p,{children:"Explanation:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"...store"})," do a copy by value of your object. ",(0,a.jsx)(t.a,{href:"https://ligolang.org/docs/language-basics/maps-records/#functional-updates",children:"Have a look on the Functional updates documentation"}),". Note: you cannot do an assignment like this ",(0,a.jsx)(t.code,{children:"store.pokeTraces=..."})," in jsLIGO, there are no concepts of Classes, use ",(0,a.jsx)(t.code,{children:"Functional updates"})," instead."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"Map.add(..."}),": Add a key, value entry to a map. For more information about ",(0,a.jsx)(t.a,{href:"https://ligolang.org/docs/language-basics/maps-records/#maps",children:"Map"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"export type storage = {...};"})," a ",(0,a.jsx)(t.code,{children:"Record"})," type is declared, it is an ",(0,a.jsx)(t.a,{href:"https://ligolang.org/docs/language-basics/maps-records#records",children:"object structure"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"Tezos.get_self_address()"})," is a native function that returns the current contract address running this code. Have a look at ",(0,a.jsx)(t.a,{href:"https://ligolang.org/docs/reference/current-reference",children:"Tezos native functions"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:'feedback: ""'}),": poking directly does not store feedback."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Edit ",(0,a.jsx)(t.code,{children:"pokeGame.storageList.jsligo"})," to change the storage initialization."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsligo",children:'#import "pokeGame.jsligo" "Contract"\n\nconst default_storage: Contract.storage = {\n    pokeTraces: Map.empty as map<address, Contract.pokeMessage>,\n    feedback: "kiss"\n};\n'})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Compile your contract."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"TAQ_LIGO_IMAGE=ligolang/ligo:1.6.0 taq compile pokeGame.jsligo\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Write a second function ",(0,a.jsx)(t.code,{children:"pokeAndGetFeedback"})," involving the call to another contract a bit later, let's do unit testing first!"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"write-unit-tests",children:"Write unit tests"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Add a new unit test smart-contract file ",(0,a.jsx)(t.code,{children:"unit_pokeGame.jsligo"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"taq create contract unit_pokeGame.jsligo\n"})}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsxs)(t.p,{children:["\u2139\ufe0f"," Testing documentation can be found ",(0,a.jsx)(t.a,{href:"https://ligolang.org/docs/next/testing/?lang=cameligo",children:"here"})]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Edit the file."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsligo",children:'#import "./pokeGame.jsligo" "PokeGame"\n\nexport type main_fn = module_contract<parameter_of PokeGame, PokeGame.storage>;\n\n// reset state\n\nconst _ = Test.reset_state(2 as nat, list([]) as list<tez>);\n\nconst faucet = Test.nth_bootstrap_account(0);\n\nconst sender1: address = Test.nth_bootstrap_account(1);\n\nconst _2 = Test.log("Sender 1 has balance : ");\n\nconst _3 = Test.log(Test.get_balance_of_address(sender1));\n\nconst _4 = Test.set_baker(faucet);\n\nconst _5 = Test.set_source(faucet);\n\nexport const initial_storage = {\n  pokeTraces: Map.empty as map<address, PokeGame.pokeMessage>,\n  feedback: "kiss"\n};\n\nexport const initial_tez = 0mutez;\n\n//functions\n\nexport const _testPoke = (\n  taddr: typed_address<parameter_of PokeGame, PokeGame.storage>,\n  s: address\n): unit => {\n  const contr = Test.to_contract(taddr);\n  const contrAddress = Tezos.address(contr);\n  Test.log("contract deployed with values : ");\n  Test.log(contr);\n  Test.set_source(s);\n  const status = Test.transfer_to_contract(contr, Poke(), 0 as tez);\n  Test.log(status);\n  const store: PokeGame.storage = Test.get_storage(taddr);\n  Test.log(store);\n  //check poke is registered\n\n  match(Map.find_opt(s, store.pokeTraces)) {\n    when (Some(pokeMessage)):\n      do {\n        assert_with_error(\n          pokeMessage.feedback == "",\n          "feedback " + pokeMessage.feedback + " is not equal to expected "\n          + "(empty)"\n        );\n        assert_with_error(\n          pokeMessage.receiver == contrAddress,\n          "receiver is not equal"\n        );\n      }\n    when (None()):\n      assert_with_error(false, "don\'t find traces")\n  };\n};\n\n// TESTS //\n\nconst testSender1Poke =\n  (\n    (): unit => {\n      const orig =\n        Test.originate(contract_of(PokeGame), initial_storage, initial_tez);\n      _testPoke(orig.addr, sender1);\n    }\n  )();\n'})}),"\n",(0,a.jsx)(t.p,{children:"Explanations:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:'#import "./pokeGame.jsligo" "PokeGame"'})," to import the source file as a module to call functions and use object definitions."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"export type main_fn"})," it will be useful later for the mutation tests to point to the main function to call/mutate."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"Test.reset_state ( 2..."})," this creates two implicit accounts on the test environment."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"Test.nth_bootstrap_account"})," This returns the nth account from the environment."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"Test.to_contract(taddr)"})," and ",(0,a.jsx)(t.code,{children:"Tezos.address(contr)"})," are util functions to convert typed addresses, contract, and contract addresses."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"let _testPoke = (s : address) : unit => {...}"})," declaring function starting with ",(0,a.jsx)(t.code,{children:"_"})," is escaping the test for execution. Use this to factorize tests changing only the parameters of the function for different scenarios."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"Test.set_source"})," do not forget to set this value for the transaction signer."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"Test.transfer_to_contract(CONTRACT, PARAMS, TEZ_COST)"})," A transaction to send, it returns an operation."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"Test.get_storage"})," This is how to retrieve the contract's storage."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"assert_with_error(CONDITION,MESSAGE)"})," Use assertion for unit testing."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"const testSender1Poke = ..."})," This test function will be part of the execution report."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"Test.originate_module(MODULE_CONVERTED_TO_CONTRACT,INIT_STORAGE, INIT_BALANCE)"})," It originates a smart contract into the Test environment. A module is converted to a smart contract."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Run the test"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"TAQ_LIGO_IMAGE=ligolang/ligo:1.6.0 taq test unit_pokeGame.jsligo\n"})}),"\n",(0,a.jsx)(t.p,{children:"The output should give you intermediary logs and finally the test results."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-logs",children:'\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Contract             \u2502 Test Results                                                                                                                                   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 unit_pokeGame.jsligo \u2502 "Sender 1 has balance : "                                                                                                                      \u2502\n\u2502                      \u2502 3800000000000mutez                                                                                                                             \u2502\n\u2502                      \u2502 "contract deployed with values : "                                                                                                             \u2502\n\u2502                      \u2502 KT1KwMWUjU6jYyLCTWpZAtT634Vai7paUnRN(None)                                                                                                     \u2502\n\u2502                      \u2502 Success (2130n)                                                                                                                                \u2502\n\u2502                      \u2502 {feedback = "kiss" ; pokeTraces = [tz1TDZG4vFoA2xutZMYauUnS4HVucnAGQSpZ -> {feedback = "" ; receiver = KT1KwMWUjU6jYyLCTWpZAtT634Vai7paUnRN}]} \u2502\n\u2502                      \u2502 Everything at the top-level was executed.                                                                                                      \u2502\n\u2502                      \u2502 - testSender1Poke exited with value ().                                                                                                        \u2502\n\u2502                      \u2502                                                                                                                                                \u2502\n\u2502                      \u2502 \ud83c\udf89 All tests passed \ud83c\udf89                                                                                                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n'})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"do-an-inter-contract-call",children:"Do an inter-contract call"}),"\n",(0,a.jsxs)(t.p,{children:["To keep things simple, 2 versions of the same smart contract are deployed to simulate inter-contract calls and get the feedback message (cf. ",(0,a.jsx)(t.a,{href:"#poke-and-get-feedback-sequence-diagram",children:"sequence diagram"}),")."]}),"\n",(0,a.jsxs)(t.p,{children:["Create a new poke function ",(0,a.jsx)(t.code,{children:"PokeAndGetFeedback: (other : address)"})," with a second part function ",(0,a.jsx)(t.code,{children:"PokeAndGetFeedbackCallback: (feedback : returned_feedback)"})," as a callback. Calling a contract is asynchronous, this is the reason it is done two times."]}),"\n",(0,a.jsxs)(t.p,{children:["The function to call on the second contract is ",(0,a.jsx)(t.code,{children:"GetFeedback: (contract_callback: oracle_param)"})," and returns a feedback message."]}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsxs)(t.p,{children:["Very often, this kind of contract is named an ",(0,a.jsx)(t.code,{children:"Oracle"}),", because generally its storage is updated by an offchain scheduler and it exposes data to any onchain smart contracts."]}),"\n"]}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Edit the file ",(0,a.jsx)(t.code,{children:"pokeGame.jsligo"}),", to define new types:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsligo",children:"type returned_feedback = [address, string]; //address that gives feedback and a string message\n\ntype oracle_param = contract<returned_feedback>;\n"})}),"\n",(0,a.jsx)(t.p,{children:"Explanations :"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"type returned_feedback = [address, string]"})," the parameters of an oracle function always start with the address of the contract caller and followed by the return objects."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"type oracle_param = contract<returned_feedback>"})," the oracle parameters need to be wrapped inside a typed contract."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Write the missing functions, starting with ",(0,a.jsx)(t.code,{children:"getFeedback"}),". Add this new function at the end of the file."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsligo",children:"@entry\nconst getFeedback = (contract_callback : contract<returned_feedback>, store : storage): return_ => {\n    let op : operation = Tezos.transaction(\n            [Tezos.get_self_address(),store.feedback],\n            (0 as mutez),\n            contract_callback);\n    return [list([op]) ,store];\n};\n"})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"Tezos.transaction(RETURNED_PARAMS,TEZ_COST,CALLBACK_CONTRACT)"})," the oracle function requires to return the value back to the contract caller that is passed already as first parameter."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"return [list([op]) ,store]"})," this time, you return a list of operations to execute, there is no need to update the contract storage (but it is a mandatory return object)."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Add now, the first part of the function ",(0,a.jsx)(t.code,{children:"pokeAndGetFeedback"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsligo",children:'@entry\nconst pokeAndGetFeedback = (oracleAddress: address, store: storage): return_ => {\n  //Prepares call to oracle\n\n  let call_to_oracle = (): contract<oracle_param> => {\n    return match(\n      Tezos.get_entrypoint_opt("%getFeedback", oracleAddress) as\n        option<contract<oracle_param>>\n    ) {\n      when (None()):\n        failwith("NO_ORACLE_FOUND")\n      when (Some(contract)):\n        contract\n    };\n  };\n  // Builds transaction\n\n  let op: operation =\n    Tezos.transaction(\n      (\n        (\n          Tezos.self("%pokeAndGetFeedbackCallback") as\n            contract<returned_feedback>\n        )\n      ),\n      (0 as mutez),\n      call_to_oracle()\n    );\n  return [list([op]), store];\n};\n'})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:'Tezos.get_entrypoint_opt("%getFeedback",oracleAddress)'})," you require to get the oracle contract address. Then you want to call a specific entrypoint of this contract. The function name is always starting with ",(0,a.jsx)(t.code,{children:"%"})," with always the first letter in lowercase (even if the code is different)."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:'Tezos.transaction(((Tezos.self("%pokeAndGetFeedbackCallback") as contract<returned_feedback>)),TEZ_COST,call_to_oracle())'})," The transaction takes as first param the entrypoint of for the callback that the oracle uses to answer the feedback, the tez cost and the oracle contract you got just above as transaction destination."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Write the last missing function ",(0,a.jsx)(t.code,{children:"pokeAndGetFeedbackCallback"}),", receive the feedback and finally store it."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsligo",children:"@entry\nconst pokeAndGetFeedbackCallback = (feedback : returned_feedback, store : storage) : return_ => {\n    let feedbackMessage = {receiver : feedback[0] ,feedback: feedback[1]};\n    return [  list([]) as list<operation>, {...store,\n        pokeTraces : Map.add(Tezos.get_source(), feedbackMessage , store.pokeTraces) }];\n};\n"})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"let feedbackMessage = {receiver : feedback[0] ,feedback: feedback[1]}"})," prepares the trace including the feedback message and the feedback contract creator."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"{...store,pokeTraces : Map.add(Tezos.get_source(), feedbackMessage , store.pokeTraces) }"})," add the new trace to the global trace map."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Compile the contract."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"TAQ_LIGO_IMAGE=ligolang/ligo:1.6.0 taq compile pokeGame.jsligo\n"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["(Optional) Write a unit test for this new function ",(0,a.jsx)(t.code,{children:"pokeAndGetFeedback"}),"."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"use-views-instead-of-inter-contract-call",children:"Use views instead of inter-contract call"}),"\n",(0,a.jsxs)(t.p,{children:["As you saw in the previous step, inter-contract calls make the business logic more complex but not only that, ",(0,a.jsx)(t.a,{href:"https://ligolang.org/docs/tutorials/inter-contract-calls/?lang=jsligo#a-note-on-complexity",children:"thinking about the cost is even worse"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["In this training, the oracle is providing a read-only storage that can be replaced by a ",(0,a.jsx)(t.code,{children:"view"})," instead of a complex and costly callback."]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.a,{href:"https://ligolang.org/docs/protocol/hangzhou#on-chain-views",children:"See the documentation here about onchain views"}),"."]}),"\n",(0,a.jsx)(t.mermaid,{value:"sequenceDiagram\n  Note left of User: Prepare to poke on Smartcontract1 and get feedback from Smartcontract2\n  User->>Smartcontract1: pokeAndGetFeedback(Smartcontract2)\n  Smartcontract1--\x3e>Smartcontract2 : feedback()\n  Smartcontract2--\x3e>Smartcontract1 : [Smartcontract2,feedback]\n  Note left of Smartcontract1:  store Smartcontract2 address + feedback from Smartcontract2"}),"\n",(0,a.jsxs)(t.p,{children:["\u26a0\ufe0f"," ",(0,a.jsxs)(t.strong,{children:["Comment below functions (with ",(0,a.jsx)(t.code,{children:"/* */"})," syntax or // syntax) or just remove it, it is no more useful"]})," ","\u26a0\ufe0f"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.code,{children:"pokeAndGetFeedbackCallback"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.code,{children:"getFeedback"})}),"\n"]}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Edit function ",(0,a.jsx)(t.code,{children:"pokeAndGetFeedback"})," to call view instead of a transaction."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsligo",children:'@entry\nconst pokeAndGetFeedback = (oracleAddress: address, store: storage): return_ => {\n  //Read the feedback view\n\n  let feedbackOpt: option<string> =\n    Tezos.call_view("feedback", unit, oracleAddress);\n  match(feedbackOpt) {\n    when (Some(feedback)):\n      do {\n        let feedbackMessage = { receiver: oracleAddress, feedback: feedback };\n        return [\n          list([]) as list<operation>,\n          {\n            ...store,\n            pokeTraces: Map.add(\n              Tezos.get_source(),\n              feedbackMessage,\n              store.pokeTraces\n            )\n          }\n        ];\n      }\n    when (None()):\n      failwith("Cannot find view feedback on given oracle address")\n  };\n};\n'})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Declare the view at the end of the file. Do not forget the annotation ",(0,a.jsx)(t.code,{children:"@view"})," !"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsligo",children:"@view\nexport const feedback = (_: unit, store: storage): string => { return store.feedback };\n"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Compile the contract."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"TAQ_LIGO_IMAGE=ligolang/ligo:1.6.0 taq compile pokeGame.jsligo\n"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["(Optional) Write a unit test for the updated function ",(0,a.jsx)(t.code,{children:"pokeAndGetFeedback"}),"."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"write-mutation-tests",children:"Write mutation tests"}),"\n",(0,a.jsxs)(t.p,{children:["LIGO provides mutation testing through the Test library. Mutation tests are like ",(0,a.jsx)(t.code,{children:"testing your tests"})," to see if your unit test coverage is strong enough. Bugs, or mutants, are automatically inserted into your code. Your tests are run on each mutant."]}),"\n",(0,a.jsx)(t.p,{children:"If your tests fail then the mutant is killed. If your tests passed, the mutant survived.\nThe higher the percentage of mutants killed, the more effective your tests are."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://stryker-mutator.io/docs/mutation-testing-elements/supported-mutators",children:"Example of mutation features for other languages"})}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Create a file ",(0,a.jsx)(t.code,{children:"mutation_pokeGame.jsligo"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"taq create contract mutation_pokeGame.jsligo\n"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Edit the file."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsligo",children:'#import "./pokeGame.jsligo" "PokeGame"\n\n#import "./unit_pokeGame.jsligo" "PokeGameTest"\n\n// reset state\n\nconst _ = Test.reset_state(2 as nat, list([]) as list<tez>);\n\nconst faucet = Test.nth_bootstrap_account(0);\n\nconst sender1: address = Test.nth_bootstrap_account(1);\n\nconst _1 = Test.log("Sender 1 has balance : ");\n\nconst _2 = Test.log(Test.get_balance_of_address(sender1));\n\nconst _3 = Test.set_baker(faucet);\n\nconst _4 = Test.set_source(faucet);\n\nconst _tests = (\n  ta: typed_address<parameter_of PokeGame, PokeGame.storage>,\n  _: michelson_contract<parameter_of PokeGame, PokeGame.storage>,\n  _2: int\n): unit => { return PokeGameTest._testPoke(ta, sender1); };\n\nconst test_mutation =\n  (\n    (): unit => {\n      const mutationErrorList =\n        Test.originate_and_mutate_all(\n          contract_of(PokeGame),\n          PokeGameTest.initial_storage,\n          PokeGameTest.initial_tez,\n          _tests\n        );\n      match(mutationErrorList) {\n        when ([]):\n          unit\n        when ([head, ..._tail]):\n          do {\n            Test.log(head);\n            Test.assert_with_error(false, Test.to_string(head[1]))\n          }\n      };\n    }\n  )();\n'})}),"\n",(0,a.jsx)(t.p,{children:"Explanation:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"#import <SRC_FILE> <NAMESPACE>"}),": import your source code that will be mutated and your unit tests. For more information ",(0,a.jsx)(t.a,{href:"https://ligolang.org/docs/language-basics/modules",children:"module doc"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"const _tests = (ta: typed_address<parameter_of PokeGame, PokeGame.storage>, _: michelson_contract, _: int) : unit => {..."}),": you need to provide the test suite that will be run by the framework. Just point to the unit test you want to run."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"const test_mutation = (() : unit => {"}),": this is the definition of the mutations tests."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"Test.originate_module_and_mutate_all(CONTRACT_TO_MUTATE, INIT_STORAGE, INIT_TEZ_COST, UNIT_TEST_TO_RUN)"}),": This will take the first argument as the source code to mutate and the last argument as unit test suite function to run over. It returns a list of mutations that succeed (if size > 0 then bad test coverage) or an empty list (good, even mutants did not harm your code)."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Run the test."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"TAQ_LIGO_IMAGE=ligolang/ligo:1.6.0 taq test mutation_pokeGame.jsligo\n"})}),"\n",(0,a.jsx)(t.p,{children:"Output:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-logs",children:'=== Error messages for mutation_pokeGame.jsligo ===\nFile "contracts/mutation_pokeGame.jsligo", line 43, characters 12-66:\n42 |             Test.log(head);\n43 |             Test.assert_with_error(false, Test.to_string(head[1]))\n44 |           }\n\nTest failed with "Mutation at: File "contracts/pokeGame.jsligo", line 52, characters 15-66:\n51 |     when (None()):\n52 |       failwith("Cannot find view feedback on given oracle address")\n53 |   };\n\nReplacing by: "Cannot find view feedback on given oracle addressCannot find view feedback on given oracle address".\n"\nTrace:\nFile "contracts/mutation_pokeGame.jsligo", line 43, characters 12-66 ,\nFile "contracts/mutation_pokeGame.jsligo", line 43, characters 12-66 ,\nFile "contracts/mutation_pokeGame.jsligo", line 28, character 2 to line 47, character 5\n\n\n===\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Contract                 \u2502 Test Results         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 mutation_pokeGame.jsligo \u2502 Some tests failed :( \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n'})}),"\n",(0,a.jsx)(t.p,{children:"Invaders are here."}),"\n",(0,a.jsx)(t.p,{children:"What happened?"}),"\n",(0,a.jsx)(t.p,{children:"The mutation has altered a part of the code that is not tested, it was not covered, so the unit test passed."}),"\n",(0,a.jsx)(t.p,{children:"For a short fix, tell the Library to ignore this function for mutants."}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Go to your source file pokeGame.jsligo, and annotate the function ",(0,a.jsx)(t.code,{children:"pokeAndGetFeedback"})," with ",(0,a.jsx)(t.code,{children:"@no_mutation"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsligo",children:"@no_mutation\n@entry\nconst pokeAndGetFeedback ...\n"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Run again the mutation tests."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"TAQ_LIGO_IMAGE=ligolang/ligo:1.6.0 taq test mutation_pokeGame.jsligo\n"})}),"\n",(0,a.jsx)(t.p,{children:"Output"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-logs",children:'\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Contract                 \u2502 Test Results                                                                                                                                   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 mutation_pokeGame.jsligo \u2502 "Sender 1 has balance : "                                                                                                                      \u2502\n\u2502                          \u2502 3800000000000mutez                                                                                                                             \u2502\n\u2502                          \u2502 "contract deployed with values : "                                                                                                             \u2502\n\u2502                          \u2502 KT1L8mCbuTJXKq3CDoHDxqfH5aj5sEgAdx9C(None)                                                                                                     \u2502\n\u2502                          \u2502 Success (1330n)                                                                                                                                \u2502\n\u2502                          \u2502 {feedback = "kiss" ; pokeTraces = [tz1hkMbkLPkvhxyqsQoBoLPqb1mruSzZx3zy -> {feedback = "" ; receiver = KT1L8mCbuTJXKq3CDoHDxqfH5aj5sEgAdx9C}]} \u2502\n\u2502                          \u2502 "Sender 1 has balance : "                                                                                                                      \u2502\n\u2502                          \u2502 3800000000000mutez                                                                                                                             \u2502\n\u2502                          \u2502 Everything at the top-level was executed.                                                                                                      \u2502\n\u2502                          \u2502 - test_mutation exited with value ().                                                                                                          \u2502\n\u2502                          \u2502                                                                                                                                                \u2502\n\u2502                          \u2502 \ud83c\udf89 All tests passed \ud83c\udf89                                                                                                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n'})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"update-the-frontend",children:"Update the frontend"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Reuse the dApp files from ",(0,a.jsx)(t.a,{href:"https://github.com/marigold-dev/training-dapp-1/tree/main/solution/app",children:"the previous session"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Redeploy a new version of the smart contract."}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsxs)(t.p,{children:["Note: You can set ",(0,a.jsx)(t.code,{children:"feedback"})," value to any action other than default ",(0,a.jsx)(t.code,{children:"kiss"})," string (it is more fun for other to discover it)."]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:'TAQ_LIGO_IMAGE=ligolang/ligo:1.6.0 taq compile pokeGame.jsligo\ntaq generate types ./app/src\ntaq deploy pokeGame.tz -e "testing"\n'})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Adapt the frontend application code. Edit ",(0,a.jsx)(t.code,{children:"App.tsx"}),", and add new import."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"import { address } from './type-aliases';\n"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Add a new React variable after ",(0,a.jsx)(t.code,{children:"userBalance"})," definition."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"const [contractToPoke, setContractToPoke] = useState<string>('');\n"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Change the poke function to set entrypoint to ",(0,a.jsx)(t.code,{children:"pokeAndGetFeedback"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"//poke\nconst poke = async (\n  e: React.FormEvent<HTMLFormElement>,\n  contract: api.Contract\n) => {\n  e.preventDefault();\n  let c: PokeGameWalletType = await Tezos.wallet.at('' + contract.address);\n  try {\n    const op = await c.methodsObject\n      .pokeAndGetFeedback(contractToPoke as address)\n      .send();\n    await op.confirmation();\n    alert('Tx done');\n  } catch (error: any) {\n    console.log(error);\n    console.table(`Error: ${JSON.stringify(error, null, 2)}`);\n  }\n};\n"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Change the display to a table changing ",(0,a.jsx)(t.code,{children:"contracts.map..."})," by:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-html",children:'<table><thead><tr><th>address</th><th>trace "contract - feedback - user"</th><th>action</th></tr></thead><tbody>\n    {contracts.map((contract) => <tr><td style={{borderStyle: "dotted"}}>{contract.address}</td><td style={{borderStyle: "dotted"}}>{(contract.storage !== null && contract.storage.pokeTraces !== null && Object.entries(contract.storage.pokeTraces).length > 0)?Object.keys(contract.storage.pokeTraces).map((k : string)=>contract.storage.pokeTraces[k].receiver+" "+contract.storage.pokeTraces[k].feedback+" "+k+", "):""}</td><td style={{borderStyle: "dotted"}}><form onSubmit={(e) =>poke(e,contract)}><input type="text" onChange={e=>setContractToPoke(e.currentTarget.value)} placeholder=\'enter contract address here\' /><button  type=\'submit\'>Poke</button></form></td></tr>)}\n    </tbody></table>\n'})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Relaunch the app."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"cd app\nyarn install\nyarn dev\n"})}),"\n",(0,a.jsxs)(t.p,{children:["On the listed contract, choose your line and input the address of the contract you will receive feedback. Click on ",(0,a.jsx)(t.code,{children:"poke"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.img,{alt:"The dApp page showing the result of the poke action",src:n(84960).A+"",width:"1917",height:"397"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["This time, the logged user will receive feedback from a targeted contract (as input of the form) via any listed contract (the first column of the table).\nRefresh manually by clicking on ",(0,a.jsx)(t.code,{children:"Fetch"})," contracts` button."]}),"\n",(0,a.jsx)(t.p,{children:"Poke other developers' contracts to discover their contract hidden feedback when you poke them."}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,a.jsx)(t.p,{children:"Now, you can call other contracts, use views, and test your smart contract before deploying it.\nIn the next training, you will learn how to use tickets."}),"\n",(0,a.jsxs)(t.p,{children:["When you are ready, continue to ",(0,a.jsx)(t.a,{href:"/tutorials/dapp/part-3",children:"Part 3: Tickets"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},84960:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/dapp-result-b00833d68fc979dd7696d023b6808630.png"},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var s=n(96540);const a={},o=s.createContext(a);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);