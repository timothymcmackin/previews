"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1515],{98877:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"unity/calling-contracts","title":"Calling contracts with the Unity SDK","description":"Smart contracts are backend programs that run on blockchains.","source":"@site/docs/unity/calling-contracts.md","sourceDirName":"unity","slug":"/unity/calling-contracts","permalink":"/previews/docs/biel-custom-location/unity/calling-contracts","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1737608400000,"frontMatter":{"title":"Calling contracts with the Unity SDK","sidebar_label":"Calling contracts","authors":"Tim McMackin","last_update":{"date":"23 January 2025"}},"sidebar":"documentationSidebar","previous":{"title":"Connecting accounts","permalink":"/previews/docs/biel-custom-location/unity/connecting-accounts"},"next":{"title":"Managing tokens","permalink":"/previews/docs/biel-custom-location/unity/managing-tokens"}}');var s=t(74848),a=t(28453);const r={title:"Calling contracts with the Unity SDK",sidebar_label:"Calling contracts",authors:"Tim McMackin",last_update:{date:"23 January 2025"}},o=void 0,c={},l=[{value:"Calling Tezos contracts",id:"calling-tezos-contracts",level:2},{value:"Encoding parameters",id:"encoding-parameters",level:3},{value:"Encoding parameters with the Netezos Micheline SDK",id:"encoding-parameters-with-the-netezos-micheline-sdk",level:4},{value:"Encoding parameters as JSON strings",id:"encoding-parameters-as-json-strings",level:4},{value:"Calling Tezos views",id:"calling-tezos-views",level:2},{value:"Calling Etherlink contracts",id:"calling-etherlink-contracts",level:2},{value:"Calling Etherlink views",id:"calling-etherlink-views",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Smart contracts are backend programs that run on blockchains.\nSmart contracts can do many tasks, but for gaming they have two main purposes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"They handle tokens, which are digital assets stored on the blockchain"}),"\n",(0,s.jsx)(n.li,{children:"They provide backend logic that users can trust because it cannot change"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["For more information about smart contracts on Tezos, see ",(0,s.jsx)(n.a,{href:"/smart-contracts",children:"Smart contracts"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"The Unity SDK can call any deployed Tezos or Etherlink contract just like any other Tezos or EVM client can."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"To call a Tezos smart contract, the application must be connected to a Beacon or social wallet"}),"\n",(0,s.jsx)(n.li,{children:"To call an Etherlink smart contract, the application must be connected to a WalletConnect contract"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"calling-tezos-contracts",children:"Calling Tezos contracts"}),"\n",(0,s.jsxs)(n.p,{children:["Smart contracts have one or more ",(0,s.jsx)(n.a,{href:"/smart-contracts/entrypoints",children:"entrypoints"}),", which are the different ways that it can be called, similar to a method or function in programming languages or an endpoint in an API.\nTherefore, to call a Tezos smart contract, you need:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Its address, which starts with ",(0,s.jsx)(n.code,{children:"KT1"})]}),"\n",(0,s.jsx)(n.li,{children:"The entrypoint to call"}),"\n",(0,s.jsx)(n.li,{children:"The parameter to pass to the entrypoint, which must be in the format that the entrypoint expects"}),"\n",(0,s.jsx)(n.li,{children:"An amount of tez tokens to send with the transaction, which can be zero or more"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["To call a contract, make sure that you are connected to a Beacon wallet.\nThen create an ",(0,s.jsx)(n.code,{children:"OperationRequest"})," object with that information and pass it to the ",(0,s.jsx)(n.code,{children:"TezosAPI.RequestOperation()"})," method.\nTo get the result of the operation, you can await the return value of the ",(0,s.jsx)(n.code,{children:"TezosAPI.RequestOperation()"})," method or use the ",(0,s.jsx)(n.code,{children:"TezosAPI.OperationResulted"})," event."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, this code calls a contract and passes the parameter ",(0,s.jsx)(n.code,{children:"5"})," to its ",(0,s.jsx)(n.code,{children:"increment"})," entrypoint.\nWhen the transaction completes successfully, it logs the hash of the transaction.\nYou can use this hash to look up information about the transaction in a ",(0,s.jsx)(n.a,{href:"/developing/information/block-explorers",children:"block explorer"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'private async void Awake()\n{\n    await TezosAPI.WaitUntilSDKInitialized();\n\n    _connectButton.onClick.AddListener(OnConnectClicked);\n    _disconnectButton.onClick.AddListener(OnDisconnectClicked);\n    _requestOperationButton.onClick.AddListener(OnRequestOperationClicked);\n\n    TezosAPI.OperationResulted += OperationResulted;\n}\n\nprivate async void OnRequestOperationClicked()\n{\n    // Verify that the app is connected to an EVM wallet via WalletConnect\n    WalletProviderData walletProviderData = TezosAPI.GetWalletConnectionData();\n    if (walletProviderData.WalletType != WalletType.BEACON && !TezosAPI.IsSocialLoggedIn()) {\n        Debug.LogError("Connect to a Beacon or social wallet first.");\n        return;\n    }\n\n    try\n    {\n        var request = new OperationRequest\n        {\n            // Contract to call\n            Destination = "KT1R2LTg3mQoLvHtUjo2xSi7RMBUJ1sJkDiD",\n            // Entrypoint to call\n            EntryPoint = "increment",\n            // Parameter to pass, as a Michelson expression\n            Arg = new MichelineInt(5).ToJson(),\n            // Amount of tez to send with the transaction\n            Amount = "0",\n        };\n        var response = await TezosAPI.RequestOperation(request);\n        Debug.Log("Transaction hash: " + response.TransactionHash);\n    }\n    catch (Exception e) when (e is WalletOperationRejected or SocialOperationFailed)\n    {\n        Debug.LogError($"Operation failed: {e.Message}");\n    }\n    catch (Exception e)\n    {\n        Debug.LogError($"Unexpected error during operation: {e.Message}");\n    }\n}\n\nprivate void OperationResulted(OperationResponse operationResponse)\n{\n    Debug.Log("Transaction hash: " + operationResponse.TransactionHash);\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"encoding-parameters",children:"Encoding parameters"}),"\n",(0,s.jsxs)(n.p,{children:["Tezos entrypoint parameters must be in ",(0,s.jsx)(n.a,{href:"https://octez.tezos.com/docs/shell/micheline.html",children:"Micheline"})," JSON format, which is the format that the Michelson language uses for values.\nYou can use the ",(0,s.jsx)(n.a,{href:"https://netezos.dev/",children:"Netezos"})," SDK to format Micheline parameters or construct them as JSON strings."]}),"\n",(0,s.jsx)(n.h4,{id:"encoding-parameters-with-the-netezos-micheline-sdk",children:"Encoding parameters with the Netezos Micheline SDK"}),"\n",(0,s.jsx)(n.p,{children:"Micheline primitives include:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Integers, as in ",(0,s.jsx)(n.code,{children:"new MichelineInt(1)"})]}),"\n",(0,s.jsxs)(n.li,{children:["Strings, as in ",(0,s.jsx)(n.code,{children:'new MichelineString("Hello")'})]}),"\n",(0,s.jsxs)(n.li,{children:["Bytes, as in ",(0,s.jsx)(n.code,{children:'new MichelineBytes(bytes")'})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["As described in ",(0,s.jsx)(n.a,{href:"/smart-contracts/data-types/complex-data-types",children:"Complex data types"}),", Micheline values are organized as a series of nested pairs in tree and comb formats.\nFor example, if an entrypoint accepts an integer, a string, and a series of bytes as a nested pair, you can format the parameter like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'string myStringToBytes = "Hello!";\nvar bytes = new byte[myStringToBytes.Length];\n\nfor (var i = 0; i < myStringToBytes.Length; i++)\n{\n    bytes[i] = (byte)myStringToBytes[i];\n}\n\nvar parameter = new MichelinePrim\n{\n    Prim = PrimType.Pair,\n    Args = new List<IMicheline>\n    {\n        new MichelineInt(1),\n        new MichelineString("Hello"),\n        new MichelineBytes(bytes)\n    }\n}.ToJson();\n\nvar request = new OperationRequest\n{\n    Destination = "KT1PB9rp17qfL6RQR9ZUsKMm3NvbSoTopnwY",\n    EntryPoint = "intStringBytes",\n    Arg = parameter,\n    Amount = "0",\n};\nvar response = await TezosAPI.RequestOperation(request);\n'})}),"\n",(0,s.jsx)(n.h4,{id:"encoding-parameters-as-json-strings",children:"Encoding parameters as JSON strings"}),"\n",(0,s.jsxs)(n.p,{children:["Because the ",(0,s.jsx)(n.code,{children:"Arg"})," field of the ",(0,s.jsx)(n.code,{children:"OperationRequest"})," object accepts a JSON string, you can also use a raw Micheline-formatted JSON string.\nFor example, the ",(0,s.jsx)(n.code,{children:"MichelinePrim"})," object in the previous example looks like this as a string:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "prim": "Pair",\n  "args": [\n    {\n      "int": "1"\n    },\n    {\n      "string": "Hello"\n    },\n    {\n      "bytes": "48656c6c6f21"\n    }\n  ]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Therefore, you can create a string literal with this JSON, escaping characters as necessary, and use it in the ",(0,s.jsx)(n.code,{children:"OperationRequest"})," object, as in this example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'var jsonString = "{\\"prim\\":\\"Pair\\",\\"args\\":[{\\"int\\":\\"1\\"},{\\"string\\":\\"Hello\\"},{\\"bytes\\":\\"48656c6c6f21\\"}]}";\n\nvar request = new OperationRequest\n{\n    Destination = "KT1PB9rp17qfL6RQR9ZUsKMm3NvbSoTopnwY",\n    EntryPoint = "intStringBytes",\n    Arg = jsonString,\n    Amount = "0",\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Block explorers can help you format parameters.\nFor example, assume an entrypoint that accepts a parameter that consists of a string followed by any number of pairs of an integer and a string.\nIf you fill in values for this parameter on the ",(0,s.jsx)(n.strong,{children:"Interact"})," tab of ",(0,s.jsx)(n.a,{href:"https://better-call.dev",children:"Better Call Dev"})," and click ",(0,s.jsx)(n.strong,{children:"Execute > Raw JSON"}),", it shows this Micheline value in JSON format:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "prim": "Pair",\n  "args": [\n    {\n      "string": "My string"\n    },\n    [\n      {\n        "prim": "Pair",\n        "args": [\n          {\n            "int": "5"\n          },\n          {\n            "string": "String one"\n          }\n        ]\n      },\n      {\n        "prim": "Pair",\n        "args": [\n          {\n            "int": "9"\n          },\n          {\n            "string": "String two"\n          }\n        ]\n      },\n      {\n        "prim": "Pair",\n        "args": [\n          {\n            "int": "12"\n          },\n          {\n            "string": "String three"\n          }\n        ]\n      }\n    ]\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"You can convert this JSON to a string and use it in the parameter instead of constructing the JSON with Netezos objects."}),"\n",(0,s.jsx)(n.h2,{id:"calling-tezos-views",children:"Calling Tezos views"}),"\n",(0,s.jsxs)(n.p,{children:["To call a ",(0,s.jsx)(n.a,{href:"/smart-contracts/views",children:"view"}),", pass the address of the contract, the name of the view, and the Michelson-encoded parameter to the ",(0,s.jsx)(n.code,{children:"TezosAPI.ReadView()"})," method.\nYou must set the return type on the ",(0,s.jsx)(n.code,{children:"TezosAPI.ReadView()"})," method, as in this example for a view that returns a string:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'var result = await TezosAPI.ReadView<string>("KT1K46vZTMEe8bnacFvFQfgHtNDKniEauRMJ", "simple", "\\"String value\\"");\nDebug.Log("View response: " + result);\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If the return type is more complicated than a single primitive, you must create a type to represent the return type.\nFor example, the FA2 contract ",(0,s.jsx)(n.code,{children:"KT1HP6uMwf829cDgwynZJ4rDvjLCZmfYjja1"})," has a view named ",(0,s.jsx)(n.code,{children:"get_balance_of"})," that returns information about token owners.\nBlock explorers such as ",(0,s.jsx)(n.a,{href:"https://tzkt.io",children:"tzkt.io"})," show the parameter and return types for this view in JSON and Michelson format:"]}),"\n",(0,s.jsx)("img",{src:"/img/unity/tzkt-balance-view.png",alt:"Parameter and return types for the view",style:{width:300}}),"\n",(0,s.jsx)(n.p,{children:"The equivalent C# types look like these examples:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"private class ParameterType\n{\n    public string owner;\n    public int    token_id;\n}\n\nprivate class ResponseType\n{\n    public Request request { get; set; }\n    public string  balance { get; set; }\n}\n\npublic class Request\n{\n    public string owner    { get; set; }\n    public string token_id { get; set; }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"This example shows how to use these types to call the view and receive the response:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'var parameter = new List<ParameterType>\n{\n    new()\n    {\n        owner    = "tz1QCVQinE8iVj1H2fckqx6oiM85CNJSK9Sx",\n        token_id = 0\n    },\n    new()\n    {\n        owner    = "tz1hQKqRPHmxET8du3fNACGyCG8kZRsXm2zD",\n        token_id = 0\n    }\n\n};\n\nvar json = await TezosAPI.ReadView<List<ResponseType>>(\n    "KT1HP6uMwf829cDgwynZJ4rDvjLCZmfYjja1", "get_balance_of", parameter\n);\n\nforeach (var item in json)\n{\n    Debug.Log($"The account {item.request.owner} has {item.balance} tokens of type {item.request.token_id}");\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"calling-etherlink-contracts",children:"Calling Etherlink contracts"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://www.etherlink.com/",children:"Etherlink"})," is an Ethereum Virtual Machine-compatible layer that runs on top of Tezos and secures its state to Tezos via Smart Rollups.\nFor more information about Etherlink, see the ",(0,s.jsx)(n.a,{href:"https://docs.etherlink.com/",children:"Etherlink documentation"}),"."]}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.p,{children:"The Unity SDK can send transactions to Etherlink, but not to any other EVM network.\nDue to limitations in the underlying tools, it also cannot change the user's wallet's network to Etherlink, which is a prerequisite to sending transactions to Etherlink."}),(0,s.jsxs)(n.p,{children:["Therefore, to send transactions to Etherlink, you must first ensure that the user's wallet is connected to Etherlink.\nFor information about connecting wallets to Etherlink, see ",(0,s.jsx)(n.a,{href:"https://docs.etherlink.com/get-started/using-your-wallet",children:"Using your wallet"})," in the Etherlink documentation."]})]}),"\n",(0,s.jsx)(n.p,{children:"Like Tezos contracts, Etherlink smart contracts have functions that clients can call.\nTo call an Etherlink smart contract, you need:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Its address"}),"\n",(0,s.jsx)(n.li,{children:"The entrypoint to call"}),"\n",(0,s.jsxs)(n.li,{children:["The contract's application binary interface (ABI), which is a description of the contract's interface; you can get the ABI from the tool that deployed the contract or by compiling the source code of the contract in a tool such as the ",(0,s.jsx)(n.a,{href:"https://remix.ethereum.org/",children:"Remix IDE"})]}),"\n",(0,s.jsx)(n.li,{children:"The parameter to pass to the entrypoint"}),"\n",(0,s.jsx)(n.li,{children:"An amount of XTZ to send with the transaction, which can be zero or more"}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["Calls to Etherlink smart contracts do not run the ",(0,s.jsx)(n.code,{children:"TezosAPI.OperationResulted"})," event."]})}),"\n",(0,s.jsxs)(n.p,{children:["The Unity SDK uses the ",(0,s.jsx)(n.a,{href:"https://reown.com/",children:"Reown SDK"}),", so before you can access Etherlink, you must set up Reown:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["At ",(0,s.jsx)(n.a,{href:"https://cloud.reown.com",children:"https://cloud.reown.com"}),", create a Reown project and get its ID."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["In Unity, install the WalletConnect SDK from the Git URL ",(0,s.jsx)(n.code,{children:"https://github.com/trilitech/tezos-wallet-connect-unity-sdk.git"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"Assets/Tezos/Resources/WalletConnectConfig.asset"})," object, in the ",(0,s.jsx)(n.strong,{children:"Project Id"})," field, add the ID of your Reown project and fill in the other fields with information including the name and URL of your application, as in this example:"]}),"\n",(0,s.jsx)("img",{src:"/img/unity/unity-walletconnect-config.png",alt:"Setting the Reown project ID on the WalletConnectConfig object",style:{width:300}}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Now you can interact with Etherlink contracts with the Reown SDK."}),"\n",(0,s.jsxs)(n.p,{children:["To call a contract, make sure that you are connected to a WalletConnect wallet.\nThen use the ",(0,s.jsx)(n.code,{children:"AppKit.Evm.WriteContractAsync()"})," method to call the contract."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, this code calls a contract and passes the parameter ",(0,s.jsx)(n.code,{children:"5"})," to its ",(0,s.jsx)(n.code,{children:"set"})," entrypoint.\nWhen the transaction completes successfully, it logs the hash of the transaction.\nYou can use this hash to look up information about the transaction in the ",(0,s.jsx)(n.a,{href:"https://explorer.etherlink.com/",children:"Etherlink Mainnet block explorer"})," or the ",(0,s.jsx)(n.a,{href:"https://testnet.explorer.etherlink.com/",children:"Etherlink Testnet block explorer"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using Reown.AppKit.Unity;\n\npublic class MyScripts : MonoBehaviour\n{\n\n    private async void Awake()\n    {\n        await TezosAPI.WaitUntilSDKInitialized();\n\n        _connectButton.onClick.AddListener(OnConnectClicked);\n        _disconnectButton.onClick.AddListener(OnDisconnectClicked);\n        _requestOperationButton.onClick.AddListener(OnRequestOperationClicked);\n\n        TezosAPI.OperationResulted += OperationResulted;\n    }\n\n    private async void OnRequestOperationClicked()\n    {\n        // Verify that the app is connected to an EVM wallet via WalletConnect\n        WalletProviderData walletProviderData = TezosAPI.GetWalletConnectionData();\n        if (walletProviderData.WalletType != WalletType.WALLETCONNECT) {\n            Debug.LogError("Connect to a WalletConnect wallet first.");\n            return;\n        }\n\n        try\n        {\n            string contractAddress = "0xfac1791E9db153ef693c68d142Cf11135b8270B9";\n            string ABI = "[ { \\"inputs\\": [], \\"name\\": \\"get\\", \\"outputs\\": [ { \\"internalType\\": \\"uint256\\", \\"name\\": \\"\\", \\"type\\": \\"uint256\\" } ], \\"stateMutability\\": \\"view\\", \\"type\\": \\"function\\" }, { \\"inputs\\": [ { \\"internalType\\": \\"uint256\\", \\"name\\": \\"x\\", \\"type\\": \\"uint256\\" } ], \\"name\\": \\"set\\", \\"outputs\\": [], \\"stateMutability\\": \\"nonpayable\\", \\"type\\": \\"function\\" } ]";\n            string entrypoint = "set";\n\n            var result = await AppKit.Evm.WriteContractAsync(contractAddress, ABI, entrypoint, "5");\n\n            Debug.Log("Result: " + result);\n        }\n        catch (Exception e)\n        {\n            Debug.LogError($"Unexpected error during operation: {e.Message}");\n        }\n    }\n\n    private void OperationResulted(OperationResponse operationResponse)\n    {\n        Debug.Log("Transaction hash: " + operationResponse.TransactionHash);\n    }\n\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"The Tezos Unity SDK supports these Reown SDK methods, but only for calls to Etherlink, not any other EVM chain:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"AppKit.Evm.ReadContractAsync()"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"AppKit.Evm.WriteContractAsync()"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"AppKit.Evm.SendTransactionAsync()"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"AppKit.Evm.SendRawTransactionAsync()"})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["For more information about using the Reown SDK, see ",(0,s.jsx)(n.a,{href:"https://docs.reown.com/appkit/unity/core/usage",children:"https://docs.reown.com/appkit/unity/core/usage"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"calling-etherlink-views",children:"Calling Etherlink views"}),"\n",(0,s.jsxs)(n.p,{children:["Calling an Etherlink view is similar to calling an Etherlink entrypoint.\nThe main difference is that you use the ",(0,s.jsx)(n.code,{children:"AppKit.Evm.ReadContractAsync()"})," method and that you must set the return type to the appropriate Solidity type that the view returns.\nThis example calls a view that returns a ",(0,s.jsx)(n.code,{children:"unit"})," integer type:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using Reown.AppKit.Unity;\n\npublic class MyScripts : MonoBehaviour\n{\n\n    private async void Awake()\n    {\n        await TezosAPI.WaitUntilSDKInitialized();\n\n        _connectButton.onClick.AddListener(OnConnectClicked);\n        _disconnectButton.onClick.AddListener(OnDisconnectClicked);\n        _callViewButton.onClick.AddListener(OnCallViewClicked);\n    }\n\n    private async void OnCallViewClicked()\n    {\n        // Verify that the app is connected to an EVM wallet via WalletConnect\n        WalletProviderData walletProviderData = TezosAPI.GetWalletConnectionData();\n        if (walletProviderData.WalletType != WalletType.WALLETCONNECT) {\n            Debug.LogError("Connect to a WalletConnect wallet first.");\n            return;\n        }\n\n        try\n        {\n            string contractAddress = "0xfac1791E9db153ef693c68d142Cf11135b8270B9";\n            string ABI = "[ { \\"inputs\\": [], \\"name\\": \\"get\\", \\"outputs\\": [ { \\"internalType\\": \\"uint256\\", \\"name\\": \\"\\", \\"type\\": \\"uint256\\" } ], \\"stateMutability\\": \\"view\\", \\"type\\": \\"function\\" }, { \\"inputs\\": [ { \\"internalType\\": \\"uint256\\", \\"name\\": \\"x\\", \\"type\\": \\"uint256\\" } ], \\"name\\": \\"set\\", \\"outputs\\": [], \\"stateMutability\\": \\"nonpayable\\", \\"type\\": \\"function\\" } ]";\n            string entrypoint = "get";\n\n            var result = await AppKit.Evm.ReadContractAsync<uint>(contractAddress, ABI, entrypoint);\n\n            Debug.Log("Result: " + result);\n        }\n        catch (Exception e)\n        {\n            Debug.LogError($"Unexpected error during operation: {e.Message}");\n        }\n    }\n\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(96540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);