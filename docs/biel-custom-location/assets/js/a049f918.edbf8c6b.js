"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8305],{62980:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"tutorials/dapp/part-3","title":"Part 3: Tickets","description":"Previously, you learned how to do inter-contract calls, use views, and do unit testing.","source":"@site/docs/tutorials/dapp/part-3.md","sourceDirName":"tutorials/dapp","slug":"/tutorials/dapp/part-3","permalink":"/previews/docs/biel-custom-location/tutorials/dapp/part-3","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1716350400000,"frontMatter":{"title":"Part 3: Tickets","authors":"Benjamin Fuentes (Marigold)","last_update":{"date":"22 May 2024"}},"sidebar":"tutorialsSidebar","previous":{"title":"Part 2: Inter-contract calls and testing","permalink":"/previews/docs/biel-custom-location/tutorials/dapp/part-2"},"next":{"title":"Part 4: Smart contract upgrades","permalink":"/previews/docs/biel-custom-location/tutorials/dapp/part-4"}}');var a=n(74848),o=n(28453);const r={title:"Part 3: Tickets",authors:"Benjamin Fuentes (Marigold)",last_update:{date:"22 May 2024"}},i=void 0,c={},d=[{value:"new Poke sequence diagram",id:"new-poke-sequence-diagram",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Tickets",id:"tickets",level:2},{value:"Minting",id:"minting",level:2},{value:"Test your code",id:"test-your-code",level:2},{value:"Adapt the frontend code",id:"adapt-the-frontend-code",level:2},{value:"Summary",id:"summary",level:2}];function l(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",img:"img",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"Previously, you learned how to do inter-contract calls, use views, and do unit testing.\nIn this third session, you will enhance your skills on:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Using tickets."}),"\n",(0,a.jsxs)(t.li,{children:["Don't mess up with ",(0,a.jsx)(t.code,{children:"DUP"})," errors while manipulating tickets."]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"On the second version of the poke game, you were able to poke any contract without constraint. A right to poke via tickets is now mandatory. Tickets are a kind of object that cannot be copied and can hold some trustable information."}),"\n",(0,a.jsx)(t.h2,{id:"new-poke-sequence-diagram",children:"new Poke sequence diagram"}),"\n",(0,a.jsx)(t.mermaid,{value:"sequenceDiagram\n  Admin->>Smartcontract : Init(User,1)\n  Note right of Smartcontract : Mint 1 ticket for User\n  Note left of User : Prepare to poke\n  User->>Smartcontract : Poke\n  Note right of Smartcontract : Check available tickets for User\n  Note right of Smartcontract : Store trace and burn 1 ticket\n  Smartcontract--\x3e>User : success\n  User->>Smartcontract : Poke\n  Note right of Smartcontract : Check available tickets for User\n  Smartcontract--\x3e>User : error"}),"\n",(0,a.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsxs)(t.p,{children:["Prerequisites are the same as the first session: ",(0,a.jsx)(t.a,{href:"https://github.com/marigold-dev/training-dapp-1#memo-prerequisites",children:"https://github.com/marigold-dev/training-dapp-1#memo-prerequisites"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["Get the code from the session 2 solution ",(0,a.jsx)(t.a,{href:"https://github.com/marigold-dev/training-dapp-2/tree/main/solution",children:"here"}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"tickets",children:"Tickets"}),"\n",(0,a.jsxs)(t.p,{children:["Tickets came with a Tezos ",(0,a.jsx)(t.strong,{children:"Edo"})," upgrade, they are great and often misunderstood."]}),"\n",(0,a.jsx)(t.p,{children:"Ticket structure:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Ticketer: (address) the creator contract address."}),"\n",(0,a.jsx)(t.li,{children:"Value: (any) Can be any type from string to bytes. It holds whatever arbitrary values."}),"\n",(0,a.jsx)(t.li,{children:"Amount: (nat) quantity of tickets minted."}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"Tickets features:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Not comparable: it makes no sense to compare tickets because tickets of the same type are all equal and can be merged into a single ticket. When ticket types are different then it is no more comparable."}),"\n",(0,a.jsx)(t.li,{children:"Transferable: you can send a ticket into a Transaction parameter."}),"\n",(0,a.jsx)(t.li,{children:"Storable: only on smart contract storage for the moment (Note: a new protocol release will enable it for use accounts soon)."}),"\n",(0,a.jsx)(t.li,{children:"Non-dupable: you cannot copy or duplicate a ticket, it is a unique singleton object living in a specific blockchain instance."}),"\n",(0,a.jsx)(t.li,{children:"Splittable: if the amount is > 2 then you can split the ticket object into 2 objects."}),"\n",(0,a.jsx)(t.li,{children:"Mergeable: you can merge tickets from the same ticketer and the same type."}),"\n",(0,a.jsx)(t.li,{children:"Mintable/burnable: anyone can create and destroy tickets."}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"Example of usage:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Authentication and Authorization token: giving a ticket to a user provides you with Authentication. Adding some claims/rules on the ticket provides you with some rights."}),"\n",(0,a.jsx)(t.li,{children:"Simplified FA1.2/FA2 token: representing crypto token with tickets (mint/burn/split/join), but it does not have all the same properties and does not respect the TZIP standard."}),"\n",(0,a.jsx)(t.li,{children:"Voting rights: giving 1 ticket that counts for 1 vote on each member."}),"\n",(0,a.jsx)(t.li,{children:"Wrapped crypto: holding XTZ collateral against a ticket, and redeeming it later."}),"\n",(0,a.jsx)(t.li,{children:"Many others ..."}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"minting",children:"Minting"}),"\n",(0,a.jsx)(t.p,{children:"Minting is the action of creating a ticket from the void. In general, minting operations are done by administrators of smart contracts or either by an end user."}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Edit the ",(0,a.jsx)(t.code,{children:"./contracts/pokeGame.jsligo"})," file and add a map of ticket ownership to the default ",(0,a.jsx)(t.code,{children:"storage"})," type.\nThis map keeps a list of consumable tickets for each authorized user. It is used as a burnable right to poke."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsligo",children:"export type storage = {\n  pokeTraces: map<address, pokeMessage>,\n  feedback: string,\n  ticketOwnership: map<address, ticket<string>> //ticket of claims\n};\n"})}),"\n",(0,a.jsxs)(t.p,{children:["To fill this map, add a new administration endpoint. A new entrypoint ",(0,a.jsx)(t.code,{children:"Init"})," is adding x tickets to a specific user."]}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsx)(t.p,{children:"Note: to simplify, there is no security around this entrypoint, but in Production it should."}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["Tickets are very special objects that cannot be ",(0,a.jsx)(t.strong,{children:"DUPLICATED"}),". During compilation to Michelson, using a variable twice, copying a structure holding tickets generates ",(0,a.jsx)(t.code,{children:"DUP"})," command. To avoid our contract failing at runtime, LIGO parses statically our code during compilation time to detect any DUP on tickets."]}),"\n",(0,a.jsx)(t.p,{children:"To solve most of the issues, segregate ticket objects from the rest of the storage, or structures containing ticket objects to avoid compilation errors. To do this, just destructure any object until you get tickets isolated."}),"\n",(0,a.jsxs)(t.p,{children:["For each function having a storage as parameter, ",(0,a.jsx)(t.code,{children:"store"})," object needs to be destructured to isolate ",(0,a.jsx)(t.code,{children:"ticketOwnership"})," object holding our tickets. Then, don't use anymore the ",(0,a.jsx)(t.code,{children:"store"})," object or it creates a ",(0,a.jsx)(t.strong,{children:"DUP"})," error."]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Add the new ",(0,a.jsx)(t.code,{children:"Init"})," function."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsligo",children:'@entry\nconst init = ([a, ticketCount]: [address, nat], store: storage): return_ => {\n  const { pokeTraces, feedback, ticketOwnership } = store;\n  if (ticketCount == (0 as nat)) {\n    return [\n      list([]) as list<operation>,\n      { pokeTraces, feedback, ticketOwnership }\n    ]\n  } else {\n    const t: ticket<string> =\n      Option.unopt(Tezos.create_ticket("can_poke", ticketCount));\n    return [\n      list([]) as list<operation>,\n      { pokeTraces, feedback, ticketOwnership: Map.add(a, t, ticketOwnership) }\n    ]\n  }\n};\n'})}),"\n",(0,a.jsx)(t.p,{children:"The Init function looks at how many tickets to create from the current caller, and then it is added to the current map."}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Modify the poke function."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsligo",children:'@entry\nconst poke = (_: unit, store: storage): return_ => {\n  const { pokeTraces, feedback, ticketOwnership } = store;\n  const [t, tom]: [option<ticket<string>>, map<address, ticket<string>>] =\n    Map.get_and_update(\n      Tezos.get_source(),\n      None() as option<ticket<string>>,\n      ticketOwnership\n    );\n  return match(t) {\n    when (None):\n      failwith("User does not have tickets => not allowed")\n    when (Some(_t)):\n      [\n        list([]) as list<operation>,\n        {\n          feedback,\n          pokeTraces: Map.add(\n            Tezos.get_source(),\n            { receiver: Tezos.get_self_address(), feedback: "" },\n            pokeTraces\n          ),\n          ticketOwnership: tom\n        }\n      ]\n  }\n};\n'})}),"\n",(0,a.jsxs)(t.p,{children:["First, extract an existing optional ticket from the map. If an operation is done directly on the map, even trying to find or get this object in the structure, a DUP Michelson instruction is generated. Use the secure ",(0,a.jsx)(t.code,{children:"get_and_update"})," function from the Map library to extract the item from the map and avoid any copy."]}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsxs)(t.p,{children:["Note: more information about this function ",(0,a.jsx)(t.a,{href:"https://ligolang.org/docs/reference/map-reference",children:"here"}),"."]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"In a second step, look at the optional ticket, if it exists, then burn it (destroy it) and add a trace of execution, otherwise fail with an error message."}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Same for ",(0,a.jsx)(t.code,{children:"pokeAndGetFeedback"})," function, do the same checks and type modifications as below."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsligo",children:'@no_mutation\n@entry\nconst pokeAndGetFeedback = (oracleAddress: address, store: storage): return_ => {\n  const { pokeTraces, feedback, ticketOwnership } = store;\n  ignore(feedback);\n  const [t, tom]: [option<ticket<string>>, map<address, ticket<string>>] =\n    Map.get_and_update(\n      Tezos.get_source(),\n      None() as option<ticket<string>>,\n      ticketOwnership\n    );\n  let feedbackOpt: option<string> =\n    Tezos.call_view("feedback", unit, oracleAddress);\n  return match(t) {\n    when (None):\n      failwith("User does not have tickets => not allowed")\n    when (Some(_t)):\n      match(feedbackOpt) {\n        when (Some(feedback)):\n          do {\n            let feedbackMessage = {\n              receiver: oracleAddress,\n              feedback: feedback\n            };\n            return [\n              list([]) as list<operation>,\n              {\n                feedback,\n                pokeTraces: Map.add(\n                  Tezos.get_source(),\n                  feedbackMessage,\n                  pokeTraces\n                ),\n                ticketOwnership: tom\n              }\n            ]\n          }\n        when (None):\n          failwith("Cannot find view feedback on given oracle address")\n      }\n  }\n};\n'})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Update the storage initialization on ",(0,a.jsx)(t.code,{children:"pokeGame.storageList.jsligo"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsligo",children:'#import "pokeGame.jsligo" "Contract"\n\nconst default_storage = {\n    pokeTraces: Map.empty as map<address, Contract.pokeMessage>,\n    feedback: "kiss",\n    ticketOwnership: Map.empty as\n        map<\n            address,\n            ticket<string>\n        > //ticket of claims\n\n};\n'})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Compile the contract to check for any errors."}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsx)(t.p,{children:"Note: don't forget to check that Docker is running for taqueria."}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"npm i\n\nTAQ_LIGO_IMAGE=ligolang/ligo:1.6.0 taq compile pokeGame.jsligo\n"})}),"\n",(0,a.jsx)(t.p,{children:"Check on logs that everything is fine."}),"\n",(0,a.jsx)(t.p,{children:"Try to display a DUP error now."}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Add this line on ",(0,a.jsx)(t.code,{children:"poke function"})," just after the first line of storage destructuration ",(0,a.jsx)(t.code,{children:"const { pokeTraces, feedback, ticketOwnership } = store;"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsligo",children:"const t2 = Map.find_opt(Tezos.get_source(), ticketOwnership);\n"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Compile again."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"TAQ_LIGO_IMAGE=ligolang/ligo:1.6.0 taq compile pokeGame.jsligo\n"})}),"\n",(0,a.jsxs)(t.p,{children:["This time you should see the ",(0,a.jsx)(t.code,{children:"DUP"})," warning generated by the ",(0,a.jsx)(t.strong,{children:"find"})," function."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-logs",children:'Warning: variable "ticketOwnership" cannot be used more than once.\n'})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Remove it."}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"test-your-code",children:"Test your code"}),"\n",(0,a.jsx)(t.p,{children:"Update the unit test files to see if you can still poke."}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Edit the ",(0,a.jsx)(t.code,{children:"./contracts/unit_pokeGame.jsligo"})," file."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsligo",children:'#import "./pokeGame.jsligo" "PokeGame"\n\nexport type main_fn = module_contract<parameter_of PokeGame, PokeGame.storage>;\n\nconst _ = Test.reset_state(2 as nat, list([]) as list<tez>);\n\nconst faucet = Test.nth_bootstrap_account(0);\n\nconst sender1: address = Test.nth_bootstrap_account(1);\n\nconst _1 = Test.log("Sender 1 has balance : ");\n\nconst _2 = Test.log(Test.get_balance_of_address(sender1));\n\nconst _3 = Test.set_baker(faucet);\n\nconst _4 = Test.set_source(faucet);\n\nconst initial_storage = {\n  pokeTraces: Map.empty as map<address, PokeGame.pokeMessage>,\n  feedback: "kiss",\n  ticketOwnership: Map.empty as map<address, ticket<string>>\n};\n\nconst initial_tez = 0 as tez;\n\nexport const _testPoke = (\n  taddr: typed_address<parameter_of PokeGame, PokeGame.storage>,\n  s: address,\n  ticketCount: nat,\n  expectedResult: bool\n): unit => {\n  const contr = Test.to_contract(taddr);\n  const contrAddress = Tezos.address(contr);\n  Test.log("contract deployed with values : ");\n  Test.log(contr);\n  Test.set_source(s);\n  const statusInit =\n    Test.transfer_to_contract(contr, Init([sender1, ticketCount]), 0 as tez);\n  Test.log(statusInit);\n  Test.log("*** Check initial ticket is here ***");\n  Test.log(Test.get_storage(taddr));\n  const status: test_exec_result =\n    Test.transfer_to_contract(contr, Poke(), 0 as tez);\n  Test.log(status);\n  const store: PokeGame.storage = Test.get_storage(taddr);\n  Test.log(store);\n  return match(status) {\n    when (Fail(tee)):\n      match(tee) {\n        when (Other(msg)):\n          assert_with_error(expectedResult == false, msg)\n        when (Balance_too_low(_record)):\n          assert_with_error(expectedResult == false, "ERROR Balance_too_low")\n        when (Rejected(s)):\n          assert_with_error(expectedResult == false, Test.to_string(s[0]))\n      }\n    when (Success(_n)):\n      match(\n        Map.find_opt(\n          s,\n          (Test.get_storage(taddr) as PokeGame.storage).pokeTraces\n        )\n      ) {\n        when (Some(pokeMessage)):\n          do {\n            assert_with_error(\n              pokeMessage.feedback == "",\n              "feedback " + pokeMessage.feedback + " is not equal to expected "\n              + "(empty)"\n            );\n            assert_with_error(\n              pokeMessage.receiver == contrAddress,\n              "receiver is not equal"\n            )\n          }\n        when (None()):\n          assert_with_error(expectedResult == false, "don\'t find traces")\n      }\n  }\n};\n\nconst _5 = Test.log("*** Run test to pass ***");\n\nconst testSender1Poke =\n  (\n    (): unit => {\n      const orig =\n        Test.originate(contract_of(PokeGame), initial_storage, initial_tez);\n      _testPoke(orig.addr, sender1, 1 as nat, true)\n    }\n  )();\n\nconst _6 = Test.log("*** Run test to fail ***");\n\nconst testSender1PokeWithNoTicketsToFail =\n  (\n    (): unit => {\n      const orig =\n        Test.originate(contract_of(PokeGame), initial_storage, initial_tez);\n      _testPoke(orig.addr, sender1, 0 as nat, false)\n    }\n  )();\n'})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["On ",(0,a.jsx)(t.code,{children:"Init([sender1, ticketCount])"}),", initialize the smart contract with some tickets."]}),"\n",(0,a.jsxs)(t.li,{children:["On ",(0,a.jsx)(t.code,{children:"Fail"}),", check if you have an error on the test (i.e. the user should be allowed to poke)."]}),"\n",(0,a.jsxs)(t.li,{children:["On ",(0,a.jsx)(t.code,{children:"testSender1Poke"}),", test with the first user using a preexisting ticket."]}),"\n",(0,a.jsxs)(t.li,{children:["On ",(0,a.jsx)(t.code,{children:"testSender1PokeWithNoTicketsToFail"}),", test with the same user again but with no ticket, and an error should be caught."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Run the test, and look at the logs to track execution."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"TAQ_LIGO_IMAGE=ligolang/ligo:1.6.0 taq test unit_pokeGame.jsligo\n"})}),"\n",(0,a.jsx)(t.p,{children:"The first test should be fine."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-logs",children:'\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Contract             \u2502 Test Results                                                                                                                                                          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 unit_pokeGame.jsligo \u2502 "Sender 1 has balance : "                                                                                                                                             \u2502\n\u2502                      \u2502 3800000000000mutez                                                                                                                                                    \u2502\n\u2502                      \u2502 "*** Run test to pass ***"                                                                                                                                            \u2502\n\u2502                      \u2502 "contract deployed with values : "                                                                                                                                    \u2502\n\u2502                      \u2502 KT1HeEVF74BLi3fYCpr1tpkDGmruFBNjMATo(None)                                                                                                                            \u2502\n\u2502                      \u2502 Success (1858n)                                                                                                                                                       \u2502\n\u2502                      \u2502 "*** Check initial ticket is here ***"                                                                                                                                \u2502\n\u2502                      \u2502 {feedback = "kiss" ; pokeTraces = [] ; ticketOwnership = [tz1hkMbkLPkvhxyqsQoBoLPqb1mruSzZx3zy -> (KT1HeEVF74BLi3fYCpr1tpkDGmruFBNjMATo , ("can_poke" , 1n))]}        \u2502\n\u2502                      \u2502 Success (1024n)                                                                                                                                                       \u2502\n\u2502                      \u2502 {feedback = "kiss" ; pokeTraces = [tz1hkMbkLPkvhxyqsQoBoLPqb1mruSzZx3zy -> {feedback = "" ; receiver = KT1HeEVF74BLi3fYCpr1tpkDGmruFBNjMATo}] ; ticketOwnership = []} \u2502\n\u2502                      \u2502 "*** Run test to fail ***"                                                                                                                                            \u2502\n\u2502                      \u2502 "contract deployed with values : "                                                                                                                                    \u2502\n\u2502                      \u2502 KT1HDbqhYiKs8e3LkNAcT9T2MQgvUdxPtbV5(None)                                                                                                                            \u2502\n\u2502                      \u2502 Success (1399n)                                                                                                                                                       \u2502\n\u2502                      \u2502 "*** Check initial ticket is here ***"                                                                                                                                \u2502\n\u2502                      \u2502 {feedback = "kiss" ; pokeTraces = [] ; ticketOwnership = []}                                                                                                          \u2502\n\u2502                      \u2502 Fail (Rejected (("User does not have tickets => not allowed" , KT1HDbqhYiKs8e3LkNAcT9T2MQgvUdxPtbV5)))                                                                \u2502\n\u2502                      \u2502 {feedback = "kiss" ; pokeTraces = [] ; ticketOwnership = []}                                                                                                          \u2502\n\u2502                      \u2502 Everything at the top-level was executed.                                                                                                                             \u2502\n\u2502                      \u2502 - testSender1Poke exited with value ().                                                                                                                               \u2502\n\u2502                      \u2502 - testSender1PokeWithNoTicketsToFail exited with value ().                                                                                                            \u2502\n\u2502                      \u2502                                                                                                                                                                       \u2502\n\u2502                      \u2502 \ud83c\udf89 All tests passed \ud83c\udf89                                                                                                                                                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n'})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Redeploy the smart contract."}),"\n",(0,a.jsx)(t.p,{children:"Let's play with the CLI to compile and deploy."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"TAQ_LIGO_IMAGE=ligolang/ligo:1.6.0 taq compile pokeGame.jsligo\ntaq generate types ./app/src\ntaq deploy pokeGame.tz -e testing\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-logs",children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Contract    \u2502 Address                              \u2502 Alias    \u2502 Balance In Mutez \u2502 Destination                    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 pokeGame.tz \u2502 KT1TC1DabCTmdMXuuCxwUmyb51bn2mbeNvbW \u2502 pokeGame \u2502 0                \u2502 https://ghostnet.ecadinfra.com \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"adapt-the-frontend-code",children:"Adapt the frontend code"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Rerun the app and check that you can not use the app anymore without tickets."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"cd app\nyarn dev\n"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Connect with any wallet with enough tez, and Poke your contract."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"pokefail",src:n(41732).A+"",width:"1558",height:"417"})}),"\n",(0,a.jsx)(t.p,{children:"The Kukai wallet is giving me back the error from the smart contract."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"kukaifail",src:n(63802).A+"",width:"1902",height:"931"})}),"\n",(0,a.jsx)(t.p,{children:"Ok, so let's authorize some minting on my user and try again to poke."}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Add a new button for minting on a specific contract, and replace the full content of ",(0,a.jsx)(t.code,{children:"App.tsx"})," with:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"import { NetworkType } from '@airgap/beacon-types';\nimport { BeaconWallet } from '@taquito/beacon-wallet';\nimport { TezosToolkit } from '@taquito/taquito';\nimport * as api from '@tzkt/sdk-api';\nimport { BigNumber } from 'bignumber.js';\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport ConnectButton from './ConnectWallet';\nimport DisconnectButton from './DisconnectWallet';\nimport { PokeGameWalletType, Storage } from './pokeGame.types';\nimport { address, nat } from './type-aliases';\n\nfunction App() {\n  api.defaults.baseUrl = 'https://api.ghostnet.tzkt.io';\n\n  const [Tezos, setTezos] = useState<TezosToolkit>(\n    new TezosToolkit('https://ghostnet.ecadinfra.com')\n  );\n  const [wallet, setWallet] = useState<BeaconWallet>(\n    new BeaconWallet({\n      name: 'Training',\n      preferredNetwork: NetworkType.GHOSTNET,\n    })\n  );\n\n  const [contracts, setContracts] = useState<Array<api.Contract>>([]);\n  const [contractStorages, setContractStorages] = useState<\n    Map<string, Storage>\n  >(new Map());\n\n  const fetchContracts = () => {\n    (async () => {\n      const tzktcontracts: Array<api.Contract> =\n        await api.contractsGetSimilar(\n          import.meta.env.VITE_CONTRACT_ADDRESS,\n          {\n            includeStorage: true,\n            sort: { desc: 'id' },\n          }\n        );\n      setContracts(tzktcontracts);\n      const taquitoContracts: Array<PokeGameWalletType> = await Promise.all(\n        tzktcontracts.map(\n          async (tzktcontract) =>\n            (await Tezos.wallet.at(\n              tzktcontract.address!\n            )) as PokeGameWalletType\n        )\n      );\n      const map = new Map<string, Storage>();\n      for (const c of taquitoContracts) {\n        const s: Storage = await c.storage();\n        map.set(c.address, s);\n      }\n      setContractStorages(map);\n    })();\n  };\n\n  useEffect(() => {\n    (async () => {\n      const activeAccount = await wallet.client.getActiveAccount();\n      if (activeAccount) {\n        setUserAddress(activeAccount.address);\n        const balance = await Tezos.tz.getBalance(activeAccount.address);\n        setUserBalance(balance.toNumber());\n      }\n    })();\n  }, []);\n\n  const [userAddress, setUserAddress] = useState<string>('');\n  const [userBalance, setUserBalance] = useState<number>(0);\n  const [contractToPoke, setContractToPoke] = useState<string>('');\n\n  //poke\n  const poke = async (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    contract: api.Contract\n  ) => {\n    e.preventDefault();\n    let c: PokeGameWalletType = await Tezos.wallet.at('' + contract.address);\n    try {\n      const op = await c.methodsObject\n        .pokeAndGetFeedback(contractToPoke as address)\n        .send();\n      await op.confirmation();\n      alert('Tx done');\n    } catch (error: any) {\n      console.log(error);\n      console.table(`Error: ${JSON.stringify(error, null, 2)}`);\n    }\n  };\n\n  //mint\n  const mint = async (\n    e: React.MouseEvent<HTMLButtonElement>,\n    contract: api.Contract\n  ) => {\n    e.preventDefault();\n    let c: PokeGameWalletType = await Tezos.wallet.at('' + contract.address);\n    try {\n      console.log('contractToPoke', contractToPoke);\n      const op = await c.methods\n        .init(userAddress as address, new BigNumber(1) as nat)\n        .send();\n      await op.confirmation();\n      alert('Tx done');\n    } catch (error: any) {\n      console.log(error);\n      console.table(`Error: ${JSON.stringify(error, null, 2)}`);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ConnectButton\n          Tezos={Tezos}\n          setTezos={setTezos}\n          setUserAddress={setUserAddress}\n          setUserBalance={setUserBalance}\n          wallet={wallet}\n        />\n\n        <DisconnectButton\n          wallet={wallet}\n          setUserAddress={setUserAddress}\n          setUserBalance={setUserBalance}\n        />\n\n        <div>\n          I am {userAddress} with {userBalance} mutez\n        </div>\n      </header>\n\n      <br />\n      <div>\n        <button onClick={fetchContracts}>Fetch contracts</button>\n        <table>\n          <thead>\n            <tr>\n              <th>address</th>\n              <th>trace \"contract - feedback - user\"</th>\n              <th>action</th>\n            </tr>\n          </thead>\n          <tbody>\n            {contracts.map((contract) => (\n              <tr>\n                <td style={{ borderStyle: 'dotted' }}>{contract.address}</td>\n                <td style={{ borderStyle: 'dotted' }}>\n                  {contractStorages.get(contract.address!) !== undefined &&\n                  contractStorages.get(contract.address!)!.pokeTraces\n                    ? Array.from(\n                        contractStorages\n                          .get(contract.address!)!\n                          .pokeTraces.entries()\n                      ).map(\n                        (e) =>\n                          e[1].receiver +\n                          ' ' +\n                          e[1].feedback +\n                          ' ' +\n                          e[0] +\n                          ','\n                      )\n                    : ''}\n                </td>\n                <td style={{ borderStyle: 'dotted' }}>\n                  <input\n                    type=\"text\"\n                    onChange={(e) => {\n                      console.log('e', e.currentTarget.value);\n                      setContractToPoke(e.currentTarget.value);\n                    }}\n                    placeholder=\"enter contract address here\"\n                  />\n                  <button onClick={(e) => poke(e, contract)}>Poke</button>\n                  <button onClick={(e) => mint(e, contract)}>\n                    Mint 1 ticket\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"})}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsx)(t.p,{children:"Note: You maybe have noticed, but the full typed generated Taquito class is used for the storage access now. It improves maintenance in case you contract storage has changed."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Refresh the page, now that you have the Mint button."}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Mint a ticket on this contract."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"mint",src:n(78363).A+"",width:"1653",height:"372"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Wait for the Tx popup confirmation and then try to poke again, it should succeed now."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"success",src:n(8026).A+"",width:"1912",height:"375"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Wait for the Tx popup confirmation and try to poke again, you should be out of tickets and it should fail."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"kukaifail",src:n(63802).A+"",width:"1902",height:"931"})}),"\n",(0,a.jsx)(t.p,{children:"Congratulations, you know how to use tickets and avoid DUP errors."}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsx)(t.p,{children:"Takeaways:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"You can go further and improve the code like consuming one 1 ticket quantity at a time and manage it the right way."}),"\n",(0,a.jsxs)(t.li,{children:["You can also implement different type of Authorization mechanism, not only ",(0,a.jsx)(t.code,{children:"can poke"})," claim."]}),"\n",(0,a.jsx)(t.li,{children:"You can also try to base your ticket on some duration time like JSON token can do, not using the data field as a string but as bytes and store a timestamp on it."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,a.jsxs)(t.p,{children:["Now, you understand tickets. If you want to learn more about tickets, read this great article ",(0,a.jsx)(t.a,{href:"https://www.marigold.dev/post/tickets-for-dummies",children:"here"}),"."]}),"\n",(0,a.jsx)(t.p,{children:"In the next training, you will learn how to upgrade smart contracts."}),"\n",(0,a.jsxs)(t.p,{children:["When you are ready, continue to ",(0,a.jsx)(t.a,{href:"/tutorials/dapp/part-4",children:"Part 4: Smart contract upgrades"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},63802:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/dapp-kukaifail-7ef87c93d2cea0acd2ceb3eb136e68b6.png"},78363:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/dapp-mint-56beba149bfd2fabb772943d8e441848.png"},41732:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/dapp-pokefail-8d7367a8a914a529e5fe130e3e3addff.png"},8026:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/dapp-success-50611d191f944a894c2de6205da14d91.png"},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var s=n(96540);const a={},o=s.createContext(a);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);