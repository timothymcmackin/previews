"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[16517],{48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>o});var r=n(67294),a=n(75402);const o=function(e){return r.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},99191:(e,t,n)=>{n.d(t,{Z:()=>d});var r=n(43164),a=n(67294),o=n(52263),s=n(48720),c=n(11506);function l(){return l=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l.apply(this,arguments)}const{Prism:i}=n(43164);i.languages={...i.languages,cameligo:{...i.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:i.languages.typescript};const d=function(e){const{siteConfig:{themeConfig:{prism:t={}}}}=(0,o.Z)(),n=t.singleTheme||c.Z,[i,d]=(0,a.useState)(!1);return(0,a.useEffect)((()=>{d(!0)}),[]),a.createElement(s.D.Consumer,null,(t=>{let{syntax:o}=t;return o===e.syntax?a.createElement(r.default,l({},r.defaultProps,{key:i,language:e.syntax,code:e.children,theme:n}),(e=>{let{className:t,tokens:n,getLineProps:r,getTokenProps:o}=e;return a.createElement("h4",{className:t,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((e,t)=>a.createElement("div",r({line:e,key:t}),e.map(((e,t)=>a.createElement("span",o({token:e,key:t}))))))))})):a.createElement("div",null)}))}},90585:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var r=n(87462),a=(n(67294),n(3905)),o=(n(48720),n(99191));const s={id:"test.next.account.contract-reference",title:"contract",hide_table_of_contents:!0},c=void 0,l={unversionedId:"reference/test.next.account.contract-reference",id:"version-1.6.0/reference/test.next.account.contract-reference",title:"contract",description:"val bootstrap : nat -&gt; address",source:"@site/versioned_docs/version-1.6.0/reference/test.next.account.contract.md",sourceDirName:"reference",slug:"/reference/test.next.account.contract-reference",permalink:"/previews/ligo/modules/docs/1.6.0/reference/test.next.account.contract-reference",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"test.next.account.contract-reference",title:"contract",hide_table_of_contents:!0},sidebar:"API",previous:{title:"account",permalink:"/previews/ligo/modules/docs/1.6.0/reference/test.next.account-reference"},next:{title:"all",permalink:"/previews/ligo/modules/docs/1.6.0/reference/test.next.mutation.all-reference"}},i={},d=[],p={toc:d};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val bootstrap : nat -> address"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let bootstrap: (_: nat) => address"),"Returns the address corresponding to the nth bootstrapped contract.",(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val bootstrap_typed_address : 'a 'b.nat -> ('a, 'b) typed_address"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let bootstrap_typed_address: <a, b>(_: nat) => typed_address<a, b>"),"Returns the typed address corresponding to the nth bootstrapped contract currently loaded. The types are inferred from those contracts loaded with `Test.State.Reset.add_func_contract` (before reset).")}u.isMDXComponent=!0}}]);