"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[91845],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||s;return n?a.createElement(g,o(o({ref:t},p),{},{components:n})):a.createElement(g,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>r.Z,Z:()=>s});var a=n(67294),r=n(75402);const s=function(e){return a.createElement(r.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},10260:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905)),s=n(48720);const o={id:"variables",title:"Variables and constants"},i=void 0,l={unversionedId:"syntax/variables",id:"version-1.7.0/syntax/variables",title:"Variables and constants",description:"LIGO features mutable variables, that is, variables whose values can be reassigned.",source:"@site/versioned_docs/version-1.7.0/syntax/variables.md",sourceDirName:"syntax",slug:"/syntax/variables",permalink:"/previews/ligo/modules/docs/syntax/variables",draft:!1,tags:[],version:"1.7.0",frontMatter:{id:"variables",title:"Variables and constants"},sidebar:"docs",previous:{title:"Comments",permalink:"/previews/ligo/modules/docs/comments/"},next:{title:"Declaring",permalink:"/previews/ligo/modules/docs/functions/declaring"}},c={},p=[{value:"Variables",id:"variables",level:2},{value:"Silent variables",id:"silent-variables",level:3},{value:"Constants",id:"constants",level:2}],u={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"LIGO features mutable variables, that is, variables whose values can be reassigned.\nBy contrast, constants can be assigned only once."),(0,r.kt)("h2",{id:"variables"},"Variables"),(0,r.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("p",null,"To declare a variable, use the keyword ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," (as with constants) followed by the keyword ",(0,r.kt)("inlineCode",{parentName:"p"},"mut"),".\nThe initial assignment uses ",(0,r.kt)("inlineCode",{parentName:"p"},"="),", but subsequent assignments use ",(0,r.kt)("inlineCode",{parentName:"p"},":="),", as in this example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=mutating",group:"mutating"},"let add (a, b : int * int) : int =\n  let mut c = a + b in // Mutable c is assigned a + b\n  let () = c := c + 1  // Reassignment of incremented c\n  in c                 // c = a + b + 1\n"))),(0,r.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("p",null,"To declare a variable, use the keyword ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," instead of the keyword ",(0,r.kt)("inlineCode",{parentName:"p"},"const"),", which is for constants.\nTo assign new values to the variable, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"=")," operator, as in this example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=mutating",group:"mutating"},"function add (a: int, b:int) : int {\n  let c = a + b; // not const!\n  c++;           // Reassignment of incremented c\n  return c;      // c == a + b + 1\n};\n"))),(0,r.kt)("h3",{id:"silent-variables"},"Silent variables"),(0,r.kt)("p",null,"The compiler warns you when you declare a variable but do not use it.\nTo ignore a variable, turn it into a silent variable by prefixing its name with an underscore or using an underscore as its name."),(0,r.kt)("p",null,"For example, LIGO entrypoints receive a parameter and the current value of storage as arguments.\nIf the entrypoint code doesn't access one or both of these arguments, prefix the argument name with an underscore to hide the compiler warning, as in this example:"),(0,r.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=silent_variables",group:"silent_variables"},"[@entry] let reset (_param: unit) (_storage : int) : operation list * int = [], 0\n"))),(0,r.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=silent_variables",group:"silent_variables"},"@entry\nconst reset = (_param : unit, _storage : int) : [list<operation>, int] => [[], 0];\n"))),(0,r.kt)("h2",{id:"constants"},"Constants"),(0,r.kt)("p",null,"Constant values cannot be reassigned after they are declared."),(0,r.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("p",null,"To declare a constant, use the keyword ",(0,r.kt)("inlineCode",{parentName:"p"},"let"),", as in this example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=constants",group:"constants"},"let a = 1\nlet b : int = a // Type ascription (a.k.a. annotation)\n")),(0,r.kt)("p",null,"If you assign a new value to a constant of the same name, LIGO creates a new constant in a new scope.\nThis is also called ",(0,r.kt)("em",{parentName:"p"},"shadowing"),", based on the OCaml concept."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=constants",group:"constants"},"let x = 1\nlet x = 2 // No error: this x shadows the previous one.\n"))),(0,r.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("p",null,"To declare a constant, use the keyword ",(0,r.kt)("inlineCode",{parentName:"p"},"const"),", as in this example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=constants",group:"constants"},"const a = 1;\nconst b : int = a; // Type ascription (a.k.a. annotation)\n")),(0,r.kt)("p",null,"You cannot assign a new value to a constant in the same scope:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"skip",skip:!0},"const x = 1;\nconst x = 2; // Yields an error\n")),(0,r.kt)("p",null,"However, the following example works because the constants are in different scopes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=constants",group:"constants"},"const d = do {\n  const x = 1;\n  {\n    const x = 2; // No error: a sub-block\n    return x;\n  }\n};\n"))))}m.isMDXComponent=!0}}]);