"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[94244],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>m});var a=n(67294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,o=function(t,e){if(null==t)return{};var n,a,o={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var c=a.createContext({}),l=function(t){var e=a.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=l(t.components);return a.createElement(c.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(t,e){var n=t.components,o=t.mdxType,r=t.originalType,c=t.parentName,p=s(t,["components","mdxType","originalType","parentName"]),d=l(n),m=o,k=d["".concat(c,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(k,i(i({ref:e},p),{},{components:n})):a.createElement(k,i({ref:e},p))}));function m(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var r=n.length,i=new Array(r);i[0]=d;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=t,s.mdxType="string"==typeof t?t:o,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},48720:(t,e,n)=>{n.d(e,{D:()=>o.Z,Z:()=>r});var a=n(67294),o=n(75402);const r=function(t){return a.createElement(o.Z.Consumer,null,(e=>{let{syntax:n}=e;return n===t.syntax?t.children:a.createElement(a.Fragment,null)}))}},28298:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var a=n(87462),o=(n(67294),n(3905)),r=n(48720);n(39960);const i={id:"tezos-taco-shop-smart-contract",title:"The Taco Shop Smart Contract"},s=void 0,c={unversionedId:"tutorials/taco-shop/tezos-taco-shop-smart-contract",id:"tutorials/taco-shop/tezos-taco-shop-smart-contract",title:"The Taco Shop Smart Contract",description:"Meet Pedro, our artisan taco chef, who has decided to open a",source:"@site/../docs/tutorials/taco-shop/tezos-taco-shop-smart-contract.md",sourceDirName:"tutorials/taco-shop",slug:"/tutorials/taco-shop/tezos-taco-shop-smart-contract",permalink:"/previews/ligo/modules/docs/next/tutorials/taco-shop/tezos-taco-shop-smart-contract",draft:!1,tags:[],version:"current",frontMatter:{id:"tezos-taco-shop-smart-contract",title:"The Taco Shop Smart Contract"},sidebar:"docs",previous:{title:"Quickstart",permalink:"/previews/ligo/modules/docs/next/tutorials/getting-started/"},next:{title:"Paying out profits from the Taco Shop",permalink:"/previews/ligo/modules/docs/next/tutorials/taco-shop/tezos-taco-shop-payout"}},l={},p=[{value:"Pricing",id:"pricing",level:2},{value:"Daily Offer",id:"daily-offer",level:3},{value:"Calculating the Current Purchase Price",id:"calculating-the-current-purchase-price",level:3},{value:"El Cl\xe1sico",id:"el-cl\xe1sico",level:4},{value:"Especial del chef",id:"especial-del-chef",level:4},{value:"Draft a first contract",id:"draft-a-first-contract",level:2},{value:"Designing the Taco Shop&#39;s Contract Storage",id:"designing-the-taco-shops-contract-storage",level:3},{value:"Selling the Tacos for Free",id:"selling-the-tacos-for-free",level:3},{value:"Populating our Storage",id:"populating-our-storage",level:3},{value:"Implement some logic",id:"implement-some-logic",level:2},{value:"Decreasing <code>current_stock</code> when a Taco is Sold",id:"decreasing-current_stock-when-a-taco-is-sold",level:3},{value:"Making Sure We Get Paid for Our Tacos",id:"making-sure-we-get-paid-for-our-tacos",level:3},{value:"\ud83d\udcb0 Bonus: <em>Accepting Tips above the Taco Purchase Price</em>",id:"-bonus-accepting-tips-above-the-taco-purchase-price",level:2}],u={toc:p};function d(t){let{components:e,...n}=t;return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("div",null,(0,o.kt)("p",null,"Meet ",(0,o.kt)("strong",{parentName:"p"},"Pedro"),", our ",(0,o.kt)("em",{parentName:"p"},"artisan taco chef"),", who has decided to open a\nTaco shop on the Tezos blockchain, using a smart contract. He sells\ntwo different kinds of tacos: ",(0,o.kt)("strong",{parentName:"p"},"el Cl\xe1sico")," and the ",(0,o.kt)("strong",{parentName:"p"},"Especial\ndel Chef"),"."),(0,o.kt)("p",null,"To help Pedro open his dream taco shop, we will implement a smart\ncontract that will manage supply, pricing & sales of his tacos to the\nconsumers."),(0,o.kt)("br",null),(0,o.kt)("img",{src:"/img/tutorials/get-started/tezos-taco-shop-smart-contract/taco-stand.svg",width:"50%"}),(0,o.kt)("div",{style:{opacity:.7,textAlign:"center",fontSize:"10px"}},"Made by ",(0,o.kt)("a",{href:"https://www.flaticon.com/authors/smashicons",title:"Smashicons"},"Smashicons")," from ",(0,o.kt)("a",{href:"https://www.flaticon.com/",title:"Flaticon"},"www.flaticon.com")," is licensed by ",(0,o.kt)("a",{href:"http://creativecommons.org/licenses/by/3.0/",title:"Creative Commons BY 3.0",target:"_blank"},"CC 3.0 BY"))),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"pricing"},"Pricing"),(0,o.kt)("p",null,"Pedro's tacos are a rare delicacy, so their ",(0,o.kt)("strong",{parentName:"p"},"price goes up")," as the\n",(0,o.kt)("strong",{parentName:"p"},"stock for the day begins to deplete"),"."),(0,o.kt)("p",null,"Each taco kind, has its own ",(0,o.kt)("inlineCode",{parentName:"p"},"max_price")," that it sells for, and a\nfinite supply for the current sales life-cycle."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For the sake of simplicity, we will not implement the replenishing\nof the supply after it has run out.")),(0,o.kt)("h3",{id:"daily-offer"},"Daily Offer"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"kind")),(0,o.kt)("th",{parentName:"tr",align:null},"id"),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"available_stock")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"max_price")))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Cl\xe1sico"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"1n")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"50n")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"50tez"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Especial del Chef"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"2n")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"20n")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"75tez"))))),(0,o.kt)("h3",{id:"calculating-the-current-purchase-price"},"Calculating the Current Purchase Price"),(0,o.kt)("p",null,"The current purchase price is calculated with the following formula:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"skip",skip:!0},"current_purchase_price = max_price / available_stock\n")),(0,o.kt)("h4",{id:"el-cl\xe1sico"},"El Cl\xe1sico"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"available_stock")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"max_price")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"current_purchase_price")))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"50n")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"50tez")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"1tez"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"20n")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"50tez")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"2.5tez"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"5n")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"50tez")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"10tez"))))),(0,o.kt)("h4",{id:"especial-del-chef"},"Especial del chef"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"available_stock")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"max_price")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"current_purchase_price")))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"20n")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"75tez")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"3.75tez"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"10n")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"75tez")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"7.5tez"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"5n")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"75tez")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"15tez"))))),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"draft-a-first-contract"},"Draft a first contract"),(0,o.kt)("h3",{id:"designing-the-taco-shops-contract-storage"},"Designing the Taco Shop's Contract Storage"),(0,o.kt)("p",null,"First think to do when you create a smart contract is\nthink about what gonna be stored onto it.\nWe know that Pedro's Taco Shop serves two kinds of tacos, so we will\nneed to manage stock individually, per kind. Let us define a type,\nthat will keep the ",(0,o.kt)("inlineCode",{parentName:"p"},"stock")," & ",(0,o.kt)("inlineCode",{parentName:"p"},"max_price")," per kind in a record with two\nfields. Additionally, we will want to combine our ",(0,o.kt)("inlineCode",{parentName:"p"},"taco_supply")," type\ninto a map, consisting of the entire offer of Pedro's shop."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Taco shop's storage")),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=TacoShop",group:"TacoShop"},"type taco_supply = { current_stock : nat ; max_price : tez }\n\ntype taco_shop_storage = (nat, taco_supply) map\n"))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=TacoShop",group:"TacoShop"},"export type taco_supply = { current_stock : nat , max_price : tez };\n\nexport type taco_shop_storage = map <nat, taco_supply>;\n"))),(0,o.kt)("p",null,"Now that the storage is defined, let's interact with it."),(0,o.kt)("h3",{id:"selling-the-tacos-for-free"},"Selling the Tacos for Free"),(0,o.kt)("p",null,"Create your first entrypoint ",(0,o.kt)("inlineCode",{parentName:"p"},"buy_taco")," which is doing nothing for now :"),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"skip",skip:!0},"[@entry]\nlet buy_taco (taco_kind_index : nat) (taco_shop_storage : taco_shop_storage) : operation list * taco_shop_storage  = [], taco_shop_storage\n\n"))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"skip",skip:!0},"@entry\nfunction buy_taco(taco_kind_index: nat, taco_shop_storage: taco_shop_storage): [\n  list<operation>,\n  taco_shop_storage\n]  {\n    return [[], taco_shop_storage]\n  };\n"))),(0,o.kt)("p",null,"It's already possible to compile your contract by running : "),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"ligo compile contract taco_shop.jsligo\n"))),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"ligo compile contract taco_shop.mligo\n"))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"To avoid warning at compilation, change ",(0,o.kt)("inlineCode",{parentName:"p"},"taco_kind_index")," into ",(0,o.kt)("inlineCode",{parentName:"p"},"_taco_kind_index"),", it'll tell to the compiler that this variable is authorized to not be used.")),(0,o.kt)("p",null,"A good practice is to scope your contract into a ",(0,o.kt)("a",{parentName:"p",href:"https://ligolang.org/docs/language-basics/modules?lang=cameligo"},"module"),"."),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=b12",group:"b12"},"module TacoShop = struct\n  type taco_supply =\n    {\n     current_stock : nat;\n     max_price : tez\n    }\n\n  type taco_shop_storage = (nat, taco_supply) map\n\n  [@entry]\n  let buy_taco (taco_kind_index : nat) (taco_shop_storage : taco_shop_storage) : operation list * taco_shop_storage =\n    [], taco_shop_storage\n\nend \n"))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=b12",group:"b12"},"\nnamespace TacoShop {\n  type taco_supply = { current_stock: nat, max_price: tez };\n  export type taco_shop_storage = map<nat, taco_supply>;\n  \n  @entry\n  function buy_taco(taco_kind_index: nat, taco_shop_storage: taco_shop_storage): [\n    list<operation>,\n    taco_shop_storage\n  ] {\n    return [[], taco_shop_storage]\n  };\n};\n\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"We export ",(0,o.kt)("inlineCode",{parentName:"p"},"taco_shop_storage")," to be accessible outside the module/namespace on the next section."))),(0,o.kt)("p",null,"There is an impact onto the compilation, now you have to tell to the compiler which ",(0,o.kt)("a",{parentName:"p",href:"https://ligolang.org/docs/language-basics/modules?lang=cameligo"},"module")," it need to compile :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"ligo compile contract taco_shop.mligo -m TacoShop\n")),(0,o.kt)("h3",{id:"populating-our-storage"},"Populating our Storage"),(0,o.kt)("p",null,"When deploying contract, it is crucial to provide a correct\ninitial storage value.  In our case the storage is type-checked as\n",(0,o.kt)("inlineCode",{parentName:"p"},"taco_shop_storage"),", because the default storage is not directly used in the code,\nwe encourage to declare the type, if your storage mutate, your default_storage will be in error.\nReflecting ",(0,o.kt)("a",{parentName:"p",href:"/previews/ligo/modules/docs/next/tutorials/taco-shop/tezos-taco-shop-smart-contract#daily-offer"},"Pedro's daily offer"),",\nour storage's value will be defined as follows:"),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=TacoShop",group:"TacoShop"},"let default_storage: taco_shop_storage  = Map.literal [\n  (1n, { current_stock = 50n ; max_price = 50tez }) ;\n  (2n, { current_stock = 20n ; max_price = 75tez }) ;\n]\n"))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=TacoShop",group:"TacoShop"},"const default_storage: taco_shop_storage = Map.literal ([\n  [1n, { current_stock : 50n, max_price : 50tez }],\n  [2n, { current_stock : 20n, max_price : 75tez }]\n]);\n"))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The storage value is a map with two bindings (entries) distinguished\nby their keys ",(0,o.kt)("inlineCode",{parentName:"p"},"1n")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"2n"),".")),(0,o.kt)("p",null,"Out of curiosity, let's try to use LIGO ",(0,o.kt)("inlineCode",{parentName:"p"},"compile storage")," command compile this value down to Michelson."),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"ligo compile storage TacoShop.jsligo default_storage -m TacoShop\n# Output:\n#\n# { Elt 1 (Pair 50 50000000) ; Elt 2 (Pair 20 75000000) }\n"))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"ligo compile storage TacoShop.jsligo default_storage -m TacoShop\n# Output:\n#\n# { Elt 1 (Pair 50 50000000) ; Elt 2 (Pair 20 75000000) }\n"))),(0,o.kt)("p",null,"Our initial storage record is compiled to a Michelson map ",(0,o.kt)("inlineCode",{parentName:"p"},"{ Elt 1 (Pair 50 50000000) ; Elt 2 (Pair 20 75000000) }"),"\nholding the ",(0,o.kt)("inlineCode",{parentName:"p"},"current_stock")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"max_prize")," in as a pair."),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"implement-some-logic"},"Implement some logic"),(0,o.kt)("h3",{id:"decreasing-current_stock-when-a-taco-is-sold"},"Decreasing ",(0,o.kt)("inlineCode",{parentName:"h3"},"current_stock")," when a Taco is Sold"),(0,o.kt)("p",null,"In order to decrease the stock in our contract's storage for a\nspecific taco kind, a few things needs to happen:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"retrieve the ",(0,o.kt)("inlineCode",{parentName:"li"},"taco_kind")," from our storage, based on the\n",(0,o.kt)("inlineCode",{parentName:"li"},"taco_kind_index")," provided;"),(0,o.kt)("li",{parentName:"ul"},"subtract the ",(0,o.kt)("inlineCode",{parentName:"li"},"taco_kind.current_stock")," by ",(0,o.kt)("inlineCode",{parentName:"li"},"1n"),";"),(0,o.kt)("li",{parentName:"ul"},"we can find the absolute value of the subtraction above by\ncalling ",(0,o.kt)("inlineCode",{parentName:"li"},"abs")," (otherwise we would be left with an ",(0,o.kt)("inlineCode",{parentName:"li"},"int"),");"),(0,o.kt)("li",{parentName:"ul"},"update the storage, and return it.")),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"skip",skip:!0},'[@entry]\nlet buy_taco (taco_kind_index : nat) (taco_shop_storage : taco_shop_storage) : operation list * taco_shop_storage =\n  (* Retrieve the taco_kind from the contract\'s storage or fail *)\n  let taco_kind =\n    match Map.find_opt (taco_kind_index) taco_shop_storage with\n    | Some k -> k\n    | None -> failwith "Unknown kind of taco"\n  in\n  (* Update the storage decreasing the stock by 1n *)\n  let taco_shop_storage = Map.update\n    taco_kind_index\n    (Some { taco_kind with current_stock = abs (taco_kind.current_stock - 1n) })\n    taco_shop_storage\n  in\n  [], taco_shop_storage\n'))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"skip",skip:!0},'@entry\nfunction buy_taco(taco_kind_index: nat, taco_shop_storage: taco_shop_storage): [\n  list<operation>,\n  taco_shop_storage\n]  {\n\n  /* Retrieve the taco_kind from the contracts storage or fail */\n  const taco_kind: taco_supply =\n  match (Map.find_opt (taco_kind_index, taco_shop_storage)) {\n    when(Some(kind)): kind;\n    when(None()): (failwith ("Unknown kind of taco"))\n  };\n\n  // Update the storage decreasing the stock by 1n\n  const taco_shop_storage_updated = Map.update (\n    taco_kind_index,\n    (Some (({...taco_kind, current_stock : abs (taco_kind.current_stock - (1n)) }))),\n    taco_shop_storage );\n  return [[], taco_shop_storage_updated]\n};\n'))),(0,o.kt)("h3",{id:"making-sure-we-get-paid-for-our-tacos"},"Making Sure We Get Paid for Our Tacos"),(0,o.kt)("p",null,"In order to make Pedro's taco shop profitable, he needs to stop giving\naway tacos for free. When a contract is invoked via a transaction, an\namount of tezzies to be sent can be specified as well. This amount is\naccessible within LIGO as ",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.get_amount"),"."),(0,o.kt)("p",null,"To make sure we get paid, we will:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"calculate a ",(0,o.kt)("inlineCode",{parentName:"li"},"current_purchase_price")," based on the\n",(0,o.kt)("a",{parentName:"li",href:"/previews/ligo/modules/docs/next/tutorials/taco-shop/tezos-taco-shop-smart-contract#calculating-the-current-purchase-price"},"equation specified earlier")),(0,o.kt)("li",{parentName:"ul"},"check if the sent amount matches the ",(0,o.kt)("inlineCode",{parentName:"li"},"current_purchase_price"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"if not, then our contract will fail (",(0,o.kt)("inlineCode",{parentName:"li"},"failwith"),")"),(0,o.kt)("li",{parentName:"ul"},"otherwise, stock for the given ",(0,o.kt)("inlineCode",{parentName:"li"},"taco_kind")," will be decreased and\nthe payment accepted")))),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=TacoShop",group:"TacoShop"},'[@entry]\nlet buy_taco (taco_kind_index : nat) (taco_shop_storage : taco_shop_storage)\n  : operation list * taco_shop_storage =\n    (* Retrieve the taco_kind from the contract\'s storage or fail *)\n\n    let taco_kind =\n      match Map.find_opt (taco_kind_index) taco_shop_storage with\n        Some k -> k\n      | None -> failwith "Unknown kind of taco" in\n    let current_purchase_price : tez =\n      taco_kind.max_price / taco_kind.current_stock in\n    (* We won\'t sell tacos if the amount is not correct *)\n\n    let () =\n      if (Tezos.get_amount ()) <> current_purchase_price\n      then\n        failwith\n          "Sorry, the taco you are trying to purchase has a different price" in\n    (* Update the storage decreasing the stock by 1n *)\n\n    let taco_shop_storage =\n      Map.update\n        taco_kind_index\n        (Some\n           {taco_kind with current_stock = abs (taco_kind.current_stock - 1n)})\n        taco_shop_storage in\n    [], taco_shop_storage\n'))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=TacoShop",group:"TacoShop"},'@entry\nconst buy_taco = (taco_kind_index: nat, taco_shop_storage: taco_shop_storage) : [\n    list<operation>,\n    taco_shop_storage\n  ] => {\n  /* Retrieve the taco_kind from the contracts storage or fail */\n  const taco_kind : taco_supply =\n    match (Map.find_opt (taco_kind_index, taco_shop_storage)) {\n      when(Some(kind)): kind;\n      when(None()): failwith ("Unknown kind of taco")\n    };\n  const current_purchase_price : tez = taco_kind.max_price / taco_kind.current_stock ;\n  /* We won\'t sell tacos if the amount is not correct */\n  if ((Tezos.get_amount ()) != current_purchase_price) {\n    return failwith ("Sorry, the taco you are trying to purchase has a different price")\n  } else {\n    /* Update the storage decreasing the stock by 1n */\n    let taco_shop_storage = Map.update (\n      taco_kind_index,\n      (Some (({...taco_kind, current_stock : abs (taco_kind.current_stock - 1n) }))),\n      taco_shop_storage );\n    return [[], taco_shop_storage]\n  }\n};\n'))),(0,o.kt)("p",null,"Now let's test our function against a few inputs using the LIGO test framework.\nFor that, we will have another file in which will describe our test:"),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"test-ligo group=test","test-ligo":!0,group:"test"},'#import "gitlab-pages/docs/tutorials/taco-shop/src/tezos-taco-shop-smart-contract/TacoShop.mligo" "TacoShop"\n\nlet assert_string_failure (res : test_exec_result) (expected : string) =\n  let expected = Test.eval expected in\n  match res with\n  | Fail (Rejected (actual,_)) -> assert (Test.michelson_equal actual expected)\n  | Fail _ -> failwith "contract failed for an unknown reason"\n  | Success _ -> failwith "bad price check"\n\nlet test =\n  (* originate the contract with a initial storage *)\n  let init_storage = Map.literal [\n      (1n, { current_stock = 50n ; max_price = 50tez }) ;\n      (2n, { current_stock = 20n ; max_price = 75tez }) ; ]\n  in\n  let { addr ; code = _; size = _ } = Test.originate (contract_of TacoShop) init_storage 0tez in\n\n  (* Test inputs *)\n  let clasico_kind : TacoShop parameter_of = Buy_taco 1n in\n  let unknown_kind : TacoShop parameter_of = Buy_taco 3n in\n\n  (* Auxiliary function for testing equality in maps *)\n  let eq_in_map (r : TacoShop.taco_supply) (m : TacoShop.taco_shop_storage) (k : nat) =\n    match Map.find_opt k m with\n    | None -> false\n    | Some v -> v.current_stock = r.current_stock && v.max_price = r.max_price in\n\n  (* Purchasing a Taco with 1tez and checking that the stock has been updated *)\n  let ok_case : test_exec_result = Test.transfer addr clasico_kind 1tez in\n  let () = match ok_case with\n    | Success _ ->\n      let storage = Test.get_storage addr in\n      assert ((eq_in_map { current_stock = 49n ; max_price = 50tez } storage 1n) &&\n              (eq_in_map { current_stock = 20n ; max_price = 75tez } storage 2n))\n    | Fail _ -> failwith ("ok test case failed")\n  in\n\n  (* Purchasing an unregistred Taco *)\n  let nok_unknown_kind = Test.transfer addr unknown_kind 1tez in\n  let () = assert_string_failure nok_unknown_kind "Unknown kind of taco" in\n\n  (* Attempting to Purchase a Taco with 2tez *)\n  let nok_wrong_price = Test.transfer addr clasico_kind 2tez in\n  let () = assert_string_failure nok_wrong_price "Sorry, the taco you are trying to purchase has a different price" in\n  ()\n'))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"test-ligo group=test","test-ligo":!0,group:"test"},'#import "gitlab-pages/docs/tutorials/taco-shop/src/tezos-taco-shop-smart-contract/TacoShop.jsligo" "TacoShop"\n\nfunction assert_string_failure (res: test_exec_result, expected: string) {\n  const expected_bis = Test.eval(expected);\n  match(res) {\n    when (Fail(x)):\n      match(x) {\n        when (Rejected(y)):\n          assert(Test.michelson_equal(y[0], expected_bis))\n        when (Balance_too_low(_)):\n          failwith("contract failed for an unknown reason")\n        when (Other(_o)):\n          failwith("contract failed for an unknown reason")\n      }\n    when (Success(_s)):\n      failwith("bad price check")\n  };\n}\n\nconst test = (\n  (_u: unit): unit => {\n      /* Originate the contract with a initial storage */\n\n      let init_storage =\n        Map.literal(\n          list(\n            [\n              [1n, { current_stock: 50n, max_price: 50000000mutez }],\n              [2n, { current_stock: 20n, max_price: 75000000mutez }]\n            ]\n          )\n        );\n      const { addr , code , size } =\n        Test.originate(contract_of(TacoShop), init_storage, 0mutez);\n\n      /* Test inputs */\n\n      const clasico_kind : parameter_of TacoShop = Buy_taco (1n);\n      const unknown_kind : parameter_of TacoShop = Buy_taco (3n);\n      /* Auxiliary function for testing equality in maps */\n\n      const eq_in_map = (r: TacoShop.taco_supply, m: TacoShop.taco_shop_storage, k: nat) =>\n        match(Map.find_opt(k, m)) {\n          when (None):\n            false\n          when (Some(v)):\n            v.current_stock == r.current_stock && v.max_price == r.max_price\n        };\n      /* Purchasing a Taco with 1tez and checking that the stock has been updated */\n\n      const ok_case: test_exec_result =\n        Test.transfer(\n          addr,\n          clasico_kind,\n          1000000mutez\n        );\n      \n        match(ok_case) {\n          when (Success(_s)):\n            do {\n              let storage = Test.get_storage(addr);\n              assert(\n                eq_in_map(\n                  { current_stock: 49n, max_price: 50000000mutez },\n                  storage,\n                  1n\n                )\n                && eq_in_map(\n                     { current_stock: 20n, max_price: 75000000mutez },\n                     storage,\n                     2n\n                   )\n              );\n            }\n          when (Fail(_e)):\n            failwith("ok test case failed")\n        };\n      /* Purchasing an unregistred Taco */\n\n      const nok_unknown_kind =\n        Test.transfer(\n          addr,\n          unknown_kind,\n          1000000mutez\n        );\n      assert_string_failure(nok_unknown_kind, "Unknown kind of taco");\n      /* Attempting to Purchase a Taco with 2tez */\n\n      const nok_wrong_price =\n        Test.transfer(\n          addr,\n          clasico_kind,\n          2000000mutez\n        );\n      \n        assert_string_failure(\n          nok_wrong_price,\n          "Sorry, the taco you are trying to purchase has a different price"\n        );\n      return unit\n    }\n  ) ();\n'))),(0,o.kt)("p",null,"Let's break it down a little bit:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"we include the file corresponding to the smart contract we want to\ntest;"),(0,o.kt)("li",{parentName:"ul"},"we define ",(0,o.kt)("inlineCode",{parentName:"li"},"assert_string_failure"),", a function reading a transfer\nresult and testing against a failure. It also compares the failing\ndata - here, a string - to what we expect it to be;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"test")," is actually performing the tests: Originates the taco-shop\ncontract; purchasing a Taco with 1tez and checking that the stock\nhas been updated ; attempting to purchase a Taco with 2tez and\ntrying to purchase an unregistered Taco. An auxiliary function to\ncheck equality of values on maps is defined.")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"checkout the ",(0,o.kt)("a",{parentName:"p",href:"/previews/ligo/modules/docs/next/reference/test-reference"},"reference page")," for a more detailed description of the Test API")),(0,o.kt)("p",null,"Now it is time to use the LIGO command ",(0,o.kt)("inlineCode",{parentName:"p"},"test"),". It will evaluate our\nsmart contract and print the result value of those entries that start\nwith ",(0,o.kt)("inlineCode",{parentName:"p"},'"test"'),":"),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"ligo run test gitlab-pages/docs/tutorials/taco-shop/src/tezos-taco-shop-smart-contract/test.mligo\n# Output:\n#\n# Everything at the top-level was executed.\n# - test exited with value ().\n"))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"ligo run test gitlab-pages/docs/tutorials/taco-shop/src/tezos-taco-shop-smart-contract/test.jsligo\n# Output:\n#\n# Everything at the top-level was executed.\n# - test exited with value ().\n"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"The test passed ! That's it - Pedro can now sell tacos on-chain, thanks to Tezos & LIGO.")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"-bonus-accepting-tips-above-the-taco-purchase-price"},"\ud83d\udcb0 Bonus: ",(0,o.kt)("em",{parentName:"h2"},"Accepting Tips above the Taco Purchase Price")),(0,o.kt)("p",null,"If you would like to accept tips in your contract, simply change the\nfollowing line, depending on your preference."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Without tips")),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"skip",skip:!0},"if (Tezos.get_amount ()) <> current_purchase_price then\n"))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"skip",skip:!0},"if ((Tezos.get_amount ()) != current_purchase_price)\n"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"With tips")),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"skip",skip:!0},"if (Tezos.get_amount ()) >= current_purchase_price then\n"))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"skip",skip:!0},"if ((Tezos.get_amount ()) >= current_purchase_price)\n"))))}d.isMDXComponent=!0}}]);