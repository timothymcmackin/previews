"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8483],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=a.createContext({}),c=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=c(e.components);return a.createElement(m.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,m=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,g=d["".concat(m,".").concat(u)]||d[u]||p[u]||o;return n?a.createElement(g,s(s({ref:t},l),{},{components:n})):a.createElement(g,s({ref:t},l))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var m in t)hasOwnProperty.call(t,m)&&(i[m]=t[m]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>r.Z,Z:()=>o});var a=n(67294),r=n(75402);const o=function(e){return a.createElement(r.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},90186:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>m,toc:()=>l});var a=n(87462),r=(n(67294),n(3905)),o=n(48720);const s={id:"arithmetics",title:"Arithmetics"},i=void 0,m={unversionedId:"tezos/timestamp/arithmetics",id:"version-1.5.0/tezos/timestamp/arithmetics",title:"Arithmetics",description:"In LIGO, timestamps can be added to integers, allowing you to set time",source:"@site/versioned_docs/version-1.5.0/tezos/timestamp/arithmetics.md",sourceDirName:"tezos/timestamp",slug:"/tezos/timestamp/arithmetics",permalink:"/previews/ligo/modules/docs/1.5.0/tezos/timestamp/arithmetics",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"arithmetics",title:"Arithmetics"},sidebar:"docs",previous:{title:"Now",permalink:"/previews/ligo/modules/docs/1.5.0/tezos/timestamp/now"},next:{title:"Comparing",permalink:"/previews/ligo/modules/docs/1.5.0/tezos/timestamp/comparing"}},c={},l=[{value:"Incrementing",id:"incrementing",level:3},{value:"Decrementing",id:"decrementing",level:3},{value:"Subtracting",id:"subtracting",level:3}],p={toc:l};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In LIGO, timestamps can be added to integers, allowing you to set time\nconstraints on your smart contracts. Consider the following scenarios."),(0,r.kt)("h3",{id:"incrementing"},"Incrementing"),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=tomorrow",group:"tomorrow"},'let today : timestamp = Tezos.get_now ()\nlet one_day : int = 86_400\nlet in_24_hrs : timestamp = today + one_day\nlet some_date : timestamp = ("2000-01-01t10:10:10Z" : timestamp)\nlet one_day_later : timestamp = some_date + one_day\n'))),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=tomorrow",group:"tomorrow"},'const today: timestamp = Tezos.get_now();\nconst one_day: int = 86_400;\nconst in_24_hrs: timestamp = today + one_day;\nconst some_date: timestamp = "2000-01-01t10:10:10Z" as timestamp;\nconst one_day_later: timestamp = some_date + one_day;\n'))),(0,r.kt)("h3",{id:"decrementing"},"Decrementing"),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=yesterday",group:"yesterday"},"let today : timestamp = Tezos.get_now ()\nlet one_day : int = 86400\nlet in_24_hrs : timestamp = today - one_day\n"))),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=yesterday",group:"yesterday"},"const today: timestamp = Tezos.get_now();\nconst one_day: int = 86400;\nconst in_24_hrs: timestamp = today - one_day;\n"))),(0,r.kt)("h3",{id:"subtracting"},"Subtracting"),(0,r.kt)("p",null,"Timestamps can be subtracted, that means, we can use minus (",(0,r.kt)("inlineCode",{parentName:"p"},"-"),")\nbetween two timestamps:"),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=subtracting",group:"subtracting"},'let today : timestamp = Tezos.get_now ()\nlet some_date : timestamp = ("2035-01-01t10:10:10Z" : timestamp)\nlet secs_until_some_date : int = some_date - today\n'))),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=subtracting",group:"subtracting"},'const today: timestamp = Tezos.get_now();\nconst some_date: timestamp = "2035-01-01t10:10:10Z" as timestamp;\nconst secs_until_some_date: int = some_date - today;\n'))),(0,r.kt)("p",null,"Notice that the result of such subtraction is an ",(0,r.kt)("inlineCode",{parentName:"p"},"int"),", which describes the difference in seconds between the two timestamps."))}d.isMDXComponent=!0}}]);