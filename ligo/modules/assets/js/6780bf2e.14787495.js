"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[69552],{48720:(t,e,n)=>{n.d(e,{D:()=>s.Z,Z:()=>o});var a=n(67294),s=n(75402);const o=function(t){return a.createElement(s.Z.Consumer,null,(e=>{let{syntax:n}=e;return n===t.syntax?t.children:a.createElement(a.Fragment,null)}))}},99191:(t,e,n)=>{n.d(e,{Z:()=>p});var a=n(43164),s=n(67294),o=n(52263),i=n(48720),r=n(11506);function l(){return l=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(t[a]=n[a])}return t},l.apply(this,arguments)}const{Prism:m}=n(43164);m.languages={...m.languages,cameligo:{...m.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:m.languages.typescript};const p=function(t){const{siteConfig:{themeConfig:{prism:e={}}}}=(0,o.Z)(),n=e.singleTheme||r.Z,[m,p]=(0,s.useState)(!1);return(0,s.useEffect)((()=>{p(!0)}),[]),s.createElement(i.D.Consumer,null,(e=>{let{syntax:o}=e;return o===t.syntax?s.createElement(a.default,l({},a.defaultProps,{key:m,language:t.syntax,code:t.children,theme:n}),(t=>{let{className:e,tokens:n,getLineProps:a,getTokenProps:o}=t;return s.createElement("h4",{className:e,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((t,e)=>s.createElement("div",a({line:t,key:e}),t.map(((t,e)=>s.createElement("span",o({token:t,key:e}))))))))})):s.createElement("div",null)}))}},37462:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>l,default:()=>g,frontMatter:()=>r,metadata:()=>m,toc:()=>d});var a=n(87462),s=(n(67294),n(3905)),o=n(48720),i=n(99191);const r={id:"kathmandu",title:"Kathmandu",description:"Kathmandu changes"},l=void 0,m={unversionedId:"protocol/kathmandu",id:"version-1.5.0/protocol/kathmandu",title:"Kathmandu",description:"Kathmandu changes",source:"@site/versioned_docs/version-1.5.0/protocol/kathmandu.md",sourceDirName:"protocol",slug:"/protocol/kathmandu",permalink:"/previews/ligo/modules/docs/1.5.0/protocol/kathmandu",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"kathmandu",title:"Kathmandu",description:"Kathmandu changes"},sidebar:"API",previous:{title:"Jakarta",permalink:"/previews/ligo/modules/docs/1.5.0/protocol/jakarta"},next:{title:"Lima",permalink:"/previews/ligo/modules/docs/1.5.0/protocol/lima"}},p={},d=[{value:"API",id:"api",level:2},{value:"New primitives",id:"new-primitives",level:3},{value:"Tezos",id:"tezos",level:4},{value:"Test",id:"test",level:4},{value:"Event testing",id:"event-testing",level:2}],c={toc:d};function g(t){let{components:e,...n}=t;return(0,s.kt)("wrapper",(0,a.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Note: as LIGO uses Mumbai protocol to Michelson type-check your programs, the flag ",(0,s.kt)("inlineCode",{parentName:"p"},"--disable-michelson-typechecking")," is recommended to compile contracts to Kathmandu when using tickets / chest.")),(0,s.kt)("h2",{id:"api"},"API"),(0,s.kt)("h3",{id:"new-primitives"},"New primitives"),(0,s.kt)("h4",{id:"tezos"},"Tezos"),(0,s.kt)(i.Z,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"val emit<a> :  string -> a -> operation"),(0,s.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val emit : string -> 'a -> operation"),(0,s.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let emit: string => 'a => operation"),(0,s.kt)("p",null,"Build an event operation. To actually emit an event, this operation must be returned the same way as other operations (origination / transfer ..)"),(0,s.kt)("h4",{id:"test"},"Test"),(0,s.kt)(i.Z,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"val get_last_events_from<a,p,s> : typed_address (p,s) -> string -> list (a)"),(0,s.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val get_last_events_from : ('p,'s) typed_address -> string -> 'a list"),(0,s.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let get_last_events_from: typed_address <'p,'s> => string => list <'a>"),(0,s.kt)("p",null,"Returns the list of all the event payloads emited with a given tag by a given address. Any call to this\nfunction must be annotated with the expected payload type."),(0,s.kt)("h2",{id:"event-testing"},"Event testing"),(0,s.kt)("p",null,"Here is how you emit events and fetch them from your tests:"),(0,s.kt)(o.Z,{syntax:"pascaligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-pascaligo",metastring:"test-ligo group=test_ex","test-ligo":!0,group:"test_ex"},'function main ( const x : (int*int) * unit ) is\n  (list [Tezos.emit ("%foo", x.0) ; Tezos.emit ("%foo", x.0.0)], Unit)\n\nconst test_foo = {\n  const orig = Test.originate (main, Unit, 0tez) ;\n  Test.transfer_exn (orig.addr, (1,2), 0tez) ;\n  const x = (Test.get_last_events_from (orig.addr, "foo") : list (int*int)) ;\n  const y = (Test.get_last_events_from (orig.addr, "foo") : list (int)) ;\n} with (x,y)\n'))),(0,s.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"test-ligo group=test_ex","test-ligo":!0,group:"test_ex"},'module C = struct\n  [@entry] let main (p: int*int) (_: unit) =\n    [Tezos.emit "%foo" p ; Tezos.emit "%foo" p.0],()\nend\n\nlet test_foo =\n  let orig = Test.originate (contract_of C) () 0tez in\n  let _ = Test.transfer_exn orig.addr (Main (1,2)) 0tez in\n  (Test.get_last_events_from orig.addr "foo" : (int*int) list),(Test.get_last_events_from orig.addr "foo" : int list)\n'))),(0,s.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"test-ligo group=test_ex","test-ligo":!0,group:"test_ex"},'namespace C {\n  @entry\n  let main = (p: [int, int], _s : unit) => { \n    let op1 = Tezos.emit("%foo", p);\n    let op2 = Tezos.emit("%foo", p[0]);\n    return [list([op1, op2]), unit];\n  };\n}\n\nlet test = (() : [list<[int,int]>, list<int>] => {\n  let orig = Test.originate(contract_of(C), unit, 0 as tez);\n  Test.transfer_exn(orig.addr, Main([1,2]), 0 as tez);\n  return [Test.get_last_events_from(orig.addr, "foo") as list<[int, int]>, Test.get_last_events_from(orig.addr, "foo") as list<int>];\n}) ();\n'))))}g.isMDXComponent=!0}}]);