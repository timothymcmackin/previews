"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[60704],{48720:(e,t,n)=>{n.d(t,{D:()=>i.Z,Z:()=>r});var a=n(67294),i=n(75402);const r=function(e){return a.createElement(i.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},99191:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(43164),i=n(67294),r=n(52263),o=n(48720),s=n(11506);function l(){return l=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l.apply(this,arguments)}const{Prism:p}=n(43164);p.languages={...p.languages,cameligo:{...p.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:p.languages.typescript};const m=function(e){const{siteConfig:{themeConfig:{prism:t={}}}}=(0,r.Z)(),n=t.singleTheme||s.Z,[p,m]=(0,i.useState)(!1);return(0,i.useEffect)((()=>{m(!0)}),[]),i.createElement(o.D.Consumer,null,(t=>{let{syntax:r}=t;return r===e.syntax?i.createElement(a.default,l({},a.defaultProps,{key:p,language:e.syntax,code:e.children,theme:n}),(e=>{let{className:t,tokens:n,getLineProps:a,getTokenProps:r}=e;return i.createElement("h4",{className:t,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((e,t)=>i.createElement("div",a({line:e,key:t}),e.map(((e,t)=>i.createElement("span",r({token:e,key:t}))))))))})):i.createElement("div",null)}))}},61085:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>f,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a=n(87462),i=(n(67294),n(3905)),r=n(48720),o=n(99191);const s={id:"assert-reference",title:"assert",hide_table_of_contents:!0},l=void 0,p={unversionedId:"reference/assert-reference",id:"reference/assert-reference",title:"assert",description:"module error",source:"@site/../docs/reference/assert.md",sourceDirName:"reference",slug:"/reference/assert-reference",permalink:"/previews/ligo/modules/docs/next/reference/assert-reference",draft:!1,tags:[],version:"current",frontMatter:{id:"assert-reference",title:"assert",hide_table_of_contents:!0},sidebar:"API",previous:{title:"assert",permalink:"/previews/ligo/modules/docs/next/reference/test.next.assert-reference"},next:{title:"error",permalink:"/previews/ligo/modules/docs/next/reference/assert.error-reference"}},m={},c=[],d={toc:c};function f(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/previews/ligo/modules/docs/next/reference/assert.error-reference"},"module error")),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val assert : bool -> unit"),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let assert: (_: bool) => unit"),(0,i.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"assert cond")," terminates the execution with the string\n",(0,i.kt)("inlineCode",{parentName:"p"},'"failed assertion"')," if, and only if, the boolean condition ",(0,i.kt)("inlineCode",{parentName:"p"},"cond"),"\nis false.")),(0,i.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"assert(cond)")," terminates the execution with the string\n",(0,i.kt)("inlineCode",{parentName:"p"},'"failed assertion"')," if, and only if, the boolean condition ",(0,i.kt)("inlineCode",{parentName:"p"},"cond"),"\nis false.")),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val some : 'a.'a option -> unit"),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let some: <a>(_: option<a>) => unit"),(0,i.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"some opt")," terminates the execution with the\nstring ",(0,i.kt)("inlineCode",{parentName:"p"},'"failed assert some"')," if, and only if, ",(0,i.kt)("inlineCode",{parentName:"p"},"opt")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),".")),(0,i.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"some(opt)")," terminates the execution with the\nstring ",(0,i.kt)("inlineCode",{parentName:"p"},'"failed assert some"')," if, and only if, ",(0,i.kt)("inlineCode",{parentName:"p"},"opt")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"None()"),".")),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val none : 'a.'a option -> unit"),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let none: <a>(_: option<a>) => unit"),(0,i.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"none opt")," terminates the execution with the string\n",(0,i.kt)("inlineCode",{parentName:"p"},'"failed assert none"')," if, and only if, ",(0,i.kt)("inlineCode",{parentName:"p"},"opt")," is not ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),".")),(0,i.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"none(opt)")," terminates the execution with the string\n",(0,i.kt)("inlineCode",{parentName:"p"},'"failed assert none"')," if, and only if, ",(0,i.kt)("inlineCode",{parentName:"p"},"opt")," is not ",(0,i.kt)("inlineCode",{parentName:"p"},"None()"),".")))}f.isMDXComponent=!0}}]);