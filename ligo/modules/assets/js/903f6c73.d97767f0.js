"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[48800],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>g});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),u=s(n),g=o,y=u["".concat(l,".").concat(g)]||u[g]||c[g]||a;return n?r.createElement(y,i(i({ref:t},m),{},{components:n})):r.createElement(y,i({ref:t},m))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>o.Z,Z:()=>a});var r=n(67294),o=n(75402);const a=function(e){return r.createElement(o.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},54729:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var r=n(87462),o=(n(67294),n(3905)),a=n(48720);const i={id:"functions",title:"Functions"},p=void 0,l={unversionedId:"polymorphism/functions",id:"version-1.6.0/polymorphism/functions",title:"Functions",description:"Polymorphic functions accept arguments of parametric types, that is,",source:"@site/versioned_docs/version-1.6.0/polymorphism/functions.md",sourceDirName:"polymorphism",slug:"/polymorphism/functions",permalink:"/previews/ligo/modules/docs/1.6.0/polymorphism/functions",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"functions",title:"Functions"},sidebar:"docs",previous:{title:"Parameteric types",permalink:"/previews/ligo/modules/docs/1.6.0/polymorphism/parametric_types"},next:{title:"Unit",permalink:"/previews/ligo/modules/docs/1.6.0/variants/unit"}},s={},m=[],c={toc:m};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Polymorphic functions accept arguments of parametric types, that is,\na larger category of inputs, as long as the function does not assume a\nparticular type for the argument (so called ",(0,o.kt)("em",{parentName:"p"},"uniform polymorphism"),")."),(0,o.kt)("p",null,"Perhaps the most trivial example is the identity function."),(0,o.kt)("p",null,"For any given type ",(0,o.kt)("inlineCode",{parentName:"p"},"t"),", there is a canonical function from type ",(0,o.kt)("inlineCode",{parentName:"p"},"t")," to\ntype ",(0,o.kt)("inlineCode",{parentName:"p"},"t"),": it takes an argument and returns it immediately. For\ninstance, we can write the identity function for ",(0,o.kt)("inlineCode",{parentName:"p"},"int")," as follows:"),(0,o.kt)(a.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=monomorphism",group:"monomorphism"},"let id_int (x : int) = x\n"))),(0,o.kt)(a.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=monomorphism",group:"monomorphism"},"const id_int = (x: int) : int => x;\n"))),(0,o.kt)("p",null,"However, if we would want to use the same function on a different\ntype, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"nat"),", we will need to write a new definition:"),(0,o.kt)(a.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=monomorphism",group:"monomorphism"},"let id_nat (x : nat) = x\n"))),(0,o.kt)(a.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=monomorphism",group:"monomorphism"},"const id_nat = (x : nat) : nat => x;\n"))),(0,o.kt)("p",null,"If we read carefully, we see that there is almost no difference\nbetween ",(0,o.kt)("inlineCode",{parentName:"p"},"id_int")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"id_nat"),": it is just the type that changes, but\nfor the rest, the body of the function remains the same."),(0,o.kt)("p",null,"Thanks to parametric polymorphism, we can write a single function\ndeclaration that works for both cases."),(0,o.kt)(a.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=polymorphism",group:"polymorphism"},"let id (type a) (x : a) : a = x\n")),(0,o.kt)("p",null,"Here we introduce a type variable ",(0,o.kt)("inlineCode",{parentName:"p"},"a")," which can be generalised using\n",(0,o.kt)("inlineCode",{parentName:"p"},"(type a)")," after the function name in the declaration. If we have more\nthan one type parameter, we list them like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=polymorphism",group:"polymorphism"},"let map (type a b) (f : a -> b) (l : a list) : b list = List.map f l\n"))),(0,o.kt)(a.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=polymorphism",group:"polymorphism"},"const id = <T>(x: T) : T => x;\n")),(0,o.kt)("p",null,"Here ",(0,o.kt)("inlineCode",{parentName:"p"},"T")," is a type variable which can be generalised. If we have more\nthan one type parameter, we list them like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=polymorphism",group:"polymorphism"},"const map = <A,B>(f: (x:A) => B, l: list<A>) : list<B> => List.map (f,l);\n"))),(0,o.kt)("p",null,"We can now call the function ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," with arguments of different\ntypes:"),(0,o.kt)(a.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=polymorphism",group:"polymorphism"},'let three_int : int = id 3\nlet three_string : string = id "three"\n'))),(0,o.kt)(a.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=polymorphism",group:"polymorphism"},'const three_int : int = id(3);\nconst three_string : string = id("three");\n'))),(0,o.kt)("p",null,"During compilation, LIGO will ",(0,o.kt)("em",{parentName:"p"},"monomorphise")," the polymorphic functions\ninto specific instances, resulting in Michelson code that does not\ncontain polymorphic function declarations anymore."))}u.isMDXComponent=!0}}]);