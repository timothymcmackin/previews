"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[77092],{48720:(e,t,n)=>{n.d(t,{D:()=>s.Z,Z:()=>a});var r=n(67294),s=n(75402);const a=function(e){return r.createElement(s.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},99191:(e,t,n)=>{n.d(t,{Z:()=>d});var r=n(43164),s=n(67294),a=n(52263),i=n(48720),o=n(11506);function l(){return l=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l.apply(this,arguments)}const{Prism:c}=n(43164);c.languages={...c.languages,cameligo:{...c.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:c.languages.typescript};const d=function(e){const{siteConfig:{themeConfig:{prism:t={}}}}=(0,a.Z)(),n=t.singleTheme||o.Z,[c,d]=(0,s.useState)(!1);return(0,s.useEffect)((()=>{d(!0)}),[]),s.createElement(i.D.Consumer,null,(t=>{let{syntax:a}=t;return a===e.syntax?s.createElement(r.default,l({},r.defaultProps,{key:c,language:e.syntax,code:e.children,theme:n}),(e=>{let{className:t,tokens:n,getLineProps:r,getTokenProps:a}=e;return s.createElement("h4",{className:t,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((e,t)=>s.createElement("div",r({line:e,key:t}),e.map(((e,t)=>s.createElement("span",a({token:e,key:t}))))))))})):s.createElement("div",null)}))}},2496:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var r=n(87462),s=(n(67294),n(3905)),a=(n(48720),n(99191));const i={id:"test.next.state.reset-reference",title:"reset",hide_table_of_contents:!0},o=void 0,l={unversionedId:"reference/test.next.state.reset-reference",id:"version-1.7.0/reference/test.next.state.reset-reference",title:"reset",description:"val add&#95;baker : (string * key) -&gt; tez option -&gt; unit",source:"@site/versioned_docs/version-1.7.0/reference/test.next.state.reset.md",sourceDirName:"reference",slug:"/reference/test.next.state.reset-reference",permalink:"/previews/ligo/modules/docs/reference/test.next.state.reset-reference",draft:!1,tags:[],version:"1.7.0",frontMatter:{id:"test.next.state.reset-reference",title:"reset",hide_table_of_contents:!0},sidebar:"API",previous:{title:"state",permalink:"/previews/ligo/modules/docs/reference/test.next.state-reference"},next:{title:"contract",permalink:"/previews/ligo/modules/docs/reference/test.next.michelson.contract-reference"}},c={},d=[],p={toc:d};function u(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)(a.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val add_baker : (string * key) -> tez option -> unit"),(0,s.kt)(a.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let add_baker: (_: [string, key]) => (_: option<tez>) => unit"),"Adds an account `(sk, pk)` as a baker. The change is only effective after `Test.reset_state`.",(0,s.kt)(a.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val add_func_contract : 'p 's.(('p * 's) -> (operation list * 's)) -> 's -> tez -> unit"),(0,s.kt)(a.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let add_func_contract: <p, s>(_: (_: [p, s]) => [list<operation>, s]) => (_: s) => (_: tez) => unit"),"Setup a bootstrap contract with an entrypoint function, initial storage and initial balance. Bootstrap contracts will be loaded in order, and they will be available only after reset.")}u.isMDXComponent=!0}}]);