"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[68183],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=l(n),g=r,h=m["".concat(s,".").concat(g)]||m[g]||p[g]||i;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>r.Z,Z:()=>i});var a=n(67294),r=n(75402);const i=function(e){return a.createElement(r.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},18648:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var a=n(87462),r=(n(67294),n(3905)),i=n(48720);const o={id:"matching",title:"Matching"},c=void 0,s={unversionedId:"variants/matching",id:"version-1.5.0/variants/matching",title:"Matching",description:"Variant types being, in essence, the disjunctive union of cases akin",source:"@site/versioned_docs/version-1.5.0/variants/matching.md",sourceDirName:"variants",slug:"/variants/matching",permalink:"/previews/ligo/modules/docs/1.5.0/variants/matching",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"matching",title:"Matching"},sidebar:"docs",previous:{title:"Options",permalink:"/previews/ligo/modules/docs/1.5.0/variants/options"},next:{title:"Mutating",permalink:"/previews/ligo/modules/docs/1.5.0/imperative/mutating"}},l={},u=[],p={toc:u};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Variant types being, in essence, the disjunctive union of cases akin\nto types, values of such types need to be examined case by case: this\nis what ",(0,r.kt)("em",{parentName:"p"},"pattern matching")," does."),(0,r.kt)("p",null,"Here is a function that transforms a colour variant type to an integer."),(0,r.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=variant_matching",group:"variant_matching"},"type colour =\n  | RGB of int * int * int\n  | Gray of int\n  | Default\n\nlet int_of_colour (c : colour) : int =\n  match c with\n  | RGB (r,g,b) -> 16 + b + g * 6 + r * 36\n  | Gray i -> 232 + i\n  | Default -> 0\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: This is the same construct as in OCaml."))),(0,r.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=variant_matching",group:"variant_matching"},'type colour =\n| ["RGB", [int, int, int]]\n| ["Gray", int]\n| ["Default"];\n\nconst int_of_colour = (c : colour) : int =>\n  match(c) {\n    when(RGB([r,g,b])): 16 + b + g * 6 + r * 36;\n    when(Gray(i)): 232 + i;\n    when(Default): 0;\n  };\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: The ",(0,r.kt)("inlineCode",{parentName:"p"},"when"),"-clauses must cover all the variants of the type\n",(0,r.kt)("inlineCode",{parentName:"p"},"colour"),". When the constructor has no argument, which is equivalent\nto having a ",(0,r.kt)("inlineCode",{parentName:"p"},"[]")," (unit) argument, it can be omitted, hence\n",(0,r.kt)("inlineCode",{parentName:"p"},"when(Default)")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"when(Default())"),".")),(0,r.kt)("p",null,"The right-hand sides of each ",(0,r.kt)("inlineCode",{parentName:"p"},"when"),"-clause is an expression. Sometimes\nwe might need statements to be processed before a value is given to\nthe clause. In that case, the ",(0,r.kt)("inlineCode",{parentName:"p"},"do")," expression comes handy. It enables\nthe opening of a block of statements like a function body, that is, a\nblock ended with a ",(0,r.kt)("inlineCode",{parentName:"p"},"return")," statement whose argument has the value of\nthe block, like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=match_with_block",group:"match_with_block"},"function match_with_block (x : option<int>) : int {\n  return\n    match(x) {\n      when(None): 0;\n      when(Some(n)): do {\n        let y = n + 1;\n        return y\n      }\n    };\n};\n"))),(0,r.kt)("p",null,"Another example is matching on whether an integer is a natural number\nor not:"),(0,r.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=nat_matching",group:"nat_matching"},"let is_it_a_nat (i : int) =\n  match is_nat i with\n    None   -> false\n  | Some _ -> true\n"))),(0,r.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=nat_matching",group:"nat_matching"},"const is_it_a_nat = (i : int) =>\n  match (is_nat(i)) {\n    when(None): false;\n    when(Some(n)): do {ignore(n); return true; }\n  }\n"))))}m.isMDXComponent=!0}}]);