"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[46464],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,f=u["".concat(o,".").concat(d)]||u[d]||m[d]||i;return n?r.createElement(f,l(l({ref:t},p),{},{components:n})):r.createElement(f,l({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=u;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>i});var r=n(67294),a=n(75402);const i=function(e){return r.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},8798:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=n(87462),a=(n(67294),n(3905)),i=n(48720);const l={id:"declaring",title:"Declaring"},s=void 0,o={unversionedId:"lists/declaring",id:"version-1.5.0/lists/declaring",title:"Declaring",description:"Lists are linear collections of elements of the same type. Linear",source:"@site/versioned_docs/version-1.5.0/lists/declaring.md",sourceDirName:"lists",slug:"/lists/declaring",permalink:"/previews/ligo/modules/docs/1.5.0/lists/declaring",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"declaring",title:"Declaring"},sidebar:"docs",previous:{title:"Asserting",permalink:"/previews/ligo/modules/docs/1.5.0/imperative/asserting"},next:{title:"Adding",permalink:"/previews/ligo/modules/docs/1.5.0/lists/adding"}},c={},p=[],m={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Lists are linear collections of elements of the same type. Linear\nmeans that, in order to reach an element in a list, we must visit all\nthe elements before (sequential access). Elements can be repeated, as\nonly their order in the collection matters. The first element is\ncalled the ",(0,a.kt)("em",{parentName:"p"},"head"),", and the sub-list after the head is called the\n",(0,a.kt)("em",{parentName:"p"},"tail"),". For those familiar with algorithmic data structure, you can\nthink of a list a ",(0,a.kt)("em",{parentName:"p"},"stack"),", where the top is written on the left."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\ud83d\udca1 Lists are needed when returning operations from a smart\ncontract.")),(0,a.kt)("p",null,'The type for lists is polymorphic, that is, parameterised by the type\nof the list elements, so we can define a "list of integers", a "list\nof natural numbers" etc.'),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=lists",group:"lists"},"let empty_list : int list = []\nlet my_list : int list = [1; 2; 2] (* The head is 1, the tail is [2; 2] *)\n")),(0,a.kt)("p",null,"See predefined\n",(0,a.kt)("a",{parentName:"p",href:"../reference/list-reference/?lang=cameligo"},"module List"),".")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=lists",group:"lists"},"const empty_list: list<int> = list([]);\nconst my_list = list([1, 2, 2]); // The head is 1, the tail is list([2, 2])\n")),(0,a.kt)("p",null,"Note how we need to use the cast ",(0,a.kt)("inlineCode",{parentName:"p"},"list(...)")," on a tuple to make it a\nlist. In general, tuples are not lists: tuples have a fixed number of\ncomponents that appear in their type, and each component can have a\ndifferent type, whereas lists have a variable number of elements and\nthey have all the same type. Nevertheless, LIGO uses the same syntax\nfor tuples and lists, except that the latter is enclosed in\n",(0,a.kt)("inlineCode",{parentName:"p"},"list(...)"),", except when the context makes it unambiguous that it is a\nlist (we will see some example with pattern matching)."),(0,a.kt)("p",null,"See predefined\n",(0,a.kt)("a",{parentName:"p",href:"../reference/list-reference/?lang=jsligo"},"namespace List"),".")))}u.isMDXComponent=!0}}]);