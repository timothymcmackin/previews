"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[27228],{48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>i});var l=n(67294),a=n(75402);const i=function(e){return l.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:l.createElement(l.Fragment,null)}))}},99191:(e,t,n)=>{n.d(t,{Z:()=>m});var l=n(43164),a=n(67294),i=n(52263),s=n(48720),o=n(11506);function p(){return p=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(e[l]=n[l])}return e},p.apply(this,arguments)}const{Prism:r}=n(43164);r.languages={...r.languages,cameligo:{...r.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:r.languages.typescript};const m=function(e){const{siteConfig:{themeConfig:{prism:t={}}}}=(0,i.Z)(),n=t.singleTheme||o.Z,[r,m]=(0,a.useState)(!1);return(0,a.useEffect)((()=>{m(!0)}),[]),a.createElement(s.D.Consumer,null,(t=>{let{syntax:i}=t;return i===e.syntax?a.createElement(l.default,p({},l.defaultProps,{key:r,language:e.syntax,code:e.children,theme:n}),(e=>{let{className:t,tokens:n,getLineProps:l,getTokenProps:i}=e;return a.createElement("h4",{className:t,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((e,t)=>a.createElement("div",l({line:e,key:t}),e.map(((e,t)=>a.createElement("span",i({token:e,key:t}))))))))})):a.createElement("div",null)}))}},76897:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var l=n(87462),a=(n(67294),n(3905)),i=n(48720),s=n(99191);const o={id:"big-set-reference",title:"big_set",hide_table_of_contents:!0},p=void 0,r={unversionedId:"reference/big-set-reference",id:"version-1.6.0/reference/big-set-reference",title:"big_set",description:"Lazily accessed sets",source:"@site/versioned_docs/version-1.6.0/reference/big_set.md",sourceDirName:"reference",slug:"/reference/big-set-reference",permalink:"/previews/ligo/modules/docs/1.6.0/reference/big-set-reference",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"big-set-reference",title:"big_set",hide_table_of_contents:!0},sidebar:"API",previous:{title:"map",permalink:"/previews/ligo/modules/docs/1.6.0/reference/map-reference"},next:{title:"string",permalink:"/previews/ligo/modules/docs/1.6.0/reference/string-reference"}},m={},d=[],y={toc:d};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,l.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Lazily accessed sets"),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type 'elt t = ('elt, unit) big_map"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type t<elt> = big_map<elt, unit>"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The type of the big sets is based on ",(0,a.kt)("inlineCode",{parentName:"p"},"big_map"),".")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The type of the big sets is based on ",(0,a.kt)("inlineCode",{parentName:"p"},"big_map"),".")),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val empty : 'elt.'elt t"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let empty: <elt>t<elt>"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The value ",(0,a.kt)("inlineCode",{parentName:"p"},"empty")," denotes the empty big set. In some contexts,\nit is useful to annotate it with its type, for example:\n",(0,a.kt)("inlineCode",{parentName:"p"},"(empty as Big_set.t<int>)"),".")),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val update : 'elt.'elt -> bool -> 'elt t -> 'elt t"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let update: <elt>(_: elt) => (_: bool) => (_: t<elt>) => t<elt>"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"update elt true set")," is a copy of the big set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),"\ncontaining the element ",(0,a.kt)("inlineCode",{parentName:"p"},"elt"),". The call ",(0,a.kt)("inlineCode",{parentName:"p"},"update elt false set")," is a\ncopy of the big set ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," where the element ",(0,a.kt)("inlineCode",{parentName:"p"},"elt")," is absent.")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"update(elt, true, set)")," is a copy of the big set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),"\ncontaining the element ",(0,a.kt)("inlineCode",{parentName:"p"},"elt"),". The call ",(0,a.kt)("inlineCode",{parentName:"p"},"update(elt, false, set)"),"\nis a copy of the big set ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," where the element ",(0,a.kt)("inlineCode",{parentName:"p"},"elt")," is\nabsent.")),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val add : 'elt.'elt -> 'elt t -> 'elt t"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let add: <elt>(_: elt) => (_: t<elt>) => t<elt>"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"add elt set")," is a big set containing all the elements\nof the big set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),", plus the element ",(0,a.kt)("inlineCode",{parentName:"p"},"elt"),".")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"add(elt, set)")," is a big set containing all the elements\nof the big set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),", plus the element ",(0,a.kt)("inlineCode",{parentName:"p"},"elt"),".")),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val remove : 'elt.'elt -> 'elt t -> 'elt t"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let remove: <elt>(_: elt) => (_: t<elt>) => t<elt>"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"remove elt set")," is a copy of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," without the\nelement ",(0,a.kt)("inlineCode",{parentName:"p"},"elt"),".")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"remove(elt, set)")," is a copy of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," without the\nelement ",(0,a.kt)("inlineCode",{parentName:"p"},"elt"),".")),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val literal : 'elt.'elt list -> 'elt t"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let literal: <elt>(_: list<elt>) => t<elt>"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"literal [e1; ...; en]")," is a big set containing exactly\nthe elements in the list. Note: The list must be literal, not an\nexpression (compile-time list of values).")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"literal([e1, ..., en])")," is a big set containing\nexactly the elements in the list. Note: The list must be literal,\nnot an expression (compile-time list of values).")),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val of_list : 'elt.'elt list -> 'elt t"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let of_list: <elt>(_: list<elt>) => t<elt>"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"of_list elements")," is a big set containing exactly the\nelements in the list ",(0,a.kt)("inlineCode",{parentName:"p"},"elements"),". Note: Use ",(0,a.kt)("inlineCode",{parentName:"p"},"literal")," instead if\nusing a literal list. Note: Use ",(0,a.kt)("inlineCode",{parentName:"p"},"literal")," instead if using a\nliteral list.")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"of_list(elements)")," is a big set containing exactly the\nelements in the list ",(0,a.kt)("inlineCode",{parentName:"p"},"elements"),". Note: Use ",(0,a.kt)("inlineCode",{parentName:"p"},"literal")," instead if\nusing a literal list. Note: Use ",(0,a.kt)("inlineCode",{parentName:"p"},"literal")," instead if using a\nliteral list.")),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val mem : 'elt.'elt -> 'elt t -> bool"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let mem: <elt>(_: elt) => (_: t<elt>) => bool"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"mem elt set")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," if, and only if, the element\n",(0,a.kt)("inlineCode",{parentName:"p"},"elt")," belongs to the big set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),".")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"mem(elt, set)")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," if, and only if, the element\n",(0,a.kt)("inlineCode",{parentName:"p"},"elt")," belongs to the big set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),".")))}c.isMDXComponent=!0}}]);