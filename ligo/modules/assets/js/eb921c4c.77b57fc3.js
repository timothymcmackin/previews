"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[40471],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=l(n),g=o,u=m["".concat(p,".").concat(g)]||m[g]||c[g]||r;return n?a.createElement(u,i(i({ref:t},d),{},{components:n})):a.createElement(u,i({ref:t},d))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>o.Z,Z:()=>r});var a=n(67294),o=n(75402);const r=function(e){return a.createElement(o.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},22410:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>d});var a=n(87462),o=(n(67294),n(3905)),r=n(48720);const i={id:"operation",title:"Operations"},s=void 0,p={unversionedId:"tezos/contracts/operation",id:"version-1.6.0/tezos/contracts/operation",title:"Operations",description:"The final stack after a contract execution is a pair containing a new",source:"@site/versioned_docs/version-1.6.0/tezos/contracts/operation.md",sourceDirName:"tezos/contracts",slug:"/tezos/contracts/operation",permalink:"/previews/ligo/modules/docs/1.6.0/tezos/contracts/operation",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"operation",title:"Operations"},sidebar:"docs",previous:{title:"Michelson injection",permalink:"/previews/ligo/modules/docs/1.6.0/tezos/contracts/michelson-injection"},next:{title:"Events",permalink:"/previews/ligo/modules/docs/1.6.0/contract/events"}},l={},d=[{value:"Origination",id:"origination",level:3},{value:"Transaction",id:"transaction",level:3},{value:"Delegation",id:"delegation",level:3},{value:"Event emission",id:"event-emission",level:3}],c={toc:d};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The final stack after a contract execution is a pair containing a new\nstorage and a list of operations. An operation is either a transfer,\nan account creation (a.k.a. origination), a delegation or the emission\nof an event."),(0,o.kt)("p",null,"There are no literal values of type operation. Instead, such values\nare created using the following functions from the standard library:\n",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.create_contract")," (origination), ",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.transaction")," (transfer),\n",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.set_delegate")," (delegation), and ",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.emit")," (emission of\nevent)."),(0,o.kt)("h3",{id:"origination"},"Origination"),(0,o.kt)(r.Z,{syntex:"cameligo",mdxType:"Syntax"},(0,o.kt)("p",null,"The call ",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.create_contract e d a s")," returns a contract creation\noperation (origination) for the entrypoint ",(0,o.kt)("inlineCode",{parentName:"p"},"e")," (as a function) with\noptional delegate ",(0,o.kt)("inlineCode",{parentName:"p"},"d"),", initial amount ",(0,o.kt)("inlineCode",{parentName:"p"},"a")," and initial storage ",(0,o.kt)("inlineCode",{parentName:"p"},"s"),",\ntogether with the address of the created contract. Note that the\ncreated contract cannot be called immediately afterwards (that is,\n",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.get_contract_opt")," on that address would return ",(0,o.kt)("inlineCode",{parentName:"p"},"None"),"), as the\norigination must be performed successfully first, for example by\ncalling a proxy contract or itself."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=operation",group:"operation"},'type return = operation list * string\n\n[@entry]\nlet main (_ : string) (storage : string) : return =\n  let entrypoint (_ : nat) (storage : string) =\n    (([] : operation list), storage) in\n  let op, _addr : operation * address =\n    Tezos.create_contract\n      entrypoint\n      (None : key_hash option)\n      300000000mutez\n      "one"\n  in [op], storage\n'))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("p",null,"The call ",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.create_contract(e,d,a,s)")," returns a contract creation\noperation (origination) for the entrypoint ",(0,o.kt)("inlineCode",{parentName:"p"},"e")," (as a function) with\noptional delegate ",(0,o.kt)("inlineCode",{parentName:"p"},"d"),", initial amount ",(0,o.kt)("inlineCode",{parentName:"p"},"a")," and initial storage ",(0,o.kt)("inlineCode",{parentName:"p"},"s"),",\ntogether with the address of the created contract. Note that the\ncreated contract cannot be called immediately afterwards (that is,\n",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.get_contract_opt")," on that address would return ",(0,o.kt)("inlineCode",{parentName:"p"},"None()"),"), as the\norigination must be performed successfully first, for example by\ncalling a proxy contract or itself."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=operation",group:"operation"},'type @return = [list<operation>, string];\n\n@entry\nconst main = (_: string, storage: string) : @return => {\n  const entrypoint = (_param: nat, storage: string) =>\n    [list([]), storage];\n  const [op, _addr]: [operation, address] =\n    Tezos.create_contract(entrypoint,\n                          (None() as option<key_hash>),\n                          300000000mutez,\n                          "one");\n  return [[op], storage];\n}\n'))),(0,o.kt)("h3",{id:"transaction"},"Transaction"),(0,o.kt)(r.Z,{syntex:"cameligo",mdxType:"Syntax"},(0,o.kt)("p",null,"The call ",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.transaction param amount contract_addr")," evaluates in\nan operation that will send the amount ",(0,o.kt)("inlineCode",{parentName:"p"},"amount")," in mutez to the\ncontract at the valid address ",(0,o.kt)("inlineCode",{parentName:"p"},"contract_addr"),", with parameter\n",(0,o.kt)("inlineCode",{parentName:"p"},"param"),". If the contract is an implicit account, the parameter must be\n",(0,o.kt)("inlineCode",{parentName:"p"},"unit"),"."),(0,o.kt)("p",null,"The following example shows a transaction sent from one contract to\nanother. The former is derived from a module ",(0,o.kt)("inlineCode",{parentName:"p"},"B")," with an entrypoint\n",(0,o.kt)("inlineCode",{parentName:"p"},"increment"),"; the latter is derived from a module ",(0,o.kt)("inlineCode",{parentName:"p"},"A")," with an\nentrypoint ",(0,o.kt)("inlineCode",{parentName:"p"},"add"),". The entrypoint ",(0,o.kt)("inlineCode",{parentName:"p"},"increment")," calls ",(0,o.kt)("inlineCode",{parentName:"p"},"add")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"1"),". We\nassume that the contract associated with module ",(0,o.kt)("inlineCode",{parentName:"p"},"A")," is deployed under\nthe address ",(0,o.kt)("inlineCode",{parentName:"p"},'"KT1TxqZ8QtKvLu3V3JH7Gx58n7Co8pgtpQU5"'),"."),(0,o.kt)("p",null,"Contract (derived from) ",(0,o.kt)("inlineCode",{parentName:"p"},"B")," needs to provide the parameter of the\ncalled contract. The convention is to transform the entrypoint being\ncalled to a variant. Here, ",(0,o.kt)("inlineCode",{parentName:"p"},"add")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"A")," becomes ",(0,o.kt)("inlineCode",{parentName:"p"},"Add"),". The variant\n",(0,o.kt)("inlineCode",{parentName:"p"},"Add")," carries the value of the parameter of the entrypoint, here ",(0,o.kt)("inlineCode",{parentName:"p"},"1"),"\nbecause we show how to increment the storage (",(0,o.kt)("inlineCode",{parentName:"p"},"storage + delta")," in\n",(0,o.kt)("inlineCode",{parentName:"p"},"A"),"). The type of the parameter of the contract ",(0,o.kt)("inlineCode",{parentName:"p"},"A")," is obtained by ",(0,o.kt)("inlineCode",{parentName:"p"},"A\nparameter_of"),", and it is the type of ",(0,o.kt)("inlineCode",{parentName:"p"},"Add 1"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=operation_transaction",group:"operation_transaction"},"type 'storage return = operation list * 'storage\n\nmodule A =\n  struct\n    type storage = int\n\n    [@entry]\n    let add (delta : int) (storage : storage) : storage return =\n      [], storage + delta\n  end\n\nmodule B =\n  struct\n    type storage = int\n\n    [@entry]\n    let increment (_param : unit) (storage : storage) : storage return =\n      let contract_addr =\n        Tezos.get_contract\n          (\"KT1TxqZ8QtKvLu3V3JH7Gx58n7Co8pgtpQU5\" : address) in\n      let operation =\n        Tezos.transaction (Add 1 : A parameter_of) 0tez contract_addr\n    in [operation], storage\n  end\n"))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("p",null,"The call ",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.transaction(param, amount, contract_addr)")," evaluates\nin an operation that will send the amount ",(0,o.kt)("inlineCode",{parentName:"p"},"amount")," in mutez to the\ncontract at the valid address ",(0,o.kt)("inlineCode",{parentName:"p"},"contract_addr"),", with parameter\n",(0,o.kt)("inlineCode",{parentName:"p"},"param"),". If the contract is an implicit account, the parameter must be\n",(0,o.kt)("inlineCode",{parentName:"p"},"unit"),"."),(0,o.kt)("p",null,"The following example shows a transaction sent from one contract to\nanother. The former is derived from a namespace ",(0,o.kt)("inlineCode",{parentName:"p"},"B")," with an entrypoint\n",(0,o.kt)("inlineCode",{parentName:"p"},"increment"),"; the latter is derived from a namespace ",(0,o.kt)("inlineCode",{parentName:"p"},"A")," with an\nentrypoint ",(0,o.kt)("inlineCode",{parentName:"p"},"add"),". The entrypoint ",(0,o.kt)("inlineCode",{parentName:"p"},"increment")," calls ",(0,o.kt)("inlineCode",{parentName:"p"},"add")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"1"),". We\nassume that the contract associated with namespace ",(0,o.kt)("inlineCode",{parentName:"p"},"A")," is deployed\nunder the address ",(0,o.kt)("inlineCode",{parentName:"p"},'"KT1TxqZ8QtKvLu3V3JH7Gx58n7Co8pgtpQU5"'),"."),(0,o.kt)("p",null,"Contract (derived from) ",(0,o.kt)("inlineCode",{parentName:"p"},"B")," needs to provide the parameter of the\ncalled contract. The convention is to transform the entrypoint being\ncalled to a variant. Here, ",(0,o.kt)("inlineCode",{parentName:"p"},"add")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"A")," becomes ",(0,o.kt)("inlineCode",{parentName:"p"},"Add"),". The variant\n",(0,o.kt)("inlineCode",{parentName:"p"},"Add")," carries the value of the parameter of the entrypoint, here ",(0,o.kt)("inlineCode",{parentName:"p"},"1"),"\nbecause we show how to increment the storage (",(0,o.kt)("inlineCode",{parentName:"p"},"storage + delta")," in\n",(0,o.kt)("inlineCode",{parentName:"p"},"A"),"). The type of the parameter of the contract ",(0,o.kt)("inlineCode",{parentName:"p"},"A")," is obtained by ",(0,o.kt)("inlineCode",{parentName:"p"},"A\nparameter_of"),", and it is the type of ",(0,o.kt)("inlineCode",{parentName:"p"},"Add(1)"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=operation_transaction",group:"operation_transaction"},'type @return<storage> = [list<operation>, storage];\n\nnamespace A {\n  type storage = int;\n\n  @entry\n  const add = (delta: int, storage: storage): @return<storage> =>\n    [[], storage + delta];\n}\n\nnamespace B {\n  type storage = int;\n\n  @entry\n  const increment = (_param: unit, storage: storage): @return<storage> => {\n    const operation =\n      Tezos.transaction(Add(1) as parameter_of A,\n                        0tez,\n                        Tezos.get_contract(\n                          "KT1TxqZ8QtKvLu3V3JH7Gx58n7Co8pgtpQU5" as address))\n    return [[operation], storage];\n  }\n}\n'))),(0,o.kt)("p",null,"It is possible for a contract to have multiple entrypoints, which is\nimplicitly translated in LIGO to a ",(0,o.kt)("inlineCode",{parentName:"p"},"parameter")," with a variant type as\nshown below. The following contract:"),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=entrypoints_and_annotations",group:"entrypoints_and_annotations"},"type storage = int\n\n[@entry]\nlet sub (i : int) (x : storage) : operation list * storage = [], x - i\n\n[@entry]\nlet add (i : int) (x : storage) : operation list * storage = [], x + i\n"))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=entrypoints_and_annotations",group:"entrypoints_and_annotations"},"type storage = int\n\n@entry\nconst sub = (i: int, x: storage) : [list<operation>, storage] =>\n  [[], x - i]\n\n@entry\nconst add = (i: int, x: storage) : [list<operation>, storage] =>\n  [[], x + i]\n"))),(0,o.kt)("p",null,"is translated internally to a contract similar to this one:"),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo"},"type storage = int\n\ntype parameter = Sub of int | Add of int\n\n[@entry]\nlet main (p : parameter) (x : storage) : operation list * storage =\n  [],\n  (match p with\n  | Sub i -> x - i\n  | Add i -> x + i)\n"))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo"},'type storage = int;\n\ntype parameter = ["Sub", int] | ["Add", int];\n\nlet main = (p: parameter, x: storage): [list<operation>, storage] =>\n  [list ([]),\n  match(p) {\n    when(Sub(i)): x - i;\n    when(Add(i)): x + i\n  }];\n'))),(0,o.kt)("p",null,"This contract can be called by another contract, like this one:"),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=get_entrypoint",group:"get_entrypoint"},'type storage = int\ntype parameter = int\n\ntype remote_param = Sub of int\n\n[@entry]\nlet main (_ : parameter) (s : storage): operation list * storage =\n  let contract_addr =\n    Tezos.get_entrypoint\n      "%sub" // Corresponds to the `Sub` variant of `remote_param`.\n      ("tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" : address)\n  in [Tezos.transaction (Sub 2) 2mutez contract_addr], s\n'))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=get_entrypoint",group:"get_entrypoint"},'type storage = int;\ntype parameter = int;\n\ntype remote_param = | ["Sub", int]; // Note the leading vertical bar.\n\n@entry\nconst main = (_p: parameter, s: storage): [list<operation>, storage] => {\n  let contract_addr =\n    Tezos.get_entrypoint(\n      "%sub", // Corresponds to the `Sub` variant of `remote_param`.\n      "tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" as address);\n  return [[Tezos.transaction(Sub(2), 2mutez, contract_addr)], s];\n};\n'))),(0,o.kt)("p",null,"Notice how we directly use the ",(0,o.kt)("inlineCode",{parentName:"p"},"%sub")," entrypoint without mentioning\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"%add")," entrypoint. This is done with the help of\nannotations. Those annotations correspond to the name of the function\ndefining the entrypoints, prefixed by a ",(0,o.kt)("inlineCode",{parentName:"p"},"%"),", so ",(0,o.kt)("inlineCode",{parentName:"p"},"sub")," becomes\n",(0,o.kt)("inlineCode",{parentName:"p"},"%sub"),". Also, as shown above, each entrypoint corresponds to an\nimplicit variant type whose name is the entrypoint function whose\nfirst character is capitalised, so ",(0,o.kt)("inlineCode",{parentName:"p"},"sub")," becomes ",(0,o.kt)("inlineCode",{parentName:"p"},"Sub"),", as far as\nparameters are concerned."),(0,o.kt)("h3",{id:"delegation"},"Delegation"),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("p",null,"The call ",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.set_delegate d")," evaluates in an operation that sets\nthe delegate of the current smart contract to be ",(0,o.kt)("inlineCode",{parentName:"p"},"d"),", where ",(0,o.kt)("inlineCode",{parentName:"p"},"d")," is an\noptional key hash. If ",(0,o.kt)("inlineCode",{parentName:"p"},"None"),", the delegation is withdrawn. If the\ncontract has no delegation, then no change occurs. If ",(0,o.kt)("inlineCode",{parentName:"p"},"d")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"Some\nkh"),", where ",(0,o.kt)("inlineCode",{parentName:"p"},"kh")," is the key hash of a registered delegate that is not\nthe current delegate of the contract, then this operation sets the\ndelegate of the contract to this registered delegate. A failure occurs\nif ",(0,o.kt)("inlineCode",{parentName:"p"},"kh")," is the current delegate of the contract or if ",(0,o.kt)("inlineCode",{parentName:"p"},"kh")," is not a\nregistered delegate. However, the instruction in itself does not fail;\nit produces an operation that will fail when applied."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=set_delegate",group:"set_delegate"},"let check (kh : key_hash) : operation list =\n  [Tezos.set_delegate (Some kh)]\n"))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("p",null,"The call ",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.set_delegate(d)")," evaluates in an operation that sets\nthe delegate of the current smart contract to be ",(0,o.kt)("inlineCode",{parentName:"p"},"d"),", where ",(0,o.kt)("inlineCode",{parentName:"p"},"d")," is an\noptional key hash. If ",(0,o.kt)("inlineCode",{parentName:"p"},"None()"),", the delegation is withdrawn. If the\ncontract has no delegation, then no change occurs. If ",(0,o.kt)("inlineCode",{parentName:"p"},"d")," is\n",(0,o.kt)("inlineCode",{parentName:"p"},"Some(kh)"),", where ",(0,o.kt)("inlineCode",{parentName:"p"},"kh")," is the key hash of a registered delegate that\nis not the current delegate of the contract, then this operation sets\nthe delegate of the contract to this registered delegate. A failure\noccurs if ",(0,o.kt)("inlineCode",{parentName:"p"},"kh")," is the current delegate of the contract or if ",(0,o.kt)("inlineCode",{parentName:"p"},"kh")," is\nnot a registered delegate. However, the instruction in itself does not\nfail; it produces an operation that will fail when applied."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=set_delegate",group:"set_delegate"},"const check = (kh: key_hash) : list<operation> =>\n  [Tezos.set_delegate (Some(kh))];\n"))),(0,o.kt)("h3",{id:"event-emission"},"Event emission"),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("p",null,"The call ",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.emit event_tag event_type")," evaluates in an operation\nthat will write an event into the transaction receipt after the\nsuccessful execution of this contract. The event is annotated by the\nstring ",(0,o.kt)("inlineCode",{parentName:"p"},"event_tag")," if it is not empty. The argument ",(0,o.kt)("inlineCode",{parentName:"p"},"event_type")," is\nused only to specify the type of data attachment."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=event_emit",group:"event_emit"},'type storage = unit\n\n[@entry]\nlet main (param : int * int) () : operation list * storage =\n  [Tezos.emit "%foo" param; Tezos.emit "%bar" param.0], ()\n'))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("p",null,"The call ",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.emit(event_tag, event_type)")," evaluates in an operation\nthat will write an event into the transaction receipt after the\nsuccessful execution of this contract. The event is annotated by the\nstring ",(0,o.kt)("inlineCode",{parentName:"p"},"event_tag")," if it is not empty. The argument ",(0,o.kt)("inlineCode",{parentName:"p"},"event_type")," is\nused only to specify the type of data attachment."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=event_emit",group:"event_emit"},'type storage = unit;\n\n@entry\nconst main = (param: [int, int], storage: unit) : [list<operation>, storage] =>\n  [[Tezos.emit("%foo", param), Tezos.emit("%bar", param[0])], storage];\n'))))}m.isMDXComponent=!0}}]);