"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[47970],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),y=i,g=u["".concat(p,".").concat(y)]||u[y]||m[y]||r;return n?a.createElement(g,o(o({ref:t},c),{},{components:n})):a.createElement(g,o({ref:t},c))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<r;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>i.Z,Z:()=>r});var a=n(67294),i=n(75402);const r=function(e){return a.createElement(i.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},97029:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var a=n(87462),i=(n(67294),n(3905)),r=n(48720);const o={id:"parametric_types",title:"Parameteric types"},s=void 0,p={unversionedId:"data-types/parametric_types",id:"data-types/parametric_types",title:"Parameteric types",description:"LIGO parametric types are types that can accept values of different types.",source:"@site/../docs/data-types/parametric_types.md",sourceDirName:"data-types",slug:"/data-types/parametric_types",permalink:"/previews/ligo/modules/docs/next/data-types/parametric_types",draft:!1,tags:[],version:"current",frontMatter:{id:"parametric_types",title:"Parameteric types"},sidebar:"docs",previous:{title:"Tickets",permalink:"/previews/ligo/modules/docs/next/data-types/tickets"},next:{title:"Preprocessor",permalink:"/previews/ligo/modules/docs/next/preprocessor/"}},l={},c=[{value:"Polymorphic functions",id:"polymorphic-functions",level:2}],m={toc:c};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"LIGO parametric types are types that can accept values of different types."),(0,i.kt)("p",null,"For example, you might want to define a type that uses a string as a key and some other type as a value.\nThis example defines a type named ",(0,i.kt)("inlineCode",{parentName:"p"},"binding")," that is a pair that consists of a string and some other type.\nBuilding on the ",(0,i.kt)("inlineCode",{parentName:"p"},"binding")," type, it defines a type named ",(0,i.kt)("inlineCode",{parentName:"p"},"int_binding")," that uses an integer as the value and a type named ",(0,i.kt)("inlineCode",{parentName:"p"},"string_binding")," that uses a string as the value:"),(0,i.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=parametric_types",group:"parametric_types"},'type key = string\ntype \'value binding = key * \'value\n\nlet int_binding : int binding = "Alice", 4\nlet string_binding : string binding = "Bob", "cat"\n')),(0,i.kt)("p",null,"As in OCaml, the ",(0,i.kt)("inlineCode",{parentName:"p"},"'value")," parameter must be prefixed with a single quote (tick) to distinguish it from an already defined type.\nAlso, the type parameter is placed before the type name, as in ",(0,i.kt)("inlineCode",{parentName:"p"},"int binding"),".")),(0,i.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=parametric_types",group:"parametric_types"},'type key = string;\ntype binding<value> = [key, value];\n\nconst int_binding : binding<int> = ["Alice", 4];\nconst string_binding : binding<string> = ["Bob", "cat"];\n'))),(0,i.kt)("h2",{id:"polymorphic-functions"},"Polymorphic functions"),(0,i.kt)("p",null,"Polymorphic functions can take advantage of parametric types to accept a wide variety of inputs instead of only a single input type.\nThe inputs must be organized in a similar way, known as ",(0,i.kt)("em",{parentName:"p"},"uniform polymorphism"),".\nA simple example is the identity function, which is a function that returns the value that is passed to it.\nFor example, the identity function for an integer parameter looks like this:"),(0,i.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=monomorphism",group:"monomorphism"},"let id_int (x : int) = x\n"))),(0,i.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=monomorphism",group:"monomorphism"},"const id_int = (x: int) : int => x;\n"))),(0,i.kt)("p",null,"To create an identity function for a nat or any other type, normally you would have to write a second function that is fundamentally the same.\nHowever, thanks to parametric polymorphism, you can write a single function that works for both cases."),(0,i.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The following polymorphic function accepts a value of any type.\nIt defines a type variable named ",(0,i.kt)("inlineCode",{parentName:"p"},"a"),", lists that type in the function definition, and uses that type variable as the type of the passed parameter and as the type of the return value:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=polymorphism",group:"polymorphism"},"let id (type a) (x : a) : a = x\n")),(0,i.kt)("p",null,"Functions can have more than one type variable in the definition, as in this example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=polymorphism",group:"polymorphism"},"let map (type a b) (f : a -> b) (l : a list) : b list = List.map f l\n"))),(0,i.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The following polymorphic function accepts a value of any type.\nIt defines a type variable named ",(0,i.kt)("inlineCode",{parentName:"p"},"T"),", lists that type in the function definition, and uses that type variable as the type of the passed parameter and as the type of the return value:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=polymorphism",group:"polymorphism"},"const id = <T>(x: T) : T => x;\n")),(0,i.kt)("p",null,"Functions can have more than one type variable in the definition, as in this example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=polymorphism",group:"polymorphism"},"const map = <A,B>(f: (x:A) => B, l: list<A>) : list<B> => List.map (f,l);\n"))),(0,i.kt)("p",null,"Now the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," function works the same way when passed parameters of different types:"),(0,i.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=polymorphism",group:"polymorphism"},'let three_int : int = id 3\nlet three_string : string = id "three"\n'))),(0,i.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=polymorphism",group:"polymorphism"},'const three_int : int = id(3);\nconst three_string : string = id("three");\n'))),(0,i.kt)("p",null,"Polymorphism is especially useful when writing functions over\nparametric types, which include built-in types like lists, sets, and\nmaps."),(0,i.kt)("p",null,"For example, this function accepts a list of a parameterized type.\nIt uses an internal recursive function to reverse the list:"),(0,i.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=poly",group:"poly"},"let rev (type a) (xs : a list) : a list =\n  let rec rev (type a) ((xs, acc) : a list * a list) : a list =\n    match xs with\n    | [] -> acc\n    | x :: xs -> rev (xs, x :: acc) in\n  rev (xs, ([] : a list))\n"))),(0,i.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=poly",group:"poly"},"function rev <T>(xs : list<T>) : list<T> {\n  const rev = <T>([xs, acc] : [list<T>, list<T>]) : list<T> =>\n    match(xs) {\n      when([]): acc;\n      when([y,...ys]): rev([ys, [y,...acc]])\n    };\n\n  return rev([xs, ([] as list<T>)]);\n};\n"))),(0,i.kt)("p",null,"Because the type of element in the list is parameterized, the function works on lists of any type, as in these examples:"),(0,i.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=poly",group:"poly"},"let lint : int list = rev [1; 2; 3]\nlet lnat : nat list = rev [1n; 2n; 3n]\n"))),(0,i.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=poly",group:"poly"},"const lint : list<int> = rev([1, 2, 3]);\nconst lnat : list<nat> = rev([1n, 2n, 3n]);\n"))),(0,i.kt)("p",null,"During compilation, LIGO ",(0,i.kt)("em",{parentName:"p"},"monomorphises")," polymorphic function into specific instances, resulting in Michelson code that does not contain polymorphic function declarations."))}u.isMDXComponent=!0}}]);