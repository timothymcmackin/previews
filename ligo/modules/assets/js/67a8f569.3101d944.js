"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[42607],{48720:(t,e,n)=>{n.d(e,{D:()=>i.Z,Z:()=>a});var s=n(67294),i=n(75402);const a=function(t){return s.createElement(i.Z.Consumer,null,(e=>{let{syntax:n}=e;return n===t.syntax?t.children:s.createElement(s.Fragment,null)}))}},99191:(t,e,n)=>{n.d(e,{Z:()=>b});var s=n(43164),i=n(67294),a=n(52263),o=n(48720),r=n(11506);function l(){return l=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(t[s]=n[s])}return t},l.apply(this,arguments)}const{Prism:p}=n(43164);p.languages={...p.languages,cameligo:{...p.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:p.languages.typescript};const b=function(t){const{siteConfig:{themeConfig:{prism:e={}}}}=(0,a.Z)(),n=e.singleTheme||r.Z,[p,b]=(0,i.useState)(!1);return(0,i.useEffect)((()=>{b(!0)}),[]),i.createElement(o.D.Consumer,null,(e=>{let{syntax:a}=e;return a===t.syntax?i.createElement(s.default,l({},s.defaultProps,{key:p,language:t.syntax,code:t.children,theme:n}),(t=>{let{className:e,tokens:n,getLineProps:s,getTokenProps:a}=t;return i.createElement("h4",{className:e,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((t,e)=>i.createElement("div",s({line:t,key:e}),t.map(((t,e)=>i.createElement("span",a({token:t,key:e}))))))))})):i.createElement("div",null)}))}},65250:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>b});var s=n(87462),i=(n(67294),n(3905)),a=n(48720);n(99191);const o={id:"mumbai",title:"Mumbai",description:"Mumbai changes"},r=void 0,l={unversionedId:"protocol/mumbai",id:"version-1.5.0/protocol/mumbai",title:"Mumbai",description:"Mumbai changes",source:"@site/versioned_docs/version-1.5.0/protocol/mumbai.md",sourceDirName:"protocol",slug:"/protocol/mumbai",permalink:"/previews/ligo/modules/docs/1.5.0/protocol/mumbai",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"mumbai",title:"Mumbai",description:"Mumbai changes"},sidebar:"API",previous:{title:"Lima",permalink:"/previews/ligo/modules/docs/1.5.0/protocol/lima"},next:{title:"Nairobi",permalink:"/previews/ligo/modules/docs/1.5.0/protocol/nairobi"}},p={},b=[{value:"API",id:"api",level:2},{value:"Deprecation",id:"deprecation",level:3},{value:"New operators",id:"new-operators",level:3},{value:"Bitwise operators of <code>bytes</code>",id:"bitwise-operators-of-bytes",level:4},{value:"Conversion between <code>bytes</code>-<code>int</code> &amp; <code>bytes</code>-<code>nat</code>",id:"conversion-between-bytes-int--bytes-nat",level:4}],c={toc:b};function m(t){let{components:e,...n}=t;return(0,i.kt)("wrapper",(0,s.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"api"},"API"),(0,i.kt)("h3",{id:"deprecation"},"Deprecation"),(0,i.kt)("p",null,"The type ",(0,i.kt)("inlineCode",{parentName:"p"},"tx_rollup_l2_address")," has been disabled (see the ",(0,i.kt)("a",{parentName:"p",href:"https://tezos.gitlab.io/protocols/016_mumbai.html#breaking-changes"},"changelog")," for the Mumbai protocol)."),(0,i.kt)("h3",{id:"new-operators"},"New operators"),(0,i.kt)("h4",{id:"bitwise-operators-of-bytes"},"Bitwise operators of ",(0,i.kt)("inlineCode",{parentName:"h4"},"bytes")),(0,i.kt)("p",null,"Bitwise operations are now supported on ",(0,i.kt)("inlineCode",{parentName:"p"},"bytes")),(0,i.kt)(a.Z,{syntax:"pascaligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pascaligo",metastring:"test-ligo group=test_bitwise","test-ligo":!0,group:"test_bitwise"},"const test_foo = {\n  const b_and           = Bitwise.and         (0x0005, 0x0106);\n  const b_or            = Bitwise.or          (0x0005, 0x0106);\n  const b_xor           = Bitwise.xor         (0x0005, 0x0106);\n  const b_shift_left    = Bitwise.shift_left  (0x06  , 8n    );\n  const b_shift_right   = Bitwise.shift_right (0x0006, 1n    );\n} with assert (b_and         = 0x0004 and\n               b_or          = 0x0107 and\n               b_xor         = 0x0103 and\n               b_shift_left  = 0x0600 and\n               b_shift_right = 0x0003   )\n"))),(0,i.kt)(a.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"test-ligo group=test_bitwise","test-ligo":!0,group:"test_bitwise"},"let test_bytes_bitwise_ops  =\n  let b_and         = 0x0005 land 0x0106 in\n  let b_or          = 0x0005 lor  0x0106 in\n  let b_xor         = 0x0005 lxor 0x0106 in\n  let b_shift_left  = 0x06   lsl  8n     in\n  let b_shift_right = 0x0006 lsr  1n     in\n\n  assert (b_and         = 0x0004 &&\n          b_or          = 0x0107 &&\n          b_xor         = 0x0103 &&\n          b_shift_left  = 0x0600 &&\n          b_shift_right = 0x0003  )\n"))),(0,i.kt)(a.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"test-ligo group=test_bitwise","test-ligo":!0,group:"test_bitwise"},"const test_bytes_bitwise_module = (() => {\n  const b_and           = Bitwise.and         (0x0005, 0x0106  );\n  const b_or            = Bitwise.or          (0x0005, 0x0106  );\n  const b_xor           = Bitwise.xor         (0x0005, 0x0106  );\n  const b_shift_left    = Bitwise.shift_left  (0x06  , 8 as nat);\n  const b_shift_right   = Bitwise.shift_right (0x0006, 1 as nat);\n\n  assert (b_and         == 0x0004 &&\n          b_or          == 0x0107 &&\n          b_xor         == 0x0103 &&\n          b_shift_left  == 0x0600 &&\n          b_shift_right == 0x0003  )})()\n"))),(0,i.kt)("h4",{id:"conversion-between-bytes-int--bytes-nat"},"Conversion between ",(0,i.kt)("inlineCode",{parentName:"h4"},"bytes"),"-",(0,i.kt)("inlineCode",{parentName:"h4"},"int")," & ",(0,i.kt)("inlineCode",{parentName:"h4"},"bytes"),"-",(0,i.kt)("inlineCode",{parentName:"h4"},"nat")),(0,i.kt)("p",null,"We can now convert between ",(0,i.kt)("inlineCode",{parentName:"p"},"bytes"),"-",(0,i.kt)("inlineCode",{parentName:"p"},"int")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"bytes"),"-",(0,i.kt)("inlineCode",{parentName:"p"},"nat")," using the functions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int"),"   (Convert ",(0,i.kt)("inlineCode",{parentName:"li"},"bytes")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nat"),"   (Convert ",(0,i.kt)("inlineCode",{parentName:"li"},"bytes")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"nat"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bytes")," (Convert ",(0,i.kt)("inlineCode",{parentName:"li"},"bytes")," to either ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"nat"),")")),(0,i.kt)(a.Z,{syntax:"pascaligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pascaligo",metastring:"test-ligo group=test_bytes_conv","test-ligo":!0,group:"test_bytes_conv"},"(* bytes -> nat *)\nconst test_bytes_nat = nat(0x1234) // 1234n\n\n(* nat -> bytes *)\nconst test_nat_bytes = bytes(4660n) // 0x1234\n\n(* bytes -> int *)\nconst test_bytes_int = int(0x1234) // 4660\n\n(* int -> bytes *)\nconst test_int_bytes = bytes(4660) // 0x1234\n"))),(0,i.kt)(a.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"test-ligo group=test_bytes_conv","test-ligo":!0,group:"test_bytes_conv"},"(* bytes -> nat *)\nlet test_bytes_nat = nat 0x1234 (* 1234n *)\n\n(* nat -> bytes *)\nlet test_nat_bytes = bytes 4660n (* 0x1234 *)\n\n(* bytes -> int *)\nlet test_bytes_int = int 0x1234 (* 4660 *)\n\n(* int -> bytes *)\nlet test_int_bytes = bytes 4660 (* 0x1234 *)\n"))),(0,i.kt)(a.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"test-ligo group=test_bytes_conv","test-ligo":!0,group:"test_bytes_conv"},"/* bytes -> nat */\nconst test_bytes_nat = nat(0x1234) // (1234 as nat)\n\n/* nat -> bytes */\nconst test_nat_bytes = bytes(4660 as nat) // 0x1234\n\n/* bytes -> int */\nconst test_bytes_int = int(0x1234) // 4660\n\n/* int -> bytes */\nconst test_int_bytes = bytes(4660) // 0x1234\n"))))}m.isMDXComponent=!0}}]);