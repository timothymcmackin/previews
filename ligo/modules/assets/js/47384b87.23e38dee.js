"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[11794],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,y=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(y,i(i({ref:t},p),{},{components:n})):r.createElement(y,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>o});var r=n(67294),a=n(75402);const o=function(e){return r.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},53625:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905)),o=n(48720);const i={id:"contracts-type",title:"Contracts"},c=void 0,s={unversionedId:"tezos/contracts-type",id:"version-1.7.0/tezos/contracts-type",title:"Contracts",description:"In order to handle addresses that denote an originated account on the",source:"@site/versioned_docs/version-1.7.0/tezos/contracts.md",sourceDirName:"tezos",slug:"/tezos/contracts-type",permalink:"/previews/ligo/modules/docs/tezos/contracts-type",draft:!1,tags:[],version:"1.7.0",frontMatter:{id:"contracts-type",title:"Contracts"},sidebar:"docs",previous:{title:"Addresses",permalink:"/previews/ligo/modules/docs/tezos/addresses"},next:{title:"Declaring",permalink:"/previews/ligo/modules/docs/tezos/big_sets/declaring"}},l={},p=[],d={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In order to handle addresses that denote an originated account on the\nchain, we need a value of type ",(0,a.kt)("inlineCode",{parentName:"p"},"contract"),". In fact, it is a type\nparameterised by the type of the contract's parameter. Contrary to the\ntype ",(0,a.kt)("inlineCode",{parentName:"p"},"address"),", there are no literal values of the type ",(0,a.kt)("inlineCode",{parentName:"p"},"contract"),", so\nvalues have to be created by means of predefined functions."),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Tezos.implicit_account kh")," casts the public key hash ",(0,a.kt)("inlineCode",{parentName:"p"},"kh"),"\ninto the address of its ",(0,a.kt)("em",{parentName:"p"},"implicit account"),". Note that addresses of\nimplicit accounts always have the type ",(0,a.kt)("inlineCode",{parentName:"p"},"unit contract"),".")),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Tezos.implicit_account(kh)")," casts the public key hash ",(0,a.kt)("inlineCode",{parentName:"p"},"kh"),"\ninto the address of its ",(0,a.kt)("em",{parentName:"p"},"implicit account"),". Note that addresses of\nimplicit accounts always have the type ",(0,a.kt)("inlineCode",{parentName:"p"},"contract<unit>"),".")))}u.isMDXComponent=!0}}]);