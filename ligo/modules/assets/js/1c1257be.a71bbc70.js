"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[67682],{48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>i});var l=n(67294),a=n(75402);const i=function(e){return l.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:l.createElement(l.Fragment,null)}))}},99191:(e,t,n)=>{n.d(t,{Z:()=>r});var l=n(43164),a=n(67294),i=n(52263),s=n(48720),p=n(11506);function o(){return o=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(e[l]=n[l])}return e},o.apply(this,arguments)}const{Prism:m}=n(43164);m.languages={...m.languages,cameligo:{...m.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:m.languages.typescript};const r=function(e){const{siteConfig:{themeConfig:{prism:t={}}}}=(0,i.Z)(),n=t.singleTheme||p.Z,[m,r]=(0,a.useState)(!1);return(0,a.useEffect)((()=>{r(!0)}),[]),a.createElement(s.D.Consumer,null,(t=>{let{syntax:i}=t;return i===e.syntax?a.createElement(l.default,o({},l.defaultProps,{key:m,language:e.syntax,code:e.children,theme:n}),(e=>{let{className:t,tokens:n,getLineProps:l,getTokenProps:i}=e;return a.createElement("h4",{className:t,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((e,t)=>a.createElement("div",l({line:e,key:t}),e.map(((e,t)=>a.createElement("span",i({token:e,key:t}))))))))})):a.createElement("div",null)}))}},13894:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>k,frontMatter:()=>p,metadata:()=>m,toc:()=>d});var l=n(87462),a=(n(67294),n(3905)),i=n(48720),s=n(99191);const p={id:"set-reference",title:"set",hide_table_of_contents:!0},o=void 0,m={unversionedId:"reference/set-reference",id:"version-1.6.0/reference/set-reference",title:"set",description:"Totally ordered sets",source:"@site/versioned_docs/version-1.6.0/reference/set.md",sourceDirName:"reference",slug:"/reference/set-reference",permalink:"/previews/ligo/modules/docs/1.6.0/reference/set-reference",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"set-reference",title:"set",hide_table_of_contents:!0},sidebar:"API",previous:{title:"tuple2",permalink:"/previews/ligo/modules/docs/1.6.0/reference/tuple2-reference"},next:{title:"option",permalink:"/previews/ligo/modules/docs/1.6.0/reference/option-reference"}},r={},d=[],y={toc:d};function k(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,l.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Totally ordered sets"),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type 'elt t = 'elt set"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type t<elt> = set<elt>"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The type ",(0,a.kt)("inlineCode",{parentName:"p"},"'elt t")," is an alias for ",(0,a.kt)("inlineCode",{parentName:"p"},"'elt set"),".")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The type ",(0,a.kt)("inlineCode",{parentName:"p"},"t<elt>")," is an alias for ",(0,a.kt)("inlineCode",{parentName:"p"},"set<elt>"),".")),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val empty : 'elt.'elt t"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let empty: <elt>t<elt>"),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The value ",(0,a.kt)("inlineCode",{parentName:"p"},"empty")," denotes the empty set. In some contexts, it is\nuseful to annotate it with its type, for example:\n",(0,a.kt)("inlineCode",{parentName:"p"},"(empty as set<int>)"),".")),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val update : 'elt.'elt -> bool -> 'elt t -> 'elt t"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let update: <elt>(_: elt) => (_: bool) => (_: t<elt>) => t<elt>"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"update elt true set")," is a copy of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),"\ncontaining the element ",(0,a.kt)("inlineCode",{parentName:"p"},"elt"),". The call ",(0,a.kt)("inlineCode",{parentName:"p"},"update elt false set")," is a\ncopy of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," where the element ",(0,a.kt)("inlineCode",{parentName:"p"},"elt")," is absent.")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"update(elt, true, set)")," is a copy of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),"\ncontaining the element ",(0,a.kt)("inlineCode",{parentName:"p"},"elt"),". The call ",(0,a.kt)("inlineCode",{parentName:"p"},"update(elt, false, set)")," is a\ncopy of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," where the element ",(0,a.kt)("inlineCode",{parentName:"p"},"elt")," is absent.")),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val add : 'elt.'elt -> 'elt t -> 'elt t"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let add: <elt>(_: elt) => (_: t<elt>) => t<elt>"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"add elt set")," is a set containing all the elements of\nthe set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),", plus the element ",(0,a.kt)("inlineCode",{parentName:"p"},"elt"),".")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"add(elt, set)")," is a set containing all the elements of\nthe set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),", plus the element ",(0,a.kt)("inlineCode",{parentName:"p"},"elt"),".")),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val remove : 'elt.'elt -> 'elt t -> 'elt t"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let remove: <elt>(_: elt) => (_: t<elt>) => t<elt>"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"remove elt set")," is a copy of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," without the\nelement ",(0,a.kt)("inlineCode",{parentName:"p"},"elt"),".")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"remove(elt, set)")," is a copy of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," without the\nelement ",(0,a.kt)("inlineCode",{parentName:"p"},"elt"),".")),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val literal : 'elt.'elt list -> 'elt t"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let literal: <elt>(_: list<elt>) => t<elt>"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"literal [e1; ...; en]")," is a set containing exactly the\nelements in the list. Note: The list must be literal, not an\nexpression (compile-time list of values).")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"literal([e1, ..., en])")," is a set containing\nexactly the elements in the list. Note: The list must be literal,\nnot an expression (compile-time list of values).")),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val of_list : 'elt.'elt list -> 'elt t"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let of_list: <elt>(_: list<elt>) => t<elt>"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"of_list elements")," is a set containing exactly the\nelements in the list ",(0,a.kt)("inlineCode",{parentName:"p"},"elements"),". Note: Use ",(0,a.kt)("inlineCode",{parentName:"p"},"literal")," instead if\nusing a literal list. Note: Use ",(0,a.kt)("inlineCode",{parentName:"p"},"literal")," instead if using a\nliteral list.")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"of_list(elements)")," is a set containing exactly the\nelements in the list ",(0,a.kt)("inlineCode",{parentName:"p"},"elements"),". Note: Use ",(0,a.kt)("inlineCode",{parentName:"p"},"literal")," instead if\nusing a literal list. Note: Use ",(0,a.kt)("inlineCode",{parentName:"p"},"literal")," instead if using a\nliteral list.")),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val size : 'elt.'elt t -> nat"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let size: <elt>(_: t<elt>) => nat"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"size set")," is the number of elements of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),".")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"size(set)")," is the number of elements of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),".")),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val cardinal : 'elt.'elt t -> nat"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let cardinal: <elt>(_: t<elt>) => nat"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"cardinal set")," is the number of elements of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),".")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"cardinal(set)")," is the number of elements of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),".")),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val mem : 'elt.'elt -> 'elt t -> bool"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let mem: <elt>(_: elt) => (_: t<elt>) => bool"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"mem elt set")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," if, and only if, the element\n",(0,a.kt)("inlineCode",{parentName:"p"},"elt")," belongs to the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),".")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"mem(elt, set)")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," if, and only if, the element\n",(0,a.kt)("inlineCode",{parentName:"p"},"elt")," belongs to the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),".")),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val fold : 'elt 'acc.(('acc * 'elt) -> 'acc) -> 'elt t -> 'acc -> 'acc"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let fold: <elt, acc>(_: (_: [acc, elt]) => acc) => (_: t<elt>) => (_: acc) => acc"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"fold f set init")," is\n",(0,a.kt)("inlineCode",{parentName:"p"},"f(... (f (f (init, e1), e2), ...), en)"),",\nwhere ",(0,a.kt)("inlineCode",{parentName:"p"},"e1"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"e2"),", ..., ",(0,a.kt)("inlineCode",{parentName:"p"},"en")," are the elements of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," in\nincreasing order.")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"fold(f, set, init)")," is\n",(0,a.kt)("inlineCode",{parentName:"p"},"f(... (f (f (init, e1), e2), ...), en)"),",\nwhere ",(0,a.kt)("inlineCode",{parentName:"p"},"e1"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"e2"),", ..., ",(0,a.kt)("inlineCode",{parentName:"p"},"en")," are the elements of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," in\nincreasing order.")),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val fold_desc : 'elt 'acc.(('elt * 'acc) -> 'acc) -> 'elt t -> 'acc -> 'acc"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let fold_desc: <elt, acc>(_: (_: [elt, acc]) => acc) => (_: t<elt>) => (_: acc) => acc"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"fold f set init")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"f(... (f (init, en), ...), e1)"),",\nwhere ",(0,a.kt)("inlineCode",{parentName:"p"},"e1"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"e2"),", ..., ",(0,a.kt)("inlineCode",{parentName:"p"},"en")," are the elements of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," in\nincreasing order.")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"fold(f, set, init)")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"f(... (f (init, en), ...), e1)"),",\nwhere ",(0,a.kt)("inlineCode",{parentName:"p"},"e1"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"e2"),", ..., ",(0,a.kt)("inlineCode",{parentName:"p"},"en")," are the elements of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," in\nincreasing order.")),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val filter_map : 'old 'new.('old -> 'new option) -> 'old t -> 'new t"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let filter_map: <old, new>(_: (_: old) => option<new>) => (_: t<old>) => t<new>"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"filter_map f set")," is a set made by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," (the\nfilter) on each element of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),": if ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," returns ",(0,a.kt)("inlineCode",{parentName:"p"},"None"),",\nthe element is skipped in the result, otherwise, if it is\n",(0,a.kt)("inlineCode",{parentName:"p"},"Some e"),", then ",(0,a.kt)("inlineCode",{parentName:"p"},"e")," is kept.")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"filter_map(f, set)")," is a set made by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," (the\nfilter) on each element of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),": if ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," returns ",(0,a.kt)("inlineCode",{parentName:"p"},"None()"),",\nthe element is skipped in the result, otherwise, if it is\n",(0,a.kt)("inlineCode",{parentName:"p"},"Some(e)"),", then ",(0,a.kt)("inlineCode",{parentName:"p"},"e")," is kept.")),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val iter : 'elt.('elt -> unit) -> 'elt t -> unit"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let iter: <elt>(_: (_: elt) => unit) => (_: t<elt>) => unit"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"iter f set")," applies ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," to all the elements of the set\n",(0,a.kt)("inlineCode",{parentName:"p"},"set")," in increasing order.")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"iter(f, set)")," applies ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," to all the elements of the set\n",(0,a.kt)("inlineCode",{parentName:"p"},"set")," in increasing order.")),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val map : 'old 'new.('old -> 'new) -> 'old t -> 'new t"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let map: <old, new>(_: (_: old) => new) => (_: t<old>) => t<new>"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"map f set")," evaluates in a set whose elements have been\nobtained by applying ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," to the elements of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),".")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"map(f, set)")," evaluates in a set whose elements have been\nobtained by applying ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," to the elements of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),".")))}k.isMDXComponent=!0}}]);