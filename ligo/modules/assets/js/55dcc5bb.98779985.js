"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[28618],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>d});var a=n(67294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function s(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?s(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,o=function(t,e){if(null==t)return{};var n,a,o={},s=Object.keys(t);for(a=0;a<s.length;a++)n=s[a],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);for(a=0;a<s.length;a++)n=s[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var r=a.createContext({}),c=function(t){var e=a.useContext(r),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},p=function(t){var e=c(t.components);return a.createElement(r.Provider,{value:e},t.children)},g={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,o=t.mdxType,s=t.originalType,r=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),m=c(n),d=o,u=m["".concat(r,".").concat(d)]||m[d]||g[d]||s;return n?a.createElement(u,l(l({ref:e},p),{},{components:n})):a.createElement(u,l({ref:e},p))}));function d(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var s=n.length,l=new Array(s);l[0]=m;var i={};for(var r in e)hasOwnProperty.call(e,r)&&(i[r]=e[r]);i.originalType=t,i.mdxType="string"==typeof t?t:o,l[1]=i;for(var c=2;c<s;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},48720:(t,e,n)=>{n.d(e,{D:()=>o.Z,Z:()=>s});var a=n(67294),o=n(75402);const s=function(t){return a.createElement(o.Z.Consumer,null,(e=>{let{syntax:n}=e;return n===t.syntax?t.children:a.createElement(a.Fragment,null)}))}},29356:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>p});var a=n(87462),o=(n(67294),n(3905)),s=n(48720);n(39960);const l={id:"global-constants",title:"Global constants"},i=void 0,r={unversionedId:"advanced/global-constants",id:"version-1.7.0/advanced/global-constants",title:"Global constants",description:"Since the update to Hangzhou protocol, global constants can be",source:"@site/versioned_docs/version-1.7.0/advanced/global-constants.md",sourceDirName:"advanced",slug:"/advanced/global-constants",permalink:"/previews/ligo/modules/docs/advanced/global-constants",draft:!1,tags:[],version:"1.7.0",frontMatter:{id:"global-constants",title:"Global constants"}},c={},p=[{value:"API primer",id:"api-primer",level:2},{value:"Using global constants",id:"using-global-constants",level:2},{value:"Registering global constants with <code>tezos-client</code>",id:"registering-global-constants-with-tezos-client",level:2},{value:"Compiling global constants",id:"compiling-global-constants",level:2},{value:"Usage example",id:"usage-example",level:2},{value:"Global constants in the testing framework",id:"global-constants-in-the-testing-framework",level:2}],g=(m="SyntaxTitle",function(t){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)});var m;const d={toc:p};function u(t){let{components:e,...n}=t;return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Since the update to Hangzhou protocol, global constants can be\nregistered on chain. These global constants are Micheline values\nstored on chain, and they can be referred to from a contract we are\ndeploying. Using global constants, we will be able to originate\ncontracts that (after expansion) surpass size limit for contracts."),(0,o.kt)("h2",{id:"api-primer"},"API primer"),(0,o.kt)(g,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val constant : string -> 'a"),(0,o.kt)(g,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let constant : string => 'a"),(0,o.kt)("p",null,"The primitive ",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.constant")," allows you to use a predefined constant already registered on chain.\nIt accepts a hash in the form of a string and will require a type annotation."),(0,o.kt)("h2",{id:"using-global-constants"},"Using global constants"),(0,o.kt)("p",null,"Global constants are introduced using ",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.constant"),". This function\nexpects a ",(0,o.kt)("em",{parentName:"p"},"constant hash"),", i.e. a hash that corresponds to a\nparticular constant that was registered on network."),(0,o.kt)("p",null,"For instance, the constant hash\n",(0,o.kt)("inlineCode",{parentName:"p"},"expruCKsgmUZjC7k8NRcwbcGbFSuLHv5rUyApNd972MwArLuxEZQm2")," corresponds\nto the Michelson code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"{ PUSH int 2 ; PUSH int 3 ; DIG 2 ; MUL ; ADD }\n")),(0,o.kt)("p",null,"In a contract, we can make reference to a global constant by using the\n",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.constant")," operation:"),(0,o.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=global_call",group:"global_call"},'let c : int -> int = Tezos.constant "expruCKsgmUZjC7k8NRcwbcGbFSuLHv5rUyApNd972MwArLuxEZQm2"\n\n[@entry]\nlet main (_p : unit) (s : int) : operation list * int =\n  ([], c s)\n'))),(0,o.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=global_call",group:"global_call"},'const c : ((_p : int) => int) = Tezos.constant("expruCKsgmUZjC7k8NRcwbcGbFSuLHv5rUyApNd972MwArLuxEZQm2")\n\n@entry\nlet main = (_p : unit, s : int) : [list<operation>, int] =>\n  [[], c(s)]\n'))),(0,o.kt)("p",null,"Note that the constant's type needs to be annotated."),(0,o.kt)("p",null,"When we compile a contract, we need to tell LIGO (and Michelson\ntype-checker) which are the constants that we are assuming to be\nalready registered in the context. They are passed to the ",(0,o.kt)("inlineCode",{parentName:"p"},"compile\ncontract")," sub-command in the ",(0,o.kt)("inlineCode",{parentName:"p"},"--constants")," argument:"),(0,o.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'ligo compile contract ./gitlab-pages/docs/advanced/src/global-constants/global_call.mligo --constants "{ PUSH int 2 ; PUSH int 3 ; DIG 2 ; MUL ; ADD }"\n'))),(0,o.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'ligo compile contract ./gitlab-pages/docs/advanced/src/global-constants/global_call.jsligo --constants "{ PUSH int 2 ; PUSH int 3 ; DIG 2 ; MUL ; ADD }"\n'))),(0,o.kt)("h2",{id:"registering-global-constants-with-tezos-client"},"Registering global constants with ",(0,o.kt)("inlineCode",{parentName:"h2"},"tezos-client")),(0,o.kt)("p",null,"Global constants can be registered on the chain by using ",(0,o.kt)("inlineCode",{parentName:"p"},"tezos-client")," as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'tezos-client register global constant "{ PUSH int 2 ; PUSH int 3 ; DIG 2 ; MUL ; ADD }" from bootstrap1\n')),(0,o.kt)("p",null,"which will register the global constant with source ",(0,o.kt)("inlineCode",{parentName:"p"},"bootstrap1"),"."),(0,o.kt)("h2",{id:"compiling-global-constants"},"Compiling global constants"),(0,o.kt)("p",null,"In general, we can compile a constant doing the following steps:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"compile expression")," sub-command to compile the expression we are interested in capturing in a constant.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Register the output of ",(0,o.kt)("inlineCode",{parentName:"p"},"compile expression")," using ",(0,o.kt)("inlineCode",{parentName:"p"},"tezos-client"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Capture the constant hash given by ",(0,o.kt)("inlineCode",{parentName:"p"},"tezos-client")," and use it in the code with ",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.constant"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Compile the contract that uses the hash constant by passing the argument ",(0,o.kt)("inlineCode",{parentName:"p"},"--constants"),"."))),(0,o.kt)("p",null,"In case that ",(0,o.kt)("inlineCode",{parentName:"p"},"tezos-client")," is not available, LIGO provides a custom\nsub-command to compile constants, which works similar to the ",(0,o.kt)("inlineCode",{parentName:"p"},"compile\nexpression")," sub-command, but has the following differences:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The output is given as a escaped JSON string that can be given directly to the ",(0,o.kt)("inlineCode",{parentName:"p"},"--constants")," argument of ",(0,o.kt)("inlineCode",{parentName:"p"},"compile contract")," (or put in a JSON list in a file passed to ",(0,o.kt)("inlineCode",{parentName:"p"},"--file-constants"),").")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The hash of the constant is also given in output, so that it can be used without need to call ",(0,o.kt)("inlineCode",{parentName:"p"},"tezos-client"),"."))),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"For LIGO users, we recommend to use ",(0,o.kt)("inlineCode",{parentName:"p"},"compile constant")," as it\nsimplifies the usage flow (see example below).")),(0,o.kt)("h2",{id:"usage-example"},"Usage example"),(0,o.kt)("p",null,"Given the following contract ",(0,o.kt)("inlineCode",{parentName:"p"},"global_const"),":"),(0,o.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=global_const",group:"global_const"},"let helper ((s, x) : string * int) =\n  String.length s + x * 3 + 2\n\n[@entry]\nlet main (p : string) (s : int) : operation list * int =\n  ([], helper (p, s))\n"))),(0,o.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=global_const",group:"global_const"},"const helper = ([s, x]: [string, int]) =>\n  String.length(s) + x * 3 + 2;\n\n@entry\nconst main = (p: string, s: int) : [list<operation>, int] =>\n  [[], helper ([p, s])];\n"))),(0,o.kt)("p",null,"We want to turn the function ",(0,o.kt)("inlineCode",{parentName:"p"},"helper")," into a global constant. The first\nstep is to ask LIGO to compile the constant:"),(0,o.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'ligo compile constant cameligo "helper" --init-file ./gitlab-pages/docs/advanced/src/global-constants/global_const.mligo\n# Outputs:\n# Michelson constant as JSON string:\n# "{ UNPAIR ;\\n  PUSH int 2 ;\\n  PUSH int 3 ;\\n  DIG 3 ;\\n  MUL ;\\n  DIG 2 ;\\n  SIZE ;\\n  ADD ;\\n  ADD }"\n# This string can be passed in `--constants` argument when compiling a contract.\n# \n# Remember to register it in the network, e.g.:\n# > tezos-client register global constant "{ UNPAIR ;\n#   PUSH int 2 ;\n#   PUSH int 3 ;\n#   DIG 3 ;\n#   MUL ;\n#   DIG 2 ;\n#   SIZE ;\n#   ADD ;\n#   ADD }" from bootstrap1\n# \n# Constant hash:\n# exprv547Y7U5wKLbQGmkDU9Coh5tKPzvEJjyUed7px9yGt9nrkELXf\n'))),(0,o.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'ligo compile constant jsligo "helper" --init-file ./gitlab-pages/docs/advanced/src/global-constants/global_const.jsligo\n# Outputs:\n# Michelson constant as JSON string:\n# "{ UNPAIR ;\\n  PUSH int 2 ;\\n  PUSH int 3 ;\\n  DIG 3 ;\\n  MUL ;\\n  DIG 2 ;\\n  SIZE ;\\n  ADD ;\\n  ADD }"\n# This string can be passed in `--constants` argument when compiling a contract.\n# \n# Remember to register it in the network, e.g.:\n# > tezos-client register global constant "{ UNPAIR ;\n#   PUSH int 2 ;\n#   PUSH int 3 ;\n#   DIG 3 ;\n#   MUL ;\n#   DIG 2 ;\n#   SIZE ;\n#   ADD ;\n#   ADD }" from bootstrap1\n# \n# Constant hash:\n# exprv547Y7U5wKLbQGmkDU9Coh5tKPzvEJjyUed7px9yGt9nrkELXf\n'))),(0,o.kt)("p",null,"As we can see, the constant hash is:"),(0,o.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"exprv547Y7U5wKLbQGmkDU9Coh5tKPzvEJjyUed7px9yGt9nrkELXf\n"))),(0,o.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"exprv547Y7U5wKLbQGmkDU9Coh5tKPzvEJjyUed7px9yGt9nrkELXf\n"))),(0,o.kt)("p",null,"We can now remove the ",(0,o.kt)("inlineCode",{parentName:"p"},"helper")," function from the code, and replace the\nreferences to ",(0,o.kt)("inlineCode",{parentName:"p"},"helper")," by"),(0,o.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'(Tezos.constant "exprv547Y7U5wKLbQGmkDU9Coh5tKPzvEJjyUed7px9yGt9nrkELXf" : (string * int) -> int)\n'))),(0,o.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'(Tezos.constant("exprv547Y7U5wKLbQGmkDU9Coh5tKPzvEJjyUed7px9yGt9nrkELXf") as ((_ps : [string, int]) => int))\n'))),(0,o.kt)("p",null,"The new version of ",(0,o.kt)("inlineCode",{parentName:"p"},"global_call")," looks as follows:"),(0,o.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=global_call_2",group:"global_call_2"},'[@entry]\nlet main (p : string) (s : int) : operation list * int =\n  ([], (Tezos.constant "exprv547Y7U5wKLbQGmkDU9Coh5tKPzvEJjyUed7px9yGt9nrkELXf")(p, s))\n'))),(0,o.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=global_call_2",group:"global_call_2"},'@entry\nconst main = (p: string, s: int) : [list<operation>, int] =>\n  [ [], Tezos.constant("exprv547Y7U5wKLbQGmkDU9Coh5tKPzvEJjyUed7px9yGt9nrkELXf")([p, s]) ];\n'))),(0,o.kt)("p",null,"Save the constant's Micheline value in a file ",(0,o.kt)("inlineCode",{parentName:"p"},"consts.json")," (that will be\nused when calling ",(0,o.kt)("inlineCode",{parentName:"p"},"compile contract"),"). This file must be a JSON list\nconsisting of the string returned by ",(0,o.kt)("inlineCode",{parentName:"p"},"compile constant"),":"),(0,o.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'["{ UNPAIR ;\\n  PUSH int 2 ;\\n  PUSH int 3 ;\\n  DIG 3 ;\\n  MUL ;\\n  DIG 2 ;\\n  SIZE ;\\n  ADD ;\\n  ADD }"]\n'))),(0,o.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'["{ UNPAIR ;\\n  PUSH int 2 ;\\n  PUSH int 3 ;\\n  DIG 3 ;\\n  MUL ;\\n  DIG 2 ;\\n  SIZE ;\\n  ADD ;\\n  ADD }"]\n'))),(0,o.kt)("p",null,"We can compile the code using the ",(0,o.kt)("inlineCode",{parentName:"p"},"compile contract")," sub-command,\npassing the file with constants in the flag ",(0,o.kt)("inlineCode",{parentName:"p"},"--file-constants"),":"),(0,o.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'ligo compile contract ./gitlab-pages/docs/advanced/src/global-constants/global_call_2.mligo --file-constants ./gitlab-pages/docs/advanced/src/global-constants/consts_cameligo.json\n# Outputs:\n# { parameter string ;\n#   storage int ;\n#   code { constant "exprv547Y7U5wKLbQGmkDU9Coh5tKPzvEJjyUed7px9yGt9nrkELXf" ;\n#          NIL operation ;\n#          PAIR } }\n'))),(0,o.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'ligo compile contract ./gitlab-pages/docs/advanced/src/global-constants/global_call_2.jsligo --file-constants ./gitlab-pages/docs/advanced/src/global-constants/consts_jsligo.json\n# Outputs:\n# { parameter string ;\n#   storage int ;\n#   code { constant "exprv547Y7U5wKLbQGmkDU9Coh5tKPzvEJjyUed7px9yGt9nrkELXf" ;\n#          NIL operation ;\n#          PAIR } }\n'))),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Remember that to deploy this contract, first the global constant needs\nto be registered in the network where we want to deploy it.")),(0,o.kt)("h2",{id:"global-constants-in-the-testing-framework"},"Global constants in the testing framework"),(0,o.kt)("p",null,"In the testing framework, global constants can be registered to the\ncontext by using ",(0,o.kt)("inlineCode",{parentName:"p"},"Test.register_constant"),". This primitive takes a\n",(0,o.kt)("inlineCode",{parentName:"p"},"michelson_program")," representing the constant to be registered, and\nreturns an string that is the constant hash corresponding to the\nconstant registered."),(0,o.kt)("p",null,"The string returned by ",(0,o.kt)("inlineCode",{parentName:"p"},"Test.register_constant")," can be used via\n",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.constant"),", as in the examples above."),(0,o.kt)("p",null,"A simple usage case is the following, in which we obtain a\n",(0,o.kt)("inlineCode",{parentName:"p"},"michelson_program")," by using ",(0,o.kt)("inlineCode",{parentName:"p"},"Test.eval"),":"),(0,o.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"test-ligo group=test_global","test-ligo":!0,group:"test_global"},"module C = struct\n  type storage = int\n  type parameter = unit\n  type return = operation list * storage\n\n  let f (x : int) = x * 3 + 2\n\n  let ct = Test.register_constant (Test.eval f)\n\n  [@entry]\n  let main (() : parameter) (store : storage) : return =\n    [], (Tezos.constant ct store)\nend\n\nlet test =\n  let orig = Test.originate (contract_of C) 1 0tez in\n  let _ = Test.transfer_exn orig.addr (Main ()) 0tez in\n  assert (Test.get_storage orig.addr = 5)\n"))),(0,o.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"test-ligo group=test_global","test-ligo":!0,group:"test_global"},"namespace C {\n  type storage = int\n  type parameter = unit\n\n  const f = (x : int) => x * 3 + 2;\n\n  const ct = Test.register_constant(Test.eval(f));\n\n  @entry\n  const main = (p: parameter, s: storage) : [list<operation>, storage] =>\n    [[], Tezos.constant(ct)(s)];\n}\n\nconst _test = () => {\n  let orig = Test.originate(contract_of(C), 1, 0tez);\n  Test.transfer_exn(orig.addr, Main(unit), 0tez);\n  assert (Test.get_storage(orig.addr) == 5);\n};\n\nconst test = _test();\n"))))}u.isMDXComponent=!0}}]);