"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[35462],{48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>r});var i=n(67294),a=n(75402);const r=function(e){return i.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:i.createElement(i.Fragment,null)}))}},99191:(e,t,n)=>{n.d(t,{Z:()=>g});var i=n(43164),a=n(67294),r=n(52263),s=n(48720),l=n(11506);function o(){return o=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},o.apply(this,arguments)}const{Prism:p}=n(43164);p.languages={...p.languages,cameligo:{...p.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:p.languages.typescript};const g=function(e){const{siteConfig:{themeConfig:{prism:t={}}}}=(0,r.Z)(),n=t.singleTheme||l.Z,[p,g]=(0,a.useState)(!1);return(0,a.useEffect)((()=>{g(!0)}),[]),a.createElement(s.D.Consumer,null,(t=>{let{syntax:r}=t;return r===e.syntax?a.createElement(i.default,o({},i.defaultProps,{key:p,language:e.syntax,code:e.children,theme:n}),(e=>{let{className:t,tokens:n,getLineProps:i,getTokenProps:r}=e;return a.createElement("h4",{className:t,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((e,t)=>a.createElement("div",i({line:e,key:t}),e.map(((e,t)=>a.createElement("span",r({token:e,key:t}))))))))})):a.createElement("div",null)}))}},3327:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var i=n(87462),a=(n(67294),n(3905)),r=n(48720),s=n(99191);const l={id:"string-reference",title:"string",hide_table_of_contents:!0},o=void 0,p={unversionedId:"reference/string-reference",id:"version-1.7.0/reference/string-reference",title:"string",description:"Strings of characters",source:"@site/versioned_docs/version-1.7.0/reference/string.md",sourceDirName:"reference",slug:"/reference/string-reference",permalink:"/previews/ligo/modules/docs/reference/string-reference",draft:!1,tags:[],version:"1.7.0",frontMatter:{id:"string-reference",title:"string",hide_table_of_contents:!0},sidebar:"API",previous:{title:"bytes",permalink:"/previews/ligo/modules/docs/reference/bytes-reference"},next:{title:"option",permalink:"/previews/ligo/modules/docs/reference/option-reference"}},g={},c=[],d={toc:c};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Strings of characters"),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val length : string -> nat"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let length: (_: string) => nat"),(0,a.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"String.length s")," is the number of characters in the string\n",(0,a.kt)("inlineCode",{parentName:"p"},"s"),". Note: ",(0,a.kt)("inlineCode",{parentName:"p"},"String.length")," is another name for ",(0,a.kt)("inlineCode",{parentName:"p"},"String.size"),".")),(0,a.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"String.length(s)")," is the number of characters in the string\n",(0,a.kt)("inlineCode",{parentName:"p"},"s"),". Note: ",(0,a.kt)("inlineCode",{parentName:"p"},"String.length")," is another name for ",(0,a.kt)("inlineCode",{parentName:"p"},"String.size"),".")),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val size : string -> nat"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let size: (_: string) => nat"),(0,a.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"String.size s")," is the number of characters in the string ",(0,a.kt)("inlineCode",{parentName:"p"},"s"),".")),(0,a.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"String.size(s)")," is the number of characters in the string ",(0,a.kt)("inlineCode",{parentName:"p"},"s"),".")),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val concat : string -> string -> string"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let concat: (_: string) => (_: string) => string"),(0,a.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"String.concat left right")," is the concatenation of the string\n",(0,a.kt)("inlineCode",{parentName:"p"},"left")," and the string ",(0,a.kt)("inlineCode",{parentName:"p"},"right"),", in that order.")),(0,a.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"String.concat(left, right)")," is the concatenation of the string\n",(0,a.kt)("inlineCode",{parentName:"p"},"left")," and the string ",(0,a.kt)("inlineCode",{parentName:"p"},"right"),", in that order.")),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val concats : string list -> string"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let concats: (_: list<string>) => string"),(0,a.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"String.concats list")," is the concatenation of the strings in\nthe list ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),", from left to right.")),(0,a.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"String.concats(list)")," is the concatenation of the strings in\nthe list ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),", from left to right.")),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val sub : nat -> nat -> string -> string"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let sub: (_: nat) => (_: nat) => (_: string) => string"),(0,a.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"String.sub index len str")," is the substring of string ",(0,a.kt)("inlineCode",{parentName:"p"},"str"),"\nstarting at index ",(0,a.kt)("inlineCode",{parentName:"p"},"index")," (0 denoting the first character) and of\nlength ",(0,a.kt)("inlineCode",{parentName:"p"},"len"),". If the index or length are invalid, an exception\ninterrupts the execution.")),(0,a.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"String.sub(index, len, str)")," is the substring of string ",(0,a.kt)("inlineCode",{parentName:"p"},"str"),"\nstarting at index ",(0,a.kt)("inlineCode",{parentName:"p"},"index")," (0 denoting the first character) and of\nlength ",(0,a.kt)("inlineCode",{parentName:"p"},"len"),". If the index or length are invalid, an exception\ninterrupts the execution.")),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val slice : nat -> nat -> string -> string"),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let slice: (_: nat) => (_: nat) => (_: string) => string"),(0,a.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"String.slice index len str")," is the substring of string ",(0,a.kt)("inlineCode",{parentName:"p"},"str"),"\nstarting at index ",(0,a.kt)("inlineCode",{parentName:"p"},"index")," (0 denoting the first character) and of\nlength ",(0,a.kt)("inlineCode",{parentName:"p"},"len"),". If the index or length are invalid, an exception\ninterrupts the execution.")),(0,a.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"String.slice(index, len, str)")," is the substring of string ",(0,a.kt)("inlineCode",{parentName:"p"},"str"),"\nstarting at index ",(0,a.kt)("inlineCode",{parentName:"p"},"index")," (0 denoting the first character) and of\nlength ",(0,a.kt)("inlineCode",{parentName:"p"},"len"),". If the index or length are invalid, an exception\ninterrupts the execution.")))}m.isMDXComponent=!0}}]);