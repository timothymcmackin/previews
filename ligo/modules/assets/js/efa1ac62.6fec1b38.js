"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[56006],{3905:(t,e,n)=>{n.d(e,{Zo:()=>l,kt:()=>m});var r=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function c(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?c(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},c=Object.keys(t);for(r=0;r<c.length;r++)n=c[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(t);for(r=0;r<c.length;r++)n=c[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var i=r.createContext({}),p=function(t){var e=r.useContext(i),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},l=function(t){var e=p(t.components);return r.createElement(i.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,c=t.originalType,i=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),d=p(n),m=a,y=d["".concat(i,".").concat(m)]||d[m]||u[m]||c;return n?r.createElement(y,o(o({ref:e},l),{},{components:n})):r.createElement(y,o({ref:e},l))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var c=n.length,o=new Array(c);o[0]=d;var s={};for(var i in e)hasOwnProperty.call(e,i)&&(s[i]=e[i]);s.originalType=t,s.mdxType="string"==typeof t?t:a,o[1]=s;for(var p=2;p<c;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},48720:(t,e,n)=>{n.d(e,{D:()=>a.Z,Z:()=>c});var r=n(67294),a=n(75402);const c=function(t){return r.createElement(a.Z.Consumer,null,(e=>{let{syntax:n}=e;return n===t.syntax?t.children:r.createElement(r.Fragment,null)}))}},22497:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(87462),a=(n(67294),n(3905)),c=n(48720);const o={id:"contracts-type",title:"Contracts"},s=void 0,i={unversionedId:"data-types/contracts-type",id:"data-types/contracts-type",title:"Contracts",description:"The contract type represents a smart contract.",source:"@site/../docs/data-types/contracts.md",sourceDirName:"data-types",slug:"/data-types/contracts-type",permalink:"/previews/ligo/modules/docs/next/data-types/contracts-type",draft:!1,tags:[],version:"current",frontMatter:{id:"contracts-type",title:"Contracts"},sidebar:"docs",previous:{title:"Address",permalink:"/previews/ligo/modules/docs/next/data-types/address"},next:{title:"Big sets",permalink:"/previews/ligo/modules/docs/next/data-types/big_sets"}},p={},l=[],u={toc:l};function d(t){let{components:e,...n}=t;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"contract")," type represents a smart contract.\nThere is no way to create a literal value of this type; you must create a ",(0,a.kt)("inlineCode",{parentName:"p"},"contract")," type by passing the address of the account to a predefined function.\nBeware of failures if the address is invalid."),(0,a.kt)(c.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Tezos.implicit_account kh")," casts the public key hash ",(0,a.kt)("inlineCode",{parentName:"p"},"kh")," of an implicit account to a ",(0,a.kt)("inlineCode",{parentName:"p"},"contract")," type that represents that user account.\nContract types that represent implicit accounts always have the type ",(0,a.kt)("inlineCode",{parentName:"p"},"unit contract")," because they accept no parameter."),(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Tezos.get_contract address")," casts the address of a smart contract (originated account) to a ",(0,a.kt)("inlineCode",{parentName:"p"},"contract")," type that represents that contract.\nThe type is parameterized based on the parameter that the contract accepts.\nFor example, if the contract accepts an integer, the type is ",(0,a.kt)("inlineCode",{parentName:"p"},"int contract"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=get_contract",group:"get_contract"},'type returnType = operation list * int\n\ntype contractParam =\nReset\n| Decrement of int\n| Increment of int\n\n[@entry]\nlet callContract (_ : unit) (storage : int) : returnType =\n  let contractAddress : address = ("KT1FpuaoBHwXMXJ6zn3F4ZhpjpPZV28MAinz" : address) in\n  let myContract: contractParam contract = Tezos.get_contract contractAddress in\n  let operation = Tezos.transaction (Increment 4) 0tez myContract in\n  [operation], storage\n'))),(0,a.kt)(c.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Tezos.implicit_account(kh)")," casts the public key hash ",(0,a.kt)("inlineCode",{parentName:"p"},"kh")," of an implicit account to a ",(0,a.kt)("inlineCode",{parentName:"p"},"contract")," type that represents that user account.\nContract types that represent implicit accounts always have the type ",(0,a.kt)("inlineCode",{parentName:"p"},"contract<unit>")," because they accept no parameter."),(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Tezos.get_contract(address)")," casts the address of a smart contract (originated account) to a ",(0,a.kt)("inlineCode",{parentName:"p"},"contract")," type that represents that contract.\nThe type is parameterized based on the parameter that the contract accepts.\nFor example, if the contract accepts an integer, the type is ",(0,a.kt)("inlineCode",{parentName:"p"},"contract<int>"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=get_contract",group:"get_contract"},'type returnType = [list<operation>, int];\n\ntype contractParam =\n  | ["Reset", unit]\n  | ["Decrement", int]\n  | ["Increment", int];\n\n@entry\nconst callContract = (_: unit, storage: int): returnType => {\n  const contractAddress: address = ("KT1FpuaoBHwXMXJ6zn3F4ZhpjpPZV28MAinz" as address);\n  const myContract: contract<contractParam> = Tezos.get_contract(contractAddress);\n  const contractArg: contractParam = Increment(4);\n  const operation = Tezos.transaction(contractArg, 0tez, myContract);\n  return [list([operation]), storage + 1]\n}\n'))))}d.isMDXComponent=!0}}]);