"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7266],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var o=a.createContext({}),g=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=g(e.components);return a.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=g(n),m=s,y=u["".concat(o,".").concat(m)]||u[m]||p[m]||r;return n?a.createElement(y,i(i({ref:t},c),{},{components:n})):a.createElement(y,i({ref:t},c))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:s,i[1]=l;for(var g=2;g<r;g++)i[g]=n[g];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>s.Z,Z:()=>r});var a=n(67294),s=n(75402);const r=function(e){return a.createElement(s.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},85861:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(87462),s=(n(67294),n(3905)),r=n(48720);const i={id:"strings-bytes",title:"Strings & Bytes"},l=void 0,o={unversionedId:"language-basics/strings-bytes",id:"language-basics/strings-bytes",title:"Strings & Bytes",description:"Strings",source:"@site/../docs/language-basics/strings-bytes.md",sourceDirName:"language-basics",slug:"/language-basics/strings-bytes",permalink:"/previews/ligo/modules/docs/next/language-basics/strings-bytes",draft:!1,tags:[],version:"current",frontMatter:{id:"strings-bytes",title:"Strings & Bytes"}},g={},c=[{value:"Strings",id:"strings",level:2},{value:"Concatenating Strings",id:"concatenating-strings",level:3},{value:"Extracting Substrings",id:"extracting-substrings",level:3},{value:"Length of Strings",id:"length-of-strings",level:3},{value:"Bytes",id:"bytes",level:2},{value:"Concatenating Bytes",id:"concatenating-bytes",level:3},{value:"Extracting Bytes",id:"extracting-bytes",level:3},{value:"Length of Bytes",id:"length-of-bytes",level:3},{value:"Bitwise operators",id:"bitwise-operators",level:3},{value:"From <code>bytes</code> to <code>nat</code> and back",id:"from-bytes-to-nat-and-back",level:3},{value:"From <code>bytes</code> to <code>int</code> and back",id:"from-bytes-to-int-and-back",level:3}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"strings"},"Strings"),(0,s.kt)("p",null,"Strings are defined using the built-in ",(0,s.kt)("inlineCode",{parentName:"p"},"string")," type like this:"),(0,s.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'let a : string = "Hello Alice"\n'))),(0,s.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsligo"},'const a = "Hello Alice";\n'))),(0,s.kt)("h3",{id:"concatenating-strings"},"Concatenating Strings"),(0,s.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,s.kt)("p",null,"Strings can be concatenated using the ",(0,s.kt)("inlineCode",{parentName:"p"},"^")," operator."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=a",group:"a"},'let name : string = "Alice"\nlet greeting : string = "Hello"\nlet full_greeting : string = greeting ^ " " ^ name\n'))),(0,s.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,s.kt)("p",null,"Strings can be concatenated using the ",(0,s.kt)("inlineCode",{parentName:"p"},"+")," operator."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=a",group:"a"},'const name = "Alice";\nconst greeting = "Hello";\nconst full_greeting = greeting + " " + name;\n'))),(0,s.kt)("h3",{id:"extracting-substrings"},"Extracting Substrings"),(0,s.kt)("p",null,"Substrings can be extracted using the predefined function\n",(0,s.kt)("inlineCode",{parentName:"p"},"String.sub"),". The first character has index 0 and the interval of\nindices for the substring has inclusive bounds."),(0,s.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=b",group:"b"},'let name  : string = "Alice"\nlet slice : string = String.sub 0n 1n name (* slice = "A" *)\n'))),(0,s.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=b",group:"b"},'const name = "Alice";\nconst slice = String.sub (0n, 1n, name); // slice == "A"\n'))),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f Notice that the offset and length of the slice are natural\nnumbers.")),(0,s.kt)("h3",{id:"length-of-strings"},"Length of Strings"),(0,s.kt)("p",null,"The length of a string can be found using a built-in function:"),(0,s.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=c",group:"c"},'let name : string = "Alice"\nlet length : nat = String.length name  // length = 5\n')),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Note that ",(0,s.kt)("inlineCode",{parentName:"p"},"String.size")," is ",(0,s.kt)("em",{parentName:"p"},"deprecated"),"."))),(0,s.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=c",group:"c"},'const name = "Alice";\nconst length = String.length(name);  // length == 5\n'))),(0,s.kt)("h2",{id:"bytes"},"Bytes"),(0,s.kt)("p",null,"Byte literals are defined using the prefix ",(0,s.kt)("inlineCode",{parentName:"p"},"0x")," followed by hexadecimal digits like this:"),(0,s.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cameligo"},"let b : bytes = 0x7070\n"))),(0,s.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsligo"},"const b = 0x7070;\n"))),(0,s.kt)("p",null,"Moreover, a string literal can be converted to its bytes representation:"),(0,s.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cameligo"},'let bs : bytes = [%bytes "foo"]\n'))),(0,s.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsligo"},"const bs = (bytes `foo`);\n"))),(0,s.kt)("h3",{id:"concatenating-bytes"},"Concatenating Bytes"),(0,s.kt)("p",null,"Bytes can be concatenated using the ",(0,s.kt)("inlineCode",{parentName:"p"},"Bytes.concat")," function."),(0,s.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=d",group:"d"},"let white : bytes = 0xffff\nlet black : bytes = 0x0000\nlet pixels : bytes = Bytes.concat white black (* 0xffff0000 *)\n"))),(0,s.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=d",group:"d"},"const white = 0xffff;\nconst black = 0x0000;\nconst pixels = Bytes.concat(white, black); // 0xffff0000\n"))),(0,s.kt)("h3",{id:"extracting-bytes"},"Extracting Bytes"),(0,s.kt)("p",null,"Bytes can be extracted using the predefined function ",(0,s.kt)("inlineCode",{parentName:"p"},"Bytes.sub"),".  The\nfirst parameter takes the start index and the second parameter takes\nthe number of bytes. Pay special attention to how ",(0,s.kt)("inlineCode",{parentName:"p"},"bytes")," are\nindexed."),(0,s.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=e",group:"e"},"let b     : bytes = 0x12345678\nlet slice : bytes = Bytes.sub 1n 2n b (* 0x3456 *)\n"))),(0,s.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=e",group:"e"},"const b     = 0x12345678;\nconst slice = Bytes.sub (1n, 2n, b); // 0x3456\n"))),(0,s.kt)("h3",{id:"length-of-bytes"},"Length of Bytes"),(0,s.kt)("p",null,"The length of ",(0,s.kt)("inlineCode",{parentName:"p"},"bytes")," can be found using a built-in function ",(0,s.kt)("inlineCode",{parentName:"p"},"Bytes.length"),":"),(0,s.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=f",group:"f"},"let b      : bytes = 0x123456\nlet length : nat   = Bytes.length b  (* length = 3 *)\n"))),(0,s.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=f",group:"f"},"const b      = 0x123456;\nconst length = Bytes.length(b);  // length = 3\n"))),(0,s.kt)("h3",{id:"bitwise-operators"},"Bitwise operators"),(0,s.kt)("p",null,"You can perform bitwise operation on ",(0,s.kt)("inlineCode",{parentName:"p"},"bytes")," as follows:"),(0,s.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=g",group:"g"},"(* Bitwise and *)\nlet b_and         = 0x0005 land 0x0106 (* 0x0004 *)\n\n(* Bitwise or *)\nlet b_or          = 0x0005 lor  0x0106 (* 0x0107 *)\n\n(* Bitwise xor *)\nlet b_xor         = 0x0005 lxor 0x0106 (* 0x0103 *)\n\n(* Bitwise shift left *)\nlet b_shift_left  = 0x06   lsl  8n     (* 0x0600 *)\n\n(* Bitwise shift right *)\nlet b_shift_right = 0x0006 lsr  1n     (* 0x0003 *)\n"))),(0,s.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=g",group:"g"},"/* Bitwise and */\nconst b_and           =  0x0005 & 0x0106; // 0x0004\n\n/* Bitwise or */\nconst b_or            = 0x0005 | 0x0106; // 0x0107\n\n/* Bitwise xor */\nconst b_xor           = 0x0005 ^ 0x0106; // 0x0103\n\n/* Bitwise shift left */\nconst b_shift_left    = 0x06 << 8n; // 0x0600\n\n/* Bitwise shift right */\nconst b_shift_right   = 0x0006 >> 1n; // 0x0003\n"))),(0,s.kt)("h3",{id:"from-bytes-to-nat-and-back"},"From ",(0,s.kt)("inlineCode",{parentName:"h3"},"bytes")," to ",(0,s.kt)("inlineCode",{parentName:"h3"},"nat")," and back"),(0,s.kt)("p",null,"You can case ",(0,s.kt)("inlineCode",{parentName:"p"},"bytes")," to ",(0,s.kt)("inlineCode",{parentName:"p"},"nat")," using the built-in ",(0,s.kt)("inlineCode",{parentName:"p"},"nat")," function and vice-versa\nusing using the ",(0,s.kt)("inlineCode",{parentName:"p"},"bytes")," built-in function."),(0,s.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=h",group:"h"},"(* bytes -> nat *)\nlet test_bytes_nat = nat 0x1234 (* 1234n *)\n\n(* nat -> bytes *)\nlet test_nat_bytes = bytes 4660n (* 0x1234 *)\n"))),(0,s.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=h",group:"h"},"/* bytes -> nat */\nconst test_bytes_nat = nat(0x1234) // 1234n\n\n/* nat -> bytes */\nconst test_nat_bytes = bytes(4660n) // 0x1234\n"))),(0,s.kt)("h3",{id:"from-bytes-to-int-and-back"},"From ",(0,s.kt)("inlineCode",{parentName:"h3"},"bytes")," to ",(0,s.kt)("inlineCode",{parentName:"h3"},"int")," and back"),(0,s.kt)("p",null,"You can cast ",(0,s.kt)("inlineCode",{parentName:"p"},"bytes")," to ",(0,s.kt)("inlineCode",{parentName:"p"},"int")," using the built-in ",(0,s.kt)("inlineCode",{parentName:"p"},"int")," function and\nvice-versa using the ",(0,s.kt)("inlineCode",{parentName:"p"},"bytes")," built-in function."),(0,s.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=h",group:"h"},"(* bytes -> int *)\nlet test_bytes_int = int 0x1234 (* 4660 *)\n\n(* int -> bytes *)\nlet test_int_bytes = bytes 4660 (* 0x1234 *)\n"))),(0,s.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=h",group:"h"},"/* bytes -> int */\nconst test_bytes_int = int(0x1234) // 4660\n\n/* int -> bytes */\nconst test_int_bytes = bytes(4660) // 0x1234\n"))))}u.isMDXComponent=!0}}]);