"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[11313],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=l(n),u=r,y=d["".concat(s,".").concat(u)]||d[u]||m[u]||i;return n?a.createElement(y,o(o({ref:t},c),{},{components:n})):a.createElement(y,o({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>r.Z,Z:()=>i});var a=n(67294),r=n(75402);const i=function(e){return a.createElement(r.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},46129:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905)),i=n(48720);const o={id:"declaring",title:"Declaring"},p=void 0,s={unversionedId:"maps/declaring",id:"version-1.6.0/maps/declaring",title:"Declaring",description:"Maps are a data structure which associates values of the same type to",source:"@site/versioned_docs/version-1.6.0/maps/declaring.md",sourceDirName:"maps",slug:"/maps/declaring",permalink:"/previews/ligo/modules/docs/1.6.0/maps/declaring",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"declaring",title:"Declaring"},sidebar:"docs",previous:{title:"Looping",permalink:"/previews/ligo/modules/docs/1.6.0/sets/looping"},next:{title:"Sizing",permalink:"/previews/ligo/modules/docs/1.6.0/maps/sizing"}},l={},c=[],m={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Maps")," are a data structure which associates values of the same type to\nvalues of the same type. The former are called ",(0,r.kt)("em",{parentName:"p"},"key")," and the latter\n",(0,r.kt)("em",{parentName:"p"},"values"),". Together they make up a ",(0,r.kt)("em",{parentName:"p"},"binding"),". An additional requirement\nis that the type of the keys must be ",(0,r.kt)("em",{parentName:"p"},"comparable"),", in the Michelson\nsense."),(0,r.kt)("p",null,"As a consequence, the predefined type ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," has two parameters: the\nfirst is the type of the keys, and the second the type of the\nassociated values."),(0,r.kt)("p",null,"The empty map is denoted by the predefined value ",(0,r.kt)("inlineCode",{parentName:"p"},"Map.empty"),". A\nnon-empty map can be built by using the function ",(0,r.kt)("inlineCode",{parentName:"p"},"Map.literal")," which\ntakes a list of pairs of key and values, and returns a map containing\nthem as bindings, and only them."),(0,r.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=maps",group:"maps"},'type word       = string\ntype definition = string list\ntype dictionary = (word, definition) map\n\nlet empty_dict : dictionary = Map.empty\n\nlet dictionary : dictionary =\n  Map.literal [\n    ("one", ["The number 1."; "A member of a group."]);\n    ("two", ["The number 2"])]\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Map.literal")," predefined function builds a map from a list of\nkey-value pairs, ",(0,r.kt)("inlineCode",{parentName:"p"},"(<key>, <value>)"),'.  Note also the "',(0,r.kt)("inlineCode",{parentName:"p"},";"),'" to separate\nindividual map bindings. Note that ',(0,r.kt)("inlineCode",{parentName:"p"},'("<string value>": address)')," means\nthat we type-cast a string into an address."),(0,r.kt)("p",null,"Note: See the predefined\n",(0,r.kt)("a",{parentName:"p",href:"../reference/map-reference"},"module Map"))),(0,r.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=maps",group:"maps"},'type word       = string;\ntype definition = list<string>;\ntype dictionary = map<word, definition>;\n\nconst empty_dict: dictionary = Map.empty;\n\nconst dictionary : dictionary =\n  Map.literal([\n    ["one", (["The number 1.", "A member of a group."] as definition)],\n    ["two", (["The number 2."] as definition)]]);\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Map.literal")," predefined function builds a map from a list of\nkey-value pairs, ",(0,r.kt)("inlineCode",{parentName:"p"},"[<key>, <value>]"),'.  Note also the "',(0,r.kt)("inlineCode",{parentName:"p"},","),'" to separate\nindividual map bindings. Note that ',(0,r.kt)("inlineCode",{parentName:"p"},'"<string value>" as address')," means\nthat we type-cast a string into an address."),(0,r.kt)("p",null,"Note: See the predefined\n",(0,r.kt)("a",{parentName:"p",href:"../reference/map-reference"},"namespace Map"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: Map keys are internally sorted by increasing values, so the\ntype of the keys be ",(0,r.kt)("em",{parentName:"p"},"comparable"),", that is, they obey a total order\n(any two keys can be compared).")))}d.isMDXComponent=!0}}]);