"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[80191],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>o.Z,Z:()=>r});var a=n(67294),o=n(75402);const r=function(e){return a.createElement(o.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},37423:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(87462),o=(n(67294),n(3905)),r=n(48720);const i={id:"accessing",title:"Accessing"},s=void 0,l={unversionedId:"modules/accessing",id:"version-1.6.0/modules/accessing",title:"Accessing",description:"We can access the components of a module by means of the selection",source:"@site/versioned_docs/version-1.6.0/modules/accessing.md",sourceDirName:"modules",slug:"/modules/accessing",permalink:"/previews/ligo/modules/docs/1.6.0/modules/accessing",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"accessing",title:"Accessing"},sidebar:"docs",previous:{title:"Declaring",permalink:"/previews/ligo/modules/docs/1.6.0/modules/declaring"},next:{title:"Nesting",permalink:"/previews/ligo/modules/docs/1.6.0/modules/nesting"}},p={},c=[],u={toc:c};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("p",null,'We can access the components of a module by means of the selection\noperator "',(0,o.kt)("inlineCode",{parentName:"p"},"."),'", as with records.'),(0,o.kt)("p",null,"Let us suppose that we keep an amount in euros using the previously\ndefined module ",(0,o.kt)("inlineCode",{parentName:"p"},"Euro"),". Then, we can write a ",(0,o.kt)("inlineCode",{parentName:"p"},"tip")," function outside\n",(0,o.kt)("inlineCode",{parentName:"p"},"Euro")," that increments a given amount each time it is called."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=Euro",group:"Euro"},"module Euro =\n  struct\n    type t = nat\n    let add (a, b : t * t) : t = a + b\n    let one : t = 1n\n    let two : t = 2n\n  end\n\ntype storage = Euro.t\n\nlet tip (s : storage) : storage =\n  Euro.add (s, Euro.one)\n")),(0,o.kt)("p",null,"In principle, we could change the implementation of ",(0,o.kt)("inlineCode",{parentName:"p"},"Euro"),", without\nhaving to change the ",(0,o.kt)("inlineCode",{parentName:"p"},"storage")," type or the function ",(0,o.kt)("inlineCode",{parentName:"p"},"tip"),". For\nexample, if we decide later that we should support manipulating\nnegative values, we could change ",(0,o.kt)("inlineCode",{parentName:"p"},"Euro")," as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=module_accessing",group:"module_accessing"},"module Euro =\n  struct\n    type t = int\n    let add (a, b : t * t) : t = a + b\n    let one : t = 1\n    let two : t = 2\n  end\n")),(0,o.kt)("p",null,"The code of ",(0,o.kt)("inlineCode",{parentName:"p"},"tip")," still works, and no change is needed. Abstraction\naccomplished!"),(0,o.kt)("p",null,"Note that code using the module ",(0,o.kt)("inlineCode",{parentName:"p"},"Euro")," might still break the\nabstraction if it directly uses the underlying representation of\n",(0,o.kt)("inlineCode",{parentName:"p"},"Euro.t"),". Client code should always try to respect the interface\nprovided by the module, and not make assumptions on its current\nunderlying representation. For example, ",(0,o.kt)("inlineCode",{parentName:"p"},"Euro.t")," is a transparent\nalias of ",(0,o.kt)("inlineCode",{parentName:"p"},"nat")," (or ",(0,o.kt)("inlineCode",{parentName:"p"},"int"),"). In order to hide the representation of a\ntype in a module, we need to constrain the module with a module type,\nor ",(0,o.kt)("a",{parentName:"p",href:"/previews/ligo/modules/docs/1.6.0/signatures/declaring"},(0,o.kt)("em",{parentName:"a"},"signature")),".")),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("p",null,'We can access the components of a namespace by means of the selection\noperator "',(0,o.kt)("inlineCode",{parentName:"p"},"."),'", as with records.'),(0,o.kt)("p",null,"Let us suppose that we keep an amount in euros using the previously\ndefined namespace ",(0,o.kt)("inlineCode",{parentName:"p"},"Euro"),". Then, we can write a ",(0,o.kt)("inlineCode",{parentName:"p"},"tip")," function outside\n",(0,o.kt)("inlineCode",{parentName:"p"},"Euro")," that increments a given amount each time it is called."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=Euro",group:"Euro"},"namespace Euro {\n  export type t = nat;\n  export const add = (a: t, b: t) : t => a + b;\n  export const one: t = 1n;\n  export const two: t = 2n;\n};\n\ntype storage = Euro.t;\n\nconst tip = (s : storage) : storage =>\n  Euro.add (s, Euro.one);\n")),(0,o.kt)("p",null,"In principle, we could change the implementation of ",(0,o.kt)("inlineCode",{parentName:"p"},"Euro"),", without\nhaving to change the ",(0,o.kt)("inlineCode",{parentName:"p"},"storage")," type or the function ",(0,o.kt)("inlineCode",{parentName:"p"},"tip"),". For\nexample, if we decide later that we should support manipulating\nnegative values, we could change ",(0,o.kt)("inlineCode",{parentName:"p"},"Euro")," as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=module_accessing",group:"module_accessing"},"namespace Euro {\n  export type t = int;\n  export const add = (a: t, b: t) : t => a + b;\n  export const one: t = 1;\n  export const two: t = 2;\n};\n")),(0,o.kt)("p",null,"The code of ",(0,o.kt)("inlineCode",{parentName:"p"},"tip")," still works, and no change is needed. Abstraction\naccomplished!"),(0,o.kt)("p",null,"Note that code using the namespace ",(0,o.kt)("inlineCode",{parentName:"p"},"Euro")," might still break the\nabstraction if it directly uses the underlying representation of\n",(0,o.kt)("inlineCode",{parentName:"p"},"Euro.t"),". Client code should always try to respect the interface\nprovided by the namespace, and not make assumptions on its current\nunderlying representation. For example, ",(0,o.kt)("inlineCode",{parentName:"p"},"Euro.t")," is a transparent\nalias of ",(0,o.kt)("inlineCode",{parentName:"p"},"nat")," (or ",(0,o.kt)("inlineCode",{parentName:"p"},"int"),"). In order to hide the representation of a\ntype in a namespace, we need to constrain the namesapce with an\n",(0,o.kt)("a",{parentName:"p",href:"/previews/ligo/modules/docs/1.6.0/signatures/declaring"},(0,o.kt)("em",{parentName:"a"},"interface")),".")))}d.isMDXComponent=!0}}]);