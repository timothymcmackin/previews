"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[62863],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(n),d=a,g=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>o});var r=n(67294),a=n(75402);const o=function(e){return r.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},40148:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(87462),a=(n(67294),n(3905)),o=n(48720);const i={id:"import",title:"#import"},p=void 0,s={unversionedId:"preprocessor/import",id:"preprocessor/import",title:"#import",description:"The #import directive is specific to the LIGO compiler. It provides",source:"@site/../docs/preprocessor/import.md",sourceDirName:"preprocessor",slug:"/preprocessor/import",permalink:"/previews/ligo/modules/docs/next/preprocessor/import",draft:!1,tags:[],version:"current",frontMatter:{id:"import",title:"#import"},sidebar:"docs",previous:{title:"#include",permalink:"/previews/ligo/modules/docs/next/preprocessor/include"},next:{title:"#error",permalink:"/previews/ligo/modules/docs/next/preprocessor/error"}},l={},c=[{value:"Importing namespaces",id:"importing-namespaces",level:2}],m={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"#import")," directive is specific to the LIGO compiler. It provides\nthe support for a minimal module/namespace system."),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"For more information about modules, see ",(0,a.kt)("a",{parentName:"p",href:"../syntax/modules"},"Modules"),"."),(0,a.kt)("p",null,"Modules get more handy when they can be made from a file, separate\nfrom our own program, like a library: when we ",(0,a.kt)("em",{parentName:"p"},"import")," a module from\nsuch a file, we automatically obtain a module encapsulating all the\ndefinitions in it. This will become very handy for organising large\ncontracts, as we can divide it into different files, and the module\nsystem keeps the naming space clean (no need for name mangling)."),(0,a.kt)("p",null,"Generally, we will take a set of definitions that can be naturally\ngrouped by functionality, and put them together in a separate\nfile. For example, we can create a file ",(0,a.kt)("inlineCode",{parentName:"p"},"euro.mligo"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=euro",group:"euro"},"type t = nat\n\nlet add (a, b : t * t) : t = a + b\n\nlet one : t = 1n\nlet two : t = 2n\n")),(0,a.kt)("p",null,"In another file, we can import ",(0,a.kt)("inlineCode",{parentName:"p"},"euro.mligo")," as a module, and use its\ndefinitions. For example, we can create a ",(0,a.kt)("inlineCode",{parentName:"p"},"main.mligo")," that imports\nall definitions from ",(0,a.kt)("inlineCode",{parentName:"p"},"euro.mligo")," as the module ",(0,a.kt)("inlineCode",{parentName:"p"},"Euro"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=main_importer",group:"main_importer"},'#import "gitlab-pages/docs/preprocessor/src/import/euro.mligo" "Euro"\n\ntype storage = Euro.t\n\nlet tip (s : storage) : storage = Euro.add (s, Euro.one)\n'))),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"For more information about namespaces, see ",(0,a.kt)("a",{parentName:"p",href:"../syntax/modules"},"Namespaces"),"."),(0,a.kt)("p",null,"Namespaces get more handy when they can be made from a file, separate\nfrom our own program, like a library: when we ",(0,a.kt)("em",{parentName:"p"},"import")," a namespace\nfrom such a file, we automatically obtain a namespace encapsulating\nall the definitions in it. This will become very handy for organising\nlarge contracts, as we can divide it into different files, and the\nnamespace system keeps the naming space clean (no need for name\nmangling)."),(0,a.kt)("p",null,"Generally, we will take a set of definitions that can be naturally\ngrouped by functionality, and put them together in a separate\nfile. For example, we can create a file ",(0,a.kt)("inlineCode",{parentName:"p"},"euro.jsligo"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=euro",group:"euro"},"export type t = nat;\n\nexport const add = (a: t, b: t): t => a + b;\n\nexport const one: t = 1n;\nexport const two: t = 2n;\n")),(0,a.kt)("p",null,"In another file, we can import ",(0,a.kt)("inlineCode",{parentName:"p"},"euro.jsligo")," as a namespace, and use\nits definitions. For example, we can create a ",(0,a.kt)("inlineCode",{parentName:"p"},"main.jsligo")," that\nimports all definitions from ",(0,a.kt)("inlineCode",{parentName:"p"},"euro.jsligo")," as the namespace ",(0,a.kt)("inlineCode",{parentName:"p"},"Euro"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=main_importer",group:"main_importer"},'#import "gitlab-pages/docs/preprocessor/src/import/euro.jsligo" "Euro"\n\ntype storage = Euro.t;\n\nconst tip = (s : storage) : storage =>\n  Euro.add (s, Euro.one);\n')),(0,a.kt)("h2",{id:"importing-namespaces"},"Importing namespaces"),(0,a.kt)("p",null,"When you import a file with the ",(0,a.kt)("inlineCode",{parentName:"p"},"#import")," directive, LIGO packages the file as a namespace.\nTherefore, any namespaces in the file are sub-namespaces of that namespace."),(0,a.kt)("p",null,"However, the namespace does not export those sub-namespaces automatically.\nAs a result, if you import a file that contains namespaces, those namespaces are not accessible."),(0,a.kt)("p",null,"To work around this limitation, add the ",(0,a.kt)("inlineCode",{parentName:"p"},"@public")," decorator to the namespaces in the file.\nFor example, this file defines the Euro type as a namespace with the ",(0,a.kt)("inlineCode",{parentName:"p"},"@public")," decorator:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=euro_namespace_public",group:"euro_namespace_public"},"// This file is gitlab-pages/docs/preprocessor/src/import/euro_namespace_public.jsligo\n\n@public\nnamespace Euro {\n  export type t = nat;\n  export const add = (a: t, b: t) : t => a + b;\n  export const one: t = 1n;\n  export const two: t = 2n;\n};\n")),(0,a.kt)("p",null,"Because the namespace is public, you can access it as a sub-namespace when you import the file into another file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=import_euro_public",group:"import_euro_public"},'#import "gitlab-pages/docs/preprocessor/src/import/euro_namespace_public.jsligo" "Euro_import"\n\ntype euro_balance = Euro_import.Euro.t;\n\nconst add_tip = (s: euro_balance): euro_balance =>\n  Euro_import.Euro.add(s, Euro_import.Euro.one);\n'))))}u.isMDXComponent=!0}}]);