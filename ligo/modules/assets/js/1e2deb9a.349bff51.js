"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8918],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),f=i,g=m["".concat(l,".").concat(f)]||m[f]||u[f]||a;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>i.Z,Z:()=>a});var r=n(67294),i=n(75402);const a=function(e){return r.createElement(i.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},18384:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(87462),i=(n(67294),n(3905)),a=n(48720);const o={id:"exceptions",title:"Exceptions"},s=void 0,l={unversionedId:"language-basics/exceptions",id:"version-1.5.0/language-basics/exceptions",title:"Exceptions",description:"In some cases it is necessary to interrupt the flow of execution with",source:"@site/versioned_docs/version-1.5.0/language-basics/exceptions.md",sourceDirName:"language-basics",slug:"/language-basics/exceptions",permalink:"/previews/ligo/modules/docs/1.5.0/language-basics/exceptions",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"exceptions",title:"Exceptions"}},c={},p=[{value:"The <code>failwith</code> function",id:"the-failwith-function",level:2},{value:"Assertions",id:"assertions",level:2}],u={toc:p};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In some cases it is necessary to interrupt the flow of execution with\na failure: this is where the predefined function ",(0,i.kt)("inlineCode",{parentName:"p"},"failwith")," comes in."),(0,i.kt)("h2",{id:"the-failwith-function"},"The ",(0,i.kt)("inlineCode",{parentName:"h2"},"failwith")," function"),(0,i.kt)("p",null,"The failwith function raises an error that cannot be caught, which\nterminates the contract."),(0,i.kt)(a.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=failwith",group:"failwith"},'type storage = unit\ntype result = operation list * storage\n\n[@entry]\nlet main (_param : unit) (_store : storage) : result =\n  failwith "This contract always fails."\n')),(0,i.kt)("p",null,"The call to failwith sometimes needs to be annotated with a type when the type-checker cannot infer the correct type, e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},'(failwith "message" : result)'),".")),(0,i.kt)(a.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=failwith",group:"failwith"},'@entry\nconst main = (p: unit, s: unit) : [list<operation>, unit] =>\n  failwith("This contract always fails");\n')),(0,i.kt)("p",null,"The call to failwith sometimes needs to be annotated with a type when the type-checker cannot infer the correct type, e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},'return (failwith("message") : result);'),".")),(0,i.kt)("h2",{id:"assertions"},"Assertions"),(0,i.kt)("p",null,"Assertions can be used to ensure a certain condition is met when\nrunning a contract. The predefined function ",(0,i.kt)("inlineCode",{parentName:"p"},"assert")," is used to check\nwhether a given a Boolean condition is true. The function\n",(0,i.kt)("inlineCode",{parentName:"p"},"assert_some")," is used to check if an option value is not ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),". The\nfunction ",(0,i.kt)("inlineCode",{parentName:"p"},"assert_some_with_error")," is like ",(0,i.kt)("inlineCode",{parentName:"p"},"assert_some")," but an error\nmessage can be given. When a condition is not met, the contract will\nstop executing and display an error."),(0,i.kt)(a.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=failwith_alt",group:"failwith_alt"},"[@entry]\nlet main (p : bool) (s : unit) : operation list * unit =\n  let u : unit = assert p\n  in [], s\n\n[@entry]\nlet some (o : unit option) (s : unit) : operation list * unit =\n  let u : unit = assert_some o\n  in [], s\n"))),(0,i.kt)(a.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=failwith_alt",group:"failwith_alt"},"@entry\nconst main = (p: bool, s: unit) : [list<operation>, unit] => {\n  let u: unit = assert(p);\n  return [list([]), s];\n};\n\n@entry\nconst some = (o: option<unit>, s : unit) : [list<operation>, unit] => {\n  assert_some(o);\n  return [list([]), s]\n};\n"))),(0,i.kt)("p",null,"You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"assert_with_error")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"assert_some_with_error")," to use a custom error message"),(0,i.kt)(a.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=failwith_assert_with_error",group:"failwith_assert_with_error"},'[@entry]\nlet main (p : bool) (s : unit) : operation list * unit =\n  let () = assert_with_error p "My custom error message."\n  in [], s\n'))),(0,i.kt)(a.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=failwith_assert_with_error",group:"failwith_assert_with_error"},'@entry\nlet main = (p: bool, s: unit) : [list<operation>, unit] => {\n  assert_with_error (p, "My custom error message.");\n  return [list([]), s];\n};\n'))))}m.isMDXComponent=!0}}]);