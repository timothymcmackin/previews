"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[67351],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(t),m=i,g=u["".concat(l,".").concat(m)]||u[m]||p[m]||a;return t?r.createElement(g,o(o({ref:n},d),{},{components:t})):r.createElement(g,o({ref:n},d))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},51854:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(87462),i=(t(67294),t(3905));const a={id:"adding",title:"Adding"},o=void 0,s={unversionedId:"numbers/adding",id:"version-1.6.0/numbers/adding",title:"Adding",description:"Addition in LIGO is accomplished by means of the + binary operator,",source:"@site/versioned_docs/version-1.6.0/numbers/adding.md",sourceDirName:"numbers",slug:"/numbers/adding",permalink:"/previews/ligo/modules/docs/1.6.0/numbers/adding",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"adding",title:"Adding"},sidebar:"docs",previous:{title:"Casting",permalink:"/previews/ligo/modules/docs/1.6.0/numbers/casting"},next:{title:"Subtracting",permalink:"/previews/ligo/modules/docs/1.6.0/numbers/subtracting"}},l={},c=[],d=(p="Syntax",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var p;const u={toc:c};function m(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Addition in LIGO is accomplished by means of the ",(0,i.kt)("inlineCode",{parentName:"p"},"+")," binary operator,\nwhich is overloaded to apply to any combination of natural numbers and\nintegers, as shown in the following examples. Note that adding an\ninteger to a natural number produces an integer, because the compiler\ncannot determine, in general, whether the result would be always a\nnatural number for all inputs."),(0,i.kt)(d,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=additing",group:"additing"},"let a : int = 5 + 10    // int + int yields int\nlet b : nat = 5n + 10n  // nat + nat yields nat\nlet c : int = 5n + 10   // nat + int yields int\nlet d : int = 10 + 5n   // int + nat yields int\n// let error : nat = 5n + 10\n"))),(0,i.kt)(d,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=additing",group:"additing"},"const a : int = 5 + 10;    // int + int yields int\nconst b : nat = 5n + 10n;  // nat + nat yields nat\nconst c : int = 5n + 10;   // nat + int yields int\nconst d : int = 10 + 5n;   // int + nat yields int\n// const error : nat = 5n + 10;\n"))))}m.isMDXComponent=!0}}]);