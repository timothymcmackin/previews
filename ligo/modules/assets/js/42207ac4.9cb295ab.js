"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[32078],{48720:(e,t,n)=>{n.d(t,{D:()=>r.Z,Z:()=>s});var i=n(67294),r=n(75402);const s=function(e){return i.createElement(r.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:i.createElement(i.Fragment,null)}))}},99191:(e,t,n)=>{n.d(t,{Z:()=>u});var i=n(43164),r=n(67294),s=n(52263),a=n(48720),l=n(11506);function o(){return o=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},o.apply(this,arguments)}const{Prism:c}=n(43164);c.languages={...c.languages,cameligo:{...c.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:c.languages.typescript};const u=function(e){const{siteConfig:{themeConfig:{prism:t={}}}}=(0,s.Z)(),n=t.singleTheme||l.Z,[c,u]=(0,r.useState)(!1);return(0,r.useEffect)((()=>{u(!0)}),[]),r.createElement(a.D.Consumer,null,(t=>{let{syntax:s}=t;return s===e.syntax?r.createElement(i.default,o({},i.defaultProps,{key:c,language:e.syntax,code:e.children,theme:n}),(e=>{let{className:t,tokens:n,getLineProps:i,getTokenProps:s}=e;return r.createElement("h4",{className:t,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((e,t)=>r.createElement("div",i({line:e,key:t}),e.map(((e,t)=>r.createElement("span",s({token:e,key:t}))))))))})):r.createElement("div",null)}))}},32995:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var i=n(87462),r=(n(67294),n(3905)),s=(n(48720),n(99191));const a={id:"test.next.io-reference",title:"io",hide_table_of_contents:!0},l=void 0,o={unversionedId:"reference/test.next.io-reference",id:"version-1.6.0/reference/test.next.io-reference",title:"io",description:"val print : string -&gt; unit",source:"@site/versioned_docs/version-1.6.0/reference/test.next.io.md",sourceDirName:"reference",slug:"/reference/test.next.io-reference",permalink:"/previews/ligo/modules/docs/1.6.0/reference/test.next.io-reference",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"test.next.io-reference",title:"io",hide_table_of_contents:!0},sidebar:"API",previous:{title:"next",permalink:"/previews/ligo/modules/docs/1.6.0/reference/test.next-reference"},next:{title:"string",permalink:"/previews/ligo/modules/docs/1.6.0/reference/test.next.string-reference"}},c={},u=[],g={toc:u};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val print : string -> unit"),(0,r.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let print: (_: string) => unit"),"Prints an string to stdout.",(0,r.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val println : string -> unit"),(0,r.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let println: (_: string) => unit"),"Prints an string to stdout, ended with a newline.",(0,r.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val eprint : string -> unit"),(0,r.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let eprint: (_: string) => unit"),"Prints an string to stderr.",(0,r.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val eprintln : string -> unit"),(0,r.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let eprintln: (_: string) => unit"),"Prints an string to stderr, ended with a newline.",(0,r.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val log : 'a.'a -> unit"),(0,r.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let log: <a>(_: a) => unit"),"Logs a value.",(0,r.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val set_test_print : unit -> unit"),(0,r.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let set_test_print: (_: unit) => unit"),"Turns on the printing of `test` prefixed values at the end of tests. This is the default behaviour.",(0,r.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val unset_test_print : unit -> unit"),(0,r.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let unset_test_print: (_: unit) => unit"),"Turns off the printing of `test` prefixed values at the end of tests.")}p.isMDXComponent=!0}}]);