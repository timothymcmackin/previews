"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[38794],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),l=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=l(e.components);return i.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=l(t),m=a,v=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return t?i.createElement(v,r(r({ref:n},c),{},{components:t})):i.createElement(v,r({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=d;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,r[1]=p;for(var l=2;l<o;l++)r[l]=t[l];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},48720:(e,n,t)=>{t.d(n,{D:()=>a.Z,Z:()=>o});var i=t(67294),a=t(75402);const o=function(e){return i.createElement(a.Z.Consumer,null,(n=>{let{syntax:t}=n;return t===e.syntax?e.children:i.createElement(i.Fragment,null)}))}},18525:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>p,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var i=t(87462),a=(t(67294),t(3905)),o=t(48720);const r={id:"options",title:"Options"},p=void 0,s={unversionedId:"variants/options",id:"version-1.5.0/variants/options",title:"Options",description:"The option type is a parametric, predefined variant type that is",source:"@site/versioned_docs/version-1.5.0/variants/options.md",sourceDirName:"variants",slug:"/variants/options",permalink:"/previews/ligo/modules/docs/1.5.0/variants/options",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"options",title:"Options"},sidebar:"docs",previous:{title:"Variants",permalink:"/previews/ligo/modules/docs/1.5.0/variants/"},next:{title:"Matching",permalink:"/previews/ligo/modules/docs/1.5.0/variants/matching"}},l={},c=[{value:"Euclidean Division",id:"euclidean-division",level:2},{value:"Checking positivity",id:"checking-positivity",level:2}],u={toc:c};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"option")," type is a parametric, predefined variant type that is\nused to express whether there is a value of some type or none. This is\nespecially useful when calling a ",(0,a.kt)("em",{parentName:"p"},"partial function"),", that is, a\nfunction that is not defined for some inputs. In that case, the value\nof the ",(0,a.kt)("inlineCode",{parentName:"p"},"option")," type would be ",(0,a.kt)("inlineCode",{parentName:"p"},"None"),", otherwise ",(0,a.kt)("inlineCode",{parentName:"p"},"Some (v)"),", where ",(0,a.kt)("inlineCode",{parentName:"p"},"v"),"\nis some meaningful value ",(0,a.kt)("em",{parentName:"p"},"of any type"),". A typical example from\narithmetics is the division:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=options",group:"options"},"let div (a, b : nat * nat) : nat option =\n  if b = 0n then None else Some (a/b)\n")),(0,a.kt)("p",null,"Note: See the predefined\n",(0,a.kt)("a",{parentName:"p",href:"../reference/option-reference/?lang=cameligo"},"module Option"))),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"option")," type is a parametric, predefined variant type that is\nused to express whether there is a value of some type or none. This is\nespecially useful when calling a ",(0,a.kt)("em",{parentName:"p"},"partial function"),", that is, a\nfunction that is not defined for some inputs. In that case, the value\nof the ",(0,a.kt)("inlineCode",{parentName:"p"},"option")," type would be ",(0,a.kt)("inlineCode",{parentName:"p"},"None()"),", otherwise ",(0,a.kt)("inlineCode",{parentName:"p"},"Some(v)"),", where ",(0,a.kt)("inlineCode",{parentName:"p"},"v"),"\nis some meaningful value ",(0,a.kt)("em",{parentName:"p"},"of any type"),". A typical example from\narithmetics is the division:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=options",group:"options"},"function div (a: nat, b: nat): option<nat> {\n  if (b == 0n) return None() else return Some(a/b)\n};\n")),(0,a.kt)("p",null,"Note: See the predefined\n",(0,a.kt)("a",{parentName:"p",href:"../reference/option-reference/?lang=jsligo"},"namespace Option"))),(0,a.kt)("h2",{id:"euclidean-division"},"Euclidean Division"),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"For cases when you need both the quotient and the remainder, LIGO\nprovides the ",(0,a.kt)("inlineCode",{parentName:"p"},"ediv")," operation. ",(0,a.kt)("inlineCode",{parentName:"p"},"ediv x y")," returns ",(0,a.kt)("inlineCode",{parentName:"p"},"Some (quotient,\nremainder)"),", unless ",(0,a.kt)("inlineCode",{parentName:"p"},"y")," is zero, in which case it returns ",(0,a.kt)("inlineCode",{parentName:"p"},"None"),". The\nfunction ",(0,a.kt)("inlineCode",{parentName:"p"},"ediv")," is overloaded to accept all the combinations (4) of\nnatural and integer numbers:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=options_euclidean",group:"options_euclidean"},"// All below equal Some (7,2)\nlet ediv1 : (int * nat) option = ediv 37  5\nlet ediv2 : (int * nat) option = ediv 37n 5\nlet ediv3 : (nat * nat) option = ediv 37n 5n\nlet ediv4 : (int * nat) option = ediv 37  5n\n"))),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"For cases when you need both the quotient and the remainder, LIGO\nprovides the ",(0,a.kt)("inlineCode",{parentName:"p"},"ediv")," operation. ",(0,a.kt)("inlineCode",{parentName:"p"},"ediv(x,y)")," returns ",(0,a.kt)("inlineCode",{parentName:"p"},"Some (quotient,\nremainder)"),", unless ",(0,a.kt)("inlineCode",{parentName:"p"},"y")," is zero, in which case it returns ",(0,a.kt)("inlineCode",{parentName:"p"},"None"),". The\nfunction ",(0,a.kt)("inlineCode",{parentName:"p"},"ediv")," is overloaded to accept all the combinations (4) of\nnatural and integer numbers:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=options_euclidean",group:"options_euclidean"},"// All below equal Some (7,2)\nconst ediv1: option<[int, nat]> = ediv(37,  5);\nconst ediv2: option<[int, nat]> = ediv(37n, 5);\nconst ediv3: option<[nat, nat]> = ediv(37n, 5n);\nconst ediv4: option<[int, nat]> = ediv(37,  5n);\n"))),(0,a.kt)("h2",{id:"checking-positivity"},"Checking positivity"),(0,a.kt)("p",null,"You can check if a value is a natural number (",(0,a.kt)("inlineCode",{parentName:"p"},"nat"),") by using a\npredefined cast function which accepts an integer (",(0,a.kt)("inlineCode",{parentName:"p"},"int"),") and returns\nan optional natural number (",(0,a.kt)("inlineCode",{parentName:"p"},"nat"),"): if the result is ",(0,a.kt)("inlineCode",{parentName:"p"},"None"),", then the\ngiven integer was positive, otherwise the corresponding natural number\n",(0,a.kt)("inlineCode",{parentName:"p"},"n")," is given with ",(0,a.kt)("inlineCode",{parentName:"p"},"Some(n)"),"."),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=options_positive",group:"options_positive"},"let one_is_nat : nat option = is_nat (1)\n"))),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=options_positive",group:"options_positive"},"const one_is_nat : option<nat> = is_nat(1);\n"))))}d.isMDXComponent=!0}}]);