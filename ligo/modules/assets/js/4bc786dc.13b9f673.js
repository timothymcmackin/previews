"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7945],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,h=u["".concat(c,".").concat(m)]||u[m]||p[m]||s;return n?r.createElement(h,o(o({ref:t},d),{},{components:n})):r.createElement(h,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>s});var r=n(67294),a=n(75402);const s=function(e){return r.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},76556:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var r=n(87462),a=(n(67294),n(3905)),s=n(48720);const o={id:"contract-address",title:"Contract addresses"},i=void 0,c={unversionedId:"tezos/contracts/contract-address",id:"version-1.7.0/tezos/contracts/contract-address",title:"Contract addresses",description:"In most cases, contracts have addresses that start with KT1.",source:"@site/versioned_docs/version-1.7.0/tezos/contracts/contract-address.md",sourceDirName:"tezos/contracts",slug:"/tezos/contracts/contract-address",permalink:"/previews/ligo/modules/docs/tezos/contracts/contract-address",draft:!1,tags:[],version:"1.7.0",frontMatter:{id:"contract-address",title:"Contract addresses"},sidebar:"docs",previous:{title:"Contracts",permalink:"/previews/ligo/modules/docs/tezos/contracts/"},next:{title:"Contract of module/namespace",permalink:"/previews/ligo/modules/docs/tezos/contracts/contract_of"}},l={},d=[{value:"Self",id:"self",level:3},{value:"Self-Address",id:"self-address",level:3},{value:"Sender",id:"sender",level:3},{value:"Source",id:"source",level:3}],p={toc:d};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In most cases, contracts have addresses that start with ",(0,a.kt)("inlineCode",{parentName:"p"},"KT1"),".\nHowever, they can also be tied to an implicit account and have an address that starts with ",(0,a.kt)("inlineCode",{parentName:"p"},"kt1"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"kt2")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"kt3"),", ",(0,a.kt)("a",{parentName:"p",href:"https://tezos.gitlab.io/michelson-reference/#type-address"},"depending on the hashing function"),"."),(0,a.kt)("p",null,"For information about the type that represents contracts in code, see ",(0,a.kt)("a",{parentName:"p",href:"../contracts"},"Contracts"),"."),(0,a.kt)("h3",{id:"self"},"Self"),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Tezos.self entrypoint")," is the address of the current smart\ncontract, that is, the smart contract containing the call. For the\naddress of the smart contract actually ",(0,a.kt)("em",{parentName:"p"},"executing")," the call, because\nit is embedded in a lambda sent to another smart contract, use\n",(0,a.kt)("inlineCode",{parentName:"p"},"Tezos.get_self_address")," instead. The string ",(0,a.kt)("inlineCode",{parentName:"p"},"entrypoint")," is the name\nof a valid entrypoint such that ",(0,a.kt)("inlineCode",{parentName:"p"},"entrypoint")," is not ",(0,a.kt)("inlineCode",{parentName:"p"},'"%default"'),", or\nthe empty string denoting the ",(0,a.kt)("inlineCode",{parentName:"p"},'"%default"')," entrypoint (which is the\nroot of the smart contract parameter if no ",(0,a.kt)("inlineCode",{parentName:"p"},'"%default"')," entrypoint is\nexplicitly defined). If the contract does not have the specified\nentrypoint, the call results in an type checking error.")),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Tezos.self(entrypoint)")," is the address of the current smart\ncontract, that is, the smart contract containing the call. For the\naddress of the smart contract actually ",(0,a.kt)("em",{parentName:"p"},"executing")," the call, because\nit is embedded in a lambda sent to another smart contract, use\n",(0,a.kt)("inlineCode",{parentName:"p"},"Tezos.get_self_address")," instead. The string ",(0,a.kt)("inlineCode",{parentName:"p"},"entrypoint")," is the name\nof a valid entrypoint such that ",(0,a.kt)("inlineCode",{parentName:"p"},"entrypoint")," is not ",(0,a.kt)("inlineCode",{parentName:"p"},'"%default"'),", or\nthe empty string denoting the ",(0,a.kt)("inlineCode",{parentName:"p"},'"%default"')," entrypoint (which is the\nroot of the smart contract parameter if no ",(0,a.kt)("inlineCode",{parentName:"p"},'"%default"')," entrypoint is\nexplicitly defined). If the contract does not have the specified\nentrypoint, the call results in an type checking error.")),(0,a.kt)("p",null,"Naming convention: if you are using entrypoints, use ",(0,a.kt)("inlineCode",{parentName:"p"},'"%bar"')," to\ndenote the constructor ",(0,a.kt)("inlineCode",{parentName:"p"},'"Bar"')," of the parameter, in turn corresponding\nto the entrypoint function ",(0,a.kt)("inlineCode",{parentName:"p"},"bar"),". If you are not using entrypoints:\nuse ",(0,a.kt)("inlineCode",{parentName:"p"},'"%default"'),"."),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=self",group:"self"},'let check () = Tezos.self("%default")\n'))),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=self",group:"self"},'let check = () => Tezos.self("%default");\n'))),(0,a.kt)("h3",{id:"self-address"},"Self-Address"),(0,a.kt)("p",null,"Often you want to get the address of the contract being executed. You\ncan do it with ",(0,a.kt)("inlineCode",{parentName:"p"},"Tezos.get_self_address"),". When used inside a lambda,\nthat function returns the address of the contract ",(0,a.kt)("em",{parentName:"p"},"executing the\nlambda"),", which can be different from the address of the contract in\nwhich the call is written."),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=address",group:"address"},"let current_addr : address = Tezos.get_self_address ()\n"))),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=address",group:"address"},"const current_addr : address = Tezos.get_self_address();\n"))),(0,a.kt)("h3",{id:"sender"},"Sender"),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"sender")," is the address of the contract (that is, a smart contract\nor an implicit account) that initiated the current internal\ntransaction. Note that, if transactions have been chained, that\naddress could be different from the ",(0,a.kt)("em",{parentName:"p"},"source"),"."),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=sender",group:"sender"},"let sender : address = Tezos.get_sender ()\n"))),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=sender",group:"sender"},"const sender: address = Tezos.get_sender();\n"))),(0,a.kt)("h3",{id:"source"},"Source"),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"source")," is the address of the implicit account that initiated the\ncurrent transaction. If transactions have been chained, that address\nis different from the ",(0,a.kt)("em",{parentName:"p"},"sender"),"."),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=source",group:"source"},"let source : address = Tezos.get_source ()\n"))),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=source",group:"source"},"const source: address = Tezos.get_source();\n"))))}u.isMDXComponent=!0}}]);