"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[32749],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),m=c(t),g=i,d=m["".concat(l,".").concat(g)]||m[g]||u[g]||o;return t?r.createElement(d,s(s({ref:n},p),{},{components:t})):r.createElement(d,s({ref:n},p))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,s=new Array(o);s[0]=m;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:i,s[1]=a;for(var c=2;c<o;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},48720:(e,n,t)=>{t.d(n,{D:()=>i.Z,Z:()=>o});var r=t(67294),i=t(75402);const o=function(e){return r.createElement(i.Z.Consumer,null,(n=>{let{syntax:t}=n;return t===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},51278:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var r=t(87462),i=(t(67294),t(3905)),o=t(48720);const s={id:"asserting",title:"Asserting"},a=void 0,l={unversionedId:"imperative/asserting",id:"imperative/asserting",title:"Asserting",description:"Assertions can be used to ensure a certain condition is met when",source:"@site/../docs/imperative/asserting.md",sourceDirName:"imperative",slug:"/imperative/asserting",permalink:"/previews/ligo/external-link-icon/docs/next/imperative/asserting",draft:!1,tags:[],version:"current",frontMatter:{id:"asserting",title:"Asserting"},sidebar:"docs",previous:{title:"Looping",permalink:"/previews/ligo/external-link-icon/docs/next/imperative/looping"},next:{title:"The switch statement",permalink:"/previews/ligo/external-link-icon/docs/next/imperative/switches"}},c={},p=[],u={toc:p};function m(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Assertions can be used to ensure a certain condition is met when\nrunning a contract. The predefined function ",(0,i.kt)("inlineCode",{parentName:"p"},"Assert.assert")," is used to\ncheck whether a given a Boolean condition holds. The function\n",(0,i.kt)("inlineCode",{parentName:"p"},"Assert.some")," is used to check if an option value is not ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),". The\nfunction ",(0,i.kt)("inlineCode",{parentName:"p"},"assert_some_with_error")," is like ",(0,i.kt)("inlineCode",{parentName:"p"},"Assert.some")," but an error\nmessage can be given. Whenever the assertion fails, the contract will\nstop and an error will be left on the execution stack."),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=asserting",group:"asserting"},"let incr_if_true (b : bool) (n : int) : int =\n  let () = Assert.assert b in n+1\n\nlet incr_if_some (b : unit option) (n : int) : int =\n  let () = Assert.some b in n+1\n"))),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=asserting",group:"asserting"},"function incr_if_true (b: bool, n: int) : int {\n  Assert.assert(b);\n  return n+1;\n};\n\nfunction incr_if_some (b: option<unit>, n: int) : int {\n  Assert.some(b);\n  return n+1;\n};\n"))),(0,i.kt)("p",null,"You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"Assert.Error.assert")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Assert.Error.some")," to use a\ncustom error message."),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=assert_with_error",group:"assert_with_error"},'let incr_if_true (b : bool) (n : int) : int =\n  let () = Assert.Error.assert b "My custom error message."\n  in n+1\n'))),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=assert_with_error",group:"assert_with_error"},'const incr_if_true = (b: bool, n: int) : int => {\n  Assert.Error.assert (b, "My custom error message.");\n  return n+1;\n};\n'))),(0,i.kt)("p",null,"Likewise, we can check for ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"Some")," by using\n",(0,i.kt)("inlineCode",{parentName:"p"},"Assert.none")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Assert.Error.none"),"."))}m.isMDXComponent=!0}}]);