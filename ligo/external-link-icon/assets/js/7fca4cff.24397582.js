"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[66108],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),s=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=s(t),g=r,h=m["".concat(l,".").concat(g)]||m[g]||u[g]||i;return t?a.createElement(h,o(o({ref:n},p),{},{components:t})):a.createElement(h,o({ref:n},p))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=m;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var s=2;s<i;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},48720:(e,n,t)=>{t.d(n,{D:()=>r.Z,Z:()=>i});var a=t(67294),r=t(75402);const i=function(e){return a.createElement(r.Z.Consumer,null,(n=>{let{syntax:t}=n;return t===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},29434:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=t(87462),r=(t(67294),t(3905)),i=t(48720);const o={id:"matching",title:"Matching"},c=void 0,l={unversionedId:"variants/matching",id:"version-1.6.0/variants/matching",title:"Matching",description:"Variant types being, in essence, the disjunctive union of cases akin",source:"@site/versioned_docs/version-1.6.0/variants/matching.md",sourceDirName:"variants",slug:"/variants/matching",permalink:"/previews/ligo/external-link-icon/docs/1.6.0/variants/matching",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"matching",title:"Matching"},sidebar:"docs",previous:{title:"Options",permalink:"/previews/ligo/external-link-icon/docs/1.6.0/variants/options"},next:{title:"Mutating",permalink:"/previews/ligo/external-link-icon/docs/1.6.0/imperative/mutating"}},s={},p=[],u={toc:p};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Variant types being, in essence, the disjunctive union of cases akin\nto types, values of such types need to be examined case by case: this\nis what ",(0,r.kt)("em",{parentName:"p"},"pattern matching")," does."),(0,r.kt)("p",null,"Here is a function that transforms a colour variant type to an integer."),(0,r.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=variant_matching",group:"variant_matching"},"type colour =\n  | RGB of int * int * int\n  | Gray of int\n  | Default\n\nlet int_of_colour (c : colour) : int =\n  match c with\n  | RGB (r,g,b) -> 16 + b + g * 6 + r * 36\n  | Gray i -> 232 + i\n  | Default -> 0\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: This is the same construct as in OCaml."))),(0,r.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=variant_matching",group:"variant_matching"},'type colour =\n| ["RGB", [int, int, int]]\n| ["Gray", int]\n| ["Default"];\n\nconst int_of_colour = (c : colour) : int =>\n  match(c) {\n    when(RGB([r,g,b])): 16 + b + g * 6 + r * 36;\n    when(Gray(i)): 232 + i;\n    when(Default): 0;\n  };\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: The ",(0,r.kt)("inlineCode",{parentName:"p"},"when"),"-clauses must cover all the variants of the type\n",(0,r.kt)("inlineCode",{parentName:"p"},"colour"),". When the constructor has no argument, which is equivalent\nto having a ",(0,r.kt)("inlineCode",{parentName:"p"},"[]")," (unit) argument, it can be omitted, hence\n",(0,r.kt)("inlineCode",{parentName:"p"},"when(Default)")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"when(Default())"),".")),(0,r.kt)("p",null,"The right-hand sides of each ",(0,r.kt)("inlineCode",{parentName:"p"},"when"),"-clause is an expression. Sometimes\nwe might need statements to be processed before a value is given to\nthe clause. In that case, the ",(0,r.kt)("inlineCode",{parentName:"p"},"do")," expression comes handy. It enables\nthe opening of a block of statements like a function body, that is, a\nblock ended with a ",(0,r.kt)("inlineCode",{parentName:"p"},"return")," statement whose argument has the value of\nthe block, like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=match_with_block",group:"match_with_block"},"function match_with_block (x : option<int>) : int {\n  return\n    match(x) {\n      when(None): 0;\n      when(Some(n)): do {\n        let y = n + 1;\n        return y\n      }\n    };\n};\n"))),(0,r.kt)("p",null,"Another example is matching on whether an integer is a natural number\nor not:"),(0,r.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=nat_matching",group:"nat_matching"},"let is_it_a_nat (i : int) =\n  match is_nat i with\n    None   -> false\n  | Some _ -> true\n"))),(0,r.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=nat_matching",group:"nat_matching"},"const is_it_a_nat = (i : int) =>\n  match (is_nat(i)) {\n    when(None): false;\n    when(Some(n)): do {ignore(n); return true; }\n  }\n"))))}m.isMDXComponent=!0}}]);