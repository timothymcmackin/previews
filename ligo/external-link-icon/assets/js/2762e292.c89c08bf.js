"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[38578],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),d=c(r),f=o,m=d["".concat(p,".").concat(f)]||d[f]||u[f]||i;return r?n.createElement(m,s(s({ref:t},l),{},{components:r})):n.createElement(m,s({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,s=new Array(i);s[0]=d;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var c=2;c<i;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},48720:(e,t,r)=>{r.d(t,{D:()=>o.Z,Z:()=>i});var n=r(67294),o=r(75402);const i=function(e){return n.createElement(o.Z.Consumer,null,(t=>{let{syntax:r}=t;return r===e.syntax?e.children:n.createElement(n.Fragment,null)}))}},59605:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var n=r(87462),o=(r(67294),r(3905));r(48720);const i={id:"strings",title:"Strings"},s=void 0,a={unversionedId:"preprocessor/strings",id:"version-1.6.0/preprocessor/strings",title:"Strings",description:"Strings are recognised by the preprocessor, even in pieces of the",source:"@site/versioned_docs/version-1.6.0/preprocessor/strings.md",sourceDirName:"preprocessor",slug:"/preprocessor/strings",permalink:"/previews/ligo/external-link-icon/docs/1.6.0/preprocessor/strings",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"strings",title:"Strings"},sidebar:"docs",previous:{title:"Comments",permalink:"/previews/ligo/external-link-icon/docs/1.6.0/preprocessor/comments"},next:{title:"#if",permalink:"/previews/ligo/external-link-icon/docs/1.6.0/preprocessor/if"}},p={},c=[],l={toc:c};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Strings are recognised by the preprocessor, even in pieces of the\ninput that are not copied. (This last point is a difference between\n",(0,o.kt)("inlineCode",{parentName:"p"},"cpp")," and the ",(0,o.kt)("inlineCode",{parentName:"p"},"C#")," preprocessor.) The rationale for doing so when\ncopying the input is that we do not want the preprocessor to interpret\na directive that is actually in a string. This can happen if the\nsource code is that of a bootstrapped compiler, that is, a compiler\nfor its own language. Another scenario is that of a test: the source\ncode is actually printing what is happening."),(0,o.kt)("p",null,"When the processor is in skip mode, that is, the input is not copied,\nstrings are also recognised. This ensures that a string containing a\nconditional directive, for example ",(0,o.kt)("inlineCode",{parentName:"p"},"#endif"),", does not start to\ninteract with previous directives, like ",(0,o.kt)("inlineCode",{parentName:"p"},"#if"),", or raises an error when\nswitching from copy mode to skip mode. In other words, the\ninterpretation of strings should always be the same. For example, we\nwant the following input to be valid:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'#if true\n"#endif"\n#endif\n')))}u.isMDXComponent=!0}}]);