"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5639],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(r),d=o,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||l;return r?n.createElement(f,a(a({ref:t},u),{},{components:r})):n.createElement(f,a({ref:t},u))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=r.length,a=new Array(l);a[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var c=2;c<l;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},48720:(e,t,r)=>{r.d(t,{D:()=>o.Z,Z:()=>l});var n=r(67294),o=r(75402);const l=function(e){return n.createElement(o.Z.Consumer,null,(t=>{let{syntax:r}=t;return r===e.syntax?e.children:n.createElement(n.Fragment,null)}))}},67631:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var n=r(87462),o=(r(67294),r(3905)),l=r(48720);const a={id:"or",title:"Or"},i=void 0,s={unversionedId:"booleans/or",id:"version-1.5.0/booleans/or",title:"Or",description:'The logical disjunction ("or") is implemented by the binary operator',source:"@site/versioned_docs/version-1.5.0/booleans/or.md",sourceDirName:"booleans",slug:"/booleans/or",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/booleans/or",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"or",title:"Or"},sidebar:"docs",previous:{title:"Booleans",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/booleans/"},next:{title:"And",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/booleans/and"}},c={},u=[],p={toc:u};function m(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("p",null,'The logical disjunction ("or") is implemented by the binary operator\n',(0,o.kt)("inlineCode",{parentName:"p"},"||"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=disjunction",group:"disjunction"},"let or_1 : bool = false || true  // true\nlet or_2 : bool = false || false // false\nlet or_3 : bool = true  || true  // true\nlet or_4 : bool = true  || false // true\n")),(0,o.kt)("p",null,"Note that you can also use the keyword ",(0,o.kt)("inlineCode",{parentName:"p"},"or")," instead of the symbol ",(0,o.kt)("inlineCode",{parentName:"p"},"||"),"\n(as in OCaml):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=disjunction",group:"disjunction"},"let or_1 : bool = false or true  // true\nlet or_2 : bool = false or false // false\nlet or_3 : bool = true  or true  // true\nlet or_4 : bool = true  or false // true\n"))),(0,o.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("p",null,'The logical disjunction ("or") is implemented by the binary operator\n',(0,o.kt)("inlineCode",{parentName:"p"},"||"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=disjunction",group:"disjunction"},"const or_1 : bool = false || true;  // true\nconst or_2 : bool = false || false; // false\nconst or_3 : bool = true  || true;  // true\nconst or_4 : bool = true  || false; // true\n"))))}m.isMDXComponent=!0}}]);