"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[97651],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=i,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return t?r.createElement(g,o(o({ref:n},c),{},{components:t})):r.createElement(g,o({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var p=2;p<a;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},48720:(e,n,t)=>{t.d(n,{D:()=>i.Z,Z:()=>a});var r=t(67294),i=t(75402);const a=function(e){return r.createElement(i.Z.Consumer,null,(n=>{let{syntax:t}=n;return t===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},18635:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=t(87462),i=(t(67294),t(3905)),a=t(48720);const o={id:"extending",title:"Extending"},s=void 0,l={unversionedId:"signatures/extending",id:"version-1.5.0/signatures/extending",title:"Extending",description:"Like modules, signatures can be extended by including another.",source:"@site/versioned_docs/version-1.5.0/signatures/extending.md",sourceDirName:"signatures",slug:"/signatures/extending",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/signatures/extending",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"extending",title:"Extending"},sidebar:"docs",previous:{title:"Declaring",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/signatures/declaring"},next:{title:"Switches",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/switches/"}},p={},c=[],d={toc:c};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(a.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"Like modules, signatures can be extended by including another."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=sig_including",group:"sig_including"},"module type Euro_SIG =\n  sig\n    type t\n    val add : t * t -> t\n    val one : t\n    val two : t\n  end\n\nmodule type NewEuro_SIG =\n  sig\n    include Euro_SIG\n    val ten : t\n  end\n")),(0,i.kt)("p",null,"Note how the type ",(0,i.kt)("inlineCode",{parentName:"p"},"t")," remains abstract in ",(0,i.kt)("inlineCode",{parentName:"p"},"NewEuro_SIG"),".")),(0,i.kt)(a.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"Unlike namespaces, interfaces can be ",(0,i.kt)("em",{parentName:"p"},"extended by inheritance"),". The\nconstruct is introduced by the keyword ",(0,i.kt)("inlineCode",{parentName:"p"},"extends"),", like so"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=intf_extending",group:"intf_extending"},"interface Euro_INTF {\n  type t;\n  const add: (a: t, b: t) => t;\n  const one: t;\n  const two: t;\n};\n\ninterface WithTenEuro_INTF extends Euro_INTF {\n  const ten: t;\n};\n\ninterface WithFiftyEuro_INTF extends Euro_INTF {\n  const fifty: t;\n};\n")),(0,i.kt)("p",null,"Note how the type ",(0,i.kt)("inlineCode",{parentName:"p"},"t")," remains abstract in ",(0,i.kt)("inlineCode",{parentName:"p"},"WithTenEuro_INTF")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"WithFiftyEuro_INTF"),"."),(0,i.kt)("p",null,"It is possible to design ",(0,i.kt)("em",{parentName:"p"},"diamond inheritance"),", that is, inheriting\ntwice the same base interface, like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=intf_extending",group:"intf_extending"},"interface NewEuro_INTF\n  extends WithTenEuro_INTF, WithFiftyEuro_INTF {\n  const hundred: t;\n  const five_hundred?: t;\n};\n")),(0,i.kt)("p",null,"Here, the abstract type ",(0,i.kt)("inlineCode",{parentName:"p"},"t")," was inherited twice from ",(0,i.kt)("inlineCode",{parentName:"p"},"Euro_INTF"),". Note\nthe ",(0,i.kt)("em",{parentName:"p"},"optional value")," ",(0,i.kt)("inlineCode",{parentName:"p"},"five_hundred"),", distinghished as such by a\nquestion mark: ",(0,i.kt)("inlineCode",{parentName:"p"},"five_hundred?"),". This means that a namespace\nimplementing ",(0,i.kt)("inlineCode",{parentName:"p"},"NewEuro_INTF")," can choose not to implement ",(0,i.kt)("inlineCode",{parentName:"p"},"five_hundred"),"\n(because it is often counterfeited). The implementation of an\ninterface can be done as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=intf_extending",group:"intf_extending"},"namespace NewEuro implements NewEuro_INTF {\n  export type t = int;\n\n  export const add = (a: t, b: t) => a + b;\n\n  export const one: t = 1;\n  export const two: t = 2;\n  export const ten: t = 10;\n  export const fifty: t = 50;\n  export const hundred: t = 100;\n  export const five_hundred: t = 500; // Could be omitted\n  const twenty: t = 20; // Extra new constant\n}\n")),(0,i.kt)("p",null,"Note how ",(0,i.kt)("inlineCode",{parentName:"p"},"five_hundred")," was indeed implemented, although it was not\nmandatory, and how we added ",(0,i.kt)("inlineCode",{parentName:"p"},"twenty"),", even it is not found in any of\nthe inherited signatures.")))}u.isMDXComponent=!0}}]);