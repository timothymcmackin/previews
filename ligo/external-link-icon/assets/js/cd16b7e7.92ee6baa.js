"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[21984],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),f=c(t),m=i,d=f["".concat(s,".").concat(m)]||f[m]||u[m]||o;return t?r.createElement(d,a(a({ref:n},p),{},{components:t})):r.createElement(d,a({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=f;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},48720:(e,n,t)=>{t.d(n,{D:()=>i.Z,Z:()=>o});var r=t(67294),i=t(75402);const o=function(e){return r.createElement(i.Z.Consumer,null,(n=>{let{syntax:t}=n;return t===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},47914:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>f,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=t(87462),i=(t(67294),t(3905)),o=t(48720);const a={id:"inline",title:"inline"},l=void 0,s={unversionedId:"reference/decorators/inline",id:"version-1.9.2/reference/decorators/inline",title:"inline",description:"The attribute [@inline] on a function definition informs the",source:"@site/versioned_docs/version-1.9.2/reference/decorators/inline.md",sourceDirName:"reference/decorators",slug:"/reference/decorators/inline",permalink:"/previews/ligo/external-link-icon/docs/reference/decorators/inline",draft:!1,tags:[],version:"1.9.2",frontMatter:{id:"inline",title:"inline"}},c={},p=[],u={toc:p};function f(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The attribute ",(0,i.kt)("inlineCode",{parentName:"p"},"[@inline]")," on a function definition informs the\ncompiler that the function must be inlined wherever it is called.\nThis enables some optimisations, possibly at the expense of a\nlarger compiled code. Benchmarks and profiling help decide whether\na function should be inlined or not."),(0,i.kt)("p",null,"For more information about inlining functions, see ",(0,i.kt)("a",{parentName:"p",href:"../../syntax/functions#inlining"},"Inlining"),"."),(0,i.kt)("p",null,"Inlining also makes it cheap to create aliases of functions. For\nexample:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=inline",group:"inline"},"[@inline]\nlet size (type elt) (list: elt List.t) : nat = List.length list\n"))),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The decorator ",(0,i.kt)("inlineCode",{parentName:"p"},"@inline")," on a function definition informs the\ncompiler that the function must be inlined wherever it is called.\nThis enables some optimisations, possibly at the expense of a\nlarger compiled code. Benchmarks and profiling help decide whether\na function should be inlined or not."),(0,i.kt)("p",null,"For more information about inlining functions, see ",(0,i.kt)("a",{parentName:"p",href:"../../syntax/functions#inlining"},"Inlining"),"."),(0,i.kt)("p",null,"Inlining also makes it cheap to create aliases of functions. For\nexample:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=inline",group:"inline"},"@inline\nconst size = <elt>(list: List.t<elt>) : nat => List.length(list);\n"))))}f.isMDXComponent=!0}}]);