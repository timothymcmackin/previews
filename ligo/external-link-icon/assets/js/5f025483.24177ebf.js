"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[40728],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>d});var n=t(67294);function l(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){l(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,l=function(e,a){if(null==e)return{};var t,n,l={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(l[t]=e[t]);return l}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var r=n.createContext({}),c=function(e){var a=n.useContext(r),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},p=function(e){var a=c(e.components);return n.createElement(r.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,l=e.mdxType,o=e.originalType,r=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(t),d=l,g=u["".concat(r,".").concat(d)]||u[d]||m[d]||o;return t?n.createElement(g,s(s({ref:a},p),{},{components:t})):n.createElement(g,s({ref:a},p))}));function d(e,a){var t=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var o=t.length,s=new Array(o);s[0]=u;var i={};for(var r in a)hasOwnProperty.call(a,r)&&(i[r]=a[r]);i.originalType=e,i.mdxType="string"==typeof e?e:l,s[1]=i;for(var c=2;c<o;c++)s[c]=t[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},48720:(e,a,t)=>{t.d(a,{D:()=>l.Z,Z:()=>o});var n=t(67294),l=t(75402);const o=function(e){return n.createElement(l.Z.Consumer,null,(a=>{let{syntax:t}=a;return t===e.syntax?e.children:n.createElement(n.Fragment,null)}))}},78170:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>p});var n=t(87462),l=(t(67294),t(3905)),o=t(48720);const s={id:"boolean-if-else",title:"Booleans and Conditionals"},i=void 0,r={unversionedId:"language-basics/boolean-if-else",id:"version-1.9.2/language-basics/boolean-if-else",title:"Booleans and Conditionals",description:"Booleans",source:"@site/versioned_docs/version-1.9.2/language-basics/boolean-if-else.md",sourceDirName:"language-basics",slug:"/language-basics/boolean-if-else",permalink:"/previews/ligo/external-link-icon/docs/language-basics/boolean-if-else",draft:!1,tags:[],version:"1.9.2",frontMatter:{id:"boolean-if-else",title:"Booleans and Conditionals"}},c={},p=[{value:"Booleans",id:"booleans",level:2},{value:"Comparing Values",id:"comparing-values",level:2},{value:"Comparing Strings",id:"comparing-strings",level:3},{value:"Comparing numbers",id:"comparing-numbers",level:3},{value:"Comparing bytes",id:"comparing-bytes",level:3},{value:"Comparing tez",id:"comparing-tez",level:3},{value:"Conditionals",id:"conditionals",level:2},{value:"Switch Statement",id:"switch-statement",level:2},{value:"Ternary conditional expression",id:"ternary-conditional-expression",level:3}],m={toc:p};function u(e){let{components:a,...t}=e;return(0,l.kt)("wrapper",(0,n.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"booleans"},"Booleans"),(0,l.kt)("p",null,"The type of a boolean value is ",(0,l.kt)("inlineCode",{parentName:"p"},"bool"),". Here is how to define a boolean\nvalue:"),(0,l.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=a",group:"a"},"let a : bool = true\nlet b : bool = false\n"))),(0,l.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=a",group:"a"},"const a = true;\nconst b = false;\n"))),(0,l.kt)("p",null,"Common operations:"),(0,l.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,l.kt)("div",{className:"boolean-example-table"},(0,l.kt)("div",{className:"operation"},"&&"),(0,l.kt)("div",{className:"description"},"Logical and"),(0,l.kt)("div",{className:"example"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cameligo"},"let logical_and: bool = true && true\n"))),(0,l.kt)("div",{className:"operation"},"||"),(0,l.kt)("div",{className:"description"},"Logical or"),(0,l.kt)("div",{className:"example"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cameligo"},"let logical_or: bool = false || true\n"))),(0,l.kt)("div",{className:"operation"},"not"),(0,l.kt)("div",{className:"description"},"Logical not"),(0,l.kt)("div",{className:"example"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cameligo"},"let logical_not: bool = not false\n"))),(0,l.kt)("div",{className:"operation"},"="),(0,l.kt)("div",{className:"description"},"Equals"),(0,l.kt)("div",{className:"example"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cameligo"},"let eq: bool = 2 = 3\n"))),(0,l.kt)("div",{className:"operation"},"<>"),(0,l.kt)("div",{className:"description"},"Not equals"),(0,l.kt)("div",{className:"example"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cameligo"},"let not_eq: bool = 2 <> 3\n"))),(0,l.kt)("div",{className:"operation"},">"),(0,l.kt)("div",{className:"description"},"Greater than"),(0,l.kt)("div",{className:"example"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cameligo"},"let gt: bool = 4 > 3\n"))),(0,l.kt)("div",{className:"operation"},"<"),(0,l.kt)("div",{className:"description"},"Less than"),(0,l.kt)("div",{className:"example"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cameligo"},"let lt: bool = 4 < 3\n"))),(0,l.kt)("div",{className:"operation"},">="),(0,l.kt)("div",{className:"description"},"Greater than or equal to"),(0,l.kt)("div",{className:"example"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cameligo"},"let gte: bool = 4 >= 3\n"))),(0,l.kt)("div",{className:"operation"},"<="),(0,l.kt)("div",{className:"description"},"Less than or equal to"),(0,l.kt)("div",{className:"example"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cameligo"},"let lte: bool = 4 <= 3\n"))))),(0,l.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,l.kt)("div",{className:"boolean-example-table"},(0,l.kt)("div",{className:"operation"},"&&"),(0,l.kt)("div",{className:"description"},"Logical and"),(0,l.kt)("div",{className:"example"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsligo"},"const logical_and = true && true;\n"))),(0,l.kt)("div",{className:"operation"},"||"),(0,l.kt)("div",{className:"description"},"Logical or"),(0,l.kt)("div",{className:"example"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsligo"},"const logical_or = false || true;\n"))),(0,l.kt)("div",{className:"operation"},"!"),(0,l.kt)("div",{className:"description"},"Logical not"),(0,l.kt)("div",{className:"example"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsligo"},"const logical_not = !false;\n"))),(0,l.kt)("div",{className:"operation"},"=="),(0,l.kt)("div",{className:"description"},"Equals"),(0,l.kt)("div",{className:"example"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsligo"},"const eq = 2 == 3;\n"))),(0,l.kt)("div",{className:"operation"},"!="),(0,l.kt)("div",{className:"description"},"Not equals"),(0,l.kt)("div",{className:"example"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsligo"},"const not_eq = 2 != 3;\n"))),(0,l.kt)("div",{className:"operation"},">"),(0,l.kt)("div",{className:"description"},"Greater than"),(0,l.kt)("div",{className:"example"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsligo"},"const gt = 4 > 3;\n"))),(0,l.kt)("div",{className:"operation"},"<"),(0,l.kt)("div",{className:"description"},"Less than"),(0,l.kt)("div",{className:"example"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsligo"},"const lt = 4 < 3;\n"))),(0,l.kt)("div",{className:"operation"},">="),(0,l.kt)("div",{className:"description"},"Greater than or equal to"),(0,l.kt)("div",{className:"example"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsligo"},"const gte = 4 >= 3;\n"))),(0,l.kt)("div",{className:"operation"},"<="),(0,l.kt)("div",{className:"description"},"Less than or equal to"),(0,l.kt)("div",{className:"example"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsligo"},"const lte = 4 <= 3;\n"))))),(0,l.kt)("h2",{id:"comparing-values"},"Comparing Values"),(0,l.kt)("p",null,"In LIGO, only values of the same type can be compared. Moreover, not\nall values of the same type can be compared, only those with\n",(0,l.kt)("em",{parentName:"p"},"comparable types"),", which is a concept lifted from\nMichelson. Comparable types include, for instance, ",(0,l.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"nat"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"bytes"),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"tez"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"timestamp"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"address"),", etc. As an example of\nnon-comparable types: maps, sets or lists are not comparable: if you\nwish to compare them, you will have to write your own comparison\nfunction."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Note: when running in test mode (this is, in the testing framework),\nfor developer convinence, more types are made comparable. Maps, sets\nand lists will be made comparable in case its elements are\ncomparable.")),(0,l.kt)("h3",{id:"comparing-strings"},"Comparing Strings"),(0,l.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=b",group:"b"},'let a : string = "Alice"\nlet b : string = "Alice"\nlet c : bool = (a = b) (* true *)\n'))),(0,l.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=b",group:"b"},'const a = "Alice";\nconst b = "Alice";\nconst c = (a == b); // true\n'))),(0,l.kt)("h3",{id:"comparing-numbers"},"Comparing numbers"),(0,l.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=c",group:"c"},"let a : int  = 5\nlet b : int  = 4\nlet c : bool = (a = b)\nlet d : bool = (a > b)\nlet e : bool = (a < b)\nlet f : bool = (a <= b)\nlet g : bool = (a >= b)\nlet h : bool = (a <> b)\n"))),(0,l.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=c",group:"c"},"const a  = 5;\nconst b  = 4;\nconst c = (a == b);\nconst d = (a > b);\nconst e = (a < b);\nconst f = (a <= b);\nconst g = (a >= b);\nconst h = (a != b);\n"))),(0,l.kt)("h3",{id:"comparing-bytes"},"Comparing bytes"),(0,l.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,l.kt)("p",null,"To check if the following operators have the expected result use\n",(0,l.kt)("inlineCode",{parentName:"p"},'ligo compile expression cameligo "a OP b"')),(0,l.kt)("p",null,"Usage:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=d",group:"d"},"let a : bytes  = 0x1001\nlet b : bytes  = 0x1000\nlet c : bool = (a = b)\nlet d : bool = (a > b)\nlet e : bool = (a < b)\nlet f : bool = (a <= b)\nlet g : bool = (a >= b)\nlet h : bool = (a <> b)\n"))),(0,l.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,l.kt)("p",null,"To check if the following operators have the expected result use\n",(0,l.kt)("inlineCode",{parentName:"p"},'ligo compile expression jsligo "a OP b"')),(0,l.kt)("p",null,"Usage:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=d",group:"d"},"const a = 0x1001;\nconst b = 0x1000;\nconst c = (a == b);\nconst d = (a > b);\nconst e = (a < b);\nconst f = (a <= b);\nconst g = (a >= b);\nconst h = (a != b);\n"))),(0,l.kt)("h3",{id:"comparing-tez"},"Comparing tez"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\ud83d\udca1 Comparing ",(0,l.kt)("inlineCode",{parentName:"p"},"tez")," values is especially useful when dealing with an\namount sent in a transaction.")),(0,l.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=e",group:"e"},"let a : tez  = 5mutez\nlet b : tez  = 10mutez\nlet c : bool = (a = b) // false\n"))),(0,l.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=e",group:"e"},"const a: tez  = 5mutez;\nconst b: tez  = 10mutez;\nconst c = (a == b); // false\n"))),(0,l.kt)("h2",{id:"conditionals"},"Conditionals"),(0,l.kt)("p",null,"Conditional logic enables forking the control flow depending on the\nstate."),(0,l.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=cond",group:"cond"},"type magnitude = Small | Large (* See variant types. *)\n\nlet compare (n : nat) : magnitude =\n  if n < 10n then Small else Large\n")),(0,l.kt)("p",null,"You can run the ",(0,l.kt)("inlineCode",{parentName:"p"},"compare")," function defined above using the LIGO compiler\nlike this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"ligo run evaluate-call gitlab-pages/docs/language-basics/src/boolean-if-else/cond.mligo compare '21n'\n# Outputs: Large\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Notice that, as in OCaml, in CameLIGO, if a conditional has a branch\n",(0,l.kt)("inlineCode",{parentName:"p"},"else ()"),", that branch can be omitted. The resulting so-called\n",(0,l.kt)("em",{parentName:"p"},"dangling else")," problem is parsed by associating any ",(0,l.kt)("inlineCode",{parentName:"p"},"else")," to the\nclosest previous ",(0,l.kt)("inlineCode",{parentName:"p"},"then"),"."))),(0,l.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=cond",group:"cond"},'type magnitude = ["Small"] | ["Large"]; // See variant types.\n\nconst compare = (n) => {\n  if (n < 10n) return Small() else return Large()\n};\n')),(0,l.kt)("p",null,"You can run the ",(0,l.kt)("inlineCode",{parentName:"p"},"compare")," function defined above using the LIGO compiler\nlike this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"ligo run evaluate-call gitlab-pages/docs/language-basics/src/boolean-if-else/cond.jsligo compare '21n'\n# Outputs: Large\n"))),(0,l.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,l.kt)("h2",{id:"switch-statement"},"Switch Statement"),(0,l.kt)("p",null,"JsLIGO also supports branching of control flow via the switch statement."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=switch",group:"switch"},'let quarter = n => {\n  let output = "";\n  switch (n) {\n    case 1:\n    case 2:\n    case 3:\n      output = "Q1";\n      break;\n    case 4:\n    case 5:\n    case 6:\n      output = "Q2";\n      break;\n    case 7:\n    case 8:\n    case 9:\n      output = "Q3";\n      break;\n    case 10:\n    case 11:\n    case 12:\n      output = "Q4";\n      break;\n    default:\n      output = "Invalid month."\n  };\n  return output;\n}\n')),(0,l.kt)("p",null,"The switch statement takes an expression and tries to find a ",(0,l.kt)("inlineCode",{parentName:"p"},"case")," which matches the switch expression,\nIf a matching ",(0,l.kt)("inlineCode",{parentName:"p"},"case")," is found, the statements of the matching case are executed untill a ",(0,l.kt)("inlineCode",{parentName:"p"},"break;")," statement.\nIf no ",(0,l.kt)("inlineCode",{parentName:"p"},"break")," is found the control falls through to the next ",(0,l.kt)("inlineCode",{parentName:"p"},"case")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"default"),". If no matching case is found\nthe statements of the ",(0,l.kt)("inlineCode",{parentName:"p"},"default")," case are executed."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"A few gotcha's about the switch statement"),(0,l.kt)("ol",{parentName:"blockquote"},(0,l.kt)("li",{parentName:"ol"},"A switch should have at-least one ",(0,l.kt)("inlineCode",{parentName:"li"},"case")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"default"),"."),(0,l.kt)("li",{parentName:"ol"},"If a ",(0,l.kt)("inlineCode",{parentName:"li"},"default")," case is provided, It should be the last case."),(0,l.kt)("li",{parentName:"ol"},"Conditional ",(0,l.kt)("inlineCode",{parentName:"li"},"break"),"'s are not supported i.e. ",(0,l.kt)("inlineCode",{parentName:"li"},"break")," inside a ",(0,l.kt)("inlineCode",{parentName:"li"},"if-then-else"),"."),(0,l.kt)("li",{parentName:"ol"},"In case of nested ",(0,l.kt)("inlineCode",{parentName:"li"},"switch")," statements, the inner ",(0,l.kt)("inlineCode",{parentName:"li"},"switch")," should not contain a ",(0,l.kt)("inlineCode",{parentName:"li"},"return"),"."))),(0,l.kt)("p",null,"You can run the ",(0,l.kt)("inlineCode",{parentName:"p"},"quarter")," function defined above using the LIGO compiler\nlike this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"ligo run evaluate-call  gitlab-pages/docs/language-basics/src/boolean-if-else/switch.jsligo quarter '5'\n# Outputs: \"Q2\"\n")),(0,l.kt)("h3",{id:"ternary-conditional-expression"},"Ternary conditional expression"),(0,l.kt)("p",null,"JsLIGO also supports JavaScript's ternary expression:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsligo"},"const ternary = a => a == 1 ? true : false;\n")),(0,l.kt)("p",null,"which can also be nested:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsligo"},'const ternary_nested = a =>\n  a == 1 ? "one"   :\n  a == 2 ? "two"   :\n  a == 3 ? "three" :\n           "other"\n'))))}u.isMDXComponent=!0}}]);