"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[52928],{3905:(e,t,n)=>{n.d(t,{Zo:()=>g,kt:()=>u});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},g=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,g=a(e,["components","mdxType","originalType","parentName"]),m=c(n),u=i,b=m["".concat(l,".").concat(u)]||m[u]||p[u]||o;return n?r.createElement(b,s(s({ref:t},g),{},{components:n})):r.createElement(b,s({ref:t},g))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=m;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:i,s[1]=a;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>i.Z,Z:()=>o});var r=n(67294),i=n(75402);const o=function(e){return r.createElement(i.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},64866:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>g});var r=n(87462),i=(n(67294),n(3905)),o=n(48720);const s={id:"removing",title:"Removing"},a=void 0,l={unversionedId:"tezos/big_sets/removing",id:"version-1.5.0/tezos/big_sets/removing",title:"Removing",description:"The function Big_set.remove creates a big set containing the",source:"@site/versioned_docs/version-1.5.0/tezos/big_sets/removing.md",sourceDirName:"tezos/big_sets",slug:"/tezos/big_sets/removing",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/tezos/big_sets/removing",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"removing",title:"Removing"},sidebar:"docs",previous:{title:"Adding",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/tezos/big_sets/adding"},next:{title:"Updating",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/tezos/big_sets/updating"}},c={},g=[],p={toc:g};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The function ",(0,i.kt)("inlineCode",{parentName:"p"},"Big_set.remove")," creates a big set containing the\nelements of a given big set, without a given element. If the element\nis not already present, the new big set is the same as the old one, as\nexpected."),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=big_set_removing",group:"big_set_removing"},"let my_big_set : int big_set = Big_set.literal [3; 2; 2; 1]\nlet new_big_set = Big_set.remove 3 my_big_set\nlet contains_3 = Big_set.mem 3 new_big_set // = false\n"))),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=set_removing",group:"set_removing"},"const my_big_set: big_set<int> = Big_set.literal(list([3, 2, 2, 1]));\nconst new_big_set = Big_set.remove(3, my_big_set);\nconst contains_3 = Big_set.mem(3, new_big_set); // == false\n"))))}m.isMDXComponent=!0}}]);