"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[82239],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),m=o,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||r;return t?a.createElement(g,i(i({ref:n},c),{},{components:t})):a.createElement(g,i({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},48720:(e,n,t)=>{t.d(n,{D:()=>o.Z,Z:()=>r});var a=t(67294),o=t(75402);const r=function(e){return a.createElement(o.Z.Consumer,null,(n=>{let{syntax:t}=n;return t===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},82576:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=t(87462),o=(t(67294),t(3905)),r=t(48720);const i={id:"accessing",title:"Accessing"},s=void 0,l={unversionedId:"modules/accessing",id:"version-1.5.0/modules/accessing",title:"Accessing",description:"We can access the components of a module by means of the selection",source:"@site/versioned_docs/version-1.5.0/modules/accessing.md",sourceDirName:"modules",slug:"/modules/accessing",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/modules/accessing",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"accessing",title:"Accessing"},sidebar:"docs",previous:{title:"Declaring",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/modules/declaring"},next:{title:"Nesting",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/modules/nesting"}},p={},c=[],u={toc:c};function d(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("p",null,'We can access the components of a module by means of the selection\noperator "',(0,o.kt)("inlineCode",{parentName:"p"},"."),'", as with records.'),(0,o.kt)("p",null,"Let us suppose that we keep an amount in euros using the previously\ndefined module ",(0,o.kt)("inlineCode",{parentName:"p"},"Euro"),". Then, we can write a ",(0,o.kt)("inlineCode",{parentName:"p"},"tip")," function outside\n",(0,o.kt)("inlineCode",{parentName:"p"},"Euro")," that increments a given amount each time it is called."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=Euro",group:"Euro"},"module Euro =\n  struct\n    type t = nat\n    let add (a, b : t * t) : t = a + b\n    let one : t = 1n\n    let two : t = 2n\n  end\n\ntype storage = Euro.t\n\nlet tip (s : storage) : storage =\n  Euro.add (s, Euro.one)\n")),(0,o.kt)("p",null,"In principle, we could change the implementation of ",(0,o.kt)("inlineCode",{parentName:"p"},"Euro"),", without\nhaving to change the ",(0,o.kt)("inlineCode",{parentName:"p"},"storage")," type or the function ",(0,o.kt)("inlineCode",{parentName:"p"},"tip"),". For\nexample, if we decide later that we should support manipulating\nnegative values, we could change ",(0,o.kt)("inlineCode",{parentName:"p"},"Euro")," as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=module_accessing",group:"module_accessing"},"module Euro =\n  struct\n    type t = int\n    let add (a, b : t * t) : t = a + b\n    let one : t = 1\n    let two : t = 2\n  end\n")),(0,o.kt)("p",null,"The code of ",(0,o.kt)("inlineCode",{parentName:"p"},"tip")," still works, and no change is needed. Abstraction\naccomplished!"),(0,o.kt)("p",null,"Note that code using the module ",(0,o.kt)("inlineCode",{parentName:"p"},"Euro")," might still break the\nabstraction if it directly uses the underlying representation of\n",(0,o.kt)("inlineCode",{parentName:"p"},"Euro.t"),". Client code should always try to respect the interface\nprovided by the module, and not make assumptions on its current\nunderlying representation. For example, ",(0,o.kt)("inlineCode",{parentName:"p"},"Euro.t")," is a transparent\nalias of ",(0,o.kt)("inlineCode",{parentName:"p"},"nat")," (or ",(0,o.kt)("inlineCode",{parentName:"p"},"int"),"). In order to hide the representation of a\ntype in a module, we need to constrain the module with a module type,\nor ",(0,o.kt)("a",{parentName:"p",href:"/previews/ligo/external-link-icon/docs/1.5.0/signatures/declaring"},(0,o.kt)("em",{parentName:"a"},"signature")),".")),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("p",null,'We can access the components of a namespace by means of the selection\noperator "',(0,o.kt)("inlineCode",{parentName:"p"},"."),'", as with records.'),(0,o.kt)("p",null,"Let us suppose that we keep an amount in euros using the previously\ndefined namespace ",(0,o.kt)("inlineCode",{parentName:"p"},"Euro"),". Then, we can write a ",(0,o.kt)("inlineCode",{parentName:"p"},"tip")," function outside\n",(0,o.kt)("inlineCode",{parentName:"p"},"Euro")," that increments a given amount each time it is called."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=Euro",group:"Euro"},"namespace Euro {\n  export type t = nat;\n  export const add = (a: t, b: t) : t => a + b;\n  export const one: t = 1n;\n  export const two: t = 2n;\n};\n\ntype storage = Euro.t;\n\nconst tip = (s : storage) : storage =>\n  Euro.add (s, Euro.one);\n")),(0,o.kt)("p",null,"In principle, we could change the implementation of ",(0,o.kt)("inlineCode",{parentName:"p"},"Euro"),", without\nhaving to change the ",(0,o.kt)("inlineCode",{parentName:"p"},"storage")," type or the function ",(0,o.kt)("inlineCode",{parentName:"p"},"tip"),". For\nexample, if we decide later that we should support manipulating\nnegative values, we could change ",(0,o.kt)("inlineCode",{parentName:"p"},"Euro")," as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=module_accessing",group:"module_accessing"},"namespace Euro {\n  export type t = int;\n  export const add = (a: t, b: t) : t => a + b;\n  export const one: t = 1;\n  export const two: t = 2;\n};\n")),(0,o.kt)("p",null,"The code of ",(0,o.kt)("inlineCode",{parentName:"p"},"tip")," still works, and no change is needed. Abstraction\naccomplished!"),(0,o.kt)("p",null,"Note that code using the namespace ",(0,o.kt)("inlineCode",{parentName:"p"},"Euro")," might still break the\nabstraction if it directly uses the underlying representation of\n",(0,o.kt)("inlineCode",{parentName:"p"},"Euro.t"),". Client code should always try to respect the interface\nprovided by the namespace, and not make assumptions on its current\nunderlying representation. For example, ",(0,o.kt)("inlineCode",{parentName:"p"},"Euro.t")," is a transparent\nalias of ",(0,o.kt)("inlineCode",{parentName:"p"},"nat")," (or ",(0,o.kt)("inlineCode",{parentName:"p"},"int"),"). In order to hide the representation of a\ntype in a namespace, we need to constrain the namesapce with an\n",(0,o.kt)("a",{parentName:"p",href:"/previews/ligo/external-link-icon/docs/1.5.0/signatures/declaring"},(0,o.kt)("em",{parentName:"a"},"interface")),".")))}d.isMDXComponent=!0}}]);