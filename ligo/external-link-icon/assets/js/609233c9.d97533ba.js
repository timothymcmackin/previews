"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[58057],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=o.createContext({}),l=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=l(e.components);return o.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,c=m(e,["components","mdxType","originalType","parentName"]),u=l(n),g=r,d=u["".concat(i,".").concat(g)]||u[g]||p[g]||a;return n?o.createElement(d,s(s({ref:t},c),{},{components:n})):o.createElement(d,s({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=u;var m={};for(var i in t)hasOwnProperty.call(t,i)&&(m[i]=t[i]);m.originalType=e,m.mdxType="string"==typeof e?e:r,s[1]=m;for(var l=2;l<a;l++)s[l]=n[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>r.Z,Z:()=>a});var o=n(67294),r=n(75402);const a=function(e){return o.createElement(r.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:o.createElement(o.Fragment,null)}))}},25105:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>m,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var o=n(87462),r=(n(67294),n(3905)),a=n(48720);const s={id:"comments",title:"Comments"},m=void 0,i={unversionedId:"syntax/comments",id:"version-1.9.2/syntax/comments",title:"Comments",description:"CameLIGO multi-line comments work in a way similar to OCaml comments:",source:"@site/versioned_docs/version-1.9.2/syntax/comments.md",sourceDirName:"syntax",slug:"/syntax/comments",permalink:"/previews/ligo/external-link-icon/docs/syntax/comments",draft:!1,tags:[],version:"1.9.2",frontMatter:{id:"comments",title:"Comments"},sidebar:"docs",previous:{title:"Start a project from a template",permalink:"/previews/ligo/external-link-icon/docs/tutorials/start-a-project-from-a-template"},next:{title:"Variables and constants",permalink:"/previews/ligo/external-link-icon/docs/syntax/variables"}},l={},c=[],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(a.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("p",null,"CameLIGO multi-line comments work in a way similar to OCaml comments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=comments",group:"comments"},"(*\n  This is a comment.\n*)\n")),(0,r.kt)("p",null,"CameLIGO comments can be nested as long as each comment is properly closed.\nNesting comments like this allows you to comment out a large piece of code that may include other comments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=comments",group:"comments"},'(* This is a multi-line comment.\n  (* This is a "nested" comment. *)\n*)\n'))),(0,r.kt)(a.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("p",null,"JsLIGO multi-line comments work in a way similar to JavaScript comments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=comments",group:"comments"},"/*\n  This is a multi-line comment\n*/\n")),(0,r.kt)("p",null,"Unlike in JavaScript, JsLIGO comments can be nested as long as each comment is properly closed.\nNesting comments like this allows you to comment out a large piece of code that may include other comments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=comments",group:"comments"},'/* This is a multi-line comment.\n  /* This is a "nested" comment. */\n*/\n'))),(0,r.kt)("p",null,"Both LIGO syntaxes also use single-line comments like JavaScript.\nAny code between two slashes (",(0,r.kt)("inlineCode",{parentName:"p"},"//"),") and the end of the current line is treated as a comment."),(0,r.kt)(a.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=comments",group:"comments"},"let x = 10 // This is a single line comment\n"))),(0,r.kt)(a.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=comments",group:"comments"},"const x = 10; // This is a single line comment\n"))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Comments can contain UTF-8 glyphs.\nAlthough comments are not included in the generated Michelson code, UTF-8 glyphs may affect error messages and other compiler messages.\nDepending on how your editor handles these characters, the lines and columns in compiler messages may not line up with the lines and columns in your editor.")))}u.isMDXComponent=!0}}]);