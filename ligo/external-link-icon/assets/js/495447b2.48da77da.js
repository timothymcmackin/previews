"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[33506],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>y});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(t),y=i,d=m["".concat(s,".").concat(y)]||m[y]||u[y]||l;return t?r.createElement(d,a(a({ref:n},p),{},{components:t})):r.createElement(d,a({ref:n},p))}));function y(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,a=new Array(l);a[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var c=2;c<l;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},48720:(e,n,t)=>{t.d(n,{D:()=>i.Z,Z:()=>l});var r=t(67294),i=t(75402);const l=function(e){return r.createElement(i.Z.Consumer,null,(n=>{let{syntax:t}=n;return t===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},94760:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=t(87462),i=(t(67294),t(3905)),l=t(48720);const a={id:"multiplying",title:"Multiplying"},o=void 0,s={unversionedId:"numbers/multiplying",id:"version-1.5.0/numbers/multiplying",title:"Multiplying",description:"Multiplication in LIGO is accomplished by means of the * binary",source:"@site/versioned_docs/version-1.5.0/numbers/multiplying.md",sourceDirName:"numbers",slug:"/numbers/multiplying",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/numbers/multiplying",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"multiplying",title:"Multiplying"},sidebar:"docs",previous:{title:"Negating",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/numbers/negating"},next:{title:"Dividing",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/numbers/dividing"}},c={},p=[],u={toc:p};function m(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Multiplication in LIGO is accomplished by means of the ",(0,i.kt)("inlineCode",{parentName:"p"},"*")," binary\noperator which is overloaded to apply to any combination of natural\nnumbers and integers, as shown in the following examples. The type\nrules for multiplication are the same as for the addition:"),(0,i.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=multiplying",group:"multiplying"},"let a : int = 5 * 10   // int * int yields int\nlet b : nat = 5n * 2n  // nat * nat yields nat\nlet c : int = 10n * 5  // nat * int yields int\nlet d : int = 5 * 10n  // int * nat yields int\n"))),(0,i.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=multiplying",group:"multiplying"},"const a : int = 5 * 10;   // int * int yields int\nconst b : nat = 5n * 2n;  // nat * nat yields nat\nconst c : int = 10n * 5;  // nat * int yields int\nconst d : int = 5 * 10n;  // int * nat yields int\n"))))}m.isMDXComponent=!0}}]);