"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[77552],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),y=r,d=u["".concat(p,".").concat(y)]||u[y]||m[y]||i;return n?a.createElement(d,o(o({ref:t},c),{},{components:n})):a.createElement(d,o({ref:t},c))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>r.Z,Z:()=>i});var a=n(67294),r=n(75402);const i=function(e){return a.createElement(r.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},87565:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var a=n(87462),r=(n(67294),n(3905)),i=n(48720);n(39960);const o={id:"polymorphism",title:"Polymorphism"},l=void 0,p={unversionedId:"advanced/polymorphism",id:"version-1.6.0/advanced/polymorphism",title:"Polymorphism",description:"LIGO supports simple polymorphism when introducing declarations. This",source:"@site/versioned_docs/version-1.6.0/advanced/polymorphism.md",sourceDirName:"advanced",slug:"/advanced/polymorphism",permalink:"/previews/ligo/external-link-icon/docs/1.6.0/advanced/polymorphism",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"polymorphism",title:"Polymorphism"}},s={},c=[{value:"The identity function",id:"the-identity-function",level:2},{value:"Polymorphism with parametric types",id:"polymorphism-with-parametric-types",level:2}],m={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"LIGO supports simple polymorphism when introducing declarations. This\nallows to write functions parametric on a type that can be later\ninstantiated to concrete types."),(0,r.kt)("h2",{id:"the-identity-function"},"The identity function"),(0,r.kt)("p",null,"For any given type ",(0,r.kt)("inlineCode",{parentName:"p"},"t"),", there is a canonical function of type ",(0,r.kt)("inlineCode",{parentName:"p"},"t -> t"),"\n(function from ",(0,r.kt)("inlineCode",{parentName:"p"},"t")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"t"),"): it takes an argument, and returns it\nimmediately. For instance, we can write the identity function for\n",(0,r.kt)("inlineCode",{parentName:"p"},"int")," as follows:"),(0,r.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=mono",group:"mono"},"let id (x : int) = x\n"))),(0,r.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=mono",group:"mono"},"const id = (x: int): int => x;\n"))),(0,r.kt)("p",null,"However, if we would want to use the same function on a different\ntype, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"nat"),", we will need to write a new definition:"),(0,r.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=mono",group:"mono"},"let idnat (x : nat) = x\n"))),(0,r.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=mono",group:"mono"},"const idnat = (x : nat): nat => x;\n"))),(0,r.kt)("p",null,"If we read carefully, we see that there is almost no difference\nbetween ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"idnat"),": it is just the type that changes, but for\nthe rest, the body of the function remains the same."),(0,r.kt)("p",null,"Thanks to parametric polymorphism, we can write a single function\ndeclaration that works for both cases."),(0,r.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=poly",group:"poly"},"let id (type a) (x : a) : a = x\n")),(0,r.kt)("p",null,"Here we introduce a type variable ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," which can be generalised using\n",(0,r.kt)("inlineCode",{parentName:"p"},"(type a)")," after the function name in the declaration.")),(0,r.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=poly",group:"poly"},"const id = <T>(x : T) : T => x;\n")),(0,r.kt)("p",null,"Here ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," is a type variable which can be generalised. In general,\ntypes prefixed with ",(0,r.kt)("inlineCode",{parentName:"p"},"_")," are treated as generalisable.")),(0,r.kt)("p",null,"We can then use this function directly in different types by just\nregular application:"),(0,r.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=poly",group:"poly"},'let three_i : int = id 3\nlet three_s : string = id "three"\n'))),(0,r.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=poly",group:"poly"},'const three_i : int = id(3);\nconst three_s : string = id("three");\n'))),(0,r.kt)("p",null,"During compilation, LIGO will monomorphise the polymorphic functions\ninto specific instances, resulting in Michelson code that does not\ncontain polymorphic function declarations anymore."),(0,r.kt)("h2",{id:"polymorphism-with-parametric-types"},"Polymorphism with parametric types"),(0,r.kt)("p",null,"Polymorphism is especially useful when writing functions over\nparametric types, which include built-in types like lists, sets, and\nmaps."),(0,r.kt)("p",null,"As an example, we will see how to implement list reversing\nparametrically on any type, rather than just on lists of a specific\ntype."),(0,r.kt)("p",null,"Similar to the ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," example, we can introduce a type variable that can\nbe generalised. We will write a direct version of the function using\nan accumulator, but the reader can experiment with different\nvariations by using ",(0,r.kt)("inlineCode",{parentName:"p"},"List")," combinators."),(0,r.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=poly",group:"poly"},"let rev (type a) (xs : a list) : a list =\n  let rec rev (type a) ((xs, acc) : a list * a list) : a list =\n    match xs with\n    | [] -> acc\n    | x :: xs -> rev (xs, (x :: acc)) in\n  rev (xs, ([] : a list))\n"))),(0,r.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=poly",group:"poly"},"function rev <T>(xs : list<T>) : list<T> {\n  const rev = <T>([xs, acc] : [list<T>, list<T>]) : list<T> =>\n    match(xs) {\n      when([]): acc;\n      when([y,...ys]): rev([ys, [y,...acc]])\n    };\n\n  return rev([xs, ([] as list<T>)]);\n};\n"))),(0,r.kt)("p",null,"We use an accumulator variable ",(0,r.kt)("inlineCode",{parentName:"p"},"acc")," to keep the elements of the list\nprocessed, consing each element on it. As with the identity function,\nwe can then use it directly in different types:"),(0,r.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=poly",group:"poly"},"let lint : int list = rev [1; 2; 3]\nlet lnat : nat list = rev [1n; 2n; 3n]\n"))),(0,r.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=poly",group:"poly"},"const lint : list<int> = rev([1, 2, 3]);\nconst lnat : list<nat> = rev([1n, 2n, 3n]);\n"))))}u.isMDXComponent=!0}}]);