"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[29707],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>y});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),d=s(n),y=a,f=d["".concat(p,".").concat(y)]||d[y]||c[y]||l;return n?i.createElement(f,o(o({ref:t},m),{},{components:n})):i.createElement(f,o({ref:t},m))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=d;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r.mdxType="string"==typeof e?e:a,o[1]=r;for(var s=2;s<l;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>l});var i=n(67294),a=n(75402);const l=function(e){return i.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:i.createElement(i.Fragment,null)}))}},99191:(e,t,n)=>{n.d(t,{Z:()=>m});var i=n(23746),a=n(67294),l=n(52263),o=n(48720),r=n(87552);function p(){return p=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},p.apply(this,arguments)}const{Prism:s}=n(23746);s.languages={...s.languages,cameligo:{...s.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:s.languages.typescript};const m=function(e){const{siteConfig:{themeConfig:{prism:t={}}}}=(0,l.Z)(),n=t.singleTheme||r.Z,[s,m]=(0,a.useState)(!1);return(0,a.useEffect)((()=>{m(!0)}),[]),a.createElement(o.D.Consumer,null,(t=>{let{syntax:l}=t;return l===e.syntax?a.createElement(i.default,p({},i.defaultProps,{key:s,language:e.syntax,code:e.children,theme:n}),(e=>{let{className:t,tokens:n,getLineProps:i,getTokenProps:l}=e;return a.createElement("h4",{className:t,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((e,t)=>a.createElement("div",i({line:e,key:t}),e.map(((e,t)=>a.createElement("span",l({token:e,key:t}))))))))})):a.createElement("div",null)}))}},337:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>y,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var i=n(87462),a=(n(67294),n(3905)),l=n(48720),o=n(99191);const r={id:"list-reference",title:"list",hide_table_of_contents:!0},p=void 0,s={unversionedId:"reference/list-reference",id:"reference/list-reference",title:"list",description:"Lists",source:"@site/../docs/reference/list.md",sourceDirName:"reference",slug:"/reference/list-reference",permalink:"/previews/ligo/external-link-icon/docs/next/reference/list-reference",draft:!1,tags:[],version:"current",frontMatter:{id:"list-reference",title:"list",hide_table_of_contents:!0},sidebar:"API",previous:{title:"big_map",permalink:"/previews/ligo/external-link-icon/docs/next/reference/big-map-reference"},next:{title:"bitwise",permalink:"/previews/ligo/external-link-icon/docs/next/reference/bitwise-reference"}},m={},c=[],d={toc:c};function y(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Lists"),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type 'elt t = 'elt list"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type t<elt> = list<elt>"),"The type `t` is an alias for the predefined type `list`.",(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val empty : 'elt.'elt t"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"empty: <elt>t<elt>"),(0,a.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The value ",(0,a.kt)("inlineCode",{parentName:"p"},"List.empty")," is the empty list. It is a synonym for\n",(0,a.kt)("inlineCode",{parentName:"p"},"[]"),". In some contexts, it is useful to annotate it with its type,\nfor example: ",(0,a.kt)("inlineCode",{parentName:"p"},"(empty : int list)"),".")),(0,a.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The value ",(0,a.kt)("inlineCode",{parentName:"p"},"List.empty")," is the empty list. It is a synonym for\n",(0,a.kt)("inlineCode",{parentName:"p"},"list([])"),". In some contexts, it is useful to annotate it with its\ntype, for example: ",(0,a.kt)("inlineCode",{parentName:"p"},"(empty as list<int>)"),".")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val length : 'elt.'elt t -> nat"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"length: <elt>(list: t<elt>) => nat"),(0,a.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.length l")," is the number of elements in the list\n",(0,a.kt)("inlineCode",{parentName:"p"},"l"),". Note: ",(0,a.kt)("inlineCode",{parentName:"p"},"List.length")," is another name for ",(0,a.kt)("inlineCode",{parentName:"p"},"List.size"),".")),(0,a.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.length(l)")," is the number of elements in the list\n",(0,a.kt)("inlineCode",{parentName:"p"},"l"),". Note: ",(0,a.kt)("inlineCode",{parentName:"p"},"List.length")," is another name for ",(0,a.kt)("inlineCode",{parentName:"p"},"List.size"),".")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val size : 'elt.'elt t -> nat"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"size: <elt>(list: t<elt>) => nat"),(0,a.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.size l")," is the number of elements in the list ",(0,a.kt)("inlineCode",{parentName:"p"},"l"),".")),(0,a.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.size(l)")," is the number of elements in the list ",(0,a.kt)("inlineCode",{parentName:"p"},"l"),".")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val head : 'elt.'elt t -> 'elt option"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"head: <elt>(list: t<elt>) => option<elt>"),(0,a.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.head l"),", where ",(0,a.kt)("inlineCode",{parentName:"p"},"l")," is a list, is ",(0,a.kt)("inlineCode",{parentName:"p"},"None")," if ",(0,a.kt)("inlineCode",{parentName:"p"},"l")," is\nempty; otherwise, ",(0,a.kt)("inlineCode",{parentName:"p"},"Some hd"),", where ",(0,a.kt)("inlineCode",{parentName:"p"},"hd")," is the head of the list.")),(0,a.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.head(l)"),", where ",(0,a.kt)("inlineCode",{parentName:"p"},"l")," is a list, is ",(0,a.kt)("inlineCode",{parentName:"p"},'["None" as "None"]'),"\nif ",(0,a.kt)("inlineCode",{parentName:"p"},"l")," is empty; otherwise, ",(0,a.kt)("inlineCode",{parentName:"p"},'["Some" as "Some", hd]'),", where ",(0,a.kt)("inlineCode",{parentName:"p"},"hd")," is\nthe head of the list.")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val tail : 'elt.'elt t -> 'elt t option"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"tail: <elt>(list: t<elt>) => option<t<elt>>"),(0,a.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.tail l"),", where ",(0,a.kt)("inlineCode",{parentName:"p"},"l")," is a list, is ",(0,a.kt)("inlineCode",{parentName:"p"},"None")," if ",(0,a.kt)("inlineCode",{parentName:"p"},"l")," is\nempty; otherwise, ",(0,a.kt)("inlineCode",{parentName:"p"},"Some tl"),", where ",(0,a.kt)("inlineCode",{parentName:"p"},"tl")," is the tail of the list.")),(0,a.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.tail(l)"),", where ",(0,a.kt)("inlineCode",{parentName:"p"},"l")," is a list, is ",(0,a.kt)("inlineCode",{parentName:"p"},'["None" as "None"]'),"\nif ",(0,a.kt)("inlineCode",{parentName:"p"},"l")," is empty; otherwise, ",(0,a.kt)("inlineCode",{parentName:"p"},'["Some" as "Some", tl]'),", where ",(0,a.kt)("inlineCode",{parentName:"p"},"tl"),"\nis the tail of the list.")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val head_and_tail : 'elt.'elt t -> ('elt * 'elt t) option"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"head_and_tail: <elt>(list: t<elt>) => option<elt,t< elt>>"),(0,a.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.head_and_tail l"),", where ",(0,a.kt)("inlineCode",{parentName:"p"},"l")," is a list, is ",(0,a.kt)("inlineCode",{parentName:"p"},"None")," if ",(0,a.kt)("inlineCode",{parentName:"p"},"l"),"\nis empty; otherwise, ",(0,a.kt)("inlineCode",{parentName:"p"},"Some (hd, tl)"),", where ",(0,a.kt)("inlineCode",{parentName:"p"},"hd")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"tl")," are the head\nand tail of the list, respectively.")),(0,a.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.head_and_tail(l)"),", where ",(0,a.kt)("inlineCode",{parentName:"p"},"l")," is a list, is\n",(0,a.kt)("inlineCode",{parentName:"p"},'["None" as "None"]')," if ",(0,a.kt)("inlineCode",{parentName:"p"},"l")," is empty; otherwise,\n",(0,a.kt)("inlineCode",{parentName:"p"},'["Some" as "Some", [hd,tl]]'),", where ",(0,a.kt)("inlineCode",{parentName:"p"},"hd")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"tl")," are the head and\ntail of the list, respectively.")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val map : 'src 'dst.('src -> 'dst) -> 'src t -> 'dst t"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"map: <src, dst>(f: (_: src) => dst, list: t<src>) => t<dst>"),(0,a.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.map f [a1; ...; an]")," applies the function ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"a1"),",\n..., ",(0,a.kt)("inlineCode",{parentName:"p"},"an")," (from left to right), and builds the list\n",(0,a.kt)("inlineCode",{parentName:"p"},"[f a1; ...; f an]")," with the results returned by ",(0,a.kt)("inlineCode",{parentName:"p"},"f"),".")),(0,a.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.map(f, list([a1; ...; an]))")," applies the function ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," to\n",(0,a.kt)("inlineCode",{parentName:"p"},"a1"),", ..., ",(0,a.kt)("inlineCode",{parentName:"p"},"an")," (from left to right), and builds the list\n",(0,a.kt)("inlineCode",{parentName:"p"},"list([f(a1); ...; f(an)])")," with the results returned by ",(0,a.kt)("inlineCode",{parentName:"p"},"f"),".")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val iter : 'elt.('elt -> unit) -> 'elt t -> unit"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"iter: <elt>(f: (_: elt) => unit, list: t<elt>) => unit"),(0,a.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.iter f [a1; ...; an]")," applies the function ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," in turn\nto ",(0,a.kt)("inlineCode",{parentName:"p"},"[a1; ...; an]"),". It is equivalent to\n",(0,a.kt)("inlineCode",{parentName:"p"},"let () = f a1 in let () = f a2 in ... in f an"),".")),(0,a.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.iter(f, list([a1; ...; an]))")," applies the function ",(0,a.kt)("inlineCode",{parentName:"p"},"f"),"\nin turn to ",(0,a.kt)("inlineCode",{parentName:"p"},"list([a1; ...; an])"),". It is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"{f(a1);\nf(a2); ...; f(an)}"),".")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val fold_left : 'elt 'acc.(('acc * 'elt) -> 'acc) -> 'acc -> 'elt t -> 'acc"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"fold_left: <elt, acc>(f: (_: [acc, elt]) => acc, init: acc, list: t<elt>) => acc"),(0,a.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.fold_left f init [a1; ...; an]")," is\n",(0,a.kt)("inlineCode",{parentName:"p"},"f (... (f (f init a1) a2) ...) an"),".")),(0,a.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.fold_left(f, init, list([a1; ...; an]))")," is\n",(0,a.kt)("inlineCode",{parentName:"p"},"f (... (f (f(init, a1)), a2), ...), an)"),".")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val fold_right : 'elt 'acc.(('elt * 'acc) -> 'acc) -> 'elt t -> 'acc -> 'acc"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"fold_right: <elt, acc>(f: (_: [elt, acc]) => acc, list: t<elt>, init: acc) => acc"),(0,a.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.fold_right f [a1; ...; an] init")," is\n",(0,a.kt)("inlineCode",{parentName:"p"},"f a1 (f a2 (... (f an init) ...))"),".")),(0,a.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.fold_right(f, list([a1; ...; an]), init)")," is\n",(0,a.kt)("inlineCode",{parentName:"p"},"f (a1, f (a2, (..., f (an, init))...))"),".")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val fold : 'elt 'acc.(('acc * 'elt) -> 'acc) -> 'elt t -> 'acc -> 'acc"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"fold: <elt, acc>(f: (_: [acc, elt]) => acc, list: t<elt>, init: acc) => acc"),(0,a.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.fold f [a1; ...; an] init")," is\n",(0,a.kt)("inlineCode",{parentName:"p"},"f (... (f (f init a1) a2) ...) an"),". Note:\n",(0,a.kt)("inlineCode",{parentName:"p"},"List.fold_left f init list")," is the same as ",(0,a.kt)("inlineCode",{parentName:"p"},"List.fold f list init"),".")),(0,a.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.fold(f, list([a1; ...; an]), init)")," is\n",(0,a.kt)("inlineCode",{parentName:"p"},"f (... (f (f (init, a1), a2) ...), an)"),". Note:\n",(0,a.kt)("inlineCode",{parentName:"p"},"List.fold_left(f, init, list)")," is the same as ",(0,a.kt)("inlineCode",{parentName:"p"},"List.fold(f, list, init)"),".")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val cons : 'elt.'elt -> 'elt t -> 'elt t"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"cons: <elt>(elt: elt, list: t<elt>) => t<elt>"),(0,a.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.cons e l")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"e :: l"),".")),(0,a.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.cons(e, l)")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"list([e, ...l])"),".")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val find_opt : 'elt.('elt -> bool) -> 'elt t -> 'elt option"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"find_opt: <elt>(f: (_: elt) => bool, list: t<elt>) => option<elt>"),(0,a.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.find_opt pred list")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"None")," if no element of the list\n",(0,a.kt)("inlineCode",{parentName:"p"},"list")," satisfies the predicate ",(0,a.kt)("inlineCode",{parentName:"p"},"pred"),"; otherwise, it is ",(0,a.kt)("inlineCode",{parentName:"p"},"Some e"),",\nwhere ",(0,a.kt)("inlineCode",{parentName:"p"},"e")," is the leftmost element in ",(0,a.kt)("inlineCode",{parentName:"p"},"list")," that satisfies ",(0,a.kt)("inlineCode",{parentName:"p"},"pred"),". The\norder of the calls of ",(0,a.kt)("inlineCode",{parentName:"p"},"pred")," is not specified.")),(0,a.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.find_opt(pred, list)")," is ",(0,a.kt)("inlineCode",{parentName:"p"},'["None" as "None"]')," if no\nelement of the list ",(0,a.kt)("inlineCode",{parentName:"p"},"list")," satisfies the predicate ",(0,a.kt)("inlineCode",{parentName:"p"},"pred"),"; otherwise,\nit is ",(0,a.kt)("inlineCode",{parentName:"p"},'["Some" as "Some", e]'),", where ",(0,a.kt)("inlineCode",{parentName:"p"},"e")," is the leftmost element in\n",(0,a.kt)("inlineCode",{parentName:"p"},"list")," that satisfies ",(0,a.kt)("inlineCode",{parentName:"p"},"pred"),". The order of the calls of ",(0,a.kt)("inlineCode",{parentName:"p"},"pred")," is not\nspecified.")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val filter_map : 'src 'dst.('src -> 'dst option) -> 'src list -> 'dst list"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"filter_map: <src, dst>(filter: (_: src) => option<dst>, list: list<src>) => list<dst>"),(0,a.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.filter_map f l")," is the maximal sub-list of ",(0,a.kt)("inlineCode",{parentName:"p"},"l")," such\nthat the call of function ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," on its elements is not ",(0,a.kt)("inlineCode",{parentName:"p"},"None"),". Note: ",(0,a.kt)("inlineCode",{parentName:"p"},"f"),"\nis called on all elements of ",(0,a.kt)("inlineCode",{parentName:"p"},"l"),". The order of the calls of ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," is not\nspecified.")),(0,a.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.filter_map(f, l)")," is the maximal sub-list of ",(0,a.kt)("inlineCode",{parentName:"p"},"l")," such\nthat the call of function ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," on its elements is not\n",(0,a.kt)("inlineCode",{parentName:"p"},'["None" as "None"]'),". Note: ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," is called on all elements of ",(0,a.kt)("inlineCode",{parentName:"p"},"l"),".  The\norder of the calls of ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," is not specified.")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val update : 'elt.('elt -> 'elt option) -> 'elt t -> 'elt t"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"update: <elt>(filter: (_: elt) => option<elt>, list: t<elt>) => t<elt>"),(0,a.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.update f l")," is the list ",(0,a.kt)("inlineCode",{parentName:"p"},"l")," where the elements ",(0,a.kt)("inlineCode",{parentName:"p"},"e"),"\nsuch that ",(0,a.kt)("inlineCode",{parentName:"p"},"f e")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"Some v")," have been replaced by ",(0,a.kt)("inlineCode",{parentName:"p"},"v"),".")),(0,a.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.update(f, l)")," is the list ",(0,a.kt)("inlineCode",{parentName:"p"},"l")," where the elements ",(0,a.kt)("inlineCode",{parentName:"p"},"e"),"\nsuch that ",(0,a.kt)("inlineCode",{parentName:"p"},"f(e)")," is ",(0,a.kt)("inlineCode",{parentName:"p"},'["Some" as "Some", v]')," have been replaced by ",(0,a.kt)("inlineCode",{parentName:"p"},"v"),".")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val update_with : 'elt.('elt -> bool) -> 'elt -> 'elt t -> 'elt t"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"update_with: <elt>(pred: (_: elt) => bool, default: elt, list: t<elt>) => t<elt>"),(0,a.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.update_with p d l")," is the list ",(0,a.kt)("inlineCode",{parentName:"p"},"l")," where the elements\n",(0,a.kt)("inlineCode",{parentName:"p"},"e")," such that satisfy the predicate ",(0,a.kt)("inlineCode",{parentName:"p"},"p")," are replaced by ",(0,a.kt)("inlineCode",{parentName:"p"},"d"),".")),(0,a.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"List.update_with(p,d,l)")," is the list ",(0,a.kt)("inlineCode",{parentName:"p"},"l")," where the elements\n",(0,a.kt)("inlineCode",{parentName:"p"},"e")," such that satisfy the predicate ",(0,a.kt)("inlineCode",{parentName:"p"},"p")," are replaced by ",(0,a.kt)("inlineCode",{parentName:"p"},"d"),".")))}y.isMDXComponent=!0},23746:(e,t,n)=>{n.r(t),n.d(t,{Prism:()=>i.Z,default:()=>f,defaultProps:()=>o});var i=n(87410);const a={plain:{backgroundColor:"#2a2734",color:"#9a86fd"},styles:[{types:["comment","prolog","doctype","cdata","punctuation"],style:{color:"#6c6783"}},{types:["namespace"],style:{opacity:.7}},{types:["tag","operator","number"],style:{color:"#e09142"}},{types:["property","function"],style:{color:"#9a86fd"}},{types:["tag-id","selector","atrule-id"],style:{color:"#eeebff"}},{types:["attr-name"],style:{color:"#c4b9fe"}},{types:["boolean","string","entity","url","attr-value","keyword","control","directive","unit","statement","regex","atrule","placeholder","variable"],style:{color:"#ffcc99"}},{types:["deleted"],style:{textDecorationLine:"line-through"}},{types:["inserted"],style:{textDecorationLine:"underline"}},{types:["italic"],style:{fontStyle:"italic"}},{types:["important","bold"],style:{fontWeight:"bold"}},{types:["important"],style:{color:"#c4b9fe"}}]};var l=n(67294),o={Prism:i.Z,theme:a};function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(){return p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},p.apply(this,arguments)}var s=/\r\n|\r|\n/,m=function(e){0===e.length?e.push({types:["plain"],content:"\n",empty:!0}):1===e.length&&""===e[0].content&&(e[0].content="\n",e[0].empty=!0)},c=function(e,t){var n=e.length;return n>0&&e[n-1]===t?e:e.concat(t)},d=function(e,t){var n=e.plain,i=Object.create(null),a=e.styles.reduce((function(e,n){var i=n.languages,a=n.style;return i&&!i.includes(t)||n.types.forEach((function(t){var n=p({},e[t],a);e[t]=n})),e}),i);return a.root=n,a.plain=p({},n,{backgroundColor:null}),a};function y(e,t){var n={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&-1===t.indexOf(i)&&(n[i]=e[i]);return n}const f=function(e){function t(){for(var t=this,n=[],i=arguments.length;i--;)n[i]=arguments[i];e.apply(this,n),r(this,"getThemeDict",(function(e){if(void 0!==t.themeDict&&e.theme===t.prevTheme&&e.language===t.prevLanguage)return t.themeDict;t.prevTheme=e.theme,t.prevLanguage=e.language;var n=e.theme?d(e.theme,e.language):void 0;return t.themeDict=n})),r(this,"getLineProps",(function(e){var n=e.key,i=e.className,a=e.style,l=p({},y(e,["key","className","style","line"]),{className:"token-line",style:void 0,key:void 0}),o=t.getThemeDict(t.props);return void 0!==o&&(l.style=o.plain),void 0!==a&&(l.style=void 0!==l.style?p({},l.style,a):a),void 0!==n&&(l.key=n),i&&(l.className+=" "+i),l})),r(this,"getStyleForToken",(function(e){var n=e.types,i=e.empty,a=n.length,l=t.getThemeDict(t.props);if(void 0!==l){if(1===a&&"plain"===n[0])return i?{display:"inline-block"}:void 0;if(1===a&&!i)return l[n[0]];var o=i?{display:"inline-block"}:{},r=n.map((function(e){return l[e]}));return Object.assign.apply(Object,[o].concat(r))}})),r(this,"getTokenProps",(function(e){var n=e.key,i=e.className,a=e.style,l=e.token,o=p({},y(e,["key","className","style","token"]),{className:"token "+l.types.join(" "),children:l.content,style:t.getStyleForToken(l),key:void 0});return void 0!==a&&(o.style=void 0!==o.style?p({},o.style,a):a),void 0!==n&&(o.key=n),i&&(o.className+=" "+i),o})),r(this,"tokenize",(function(e,t,n,i){var a={code:t,grammar:n,language:i,tokens:[]};e.hooks.run("before-tokenize",a);var l=a.tokens=e.tokenize(a.code,a.grammar,a.language);return e.hooks.run("after-tokenize",a),l}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.render=function(){var e=this.props,t=e.Prism,n=e.language,i=e.code,a=e.children,l=this.getThemeDict(this.props),o=t.languages[n];return a({tokens:function(e){for(var t=[[]],n=[e],i=[0],a=[e.length],l=0,o=0,r=[],p=[r];o>-1;){for(;(l=i[o]++)<a[o];){var d=void 0,y=t[o],f=n[o][l];if("string"==typeof f?(y=o>0?y:["plain"],d=f):(y=c(y,f.type),f.alias&&(y=c(y,f.alias)),d=f.content),"string"==typeof d){var k=d.split(s),h=k.length;r.push({types:y,content:k[0]});for(var u=1;u<h;u++)m(r),p.push(r=[]),r.push({types:y,content:k[u]})}else o++,t.push(y),n.push(d),i.push(0),a.push(d.length)}o--,t.pop(),n.pop(),i.pop(),a.pop()}return m(r),p}(void 0!==o?this.tokenize(t,i,o,n):[i]),className:"prism-code language-"+n,style:void 0!==l?l.root:{},getLineProps:this.getLineProps,getTokenProps:this.getTokenProps})},t}(l.Component)},87552:(e,t,n)=>{n.d(t,{Z:()=>i});const i={plain:{color:"#bfc7d5",backgroundColor:"#292d3e"},styles:[{types:["comment"],style:{color:"rgb(105, 112, 152)",fontStyle:"italic"}},{types:["string","inserted"],style:{color:"rgb(195, 232, 141)"}},{types:["number"],style:{color:"rgb(247, 140, 108)"}},{types:["builtin","char","constant","function"],style:{color:"rgb(130, 170, 255)"}},{types:["punctuation","selector"],style:{color:"rgb(199, 146, 234)"}},{types:["variable"],style:{color:"rgb(191, 199, 213)"}},{types:["class-name","attr-name"],style:{color:"rgb(255, 203, 107)"}},{types:["tag","deleted"],style:{color:"rgb(255, 85, 114)"}},{types:["operator"],style:{color:"rgb(137, 221, 255)"}},{types:["boolean"],style:{color:"rgb(255, 88, 116)"}},{types:["keyword"],style:{fontStyle:"italic"}},{types:["doctype"],style:{color:"rgb(199, 146, 234)",fontStyle:"italic"}},{types:["namespace"],style:{color:"rgb(178, 204, 214)"}},{types:["url"],style:{color:"rgb(221, 221, 221)"}}]}}}]);