"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[98444],{3905:(e,t,n)=>{n.d(t,{Zo:()=>y,kt:()=>d});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var r=a.createContext({}),s=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},y=function(e){var t=s(e.components);return a.createElement(r.Provider,{value:t},e.children)},k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,r=e.parentName,y=o(e,["components","mdxType","originalType","parentName"]),m=s(n),d=i,u=m["".concat(r,".").concat(d)]||m[d]||k[d]||l;return n?a.createElement(u,p(p({ref:t},y),{},{components:n})):a.createElement(u,p({ref:t},y))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,p=new Array(l);p[0]=m;var o={};for(var r in t)hasOwnProperty.call(t,r)&&(o[r]=t[r]);o.originalType=e,o.mdxType="string"==typeof e?e:i,p[1]=o;for(var s=2;s<l;s++)p[s]=n[s];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>i.Z,Z:()=>l});var a=n(67294),i=n(75402);const l=function(e){return a.createElement(i.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},99191:(e,t,n)=>{n.d(t,{Z:()=>y});var a=n(23746),i=n(67294),l=n(52263),p=n(48720),o=n(87552);function r(){return r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},r.apply(this,arguments)}const{Prism:s}=n(23746);s.languages={...s.languages,cameligo:{...s.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:s.languages.typescript};const y=function(e){const{siteConfig:{themeConfig:{prism:t={}}}}=(0,l.Z)(),n=t.singleTheme||o.Z,[s,y]=(0,i.useState)(!1);return(0,i.useEffect)((()=>{y(!0)}),[]),i.createElement(p.D.Consumer,null,(t=>{let{syntax:l}=t;return l===e.syntax?i.createElement(a.default,r({},a.defaultProps,{key:s,language:e.syntax,code:e.children,theme:n}),(e=>{let{className:t,tokens:n,getLineProps:a,getTokenProps:l}=e;return i.createElement("h4",{className:t,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((e,t)=>i.createElement("div",a({line:e,key:t}),e.map(((e,t)=>i.createElement("span",l({token:e,key:t}))))))))})):i.createElement("div",null)}))}},83110:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>y,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>k});var a=n(87462),i=(n(67294),n(3905)),l=n(48720),p=n(99191);const o={id:"map-reference",title:"map",hide_table_of_contents:!0},r=void 0,s={unversionedId:"reference/map-reference",id:"version-1.9.2/reference/map-reference",title:"map",description:"Maps from keys to values, where the bindings key/value are ordered",source:"@site/versioned_docs/version-1.9.2/reference/map.md",sourceDirName:"reference",slug:"/reference/map-reference",permalink:"/previews/ligo/external-link-icon/docs/reference/map-reference",draft:!1,tags:[],version:"1.9.2",frontMatter:{id:"map-reference",title:"map",hide_table_of_contents:!0},sidebar:"API",next:{title:"bytes",permalink:"/previews/ligo/external-link-icon/docs/reference/bytes-reference"}},y={},k=[],m={toc:k};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Maps from keys to values, where the bindings key/value are ordered\nby increasing keys."),(0,i.kt)(p.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type ('key, 'value) t = ('key, 'value) map"),(0,i.kt)(p.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type t<key, value> = map<key, value>"),(0,i.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The type ",(0,i.kt)("inlineCode",{parentName:"p"},"('key,'value) Map.t")," is an alias for ",(0,i.kt)("inlineCode",{parentName:"p"},"('key,'value) map"),".")),(0,i.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The type ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.t<key, value>")," is an alias for ",(0,i.kt)("inlineCode",{parentName:"p"},"map<key,value>"),".")),(0,i.kt)(p.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val empty : 'key 'value.('key, 'value) t"),(0,i.kt)(p.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let empty: <key, value>t<key, value>"),(0,i.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The value ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.empty")," is the empty map. In some contexts, it is\nuseful to annotate it with its type, for example:\n",(0,i.kt)("inlineCode",{parentName:"p"},"(Map.empty : (int, string) map)"),".")),(0,i.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The value ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.empty")," is the empty map. In some contexts, it is\nuseful to annotate it with its type, for example:\n",(0,i.kt)("inlineCode",{parentName:"p"},"(Map.empty as map<int, string>)"),".")),(0,i.kt)(p.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val get_and_update : 'key 'value.'key -> 'value option -> ('key, 'value) t -> ('value option * ('key, 'value) t)"),(0,i.kt)(p.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let get_and_update: <key, value>(_: key) => (_: option<value>) => (_: t<key, value>) => [option<value>, t<key, value>]"),(0,i.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.get_and_update key None map")," returns a copy of the map\n",(0,i.kt)("inlineCode",{parentName:"p"},"map")," without the entry for the key ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"map")," (no change if\nthe key is absent). The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.get_and_update key (Some value) map"),"\nreturns a copy of the map ",(0,i.kt)("inlineCode",{parentName:"p"},"map")," where there is an entry for the\nkey ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," associated with the value ",(0,i.kt)("inlineCode",{parentName:"p"},"value"),". In both cases, if\nthere was already a value ",(0,i.kt)("inlineCode",{parentName:"p"},"v")," bound to ",(0,i.kt)("inlineCode",{parentName:"p"},"key"),", it is returned as\n",(0,i.kt)("inlineCode",{parentName:"p"},"Some v"),", otherwise ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),".")),(0,i.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.get_and_update(key, None(), map)")," returns a copy of the\nmap ",(0,i.kt)("inlineCode",{parentName:"p"},"map")," without the entry for the key ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"map")," (no change\nif the key is absent). The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.get_and_update(key, Some(value),\n    map)")," returns a copy of the map ",(0,i.kt)("inlineCode",{parentName:"p"},"map")," where there is an entry for\nthe key ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," associated with the value ",(0,i.kt)("inlineCode",{parentName:"p"},"value"),". In both cases, if\nthere was already a value ",(0,i.kt)("inlineCode",{parentName:"p"},"v")," bound to ",(0,i.kt)("inlineCode",{parentName:"p"},"key"),", it is returned as\n",(0,i.kt)("inlineCode",{parentName:"p"},"Some(v)"),", otherwise ",(0,i.kt)("inlineCode",{parentName:"p"},"None()"),".")),(0,i.kt)(p.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val update : 'key 'value.'key -> 'value option -> ('key, 'value) t -> ('key, 'value) t"),(0,i.kt)(p.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let update: <key, value>(_: key) => (_: option<value>) => (_: t<key, value>) => t<key, value>"),(0,i.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.update key None map")," returns a copy of the map ",(0,i.kt)("inlineCode",{parentName:"p"},"map"),"\nwithout the entry for the key ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"map")," (no change if the key\nis absent). The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.update key (Some value) map")," returns the map\n",(0,i.kt)("inlineCode",{parentName:"p"},"map")," where there is an entry for the key ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," associated with\nthe value ",(0,i.kt)("inlineCode",{parentName:"p"},"value"),". In both cases, the value originally bound to\n",(0,i.kt)("inlineCode",{parentName:"p"},"key")," is lost. See ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.get_and_update"),".")),(0,i.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.update(key, None(), map)")," returns a copy of the map ",(0,i.kt)("inlineCode",{parentName:"p"},"map"),"\nwithout the entry for the key ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"map")," (no change if the key\nis absent). The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.update(key, Some(value), map)")," returns the map\n",(0,i.kt)("inlineCode",{parentName:"p"},"map")," where there is an entry for the key ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," associated with\nthe value ",(0,i.kt)("inlineCode",{parentName:"p"},"value"),". In both cases, the value originally bound to\n",(0,i.kt)("inlineCode",{parentName:"p"},"key")," is lost. See ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.get_and_update"),".")),(0,i.kt)(p.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val add : 'key 'value.'key -> 'value -> ('key, 'value) t -> ('key, 'value) t"),(0,i.kt)(p.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let add: <key, value>(_: key) => (_: value) => (_: t<key, value>) => t<key, value>"),(0,i.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.add key value map")," returns a copy of the ",(0,i.kt)("inlineCode",{parentName:"p"},"map")," where\nthere is a binding of key ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," to value ",(0,i.kt)("inlineCode",{parentName:"p"},"value"),". If there is a\nbinding for ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"map"),", then it is lost.")),(0,i.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.add(key, value, map)")," returns a copy of the ",(0,i.kt)("inlineCode",{parentName:"p"},"map")," where\nthere is a binding of key ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," to value ",(0,i.kt)("inlineCode",{parentName:"p"},"value"),". If there is a\nbinding for ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"map"),", then it is lost.")),(0,i.kt)(p.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val remove : 'key 'value.'key -> ('key, 'value) t -> ('key, 'value) t"),(0,i.kt)(p.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let remove: <key, value>(_: key) => (_: t<key, value>) => t<key, value>"),(0,i.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.remove key map")," returns a copy of the map ",(0,i.kt)("inlineCode",{parentName:"p"},"map")," where\nthe binding for key ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," is absent.")),(0,i.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.remove(key, map)")," returns a copy of the map ",(0,i.kt)("inlineCode",{parentName:"p"},"map")," where\nthe binding for key ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," is absent.")),(0,i.kt)(p.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val literal : 'key 'value.('key * 'value) list -> ('key, 'value) t"),(0,i.kt)(p.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let literal: <key, value>(_: list<[key, value]>) => t<key, value>"),(0,i.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.literal [(k1,v1); ...; (kn,vn)]")," returns a map from\nthe pairs of key/value in the list. Note: The list must be a\nliteral, not an expression (compile-time list of values).")),(0,i.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.literal(list([[k1,v1], ..., [kn,vn]]))")," returns a map from\nthe pairs of key/value in the list. Note: The list must be a\nliteral, not an expression (compile-time list of values).")),(0,i.kt)(p.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val of_list : 'key 'value.('key * 'value) list -> ('key, 'value) t"),(0,i.kt)(p.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let of_list: <key, value>(_: list<[key, value]>) => t<key, value>"),(0,i.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.of_list bindings")," returns a map from the pairs of\nkey/value in the list ",(0,i.kt)("inlineCode",{parentName:"p"},"bindings"),". Note: Use ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.literal")," instead if\nusing a literal list.")),(0,i.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.of_list(bindings)")," returns a map from the pairs of\nkey/value in the list ",(0,i.kt)("inlineCode",{parentName:"p"},"bindings"),". Note: Use ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.literal")," instead if\nusing a literal list.")),(0,i.kt)(p.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val size : 'key 'value.('key, 'value) t -> nat"),(0,i.kt)(p.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let size: <key, value>(_: t<key, value>) => nat"),(0,i.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.size map")," evaluates in the number of entries in the\nmap ",(0,i.kt)("inlineCode",{parentName:"p"},"map"),".")),(0,i.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.size(map)")," evaluates in the number of entries in the\nmap ",(0,i.kt)("inlineCode",{parentName:"p"},"map"),".")),(0,i.kt)(p.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val mem : 'key 'value.'key -> ('key, 'value) t -> bool"),(0,i.kt)(p.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let mem: <key, value>(_: key) => (_: t<key, value>) => bool"),(0,i.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.mem key map")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if, and only if, the key ",(0,i.kt)("inlineCode",{parentName:"p"},"key"),"\nis in the map ",(0,i.kt)("inlineCode",{parentName:"p"},"map"),".")),(0,i.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.mem(key, map)")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if, and only if, the key ",(0,i.kt)("inlineCode",{parentName:"p"},"key"),"\nis in the map ",(0,i.kt)("inlineCode",{parentName:"p"},"map"),".")),(0,i.kt)(p.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val find_opt : 'key 'value.'key -> ('key, 'value) t -> 'value option"),(0,i.kt)(p.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let find_opt: <key, value>(_: key) => (_: t<key, value>) => option<value>"),(0,i.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.find_opt key map")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," if the key ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," is\npresent in the map ",(0,i.kt)("inlineCode",{parentName:"p"},"map"),"; otherwise, it is ",(0,i.kt)("inlineCode",{parentName:"p"},"Some v"),", where ",(0,i.kt)("inlineCode",{parentName:"p"},"v")," is\nthe value associated to ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"map"),".")),(0,i.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.find_opt(key, map)")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"None()")," if the key ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," is\npresent in the map ",(0,i.kt)("inlineCode",{parentName:"p"},"map"),"; otherwise, it is ",(0,i.kt)("inlineCode",{parentName:"p"},"Some(v)"),", where ",(0,i.kt)("inlineCode",{parentName:"p"},"v")," is\nthe value associated to ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"map"),".")),(0,i.kt)(p.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val find : 'key 'value.'key -> ('key, 'value) t -> 'value"),(0,i.kt)(p.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let find: <key, value>(_: key) => (_: t<key, value>) => value"),(0,i.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.find key map")," returns the value associated to ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," in\n",(0,i.kt)("inlineCode",{parentName:"p"},"map"),". If the key is absent, the execution fails with the string\n",(0,i.kt)("inlineCode",{parentName:"p"},'"MAP FIND"'),".")),(0,i.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.find(key, map)")," returns the value associated to ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," in\n",(0,i.kt)("inlineCode",{parentName:"p"},"map"),". If the key is absent, the execution fails with the string\n",(0,i.kt)("inlineCode",{parentName:"p"},'"MAP FIND"'),".")),(0,i.kt)(p.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val fold : 'key 'value 'acc.(('acc * 'key * 'value) -> 'acc) -> ('key, 'value) t -> 'acc -> 'acc"),(0,i.kt)(p.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let fold: <key, value, acc>(_: (_: [acc, [key, value]]) => acc) => (_: t<key, value>) => (_: acc) => acc"),(0,i.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.fold f map init")," is\n",(0,i.kt)("inlineCode",{parentName:"p"},"f ( ... f (f (init, (k1,v1)), (k2,v2)), ..., (kn,vn))"),"\nwhere ",(0,i.kt)("inlineCode",{parentName:"p"},"(k1,v1)"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"(k2,v2)"),", ..., ",(0,i.kt)("inlineCode",{parentName:"p"},"(kn,vn)")," are the bindings in the\nmap ",(0,i.kt)("inlineCode",{parentName:"p"},"map"),", in increasing order of the keys ",(0,i.kt)("inlineCode",{parentName:"p"},"k1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"k2"),", ..., and ",(0,i.kt)("inlineCode",{parentName:"p"},"kn"),".")),(0,i.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.fold(f, map, init)")," is\n",(0,i.kt)("inlineCode",{parentName:"p"},"f (... f (f (init, [k1,v1]), [k2,v2]), ..., [kn,vn])"),"\nwhere ",(0,i.kt)("inlineCode",{parentName:"p"},"[k1,v1]"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"[k2,v2]"),", ..., ",(0,i.kt)("inlineCode",{parentName:"p"},"[kn,vn]")," are the bindings in the\nmap ",(0,i.kt)("inlineCode",{parentName:"p"},"map"),", in increasing order of the keys ",(0,i.kt)("inlineCode",{parentName:"p"},"k1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"k2"),", ..., and ",(0,i.kt)("inlineCode",{parentName:"p"},"kn"),".")),(0,i.kt)(p.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val iter : 'key 'value.(('key * 'value) -> unit) -> ('key, 'value) t -> unit"),(0,i.kt)(p.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let iter: <key, value>(_: (_: [key, value]) => unit) => (_: t<key, value>) => unit"),(0,i.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.iter f map")," is\n",(0,i.kt)("inlineCode",{parentName:"p"},"let () = f (k1,v1) in let () = f (k2,v2) in ... in f (kn,vn)"),".")),(0,i.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.iter(f, map)")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"{f (k1,v1); (k2,v2); ...; f (kn,vn);}"),".")),(0,i.kt)(p.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val map : 'key 'value 'new_value.(('key * 'value) -> 'new_value) -> ('key, 'value) t -> ('key, 'new_value) t"),(0,i.kt)(p.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let map: <key, value, new_value>(_: (_: [key, value]) => new_value) => (_: t<key, value>) => t<key, new_value>"),(0,i.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.map f m"),", where the map ",(0,i.kt)("inlineCode",{parentName:"p"},"m")," contains the bindings\n",(0,i.kt)("inlineCode",{parentName:"p"},"(k1,v1)"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"(k2,v2)"),", ..., and ",(0,i.kt)("inlineCode",{parentName:"p"},"(kn,vn)")," in increasing order of\nthe keys, is the map containing the bindings ",(0,i.kt)("inlineCode",{parentName:"p"},"(k1, f (k1,v1))"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"(k2, f (k2,v2))"),", ..., ",(0,i.kt)("inlineCode",{parentName:"p"},"(kn, f (kn,vn))"),".")),(0,i.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.map(f, m)"),", where the map ",(0,i.kt)("inlineCode",{parentName:"p"},"m")," contains the bindings\n",(0,i.kt)("inlineCode",{parentName:"p"},"[k1,v1]"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"[k2,v2]"),", ..., and ",(0,i.kt)("inlineCode",{parentName:"p"},"[kn,vn]")," in increasing order of\nthe keys, is the map containing the bindings ",(0,i.kt)("inlineCode",{parentName:"p"},"[k1, f (k1,v1)]"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"[k2, f (k2,v2)]"),", ..., ",(0,i.kt)("inlineCode",{parentName:"p"},"[kn, f (kn,vn)]"),".")))}d.isMDXComponent=!0},23746:(e,t,n)=>{n.r(t),n.d(t,{Prism:()=>a.Z,default:()=>u,defaultProps:()=>p});var a=n(87410);const i={plain:{backgroundColor:"#2a2734",color:"#9a86fd"},styles:[{types:["comment","prolog","doctype","cdata","punctuation"],style:{color:"#6c6783"}},{types:["namespace"],style:{opacity:.7}},{types:["tag","operator","number"],style:{color:"#e09142"}},{types:["property","function"],style:{color:"#9a86fd"}},{types:["tag-id","selector","atrule-id"],style:{color:"#eeebff"}},{types:["attr-name"],style:{color:"#c4b9fe"}},{types:["boolean","string","entity","url","attr-value","keyword","control","directive","unit","statement","regex","atrule","placeholder","variable"],style:{color:"#ffcc99"}},{types:["deleted"],style:{textDecorationLine:"line-through"}},{types:["inserted"],style:{textDecorationLine:"underline"}},{types:["italic"],style:{fontStyle:"italic"}},{types:["important","bold"],style:{fontWeight:"bold"}},{types:["important"],style:{color:"#c4b9fe"}}]};var l=n(67294),p={Prism:a.Z,theme:i};function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},r.apply(this,arguments)}var s=/\r\n|\r|\n/,y=function(e){0===e.length?e.push({types:["plain"],content:"\n",empty:!0}):1===e.length&&""===e[0].content&&(e[0].content="\n",e[0].empty=!0)},k=function(e,t){var n=e.length;return n>0&&e[n-1]===t?e:e.concat(t)},m=function(e,t){var n=e.plain,a=Object.create(null),i=e.styles.reduce((function(e,n){var a=n.languages,i=n.style;return a&&!a.includes(t)||n.types.forEach((function(t){var n=r({},e[t],i);e[t]=n})),e}),a);return i.root=n,i.plain=r({},n,{backgroundColor:null}),i};function d(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===t.indexOf(a)&&(n[a]=e[a]);return n}const u=function(e){function t(){for(var t=this,n=[],a=arguments.length;a--;)n[a]=arguments[a];e.apply(this,n),o(this,"getThemeDict",(function(e){if(void 0!==t.themeDict&&e.theme===t.prevTheme&&e.language===t.prevLanguage)return t.themeDict;t.prevTheme=e.theme,t.prevLanguage=e.language;var n=e.theme?m(e.theme,e.language):void 0;return t.themeDict=n})),o(this,"getLineProps",(function(e){var n=e.key,a=e.className,i=e.style,l=r({},d(e,["key","className","style","line"]),{className:"token-line",style:void 0,key:void 0}),p=t.getThemeDict(t.props);return void 0!==p&&(l.style=p.plain),void 0!==i&&(l.style=void 0!==l.style?r({},l.style,i):i),void 0!==n&&(l.key=n),a&&(l.className+=" "+a),l})),o(this,"getStyleForToken",(function(e){var n=e.types,a=e.empty,i=n.length,l=t.getThemeDict(t.props);if(void 0!==l){if(1===i&&"plain"===n[0])return a?{display:"inline-block"}:void 0;if(1===i&&!a)return l[n[0]];var p=a?{display:"inline-block"}:{},o=n.map((function(e){return l[e]}));return Object.assign.apply(Object,[p].concat(o))}})),o(this,"getTokenProps",(function(e){var n=e.key,a=e.className,i=e.style,l=e.token,p=r({},d(e,["key","className","style","token"]),{className:"token "+l.types.join(" "),children:l.content,style:t.getStyleForToken(l),key:void 0});return void 0!==i&&(p.style=void 0!==p.style?r({},p.style,i):i),void 0!==n&&(p.key=n),a&&(p.className+=" "+a),p})),o(this,"tokenize",(function(e,t,n,a){var i={code:t,grammar:n,language:a,tokens:[]};e.hooks.run("before-tokenize",i);var l=i.tokens=e.tokenize(i.code,i.grammar,i.language);return e.hooks.run("after-tokenize",i),l}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.render=function(){var e=this.props,t=e.Prism,n=e.language,a=e.code,i=e.children,l=this.getThemeDict(this.props),p=t.languages[n];return i({tokens:function(e){for(var t=[[]],n=[e],a=[0],i=[e.length],l=0,p=0,o=[],r=[o];p>-1;){for(;(l=a[p]++)<i[p];){var m=void 0,d=t[p],u=n[p][l];if("string"==typeof u?(d=p>0?d:["plain"],m=u):(d=k(d,u.type),u.alias&&(d=k(d,u.alias)),m=u.content),"string"==typeof m){var c=m.split(s),v=c.length;o.push({types:d,content:c[0]});for(var h=1;h<v;h++)y(o),r.push(o=[]),o.push({types:d,content:c[h]})}else p++,t.push(d),n.push(m),a.push(0),i.push(m.length)}p--,t.pop(),n.pop(),a.pop(),i.pop()}return y(o),r}(void 0!==p?this.tokenize(t,a,p,n):[a]),className:"prism-code language-"+n,style:void 0!==l?l.root:{},getLineProps:this.getLineProps,getTokenProps:this.getTokenProps})},t}(l.Component)},87552:(e,t,n)=>{n.d(t,{Z:()=>a});const a={plain:{color:"#bfc7d5",backgroundColor:"#292d3e"},styles:[{types:["comment"],style:{color:"rgb(105, 112, 152)",fontStyle:"italic"}},{types:["string","inserted"],style:{color:"rgb(195, 232, 141)"}},{types:["number"],style:{color:"rgb(247, 140, 108)"}},{types:["builtin","char","constant","function"],style:{color:"rgb(130, 170, 255)"}},{types:["punctuation","selector"],style:{color:"rgb(199, 146, 234)"}},{types:["variable"],style:{color:"rgb(191, 199, 213)"}},{types:["class-name","attr-name"],style:{color:"rgb(255, 203, 107)"}},{types:["tag","deleted"],style:{color:"rgb(255, 85, 114)"}},{types:["operator"],style:{color:"rgb(137, 221, 255)"}},{types:["boolean"],style:{color:"rgb(255, 88, 116)"}},{types:["keyword"],style:{fontStyle:"italic"}},{types:["doctype"],style:{color:"rgb(199, 146, 234)",fontStyle:"italic"}},{types:["namespace"],style:{color:"rgb(178, 204, 214)"}},{types:["url"],style:{color:"rgb(221, 221, 221)"}}]}}}]);