"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[78199],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),g=c(n),m=a,d=g["".concat(s,".").concat(m)]||g[m]||u[m]||i;return n?r.createElement(d,o(o({ref:t},p),{},{components:n})):r.createElement(d,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>i});var r=n(67294),a=n(75402);const i=function(e){return r.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},92953:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905)),i=n(48720);const o={id:"accessing",title:"Accessing"},l=void 0,s={unversionedId:"tuples/accessing",id:"version-1.5.0/tuples/accessing",title:"Accessing",description:"If we want to get the first and second names of a pair, we can use",source:"@site/versioned_docs/version-1.5.0/tuples/accessing.md",sourceDirName:"tuples",slug:"/tuples/accessing",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/tuples/accessing",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"accessing",title:"Accessing"},sidebar:"docs",previous:{title:"Declaring",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/tuples/declaring"},next:{title:"Declaring",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/functions/declaring"}},c={},p=[],u={toc:p};function g(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"If we want to get the first and second names of a pair, we can use\ndestructuring. Destructuring a tuple allows us to give names to the\nelements inside the tuple:"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=destructuring",group:"destructuring"},'let friends = "Alice", "Bob" // Parentheses are optional\nlet alice, bob = friends\n')),(0,a.kt)("p",null,"That single definition actually introduces in the current scope ",(0,a.kt)("em",{parentName:"p"},"two"),"\nconstants, ",(0,a.kt)("inlineCode",{parentName:"p"},"alice")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"bob"),". Sometimes we might want to ignore a\ncomponent of the tuple, in which case we use the character ",(0,a.kt)("inlineCode",{parentName:"p"},"_"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=destructuring",group:"destructuring"},"let alice, _ = friends\n")),(0,a.kt)("p",null,"Alternatively, if we still want to give a meaningful name to a useless\ncomponent, we can use a silent variable for it, by prefixing it with\n",(0,a.kt)("inlineCode",{parentName:"p"},"_"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=destructuring",group:"destructuring"},"let alice, _bob = friends // This alice shadows the previous one\n")),(0,a.kt)("p",null,"We can destructure nested tuples in the same manner:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=destructuring",group:"destructuring"},'let deep = (1, (2n, "Hello"))\nlet _, (_, greeting) = deep // greeting = "Hello"\n')),(0,a.kt)("p",null,"This works well if we want to give a name to a component (like\n",(0,a.kt)("inlineCode",{parentName:"p"},"greeting")," above), but we might simply want the value of a component\nwithout naming it. In that case, we use the binary operator ",(0,a.kt)("inlineCode",{parentName:"p"},"."),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=destructuring",group:"destructuring"},'let film = deep.1.1 ^ ", Dolly!" // film = "Hello, Dolly!"\n')),(0,a.kt)("p",null,"The first component has index ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),", the second ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," etc.")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=destructuring",group:"destructuring"},'const friends = ["Alice", "Bob"];\nconst [alice, bob] = friends;\n')),(0,a.kt)("p",null,"That single definition actually introduces in the current scope ",(0,a.kt)("em",{parentName:"p"},"two"),"\nconstants, ",(0,a.kt)("inlineCode",{parentName:"p"},"alice")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"bob"),". Alternatively, if we still want to give\na meaningful name to a useless component, we can use a silent variable\nfor it, by prefixing it with ",(0,a.kt)("inlineCode",{parentName:"p"},"_"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=destructuring",group:"destructuring"},"const [alice2, _bob] = friends;\n")),(0,a.kt)("p",null,"Note how we renamed ",(0,a.kt)("inlineCode",{parentName:"p"},"alice")," as ",(0,a.kt)("inlineCode",{parentName:"p"},"alice2")," in order to avoid a collision\n(redefinition) with previous one in the same top-level scope."),(0,a.kt)("p",null,"We can destructure nested tuples in the same manner:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=destructuring",group:"destructuring"},'const deep = [1, [2n, "Hello"]];\nconst [_x, [_y, greeting]] = deep; // greeting == "Hello"\n')),(0,a.kt)("p",null,"This works well if we want to give a name to a component (like\n",(0,a.kt)("inlineCode",{parentName:"p"},"greeting")," above), but we might simply want the value of a component\nwithout naming it. In that case, we use the binary operator ",(0,a.kt)("inlineCode",{parentName:"p"},"[]"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=destructuring",group:"destructuring"},'const film = deep[1][1] + ", Dolly!" // film == "Hello, Dolly!"\n')),(0,a.kt)("p",null,"The first component has index ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),", the second ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," etc.")))}g.isMDXComponent=!0}}]);