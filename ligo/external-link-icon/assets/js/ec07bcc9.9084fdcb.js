"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[97117],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),p=u(t),m=i,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||o;return t?r.createElement(f,l(l({ref:n},s),{},{components:t})):r.createElement(f,l({ref:n},s))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,l=new Array(o);l[0]=p;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:i,l[1]=a;for(var u=2;u<o;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},48720:(e,n,t)=>{t.d(n,{D:()=>i.Z,Z:()=>o});var r=t(67294),i=t(75402);const o=function(e){return r.createElement(i.Z.Consumer,null,(n=>{let{syntax:t}=n;return t===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},82502:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>c,toc:()=>s});var r=t(87462),i=(t(67294),t(3905)),o=t(48720);const l={id:"including",title:"Including"},a=void 0,c={unversionedId:"modules/including",id:"version-1.5.0/modules/including",title:"Including",description:"When writing a new version of a module, it is often needed to add new",source:"@site/versioned_docs/version-1.5.0/modules/including.md",sourceDirName:"modules",slug:"/modules/including",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/modules/including",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"including",title:"Including"},sidebar:"docs",previous:{title:"Importing",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/modules/importing"},next:{title:"Declaring",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/signatures/declaring"}},u={},s=[],d={toc:s};function p(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"When writing a new version of a module, it is often needed to add new\nfeatures, that is, new types and values, for example when implementing\nthe next version of a standard. This can be achieved by defining a new\nmodule that includes the types and values of the old one, and defines\nnew ones."),(0,i.kt)("p",null,"In the following example, let us extend the ",(0,i.kt)("inlineCode",{parentName:"p"},"Euro")," module with a 10\neuro note. The inclusion of a module ",(0,i.kt)("inlineCode",{parentName:"p"},"M")," is specified with a field\n",(0,i.kt)("inlineCode",{parentName:"p"},"include M"),", like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=including",group:"including"},"module Euro =\n  struct\n    type t = nat\n    let add (a, b : t * t) : t = a + b\n    let one : t = 1n\n    let two : t = 2n\n  end\n\nmodule NewEuro =\n  struct\n    include Euro\n    let ten : t = 10n\n  end\n"))),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},"This feature is not available in JsLIGO."))}p.isMDXComponent=!0}}]);