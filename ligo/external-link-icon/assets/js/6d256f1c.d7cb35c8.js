"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[47935],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},p=Object.keys(e);for(a=0;a<p.length;a++)t=p[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(a=0;a<p.length;a++)t=p[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),m=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=m(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,p=e.originalType,l=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=m(t),f=r,g=u["".concat(l,".").concat(f)]||u[f]||c[f]||p;return t?a.createElement(g,i(i({ref:n},s),{},{components:t})):a.createElement(g,i({ref:n},s))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var p=t.length,i=new Array(p);i[0]=u;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var m=2;m<p;m++)i[m]=t[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},48720:(e,n,t)=>{t.d(n,{D:()=>r.Z,Z:()=>p});var a=t(67294),r=t(75402);const p=function(e){return a.createElement(r.Z.Consumer,null,(n=>{let{syntax:t}=n;return t===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},86686:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=t(87462),r=(t(67294),t(3905)),p=t(48720);const i={id:"mapping",title:"Mapping"},o=void 0,l={unversionedId:"maps/mapping",id:"version-1.6.0/maps/mapping",title:"Mapping",description:"We may want to change all the values of a given map by applying to",source:"@site/versioned_docs/version-1.6.0/maps/mapping.md",sourceDirName:"maps",slug:"/maps/mapping",permalink:"/previews/ligo/external-link-icon/docs/1.6.0/maps/mapping",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"mapping",title:"Mapping"},sidebar:"docs",previous:{title:"Folding",permalink:"/previews/ligo/external-link-icon/docs/1.6.0/maps/folding"},next:{title:"Iterating",permalink:"/previews/ligo/external-link-icon/docs/1.6.0/maps/iterating"}},m={},s=[],c={toc:s};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"We may want to change all the values of a given map by applying to\nthem a function. This is called a ",(0,r.kt)("em",{parentName:"p"},"map operation"),", not to be confused\nwith the map data structure. The predefined functional iterator\nimplementing the mapped operation over maps is called ",(0,r.kt)("inlineCode",{parentName:"p"},"Map.map"),". It\ntakes a binding, that is, a key and its associated value in the map,\nand computes a new value for that key."),(0,r.kt)("p",null,"In the following example, from a map from integers to integers is made\na map whose values are the sum of the keys and values of each binding."),(0,r.kt)(p.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=map_mapping",group:"map_mapping"},"let my_map : (int, int) map = Map.literal [(0,0); (1,1); (2,2)]\n// plus_one = Map.literal [(0,0); (1,2); (2,4)]\nlet plus_one = Map.map (fun (k,v) -> k + v) my_map\n")),(0,r.kt)("p",null,"Note: See the predefined\n",(0,r.kt)("a",{parentName:"p",href:"../reference/map-reference"},"module Map"))),(0,r.kt)(p.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=map_mapping",group:"map_mapping"},"const my_map : map<int,int> = Map.literal([[0,0], [1,1], [2,2]]);\n// plus_one == Map.literal([[0,0],[1,2],[2,4]])\nconst plus_one = Map.map(([k,v]) => k + v, my_map);\n")),(0,r.kt)("p",null,"Note: See the predefined\n",(0,r.kt)("a",{parentName:"p",href:"../reference/map-reference"},"namespace Map"))))}u.isMDXComponent=!0}}]);