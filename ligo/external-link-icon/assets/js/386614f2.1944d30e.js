"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[30757],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,g=d["".concat(l,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(g,i(i({ref:t},u),{},{components:n})):r.createElement(g,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>o});var r=n(67294),a=n(75402);const o=function(e){return r.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},89192:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(87462),a=(n(67294),n(3905)),o=n(48720);const i={id:"updating",title:"Updating"},s=void 0,l={unversionedId:"sets/updating",id:"version-1.5.0/sets/updating",title:"Updating",description:"Previous sections show how to add and remove an element from a given",source:"@site/versioned_docs/version-1.5.0/sets/updating.md",sourceDirName:"sets",slug:"/sets/updating",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/sets/updating",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"updating",title:"Updating"},sidebar:"docs",previous:{title:"Removing",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/sets/removing"},next:{title:"Folding",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/sets/folding"}},p={},u=[],c={toc:u};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Previous sections show how to add and remove an element from a given\nset. The function ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.update")," can do both depending on a boolean\nvalue: if true, then the given value will be added to the set,\notherwise it will be removed (if present)."),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=set_updating",group:"set_updating"},"let nats : int set = Set.literal [3; 2; 2; 1]\nlet set_with_5 = Set.update 5 true nats\nlet set_without_3 = Set.update 3 false nats\n"))),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=set_updating",group:"set_updating"},"const nats: set<int> = Set.literal(list([3, 2, 2, 1]));\nconst set_with_5 = Set.update(5, true, nats);\nconst set_without_3 = Set.update(3, false, nats);\n"))),(0,a.kt)("p",null,"The function ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.update")," implements a one-value update. Sometime we\nwould like to provide a function that is applied in turn to ",(0,a.kt)("em",{parentName:"p"},"all")," the\nelements of the set, and specifies whether the element at hand has to\nbe discarded or replaced by a computed value. This is what\n",(0,a.kt)("inlineCode",{parentName:"p"},"Set.filter_map")," does."),(0,a.kt)("p",null,"As an example, let us consider a function that removes all the even\nnumbers from a set."),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=set_updating",group:"set_updating"},"let f x = if x mod 2 = 0n then None else Some x\n// odds = Set.literal [3, 1]\nlet odds = Set.filter_map f nats\n")),(0,a.kt)("p",null,"Note: See the predefined\n",(0,a.kt)("a",{parentName:"p",href:"../reference/set-reference/?lang=cameligo"},"module Set"))),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=set_updating",group:"set_updating"},"const f = x => x % 2 == 0n ? None() : Some(x);\n// odds == Set.literal (list([3, 1]))\nconst odds = Set.filter_map(f, nats);\n")),(0,a.kt)("p",null,"Note: See the predefined\n",(0,a.kt)("a",{parentName:"p",href:"../reference/set-reference/?lang=jsligo"},"namespace Set"))))}d.isMDXComponent=!0}}]);