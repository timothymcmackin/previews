"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[63621],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=s(n),u=r,f=d["".concat(l,".").concat(u)]||d[u]||m[u]||i;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>r.Z,Z:()=>i});var a=n(67294),r=n(75402);const i=function(e){return a.createElement(r.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},74633:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905)),i=n(48720);const o={id:"declaring",title:"Declaring"},p=void 0,l={unversionedId:"tuples/declaring",id:"version-1.5.0/tuples/declaring",title:"Declaring",description:"Tuples gather a given number of values in a specific order and those",source:"@site/versioned_docs/version-1.5.0/tuples/declaring.md",sourceDirName:"tuples",slug:"/tuples/declaring",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/tuples/declaring",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"declaring",title:"Declaring"},sidebar:"docs",previous:{title:"Verbatim",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/strings/verbatim"},next:{title:"Accessing",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/tuples/accessing"}},s={},c=[],m={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("p",null,"Tuples gather a given number of values in a specific order and those\nvalues, called ",(0,r.kt)("em",{parentName:"p"},"components"),", can be retrieved by their index\n(position).  Probably the most common tuple is the ",(0,r.kt)("em",{parentName:"p"},"pair"),". For\nexample, if we were storing coordinates on a two dimensional grid we\nmight use a pair ",(0,r.kt)("inlineCode",{parentName:"p"},"(x,y)")," to store the coordinates ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"y"),". There\nis a ",(0,r.kt)("em",{parentName:"p"},"specific order"),", so ",(0,r.kt)("inlineCode",{parentName:"p"},"(y,x)")," is not equal to ",(0,r.kt)("inlineCode",{parentName:"p"},"(x,y)")," in\ngeneral. The number of components is part of the type of a tuple, so,\nfor example, we cannot add an extra component to a pair and obtain a\ntriple of the same type: ",(0,r.kt)("inlineCode",{parentName:"p"},"(x,y)")," has always a different type from\n",(0,r.kt)("inlineCode",{parentName:"p"},"(x,y,z)"),", whereas ",(0,r.kt)("inlineCode",{parentName:"p"},"(y,x)")," might have the same type as ",(0,r.kt)("inlineCode",{parentName:"p"},"(x,y)"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Parentheses are optional, so ",(0,r.kt)("inlineCode",{parentName:"p"},"(x,y)")," can be written ",(0,r.kt)("inlineCode",{parentName:"p"},"x,y")," if the\ncontext captures neither ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," nor ",(0,r.kt)("inlineCode",{parentName:"p"},"y"),".")),(0,r.kt)("p",null,"Tuple components can be of arbitrary types. A pair is a 2-tuple. If it\ncontains a first component of type ",(0,r.kt)("inlineCode",{parentName:"p"},"t_1")," and a second component of\ntype ",(0,r.kt)("inlineCode",{parentName:"p"},"t_2"),", its type is written ",(0,r.kt)("inlineCode",{parentName:"p"},"t_1 * t_2"),". If more components: ",(0,r.kt)("inlineCode",{parentName:"p"},"t1 *\nt2 * ... * t_n"),". (We can think of tuple types as products of types.)\nTuple types do not have to be defined before they can be used:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=tuple",group:"tuple"},'let friends = "Alice", "Bob" // Parentheses are optional\n')),(0,r.kt)("p",null,"but it is sometimes more informative to define a type. Type\ndefinitions are introduced with the keyword ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),", like value\ndefinitions are with ",(0,r.kt)("inlineCode",{parentName:"p"},"let"),". Instead of a value expression as a\nright-hand side, we have a type expression:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=tuple",group:"tuple"},'type couple = string * string\nlet friends : couple = "Alice", "Bob" // Parentheses are optional\n'))),(0,r.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("p",null,"Tuples gather a given number of values in a specific order and those\nvalues, called ",(0,r.kt)("em",{parentName:"p"},"components"),", can be retrieved by their index\n(position).  Probably the most common tuple is the ",(0,r.kt)("em",{parentName:"p"},"pair"),". For\nexample, if we were storing coordinates on a two dimensional grid we\nmight use a pair ",(0,r.kt)("inlineCode",{parentName:"p"},"[x, y]")," to store the coordinates ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"y"),". There\nis a ",(0,r.kt)("em",{parentName:"p"},"specific order"),", so ",(0,r.kt)("inlineCode",{parentName:"p"},"[y, x]")," is not equal to ",(0,r.kt)("inlineCode",{parentName:"p"},"[x, y]")," in\ngeneral. The number of components is part of the type of a tuple, so,\nfor example, we cannot add an extra component to a pair and obtain a\ntriple of the same type: ",(0,r.kt)("inlineCode",{parentName:"p"},"[x, y]")," has always a different type from\n",(0,r.kt)("inlineCode",{parentName:"p"},"[x, y, z]"),", whereas ",(0,r.kt)("inlineCode",{parentName:"p"},"[y, x]")," might have the same type as ",(0,r.kt)("inlineCode",{parentName:"p"},"[x, y]"),"."),(0,r.kt)("p",null,"Tuple components can be of arbitrary types. A pair is a 2-tuple. If it\ncontains a first component of type ",(0,r.kt)("inlineCode",{parentName:"p"},"t_1")," and a second component of\ntype ",(0,r.kt)("inlineCode",{parentName:"p"},"t_2"),", its type is written ",(0,r.kt)("inlineCode",{parentName:"p"},"[t_1, t_2]"),". If more components:\n",(0,r.kt)("inlineCode",{parentName:"p"},"[t1, t2, ..., t_n]"),". (We can think of tuple types as products of\ntypes.) Tuple types do not have to be defined before they can be used:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=tuple",group:"tuple"},'const friends = ["Alice", "Bob"];\n')),(0,r.kt)("p",null,"but it is sometimes more informative to define a type. Type\ndefinitions are introduced with the keyword ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),", like value\ndefinitions are with ",(0,r.kt)("inlineCode",{parentName:"p"},"const"),". Instead of a value expression as a\nright-hand side, we have a type expression:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=tuple_alt",group:"tuple_alt"},'type couple = [string, string];\nconst friends : couple = ["Alice", "Bob"];\n'))))}d.isMDXComponent=!0}}]);