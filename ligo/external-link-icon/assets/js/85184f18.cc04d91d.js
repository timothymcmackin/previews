"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[80306],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),g=s(r),d=a,m=g["".concat(p,".").concat(d)]||g[d]||u[d]||o;return r?n.createElement(m,i(i({ref:t},c),{},{components:r})):n.createElement(m,i({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=g;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},37026:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(87462),a=(r(67294),r(3905));const o={},i=void 0,l={unversionedId:"manpages/print ast-aggregated",id:"manpages/print ast-aggregated",title:"print ast-aggregated",description:"SYNOPSIS",source:"@site/../docs/manpages/print ast-aggregated.md",sourceDirName:"manpages",slug:"/manpages/print ast-aggregated",permalink:"/previews/ligo/external-link-icon/docs/next/manpages/print ast-aggregated",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"API",previous:{title:"run test-expr",permalink:"/previews/ligo/external-link-icon/docs/next/manpages/run test-expr"},next:{title:"print ast-core",permalink:"/previews/ligo/external-link-icon/docs/next/manpages/print ast-core"}},p={},s=[{value:"SYNOPSIS",id:"synopsis",level:3},{value:"DESCRIPTION",id:"description",level:3},{value:"FLAGS",id:"flags",level:3}],c={toc:s};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"synopsis"},"SYNOPSIS"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"ligo print ast-aggregated SOURCE_FILE\n")),(0,a.kt)("h3",{id:"description"},"DESCRIPTION"),(0,a.kt)("p",null,"This sub-command prints the source file in the AST aggregated stage."),(0,a.kt)("h3",{id:"flags"},"FLAGS"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"--display-format FORMAT"),"\nthe format that will be used by the CLI. Available formats are 'dev', 'json', and 'human-readable' (default). When human-readable lacks details (we are still tweaking it), please contact us and use another format in the meanwhile. (alias: --format)"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"--library LIBS"),"\nA comma-separated list of paths to directories where to search for files to be included by the preprocessor (alias: -l)"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"--no-color"),"\ndisable coloring in CLI output"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"--parser-error-recovery"),"\nEnable error-recovery in the parser."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"--project-root PATH"),"\nThe path to root of the project."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"--self-pass"),"\napply the self pass"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"--skip-analytics"),"\nAvoid ligo analytics publication. Configurable with environment variable LIGO_SKIP_ANALYTICS too"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"--syntax SYNTAX"),'\nthe syntax that will be used. Currently supported syntaxes are "cameligo" and "jsligo". By default, the syntax is guessed from the extension (.mligo and .jsligo respectively). (alias: -s)'),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"--test"),"\nforce testing mode."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"--typer-error-recovery"),"\nEnable error-recovery in the typer."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"--warn-infinite-loop"),"\nwarn about infinite loop"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"--warn-unused-rec"),"\nwarn about unused recursion in a recursive function"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"-p PROTOCOL"),"\nchoose protocol's types/values pre-loaded into the LIGO environment (deprecated) (alias: --protocol)"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"-help"),"\nprint this help text and exit (alias: -?)"))}u.isMDXComponent=!0}}]);