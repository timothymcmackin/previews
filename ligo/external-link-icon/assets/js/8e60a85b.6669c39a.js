"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[23260],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,y=m["".concat(i,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(y,s(s({ref:t},l),{},{components:n})):a.createElement(y,s({ref:t},l))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>r.Z,Z:()=>o});var a=n(67294),r=n(75402);const o=function(e){return a.createElement(r.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},42582:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var a=n(87462),r=(n(67294),n(3905)),o=n(48720);const s={id:"composite-types",title:"Composite Types"},c=void 0,i={unversionedId:"language-basics/composite-types",id:"language-basics/composite-types",title:"Composite Types",description:"Structured types",source:"@site/../docs/language-basics/composite-types.md",sourceDirName:"language-basics",slug:"/language-basics/composite-types",permalink:"/previews/ligo/external-link-icon/docs/next/language-basics/composite-types",draft:!1,tags:[],version:"current",frontMatter:{id:"composite-types",title:"Composite Types"}},p={},l=[{value:"Structured types",id:"structured-types",level:2}],u={toc:l};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"structured-types"},"Structured types"),(0,r.kt)("p",null,"Often contracts require complex data structures, which in turn require\nwell-typed storage or functions to work with. LIGO offers a simple way\nto compose simple types into ",(0,r.kt)("em",{parentName:"p"},"structured types"),"."),(0,r.kt)("p",null,"The first of those structured types is the ",(0,r.kt)("em",{parentName:"p"},"record"),", which aggregates\ntypes as ",(0,r.kt)("em",{parentName:"p"},"fields")," and indexes them with a ",(0,r.kt)("em",{parentName:"p"},"field name"),". In the example\nbelow you can see the definition of data types for a ledger that keeps\nthe balance and number of previous transactions for a given account."),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=c",group:"c"},'// Type aliasing\n\ntype account = address\ntype number_of_transactions = nat\n\n// The type account_data is a record with two fields.\n\ntype account_data = {\n  balance : tez;\n  transactions : number_of_transactions\n}\n\n// A ledger is a map from accounts to account_data\n\ntype ledger = (account, account_data) map\n\nlet my_ledger : ledger = Map.literal\n  [(("tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" : address),\n    {balance = 10mutez; transactions = 5n})]\n'))),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=c",group:"c"},'// Type aliasing\n\ntype account = address;\ntype number_of_transactions = nat;\n\n// The type account_data is a record with two fields.\n\ntype account_data = {\n  balance: tez,\n  transactions: number_of_transactions\n};\n\n// A ledger is a map from accounts to account_data\n\ntype ledger = map <account, account_data>;\n\nconst my_ledger : ledger =\n  Map.literal([\n    ["tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" as address,\n     {balance: 10 as mutez, transactions: 5 as nat}]]);\n'))),(0,r.kt)("p",null,"Complementary to objects are the ",(0,r.kt)("em",{parentName:"p"},"variant types"),", which are described in the\nsection on ",(0,r.kt)("a",{parentName:"p",href:"../data-types/variants#matching"},"pattern matching"),".\nObjects are a product of types, while variant types are sums of types."))}m.isMDXComponent=!0}}]);