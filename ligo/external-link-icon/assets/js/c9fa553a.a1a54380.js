"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[19422],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),y=r,d=m["".concat(o,".").concat(y)]||m[y]||u[y]||s;return n?a.createElement(d,i(i({ref:t},c),{},{components:n})):a.createElement(d,i({ref:t},c))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<s;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>r.Z,Z:()=>s});var a=n(67294),r=n(75402);const s=function(e){return a.createElement(r.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},13087:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(87462),r=(n(67294),n(3905)),s=n(48720);const i={id:"types",title:"Simple Types"},l=void 0,o={unversionedId:"language-basics/types",id:"version-1.9.2/language-basics/types",title:"Simple Types",description:"LIGO is strongly and statically typed. This means that the compiler",source:"@site/versioned_docs/version-1.9.2/language-basics/types.md",sourceDirName:"language-basics",slug:"/language-basics/types",permalink:"/previews/ligo/external-link-icon/docs/language-basics/types",draft:!1,tags:[],version:"1.9.2",frontMatter:{id:"types",title:"Simple Types"}},p={},c=[{value:"Built-in types",id:"built-in-types",level:2},{value:"Type aliases",id:"type-aliases",level:2},{value:"Simple types",id:"simple-types",level:2}],u={toc:c};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"LIGO is strongly and statically typed.")," This means that the compiler\nchecks how your contract processes data, ensuring that each function's\nexpectations are met. If it passes the test, your contract will not fail at\nrun-time due to some inconsistent assumptions on your data. This is\ncalled ",(0,r.kt)("em",{parentName:"p"},"type checking"),"."),(0,r.kt)("p",null,"LIGO types are built on top of Michelson's type system."),(0,r.kt)("h2",{id:"built-in-types"},"Built-in types"),(0,r.kt)("p",null,"For quick reference, you can find all the built-in types ",(0,r.kt)("a",{parentName:"p",href:"https://gitlab.com/ligolang/ligo/-/blob/dev/src/main/build/ligo_lib/std_lib.mligo#L1-33"},"here"),"."),(0,r.kt)("h2",{id:"type-aliases"},"Type aliases"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Type aliasing")," consists of renaming a given type when the context\ncalls for a more precise name. This increases readability and\nmaintainability of your smart contracts. For example we can choose to\nalias a string type as an animal breed - this will allow us to\ncommunicate our intent with added clarity."),(0,r.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=a",group:"a"},'type breed = string\nlet dog_breed : breed = "Saluki"\n'))),(0,r.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=a",group:"a"},'type breed = string;\nconst dog_breed: breed = "Saluki";\n'))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The above type definitions are aliases, which means that ",(0,r.kt)("inlineCode",{parentName:"p"},"breed")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"string")," are interchangeable in all contexts.")),(0,r.kt)("h2",{id:"simple-types"},"Simple types"),(0,r.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=b",group:"b"},'// The type account_balances denotes maps from addresses to tez\n\ntype account_balances = (address, tez) map\n\nlet ledger : account_balances =\n  Map.literal\n    [(("tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" : address), 10mutez)]\n'))),(0,r.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=b",group:"b"},'// The type account_balances denotes maps from addresses to tez\n\ntype account_balances = map<address, tez>;\n\nconst ledger : account_balances =\n  Map.literal([["tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" as address, 10mutez]]);\n'))))}m.isMDXComponent=!0}}]);