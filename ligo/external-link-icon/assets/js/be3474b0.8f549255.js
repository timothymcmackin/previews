"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9289],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},y={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,g=u["".concat(l,".").concat(d)]||u[d]||y[d]||o;return n?a.createElement(g,s(s({ref:t},p),{},{components:n})):a.createElement(g,s({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>r.Z,Z:()=>o});var a=n(67294),r=n(75402);const o=function(e){return a.createElement(r.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},99191:(e,t,n)=>{n.d(t,{Z:()=>p});var a=n(23746),r=n(67294),o=n(52263),s=n(48720),i=n(87552);function l(){return l=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l.apply(this,arguments)}const{Prism:c}=n(23746);c.languages={...c.languages,cameligo:{...c.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:c.languages.typescript};const p=function(e){const{siteConfig:{themeConfig:{prism:t={}}}}=(0,o.Z)(),n=t.singleTheme||i.Z,[c,p]=(0,r.useState)(!1);return(0,r.useEffect)((()=>{p(!0)}),[]),r.createElement(s.D.Consumer,null,(t=>{let{syntax:o}=t;return o===e.syntax?r.createElement(a.default,l({},a.defaultProps,{key:c,language:e.syntax,code:e.children,theme:n}),(e=>{let{className:t,tokens:n,getLineProps:a,getTokenProps:o}=e;return r.createElement("h4",{className:t,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((e,t)=>r.createElement("div",a({line:e,key:t}),e.map(((e,t)=>r.createElement("span",o({token:e,key:t}))))))))})):r.createElement("div",null)}))}},30199:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905)),o=(n(48720),n(99191));const s={id:"test.state-reference",title:"state",hide_table_of_contents:!0},i=void 0,l={unversionedId:"reference/test.state-reference",id:"reference/test.state-reference",title:"state",description:"module reset",source:"@site/../docs/reference/test.state.md",sourceDirName:"reference",slug:"/reference/test.state-reference",permalink:"/previews/ligo/external-link-icon/docs/next/reference/test.state-reference",draft:!1,tags:[],version:"current",frontMatter:{id:"test.state-reference",title:"state",hide_table_of_contents:!0},sidebar:"API",previous:{title:"proxy",permalink:"/previews/ligo/external-link-icon/docs/next/reference/test.ticket.proxy-reference"},next:{title:"reset",permalink:"/previews/ligo/external-link-icon/docs/next/reference/test.state.reset-reference"}},c={},p=[],y={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/previews/ligo/external-link-icon/docs/next/reference/test.state.reset-reference"},"module reset")),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val restore : unit -> unit"),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"restore: (_: unit) => unit"),(0,r.kt)("p",null,"Pops a testing framework context from the stack of contexts, and sets\nit up as the new current context. In case the stack was empty, the\ncurrent context is kept."),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val save : unit -> unit"),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"save: (_: unit) => unit"),"Takes current testing framework context and saves it, pushing it into a stack of contexts.",(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val drop : unit -> unit"),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"drop: (_: unit) => unit"),(0,r.kt)("p",null,"Drops a testing framework context from the stack of contexts. In case\nthe stack was empty, nothing is done."),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val reset : nat -> tez list -> unit"),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"reset: (_: nat, amounts: list<tez>) => unit"),(0,r.kt)("p",null,"Generates a number of random bootstrapped accounts with a default\namount of ",(0,r.kt)("inlineCode",{parentName:"p"},"4000000")," tez. The passed list can be used to overwrite the\namount. By default, the state only has two bootstrapped\naccounts. Notice that since Ithaca, a percentage of an account's\nbalance is frozen (5% in testing mode) in case the account can be\ntaken to be a validator, and thus getting balance can show a different\namount to the one being set with ",(0,r.kt)("inlineCode",{parentName:"p"},"Test.State.reset"),"."),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val reset_at : timestamp -> nat -> tez list -> unit"),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"reset_at: (_: timestamp, _: nat, amounts: list<tez>) => unit"),(0,r.kt)("p",null,"Generates a number of random bootstrapped accounts with a default\namount of ",(0,r.kt)("inlineCode",{parentName:"p"},"4000000")," tez. The passed list can be used to overwrite the\namount. By default, the state only has two bootstrapped\naccounts. Notice that since Ithaca, a percentage of an account's\nbalance is frozen (5% in testing mode) in case the account can be\ntaken to be a validator, and thus getting balance can show a different\namount to the one being set with ",(0,r.kt)("inlineCode",{parentName:"p"},"Test.State.reset"),". It also takes a\nstarting timestamp for the genesis block."),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val register_delegate : key_hash -> unit"),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"register_delegate: (_: key_hash) => unit"),(0,r.kt)("p",null,"Registers a ",(0,r.kt)("inlineCode",{parentName:"p"},"key_hash")," corresponding to an account as a delegate."),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val register_constant : michelson_program -> string"),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"register_constant: (_: michelson_program) => string"),(0,r.kt)("p",null,"Registers a global constant, returns its hash as a string. See the\ndocumentation for global constants for an example of usage."),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val set_source : address -> unit"),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"set_source: (_: address) => unit"),(0,r.kt)("p",null,"Sets the source for ",(0,r.kt)("inlineCode",{parentName:"p"},"Test.transfer")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Test.originate"),"."),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val set_baker_policy : test_baker_policy -> unit"),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"set_baker_policy: (_: test_baker_policy) => unit"),(0,r.kt)("p",null,"Forces the baking policy for ",(0,r.kt)("inlineCode",{parentName:"p"},"Test.transfer")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Test.originate"),". By\ndefault, the first bootstrapped account."),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val set_baker : address -> unit"),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"set_baker: (_: address) => unit"),(0,r.kt)("p",null,"Forces the baker for ",(0,r.kt)("inlineCode",{parentName:"p"},"Test.transfer")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Test.originate"),", implemented\nusing ",(0,r.kt)("inlineCode",{parentName:"p"},"Test.set_baker_policy")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"By_account"),". By default, the first\nbootstrapped account."),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val bake_until : nat -> unit"),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"bake_until: (_: nat) => unit"),(0,r.kt)("p",null,"It bakes until a number of cycles pass, so that an account registered\nas delegate can effectively act as a baker. Note: It can be used in\ntests to manually advance time."),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val set_big_map : 'k 'v.int -> ('k, 'v) big_map -> unit"),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"set_big_map: <k, v>(_: int, _: big_map<k, v>) => unit"),(0,r.kt)("p",null,"The testing framework keeps an internal reference to the values\ncorresponding to big map identifiers. This function allows to override\nthe value of a particular big map identifier. It should not be\nnormally needed, except in particular circumstances such as using\ncustom bootstrap contracts that initialize big maps."),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val get_voting_power : key_hash -> nat"),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"get_voting_power: (_: key_hash) => nat"),(0,r.kt)("p",null,"Return the voting power of a given contract. This voting power\ncoincides with the weight of the contract in the voting listings\n(i.e., the rolls count) which is calculated at the beginning of every\nvoting period."),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val get_total_voting_power : unit -> nat"),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"get_total_voting_power: (_: unit) => nat"),(0,r.kt)("p",null,"Returns the total voting power of all contracts. The total voting\npower coincides with the sum of the rolls count of every contract in\nthe voting listings. The voting listings is calculated at the\nbeginning of every voting period."),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val last_originations : unit -> (address, address list) map"),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"last_originations: (_: unit) => map<address, list<address>>"),(0,r.kt)("p",null,"Returns addresses of orginated accounts in the last transfer. It is\ngiven in the form of a map binding the address of the source of the\norigination operation to the addresses of newly originated accounts."),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val last_events : 'a 'p 's.('p, 's) typed_address -> string -> 'a list"),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"last_events: <a, p, s>(_: typed_address<p, s>, tag: string) => list<a>"),(0,r.kt)("p",null,"Returns the list of all the event payloads emited with a given tag by\na given address. Any call to this function must be annotated with the\nexpected payload type."),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val stake : key_hash -> tez -> unit"),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"stake: (_: key_hash, amount: tez) => unit"))}u.isMDXComponent=!0},23746:(e,t,n)=>{n.r(t),n.d(t,{Prism:()=>a.Z,default:()=>g,defaultProps:()=>s});var a=n(87410);const r={plain:{backgroundColor:"#2a2734",color:"#9a86fd"},styles:[{types:["comment","prolog","doctype","cdata","punctuation"],style:{color:"#6c6783"}},{types:["namespace"],style:{opacity:.7}},{types:["tag","operator","number"],style:{color:"#e09142"}},{types:["property","function"],style:{color:"#9a86fd"}},{types:["tag-id","selector","atrule-id"],style:{color:"#eeebff"}},{types:["attr-name"],style:{color:"#c4b9fe"}},{types:["boolean","string","entity","url","attr-value","keyword","control","directive","unit","statement","regex","atrule","placeholder","variable"],style:{color:"#ffcc99"}},{types:["deleted"],style:{textDecorationLine:"line-through"}},{types:["inserted"],style:{textDecorationLine:"underline"}},{types:["italic"],style:{fontStyle:"italic"}},{types:["important","bold"],style:{fontWeight:"bold"}},{types:["important"],style:{color:"#c4b9fe"}}]};var o=n(67294),s={Prism:a.Z,theme:r};function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l.apply(this,arguments)}var c=/\r\n|\r|\n/,p=function(e){0===e.length?e.push({types:["plain"],content:"\n",empty:!0}):1===e.length&&""===e[0].content&&(e[0].content="\n",e[0].empty=!0)},y=function(e,t){var n=e.length;return n>0&&e[n-1]===t?e:e.concat(t)},u=function(e,t){var n=e.plain,a=Object.create(null),r=e.styles.reduce((function(e,n){var a=n.languages,r=n.style;return a&&!a.includes(t)||n.types.forEach((function(t){var n=l({},e[t],r);e[t]=n})),e}),a);return r.root=n,r.plain=l({},n,{backgroundColor:null}),r};function d(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===t.indexOf(a)&&(n[a]=e[a]);return n}const g=function(e){function t(){for(var t=this,n=[],a=arguments.length;a--;)n[a]=arguments[a];e.apply(this,n),i(this,"getThemeDict",(function(e){if(void 0!==t.themeDict&&e.theme===t.prevTheme&&e.language===t.prevLanguage)return t.themeDict;t.prevTheme=e.theme,t.prevLanguage=e.language;var n=e.theme?u(e.theme,e.language):void 0;return t.themeDict=n})),i(this,"getLineProps",(function(e){var n=e.key,a=e.className,r=e.style,o=l({},d(e,["key","className","style","line"]),{className:"token-line",style:void 0,key:void 0}),s=t.getThemeDict(t.props);return void 0!==s&&(o.style=s.plain),void 0!==r&&(o.style=void 0!==o.style?l({},o.style,r):r),void 0!==n&&(o.key=n),a&&(o.className+=" "+a),o})),i(this,"getStyleForToken",(function(e){var n=e.types,a=e.empty,r=n.length,o=t.getThemeDict(t.props);if(void 0!==o){if(1===r&&"plain"===n[0])return a?{display:"inline-block"}:void 0;if(1===r&&!a)return o[n[0]];var s=a?{display:"inline-block"}:{},i=n.map((function(e){return o[e]}));return Object.assign.apply(Object,[s].concat(i))}})),i(this,"getTokenProps",(function(e){var n=e.key,a=e.className,r=e.style,o=e.token,s=l({},d(e,["key","className","style","token"]),{className:"token "+o.types.join(" "),children:o.content,style:t.getStyleForToken(o),key:void 0});return void 0!==r&&(s.style=void 0!==s.style?l({},s.style,r):r),void 0!==n&&(s.key=n),a&&(s.className+=" "+a),s})),i(this,"tokenize",(function(e,t,n,a){var r={code:t,grammar:n,language:a,tokens:[]};e.hooks.run("before-tokenize",r);var o=r.tokens=e.tokenize(r.code,r.grammar,r.language);return e.hooks.run("after-tokenize",r),o}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.render=function(){var e=this.props,t=e.Prism,n=e.language,a=e.code,r=e.children,o=this.getThemeDict(this.props),s=t.languages[n];return r({tokens:function(e){for(var t=[[]],n=[e],a=[0],r=[e.length],o=0,s=0,i=[],l=[i];s>-1;){for(;(o=a[s]++)<r[s];){var u=void 0,d=t[s],g=n[s][o];if("string"==typeof g?(d=s>0?d:["plain"],u=g):(d=y(d,g.type),g.alias&&(d=y(d,g.alias)),u=g.content),"string"==typeof u){var m=u.split(c),f=m.length;i.push({types:d,content:m[0]});for(var h=1;h<f;h++)p(i),l.push(i=[]),i.push({types:d,content:m[h]})}else s++,t.push(d),n.push(u),a.push(0),r.push(u.length)}s--,t.pop(),n.pop(),a.pop(),r.pop()}return p(i),l}(void 0!==s?this.tokenize(t,a,s,n):[a]),className:"prism-code language-"+n,style:void 0!==o?o.root:{},getLineProps:this.getLineProps,getTokenProps:this.getTokenProps})},t}(o.Component)},87552:(e,t,n)=>{n.d(t,{Z:()=>a});const a={plain:{color:"#bfc7d5",backgroundColor:"#292d3e"},styles:[{types:["comment"],style:{color:"rgb(105, 112, 152)",fontStyle:"italic"}},{types:["string","inserted"],style:{color:"rgb(195, 232, 141)"}},{types:["number"],style:{color:"rgb(247, 140, 108)"}},{types:["builtin","char","constant","function"],style:{color:"rgb(130, 170, 255)"}},{types:["punctuation","selector"],style:{color:"rgb(199, 146, 234)"}},{types:["variable"],style:{color:"rgb(191, 199, 213)"}},{types:["class-name","attr-name"],style:{color:"rgb(255, 203, 107)"}},{types:["tag","deleted"],style:{color:"rgb(255, 85, 114)"}},{types:["operator"],style:{color:"rgb(137, 221, 255)"}},{types:["boolean"],style:{color:"rgb(255, 88, 116)"}},{types:["keyword"],style:{fontStyle:"italic"}},{types:["doctype"],style:{color:"rgb(199, 146, 234)",fontStyle:"italic"}},{types:["namespace"],style:{color:"rgb(178, 204, 214)"}},{types:["url"],style:{color:"rgb(221, 221, 221)"}}]}}}]);