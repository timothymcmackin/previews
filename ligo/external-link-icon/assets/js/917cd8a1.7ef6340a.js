"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[25429],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>m});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=t.createContext({}),s=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},p=function(e){var n=s(e.components);return t.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(r),m=a,g=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return r?t.createElement(g,i(i({ref:n},p),{},{components:r})):t.createElement(g,i({ref:n},p))}));function m(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},48720:(e,n,r)=>{r.d(n,{D:()=>a.Z,Z:()=>o});var t=r(67294),a=r(75402);const o=function(e){return t.createElement(a.Z.Consumer,null,(n=>{let{syntax:r}=n;return r===e.syntax?e.children:t.createElement(t.Fragment,null)}))}},55709:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var t=r(87462),a=(r(67294),r(3905)),o=r(48720);const i={id:"declaring",title:"Declaring"},l=void 0,c={unversionedId:"records/declaring",id:"version-1.5.0/records/declaring",title:"Declaring",description:"So far, we have seen relatively simple data types. LIGO also offers",source:"@site/versioned_docs/version-1.5.0/records/declaring.md",sourceDirName:"records",slug:"/records/declaring",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/records/declaring",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"declaring",title:"Declaring"},sidebar:"docs",previous:{title:"Looping",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/lists/looping"},next:{title:"Accessing",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/records/accessing"}},s={},p=[],d={toc:p};function u(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"So far, we have seen relatively simple data types. LIGO also offers\nmore complex built-in constructs, such as ",(0,a.kt)("em",{parentName:"p"},"records"),"."),(0,a.kt)("p",null,"Records are one-way data of different types can be packed into a\nsingle type. A record is made of a set of ",(0,a.kt)("em",{parentName:"p"},"fields"),", which are made of\na ",(0,a.kt)("em",{parentName:"p"},"field name")," and a ",(0,a.kt)("em",{parentName:"p"},"field type"),'. Given a record, the value bound to\na field is accessed by giving its name to the selection operator\n"',(0,a.kt)("inlineCode",{parentName:"p"},"."),'".'),(0,a.kt)("p",null,"Let us first consider an example of record type declaration."),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=records1",group:"records1"},"type user = {\n  id       : nat;\n  is_admin : bool;\n  name     : string\n}\n"))),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=records1",group:"records1"},"type user = {\n  id       : nat,\n  is_admin : bool,\n  name     : string\n};\n"))),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"And here is how a record value is defined:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=records1",group:"records1"},'let alice : user = {\n  id       = 1n;\n  is_admin = true;\n  name     = "Alice"\n}\n'))),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"And here is how a record value is defined:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=records1",group:"records1"},'const alice : user = {\n  id       : 1n,\n  is_admin : true,\n  name     : "Alice"\n};\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: A semicolon ",(0,a.kt)("inlineCode",{parentName:"p"},";")," can also separate fields instead of a\ncomma."))))}u.isMDXComponent=!0}}]);