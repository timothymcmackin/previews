"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[67293],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(t),f=i,g=u["".concat(s,".").concat(f)]||u[f]||m[f]||a;return t?r.createElement(g,o(o({ref:n},c),{},{components:t})):r.createElement(g,o({ref:n},c))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=u;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:i,o[1]=p;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},48720:(e,n,t)=>{t.d(n,{D:()=>i.Z,Z:()=>a});var r=t(67294),i=t(75402);const a=function(e){return r.createElement(i.Z.Consumer,null,(n=>{let{syntax:t}=n;return t===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},8313:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>p,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=t(87462),i=(t(67294),t(3905)),a=t(48720);const o={id:"sizing",title:"Sizing"},p=void 0,s={unversionedId:"maps/sizing",id:"version-1.5.0/maps/sizing",title:"Sizing",description:"The predefined function Map.size returns the number of bindings",source:"@site/versioned_docs/version-1.5.0/maps/sizing.md",sourceDirName:"maps",slug:"/maps/sizing",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/maps/sizing",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"sizing",title:"Sizing"},sidebar:"docs",previous:{title:"Declaring",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/maps/declaring"},next:{title:"Searching",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/maps/searching"}},l={},c=[],m={toc:c};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The predefined function ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.size")," returns the number of bindings\n(entries) in a given map."),(0,i.kt)(a.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=map_size",group:"map_size"},'let my_map : (int, string) map =\n  Map.literal [(1,"one"); (2,"two")]\nlet size : nat = Map.size my_map // = 2\n')),(0,i.kt)("p",null,"Note: See the predefined\n",(0,i.kt)("a",{parentName:"p",href:"../reference/map-reference"},"module Map"))),(0,i.kt)(a.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=map_size",group:"map_size"},'const my_map: map<int,string> =\n  Map.literal(list([[1,"one"],[2,"two"]]));\nconst size: nat = Map.size(my_map); // == 2\n')),(0,i.kt)("p",null,"Note: See the predefined\n",(0,i.kt)("a",{parentName:"p",href:"../reference/map-reference"},"namespace Map"))))}u.isMDXComponent=!0}}]);