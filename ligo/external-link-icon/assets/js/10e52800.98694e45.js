"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[31526],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=s(n),g=a,f=m["".concat(l,".").concat(g)]||m[g]||u[g]||i;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>i});var r=n(67294),a=n(75402);const i=function(e){return r.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},32588:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(87462),a=(n(67294),n(3905)),i=n(48720);const o={id:"mapping",title:"Mapping"},p=void 0,l={unversionedId:"sets/mapping",id:"version-1.6.0/sets/mapping",title:"Mapping",description:"We may want to change all the elements of a given set by applying to",source:"@site/versioned_docs/version-1.6.0/sets/mapping.md",sourceDirName:"sets",slug:"/sets/mapping",permalink:"/previews/ligo/external-link-icon/docs/1.6.0/sets/mapping",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"mapping",title:"Mapping"},sidebar:"docs",previous:{title:"Folding",permalink:"/previews/ligo/external-link-icon/docs/1.6.0/sets/folding"},next:{title:"Iterating",permalink:"/previews/ligo/external-link-icon/docs/1.6.0/sets/iterating"}},s={},c=[],u={toc:c};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"We may want to change all the elements of a given set by applying to\nthem a function. This is called a ",(0,a.kt)("em",{parentName:"p"},"map operation"),", not to be confused\nwith the map data structure. The predefined functional iterator\nimplementing the mapped operation over sets is called ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.map")," and is\nused as follows."),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=set_mapping",group:"set_mapping"},"let s : int set = Set.literal [5; 1; 2; 2]\n// plus_one = Set.literal [6; 2; 3]\nlet plus_one : int set = Set.map (fun i -> i + 1) s\n")),(0,a.kt)("p",null,"Note: See the predefined\n",(0,a.kt)("a",{parentName:"p",href:"../reference/set-reference/?lang=cameligo"},"module Set"))),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=set_mapping",group:"set_mapping"},"const s: set<int> = Set.literal([5,1,2,2]);\n// plus_one == Set.literal([6,2,3])\nconst plus_one: set<int> = Set.map(i => i + 1, s);\n")),(0,a.kt)("p",null,"Note: See the predefined\n",(0,a.kt)("a",{parentName:"p",href:"../reference/set-reference/?lang=jsligo"},"namespace Set"))))}m.isMDXComponent=!0}}]);