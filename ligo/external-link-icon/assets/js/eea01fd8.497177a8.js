"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[68658],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>y});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(r),y=o,m=u["".concat(s,".").concat(y)]||u[y]||d[y]||a;return r?n.createElement(m,l(l({ref:t},p),{},{components:r})):n.createElement(m,l({ref:t},p))}));function y(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},48720:(e,t,r)=>{r.d(t,{D:()=>o.Z,Z:()=>a});var n=r(67294),o=r(75402);const a=function(e){return n.createElement(o.Z.Consumer,null,(t=>{let{syntax:r}=t;return r===e.syntax?e.children:n.createElement(n.Fragment,null)}))}},85580:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var n=r(87462),o=(r(67294),r(3905)),a=r(48720);const l={id:"layout",title:"layout"},i=void 0,s={unversionedId:"reference/decorators/layout",id:"reference/decorators/layout",title:"layout",description:"Michelson does not natively support records or variants. These have to",source:"@site/../docs/reference/decorators/layout.md",sourceDirName:"reference/decorators",slug:"/reference/decorators/layout",permalink:"/previews/ligo/external-link-icon/docs/next/reference/decorators/layout",draft:!1,tags:[],version:"current",frontMatter:{id:"layout",title:"layout"}},c={},p=[],d={toc:p};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Michelson does not natively support records or variants. These have to\nbe encoded using nested ",(0,o.kt)("inlineCode",{parentName:"p"},"pair")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"or")," type constructors, therefore\nmany tree representations could translate to the same linear sequence\nof fields or constructors, depending on the traversal."),(0,o.kt)("p",null,"LIGO enables to choose between a ",(0,o.kt)("em",{parentName:"p"},"right comb"),", which preserves the\norder of the fields or constructors as declared in the source code,\nand a ",(0,o.kt)("em",{parentName:"p"},"left-balanced, alphabetically ordered binary tree"),"."),(0,o.kt)(a.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("p",null,"The attributes ",(0,o.kt)("inlineCode",{parentName:"p"},'[@layout "comb"]')," and ",(0,o.kt)("inlineCode",{parentName:"p"},'[@layout "tree"]')," can be placed\nbefore a record type expression (that is, before ",(0,o.kt)("inlineCode",{parentName:"p"},"{ ... }"),"), and\nbefore the leading vertical bar ",(0,o.kt)("inlineCode",{parentName:"p"},"|")," of a variant type expression, in\norder to explicitly choose the desired layout."),(0,o.kt)("p",null,"For example,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=layout",group:"layout"},"type transfer =\n  [@layout comb]\n  { [@annot from] address_from : address;\n    [@annot to] address_to : address;\n    value : nat }\n"))),(0,o.kt)(a.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("p",null,"The decorators ",(0,o.kt)("inlineCode",{parentName:"p"},'@layout("comb")')," and ",(0,o.kt)("inlineCode",{parentName:"p"},'@layout("tree")')," can be placed\nbefore a record type expression (that is, before ",(0,o.kt)("inlineCode",{parentName:"p"},"{ ... }"),"), and\nbefore the leading vertical bar ",(0,o.kt)("inlineCode",{parentName:"p"},"|")," of a variant type expression, in\norder to explicitly choose the desired layout."),(0,o.kt)("p",null,"For example,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=layout",group:"layout"},'type transfer =\n  // @layout("comb")\n  { // @annot("from")\n    address_from: address;\n    // @annot("to")\n    address_to: address;\n    value: nat }\n'))),(0,o.kt)("p",null,"Note that the default layout is ",(0,o.kt)("inlineCode",{parentName:"p"},"comb"),", and, except for\ninter-operations with pre-1.0.0, it should not be updated."))}u.isMDXComponent=!0}}]);