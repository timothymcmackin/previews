"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[51828],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=p(n),d=o,y=h["".concat(l,".").concat(d)]||h[d]||u[d]||a;return n?r.createElement(y,i(i({ref:t},c),{},{components:n})):r.createElement(y,i({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>o.Z,Z:()=>a});var r=n(67294),o=n(75402);const a=function(e){return r.createElement(o.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},99191:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(23746),o=n(67294),a=n(52263),i=n(48720),s=n(87552);function l(){return l=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l.apply(this,arguments)}const{Prism:p}=n(23746);p.languages={...p.languages,cameligo:{...p.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:p.languages.typescript};const c=function(e){const{siteConfig:{themeConfig:{prism:t={}}}}=(0,a.Z)(),n=t.singleTheme||s.Z,[p,c]=(0,o.useState)(!1);return(0,o.useEffect)((()=>{c(!0)}),[]),o.createElement(i.D.Consumer,null,(t=>{let{syntax:a}=t;return a===e.syntax?o.createElement(r.default,l({},r.defaultProps,{key:p,language:e.syntax,code:e.children,theme:n}),(e=>{let{className:t,tokens:n,getLineProps:r,getTokenProps:a}=e;return o.createElement("h4",{className:t,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((e,t)=>o.createElement("div",r({line:e,key:t}),e.map(((e,t)=>o.createElement("span",a({token:e,key:t}))))))))})):o.createElement("div",null)}))}},70273:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>p,toc:()=>u});var r=n(87462),o=(n(67294),n(3905)),a=n(48720),i=n(99191);const s={id:"bitwise-reference",title:"bitwise",hide_table_of_contents:!0},l=void 0,p={unversionedId:"reference/bitwise-reference",id:"reference/bitwise-reference",title:"bitwise",description:"Bitwise operations",source:"@site/../docs/reference/bitwise.md",sourceDirName:"reference",slug:"/reference/bitwise-reference",permalink:"/previews/ligo/external-link-icon/docs/next/reference/bitwise-reference",draft:!1,tags:[],version:"current",frontMatter:{id:"bitwise-reference",title:"bitwise",hide_table_of_contents:!0},sidebar:"API",previous:{title:"list",permalink:"/previews/ligo/external-link-icon/docs/next/reference/list-reference"},next:{title:"set",permalink:"/previews/ligo/external-link-icon/docs/next/reference/set-reference"}},c={},u=[],h={toc:u};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Bitwise operations"),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val and : 'a 'b.'a -> 'b -> ('a, 'b) external_and"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"and: <a, b>(left: a, right: b) => external_and<a, b>"),(0,o.kt)("p",null,"The call ",(0,o.kt)("inlineCode",{parentName:"p"},"Bitiwise.and a b"),' is the conjunction defined on boolean,\nnatural number and bytes operands. In the boolean case, the result is\nthe logical "and" of the operands. In the natural number and bytes\ncases, the result is the bitwise "and" of the operands.'),(0,o.kt)("p",null,"The function ",(0,o.kt)("inlineCode",{parentName:"p"},"Bitwise.and")," is also defined when the left operand is\nof type ",(0,o.kt)("inlineCode",{parentName:"p"},"int"),". Negative numbers are considered in two's complement\nrepresentation, starting with a virtual infinite number of 1s."),(0,o.kt)("p",null,"When ",(0,o.kt)("inlineCode",{parentName:"p"},"Bitwise.and"),' is used for bytes operands, the bytes result has\nthe same length as the shorter operand. The prefix of the longer\noperand is cut to match with the length of the shorter one before\ntaking the bitwise "and".'),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val @or : 'a 'b.'a -> 'b -> ('a, 'b) external_or"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"or: <a, b>(left: a, right: b) => external_or<a, b>"),(0,o.kt)(a.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("p",null,"The call ",(0,o.kt)("inlineCode",{parentName:"p"},"Bitwise.@or a b"),' is the disjunction defined on boolean,\nnatural number and bytes operands. In the boolean case, the result is\nthe logical "or" of the operands. In the natural number and bytes\ncases, the result is the bitwise "or" of the operands.'),(0,o.kt)("p",null,"When the function ",(0,o.kt)("inlineCode",{parentName:"p"},"Bitwise.@or"),' is used for bytes operands, the result\nbytes has the same length as the longer operand. The shorter operand\nis zero-padded on the left to match with the length of the longer one\nbefore taking the bitwise "or".')),(0,o.kt)(a.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("p",null,"The call ",(0,o.kt)("inlineCode",{parentName:"p"},"Bitwise.or a b"),' is the disjunction defined on boolean,\nnatural number and bytes operands. In the boolean case, the result is\nthe logical "or" of the operands. In the natural number and bytes\ncases, the result is the bitwise "or" of the operands.'),(0,o.kt)("p",null,"When the function ",(0,o.kt)("inlineCode",{parentName:"p"},"Bitwise.or"),' is used for bytes operands, the result\nbytes has the same length as the longer operand. The shorter operand\nis zero-padded on the left to match with the length of the longer one\nbefore taking the bitwise "or".')),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val xor : 'a 'b.'a -> 'b -> ('a, 'b) external_xor"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"xor: <a, b>(left: a, right: b) => external_xor<a, b>"),(0,o.kt)("p",null,"The call ",(0,o.kt)("inlineCode",{parentName:"p"},"Bitwise.xor a b"),' is the exclusive disjunction defined on\nboolean, natural number and bytes operands. In the boolean case, the\nresult is the logical "exclusive or" of the operands. In the natural\nnumber and bytes cases, the result is the bitwise "xor" of the\noperands.'),(0,o.kt)("p",null,"When ",(0,o.kt)("inlineCode",{parentName:"p"},"Bitwise.xor"),' is used for bytes operands, the result bytes has\nthe same length as the longer operand. The shorter operand is\nzero-padded on the left to match with the length of the longer one\nbefore taking the bitwise "xor".'),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val shift_left : 'a 'b.'a -> 'b -> ('a, 'b) external_lsl"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"shift_left: <a, b>(left: a, right: b) => external_lsl<a, b>"),(0,o.kt)("p",null,"The function ",(0,o.kt)("inlineCode",{parentName:"p"},"Bitwise.shift_left")," on natural numbers consumes two\nnatural numbers and produces the first number logically left-shifted\nby the second number. This instruction is only defined if the second\nnumber is less than or equal to 256."),(0,o.kt)("p",null,"For bytes, the function ",(0,o.kt)("inlineCode",{parentName:"p"},"Biwise.shift_left")," consumes one byte sequence\nand one natural number, and produces the bytes logically left-shifted\nby the natural number. The vacated bits on the right are filled with\nzeros. The shifted bits are minimally zero-padded on the left in order\nto keep all the original bits, regardless if they are 0 or 1: for\nexample, ",(0,o.kt)("inlineCode",{parentName:"p"},"Bitwise.shift_left 0x1234 1")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"0x002468"),", instead of\n",(0,o.kt)("inlineCode",{parentName:"p"},"0x2468")," (even though in this case no significant bit would be lost)\nor ",(0,o.kt)("inlineCode",{parentName:"p"},"0x00002468")," (where padding is not minimal). The length of the\nbytes returned by ",(0,o.kt)("inlineCode",{parentName:"p"},"Bitwise.shift_left")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"l + (s + 7) / 8")," bytes\nwhere ",(0,o.kt)("inlineCode",{parentName:"p"},"l")," is the length of the original bytes and ",(0,o.kt)("inlineCode",{parentName:"p"},"s")," is the natural\nnumber. This instruction is only defined if the second number is less\nthan or equal to 64000."),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val shift_right : 'a 'b.'a -> 'b -> ('a, 'b) external_lsr"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"shift_right: <a, b>(left: a, right: b) => external_lsr<a, b>"),(0,o.kt)("p",null,"The function ",(0,o.kt)("inlineCode",{parentName:"p"},"Bitwise.shift_right")," on natural numbers consumes two\nnatural numbers and produces the first number logically right-shifted\nby second number. This function is only defined if the second number\nis less than or equal to 256."),(0,o.kt)("p",null,"For bytes, the function ",(0,o.kt)("inlineCode",{parentName:"p"},"Bitwise.shift_right")," consumes one chunk of\nbytes and one natural number and produces the bytes logically\nright-shifted by the natural number. The shifted bits are minimally\nzero-padded on the left. For example, ",(0,o.kt)("inlineCode",{parentName:"p"},"Bitwise.shift_right 0x012349 9"),"\nis ",(0,o.kt)("inlineCode",{parentName:"p"},"0x0091"),", instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"0x91")," (where the 7 left-most bits are lost)\nor ",(0,o.kt)("inlineCode",{parentName:"p"},"0x000091")," (not minimal padding). The length of the returned bytes\nby ",(0,o.kt)("inlineCode",{parentName:"p"},"Bitwise.shift_right")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"max 0 (l - s / 8)")," bytes, where ",(0,o.kt)("inlineCode",{parentName:"p"},"l")," is\nthe length of the original bytes, and ",(0,o.kt)("inlineCode",{parentName:"p"},"s")," is the natural number."))}d.isMDXComponent=!0},23746:(e,t,n)=>{n.r(t),n.d(t,{Prism:()=>r.Z,default:()=>y,defaultProps:()=>i});var r=n(87410);const o={plain:{backgroundColor:"#2a2734",color:"#9a86fd"},styles:[{types:["comment","prolog","doctype","cdata","punctuation"],style:{color:"#6c6783"}},{types:["namespace"],style:{opacity:.7}},{types:["tag","operator","number"],style:{color:"#e09142"}},{types:["property","function"],style:{color:"#9a86fd"}},{types:["tag-id","selector","atrule-id"],style:{color:"#eeebff"}},{types:["attr-name"],style:{color:"#c4b9fe"}},{types:["boolean","string","entity","url","attr-value","keyword","control","directive","unit","statement","regex","atrule","placeholder","variable"],style:{color:"#ffcc99"}},{types:["deleted"],style:{textDecorationLine:"line-through"}},{types:["inserted"],style:{textDecorationLine:"underline"}},{types:["italic"],style:{fontStyle:"italic"}},{types:["important","bold"],style:{fontWeight:"bold"}},{types:["important"],style:{color:"#c4b9fe"}}]};var a=n(67294),i={Prism:r.Z,theme:o};function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l.apply(this,arguments)}var p=/\r\n|\r|\n/,c=function(e){0===e.length?e.push({types:["plain"],content:"\n",empty:!0}):1===e.length&&""===e[0].content&&(e[0].content="\n",e[0].empty=!0)},u=function(e,t){var n=e.length;return n>0&&e[n-1]===t?e:e.concat(t)},h=function(e,t){var n=e.plain,r=Object.create(null),o=e.styles.reduce((function(e,n){var r=n.languages,o=n.style;return r&&!r.includes(t)||n.types.forEach((function(t){var n=l({},e[t],o);e[t]=n})),e}),r);return o.root=n,o.plain=l({},n,{backgroundColor:null}),o};function d(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===t.indexOf(r)&&(n[r]=e[r]);return n}const y=function(e){function t(){for(var t=this,n=[],r=arguments.length;r--;)n[r]=arguments[r];e.apply(this,n),s(this,"getThemeDict",(function(e){if(void 0!==t.themeDict&&e.theme===t.prevTheme&&e.language===t.prevLanguage)return t.themeDict;t.prevTheme=e.theme,t.prevLanguage=e.language;var n=e.theme?h(e.theme,e.language):void 0;return t.themeDict=n})),s(this,"getLineProps",(function(e){var n=e.key,r=e.className,o=e.style,a=l({},d(e,["key","className","style","line"]),{className:"token-line",style:void 0,key:void 0}),i=t.getThemeDict(t.props);return void 0!==i&&(a.style=i.plain),void 0!==o&&(a.style=void 0!==a.style?l({},a.style,o):o),void 0!==n&&(a.key=n),r&&(a.className+=" "+r),a})),s(this,"getStyleForToken",(function(e){var n=e.types,r=e.empty,o=n.length,a=t.getThemeDict(t.props);if(void 0!==a){if(1===o&&"plain"===n[0])return r?{display:"inline-block"}:void 0;if(1===o&&!r)return a[n[0]];var i=r?{display:"inline-block"}:{},s=n.map((function(e){return a[e]}));return Object.assign.apply(Object,[i].concat(s))}})),s(this,"getTokenProps",(function(e){var n=e.key,r=e.className,o=e.style,a=e.token,i=l({},d(e,["key","className","style","token"]),{className:"token "+a.types.join(" "),children:a.content,style:t.getStyleForToken(a),key:void 0});return void 0!==o&&(i.style=void 0!==i.style?l({},i.style,o):o),void 0!==n&&(i.key=n),r&&(i.className+=" "+r),i})),s(this,"tokenize",(function(e,t,n,r){var o={code:t,grammar:n,language:r,tokens:[]};e.hooks.run("before-tokenize",o);var a=o.tokens=e.tokenize(o.code,o.grammar,o.language);return e.hooks.run("after-tokenize",o),a}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.render=function(){var e=this.props,t=e.Prism,n=e.language,r=e.code,o=e.children,a=this.getThemeDict(this.props),i=t.languages[n];return o({tokens:function(e){for(var t=[[]],n=[e],r=[0],o=[e.length],a=0,i=0,s=[],l=[s];i>-1;){for(;(a=r[i]++)<o[i];){var h=void 0,d=t[i],y=n[i][a];if("string"==typeof y?(d=i>0?d:["plain"],h=y):(d=u(d,y.type),y.alias&&(d=u(d,y.alias)),h=y.content),"string"==typeof h){var f=h.split(p),m=f.length;s.push({types:d,content:f[0]});for(var b=1;b<m;b++)c(s),l.push(s=[]),s.push({types:d,content:f[b]})}else i++,t.push(d),n.push(h),r.push(0),o.push(h.length)}i--,t.pop(),n.pop(),r.pop(),o.pop()}return c(s),l}(void 0!==i?this.tokenize(t,r,i,n):[r]),className:"prism-code language-"+n,style:void 0!==a?a.root:{},getLineProps:this.getLineProps,getTokenProps:this.getTokenProps})},t}(a.Component)},87552:(e,t,n)=>{n.d(t,{Z:()=>r});const r={plain:{color:"#bfc7d5",backgroundColor:"#292d3e"},styles:[{types:["comment"],style:{color:"rgb(105, 112, 152)",fontStyle:"italic"}},{types:["string","inserted"],style:{color:"rgb(195, 232, 141)"}},{types:["number"],style:{color:"rgb(247, 140, 108)"}},{types:["builtin","char","constant","function"],style:{color:"rgb(130, 170, 255)"}},{types:["punctuation","selector"],style:{color:"rgb(199, 146, 234)"}},{types:["variable"],style:{color:"rgb(191, 199, 213)"}},{types:["class-name","attr-name"],style:{color:"rgb(255, 203, 107)"}},{types:["tag","deleted"],style:{color:"rgb(255, 85, 114)"}},{types:["operator"],style:{color:"rgb(137, 221, 255)"}},{types:["boolean"],style:{color:"rgb(255, 88, 116)"}},{types:["keyword"],style:{fontStyle:"italic"}},{types:["doctype"],style:{color:"rgb(199, 146, 234)",fontStyle:"italic"}},{types:["namespace"],style:{color:"rgb(178, 204, 214)"}},{types:["url"],style:{color:"rgb(221, 221, 221)"}}]}}}]);