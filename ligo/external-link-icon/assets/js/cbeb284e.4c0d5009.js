"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[24665],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>b});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(t),b=i,m=d["".concat(c,".").concat(b)]||d[b]||p[b]||a;return t?r.createElement(m,o(o({ref:n},u),{},{components:t})):r.createElement(m,o({ref:n},u))}));function b(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},71566:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>b,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(87462),i=(t(67294),t(3905));const a={id:"subtracting",title:"Subtracting"},o=void 0,s={unversionedId:"numbers/subtracting",id:"version-1.5.0/numbers/subtracting",title:"Subtracting",description:"Subtraction in LIGO is accomplished by means of the - binary",source:"@site/versioned_docs/version-1.5.0/numbers/subtracting.md",sourceDirName:"numbers",slug:"/numbers/subtracting",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/numbers/subtracting",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"subtracting",title:"Subtracting"},sidebar:"docs",previous:{title:"Adding",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/numbers/adding"},next:{title:"Negating",permalink:"/previews/ligo/external-link-icon/docs/1.5.0/numbers/negating"}},c={},l=[],u=(p="Syntax",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var p;const d={toc:l};function b(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Subtraction in LIGO is accomplished by means of the ",(0,i.kt)("inlineCode",{parentName:"p"},"-")," binary\noperator which is overloaded to apply to any combination of natural\nnumbers and integers, as shown in the following examples. The rule\nwhen subtracting two natural numbers is that the result is an integer\nbecause, in general, the compiler cannot determine whether the value\nof an expression is positive or zero for all inputs."),(0,i.kt)(u,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=subtracting",group:"subtracting"},"let a : int = 5 - 10   // int - int yields int\nlet b : int = 5n - 2n  // nat - nat yields int\nlet c : int = 10n - 5  // nat - int yields int\nlet d : int = 5 - 10n  // int - nat yields int\n// let error : nat = 5n - 2n\n"))),(0,i.kt)(u,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=subtracting",group:"subtracting"},"const a : int = 5 - 10;   // int - int yields int\nconst b : int = 5n - 2n;  // nat - nat yields int\nconst c : int = 10n - 5;  // nat - int yields int\nconst d : int = 5 - 10n;  // int - nat yields int\n// const error : nat = 5n - 2n;\n"))))}b.isMDXComponent=!0}}]);