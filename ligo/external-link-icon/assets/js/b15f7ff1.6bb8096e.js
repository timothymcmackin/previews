"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[13250],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),g=s(n),u=r,y=g["".concat(c,".").concat(u)]||g[u]||l[u]||i;return n?a.createElement(y,o(o({ref:t},m),{},{components:n})):a.createElement(y,o({ref:t},m))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=g;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>r.Z,Z:()=>i});var a=n(67294),r=n(75402);const i=function(e){return a.createElement(r.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},8465:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>g,frontMatter:()=>o,metadata:()=>c,toc:()=>m});var a=n(87462),r=(n(67294),n(3905)),i=n(48720);const o={id:"searching",title:"Searching"},p=void 0,c={unversionedId:"tezos/big_maps/searching",id:"tezos/big_maps/searching",title:"Searching",description:"The predicate Big_map.mem tests for membership in a given big map,",source:"@site/../docs/tezos/big_maps/searching.md",sourceDirName:"tezos/big_maps",slug:"/tezos/big_maps/searching",permalink:"/previews/ligo/external-link-icon/docs/next/tezos/big_maps/searching",draft:!1,tags:[],version:"current",frontMatter:{id:"searching",title:"Searching"}},s={},m=[],l={toc:m};function g(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The predicate ",(0,r.kt)("inlineCode",{parentName:"p"},"Big_map.mem")," tests for membership in a given big map,\ngiven a purported key."),(0,r.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=big_map_searching",group:"big_map_searching"},'let my_map : (int, string) big_map =\n  Big_map.literal [(1,"one"); (2,"two")]\nlet contains_2 : bool = Big_map.mem 2 my_map // = true\n'))),(0,r.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=big_map_searching",group:"big_map_searching"},'const my_map: big_map<int,string> =\n  Big_map.literal([[1,"one"],[2,"two"]]);\nconst contains_2: bool = Big_map.mem(2, my_map); // == true\n'))),(0,r.kt)("p",null,"In practice, however, we would like to get the value associated to the\nkey we searched. This is achieved by means of ",(0,r.kt)("inlineCode",{parentName:"p"},"Big_map.find_opt"),"."),(0,r.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=big_map_searching",group:"big_map_searching"},"let v : string option = Big_map.find_opt 2 my_map\n"))),(0,r.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=big_map_searching",group:"big_map_searching"},"const v : option<string> = Big_map.find_opt(2, my_map);\n"))),(0,r.kt)("p",null,"Notice how the value we read is an optional value: this is to force\nthe reader to account for a missing key in the big map. This requires\n",(0,r.kt)("em",{parentName:"p"},"pattern matching"),"."),(0,r.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=big_map_searching",group:"big_map_searching"},'let force_access key map =\n  match Big_map.find_opt key map with\n    Some value -> value\n  | None -> failwith "No value."\n'))),(0,r.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=big_map_searching",group:"big_map_searching"},'const force_access = (key, map) =>\n  $match(Big_map.find_opt (key, map), {\n    "Some": value => value,\n    "None": () => failwith("No value.")\n  });\n'))),(0,r.kt)("p",null,"In fact, the predefined function ",(0,r.kt)("inlineCode",{parentName:"p"},"Big_map.find")," does exactly that,\nexcept that the exception raised by ",(0,r.kt)("inlineCode",{parentName:"p"},"failwith")," carries the default\nstring ",(0,r.kt)("inlineCode",{parentName:"p"},'"MAP FIND"'),"."))}g.isMDXComponent=!0}}]);