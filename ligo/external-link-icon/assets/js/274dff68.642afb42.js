"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[23367],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),y=p(n),u=o,m=y["".concat(l,".").concat(u)]||y[u]||g[u]||r;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=y;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>o.Z,Z:()=>r});var a=n(67294),o=n(75402);const r=function(e){return a.createElement(o.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},99191:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(23746),o=n(67294),r=n(52263),i=n(48720),s=n(87552);function l(){return l=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l.apply(this,arguments)}const{Prism:p}=n(23746);p.languages={...p.languages,cameligo:{...p.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:p.languages.typescript};const c=function(e){const{siteConfig:{themeConfig:{prism:t={}}}}=(0,r.Z)(),n=t.singleTheme||s.Z,[p,c]=(0,o.useState)(!1);return(0,o.useEffect)((()=>{c(!0)}),[]),o.createElement(i.D.Consumer,null,(t=>{let{syntax:r}=t;return r===e.syntax?o.createElement(a.default,l({},a.defaultProps,{key:p,language:e.syntax,code:e.children,theme:n}),(e=>{let{className:t,tokens:n,getLineProps:a,getTokenProps:r}=e;return o.createElement("h4",{className:t,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((e,t)=>o.createElement("div",a({line:e,key:t}),e.map(((e,t)=>o.createElement("span",r({token:e,key:t}))))))))})):o.createElement("div",null)}))}},47979:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>p,toc:()=>g});var a=n(87462),o=(n(67294),n(3905)),r=n(48720),i=n(99191);const s={id:"current-reference",title:"Tezos",description:"General operations for Tezos",hide_table_of_contents:!0},l=void 0,p={unversionedId:"reference/current-reference",id:"version-1.9.2/reference/current-reference",title:"Tezos",description:"General operations for Tezos",source:"@site/versioned_docs/version-1.9.2/reference/current.md",sourceDirName:"reference",slug:"/reference/current-reference",permalink:"/previews/ligo/external-link-icon/docs/reference/current-reference",draft:!1,tags:[],version:"1.9.2",frontMatter:{id:"current-reference",title:"Tezos",description:"General operations for Tezos",hide_table_of_contents:!0}},c={},g=[{value:"Examples",id:"examples",level:3},{value:"24 hours from now",id:"24-hours-from-now",level:4},{value:"24 hours ago",id:"24-hours-ago",level:4},{value:"Comparing Timestamps",id:"comparing-timestamps",level:4},{value:"Sapling",id:"sapling",level:2},{value:"Linearity",id:"linearity",level:3},{value:"Timelock",id:"timelock",level:2}],y={toc:g};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val get_balance : unit -> tez"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let get_balance: (_u: unit) => tez"),(0,o.kt)("p",null,"Get the balance for the contract."),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo"},"let check (p,s : unit * tez) = [], Tezos.get_balance()\n"))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo"},"let check = (p: unit, s: tez):[list<operation>, tez] =>\n  [[], Tezos.get_balance()];\n"))),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val get_now : unit -> timestamp"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let get_now: (_u : unit) => timestamp"),(0,o.kt)("p",null,"Returns the current time as a ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Unix_time"},"UNIX timestamp"),"."),(0,o.kt)("p",null,"In LIGO, timestamps are type compatible in operations with\nintegers. This lets you set for instance time constraints for your\nsmart contracts like this:"),(0,o.kt)("h3",{id:"examples"},"Examples"),(0,o.kt)("h4",{id:"24-hours-from-now"},"24 hours from now"),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=b",group:"b"},'let today         = Tezos.get_now ()\nlet one_day       = 86_400\nlet in_24_hrs     = today + one_day\nlet some_date     = ("2000-01-01t10:10:10Z" : timestamp)\nlet one_day_later = some_date + one_day\n'))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=b",group:"b"},'let today         = Tezos.get_now();\nlet one_day       = 86_400;\nlet in_24_hrs     = today + one_day;\nlet some_date     = ("2000-01-01t10:10:10Z" as timestamp);\nlet one_day_later = some_date + one_day;\n'))),(0,o.kt)("h4",{id:"24-hours-ago"},"24 hours ago"),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=c",group:"c"},"let today     = Tezos.get_now ()\nlet one_day   = 86_400\nlet in_24_hrs = today - one_day\n"))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=c",group:"c"},"let today     = Tezos.get_now();\nlet one_day   = 86_400;\nlet in_24_hrs = today - one_day;\n"))),(0,o.kt)("h4",{id:"comparing-timestamps"},"Comparing Timestamps"),(0,o.kt)("p",null,"You can also compare timestamps using the same comparison operators as\nfor numbers"),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=c",group:"c"},"let not_tomorrow = (Tezos.get_now () = in_24_hrs)\n"))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=c",group:"c"},"let not_tomorrow = (Tezos.get_now() == in_24_hrs);\n"))),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val get_amount : unit -> tez"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let get_amount: (_u : unit) => tez"),(0,o.kt)("p",null,"Get the amount of tez provided by the sender to complete this\ntransaction."),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo"},"let threshold (p : unit) = if Tezos.get_amount () = 100tz then 42 else 0\n"))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo"},"function threshold (p : unit) {\n  if (Tezos.get_amount() == 100tez) return 42 else return 0;\n};\n"))),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val get_sender : unit -> address"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let get_sender: (_u : unit) => address"),(0,o.kt)("p",null,"Get the address that initiated the current transaction."),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo"},"let check (p : unit) = Tezos.get_sender ()\n"))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=e",group:"e"},"let check = (p : unit) => Tezos.get_sender ();\n"))),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val address : 'a contract -> address"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let address: (contract: contract<'a>) => address"),(0,o.kt)("p",null,"Get the address associated with a value of type ",(0,o.kt)("inlineCode",{parentName:"p"},"contract"),"."),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo"},"let check (p : key_hash) =\n  let c = Tezos.implicit_account p\n  in Tezos.address c\n"))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=f",group:"f"},"let check = (p : key_hash) => {\n  let c = Tezos.implicit_account(p);\n  return Tezos.address(c);\n};\n"))),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val get_self_address : unit -> address"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let get_self_address: (_u : unit) => address"),(0,o.kt)("p",null,"Get the address of the currently running contract."),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo"},"let check (p : unit) = Tezos.get_self_address ()\n"))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=g",group:"g"},"let check = (p : unit) => Tezos.get_self_address();\n"))),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val self : string -> 'a contract"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let self: (entrypoint: string) => contract<'a>"),(0,o.kt)("p",null,'Typecast the currently running contract with an entrypoint annotation.\nIf you are using entrypoints, use "%bar" for a constructor "Bar". If\nyou are not using entrypoints: use "%default"'),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo"},'let check (p : unit) = Tezos.self("%default")\n'))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=h",group:"h"},'let check = (p: unit) => Tezos.self("%default");\n'))),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val implicit_account : key_hash -> 'a contract"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let implicit_account : (_: key_hash) => contract<unit>"),(0,o.kt)("p",null,"Get the default contract associated with an on-chain key-pair. This\ncontract does not execute code, instead it exists to receive tokens on\nbehalf of a key's owner."),(0,o.kt)("p",null,"See also: ",(0,o.kt)("a",{parentName:"p",href:"https://octez.tezos.com/docs/active/glossary.html#user-account"},"https://octez.tezos.com/docs/active/glossary.html#user-account")),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo"},"let check (kh : key_hash) = Tezos.implicit_account kh\n"))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=i",group:"i"},"let check = (kh: key_hash) => Tezos.implicit_account(kh);\n"))),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val get_source : unit -> address"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let get_source: (_u : unit) => address"),(0,o.kt)("p",null,"Get the ",(0,o.kt)("em",{parentName:"p"},"originator")," (address) of the current transaction. That is, if\na chain of transactions led to the current execution get the address\nthat began the chain. Not to be confused with ",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.get_sender"),", which\ngives the address of the contract or user which directly caused the\ncurrent transaction."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f There are a few caveats you should keep in mind before using\n",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.get_source")," over ",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.get_sender"),":"),(0,o.kt)("ol",{parentName:"blockquote"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"Tezos.get_source")," will never be a contract, so if you want to allow\ncontracts (multisigs etc) to operate your contract, you need to\nuse ",(0,o.kt)("inlineCode",{parentName:"li"},"Tezos.get_sender")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://vessenes.com/tx-origin-and-ethereum-oh-my/"},"https://vessenes.com/tx-origin-and-ethereum-oh-my/")," -- in general\nit is somewhat unsafe to assume that ",(0,o.kt)("inlineCode",{parentName:"li"},"Tezos.get_source")," understands\neverything that is going to happen in a transaction. If\n",(0,o.kt)("inlineCode",{parentName:"li"},"Tezos.get_source")," transfers to a malicious (or sufficiently\nattackable) contract, that contract might potentially transfer to\nyours, without ",(0,o.kt)("inlineCode",{parentName:"li"},"Tezos.get_source"),"'s consent. So if you are using\n",(0,o.kt)("inlineCode",{parentName:"li"},"Tezos.get_source")," for authentication, you risk being confused. A\ngood historical example of this is bakers paying out delegation\nrewards. Naive bakers did (and probably still do) just use\ntezos-client to transfer to whatever KT1 delegates they had, even\nif those KT1 were malicious scripts."))),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo"},"let check (p : unit) = Tezos.get_source ()\n"))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=j",group:"j"},"let check = (p : unit) => Tezos.get_source();\n"))),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val failwith : 'a -> unit"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let failwith: (message: 'a) => unit"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/previews/ligo/external-link-icon/docs/reference/toplevel-reference#failwith"},"See ",(0,o.kt)("inlineCode",{parentName:"a"},"failwith"))),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val get_chain_id : unit -> chain_id"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let get_chain_id: (_u : unit) => chain_id"),(0,o.kt)("p",null,"Get the identifier of the chain to distinguish between main and test chains."),(0,o.kt)("p",null,"This is mainly intended to avoid replay attacks between the chains, and can currently\nonly be used together with ",(0,o.kt)("inlineCode",{parentName:"p"},"Bytes.pack")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Bytes.unpack"),"."),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo"},'type storage = bytes\n\n[@entry]\nlet main (_ignore : unit) (store : storage) =\n  let packed = Bytes.pack (Tezos.get_chain_id ()) in\n  if (store <> packed) then\n    (failwith "wrong chain" : (operation list * storage))\n  else\n    ([], (packed: storage))\n'))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=k",group:"k"},'type storage = bytes;\n\n@entry\nlet main = (_ignore: unit, storage: storage) : [list<operation>, storage] => {\n  let packed = Bytes.pack(Tezos.get_chain_id());\n  if (storage != packed) {\n    return failwith("wrong chain") as [list<operation>, storage];\n  } else {\n    return [[], packed];\n  };\n};\n'))),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val transaction : 'param -> mutez -> 'param contract -> operation"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let transaction: (action: 'param, amount: mutez, contract: contract<'param>) => operation"),(0,o.kt)("p",null,"Transfer ",(0,o.kt)("inlineCode",{parentName:"p"},"tez")," to an account, or run code of another smart contract."),(0,o.kt)("p",null,"To indicate an account, use ",(0,o.kt)("inlineCode",{parentName:"p"},"unit")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"param"),"."),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val create_contract : ('param -> 'storage -> operation list * 'storage) -> key_hash option -> tez -> 'storage -> (operation * address)"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let create_contract = (contract: ('param, 'storage) => (list <operation>, 'storage), delegate: option<key_hash>, balance: tez, init: 'storage) => [operation, address]"),(0,o.kt)("p",null,"Construct an operation that originates a contract from a function. The\noptional argument of type ",(0,o.kt)("inlineCode",{parentName:"p"},"key_hash")," represents a delegate."),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val set_delegate : key_hash option -> operation"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let set_delegate: (delegate: option<key_hash>) => operation"),(0,o.kt)("p",null,"Modify the ",(0,o.kt)("a",{parentName:"p",href:"https://octez.tezos.com/docs/active/glossary.html#delegate"},"delegate")," of the current contract."),(0,o.kt)("p",null,"The operation fails when:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"the delegate is the same as current delegate"),(0,o.kt)("li",{parentName:"ul"},"the keyhash is not of a registered delegate")),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," to withdraw the current delegate."),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val get_contract_opt : address -> 'param contract option"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let get_contract_opt : (a: address) => option<contract<'param>>"),(0,o.kt)("p",null,"Get a contract from an address."),(0,o.kt)("p",null,"When no contract is found or the contract doesn't match the type,\n",(0,o.kt)("inlineCode",{parentName:"p"},"None")," is returned."),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val get_contract_with_error : address -> string -> 'param contract"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let get_contract_with_error : (a: address,s: string) => contract<'param>"),(0,o.kt)("p",null,"Get a contract from an address."),(0,o.kt)("p",null,"When no contract is found, fail with the provided string"),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val get_entrypoint_opt : string -> address -> 'param contract option"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let get_entrypoint_opt: (entrypoint: string, a: address) => option<contract<'param>>"),(0,o.kt)("p",null,"Get a contract from an address and entrypoint."),(0,o.kt)("p",null,"Entrypoints are written in the form of: ",(0,o.kt)("inlineCode",{parentName:"p"},"%entrypoint"),"."),(0,o.kt)("p",null,"When no contract is found or the contract doesn't match the type,\n",(0,o.kt)("inlineCode",{parentName:"p"},"None")," is returned."),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val get_level : unit -> nat"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let get_level : (_u : unit) => nat"),(0,o.kt)("p",null,"Get the current block level."),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val min_block_time : unit -> nat"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let min_block_time: unit => nat;"),(0,o.kt)("p",null,"Returns the current minimal time between blocks, the value is obtained from the protocol\u2019s minimal_block_delay constant."),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val pairing_check : (bls12_381_g1 * bls12_381_g2) list -> bool"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let pairing_check: list<[bls12_381_g1, bls12_381_g2]>) => bool"),(0,o.kt)("p",null,"Verify that the product of pairings of the given list of points is equal to 1 in Fq12. Returns true if the list is empty.\nCan be used to verify if two pairings P1 and P2 are equal by verifying ",(0,o.kt)("inlineCode",{parentName:"p"},"P1 * P2^(-1) = 1"),".\n(extracted from Tezos documentation)"),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val never : never -> 'a"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let never: (never: never) => 'a"),(0,o.kt)("p",null,"Eliminate a value of the type ",(0,o.kt)("inlineCode",{parentName:"p"},"never")," using the instruction ",(0,o.kt)("inlineCode",{parentName:"p"},"NEVER"),"\nfrom Michelson."),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val get_total_voting_power : unit -> nat"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let get_total_voting_power: (_u : unit) => nat"),(0,o.kt)("p",null,"Return the total voting power of all contracts. The total voting power coincides with the sum of the rolls count of every contract in the voting listings. The voting listings is calculated at the beginning of every voting period."),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val voting_power : key_hash -> nat"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let voting_power: (key_hash:key_hash) => nat"),(0,o.kt)("p",null,"Return the voting power of a given contract. The voting power value is the full staking power of the delegate, currently expressed in mutez. Though, developers should not rely on ",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.voting_power")," to query the staking power of a contract in mutez: the value returned by ",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.voting_power")," is still of type",(0,o.kt)("inlineCode",{parentName:"p"},"nat and it should only be considered relative to"),"Tezos.total_voting_power`."),(0,o.kt)("h2",{id:"sapling"},"Sapling"),(0,o.kt)("p",null,"Delphi protocol introduced the following sapling types (state and transaction) with N being an int singleton"),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=sap_t",group:"sap_t"},"type st = 8 sapling_state\ntype tr = 8 sapling_transaction\n"))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=sap_t",group:"sap_t"},"type st = sapling_state<8>;\ntype tr = sapling_transaction<8>;\n"))),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val sapling_empty_state : 'n sapling_state"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let sapling_empty_state: sapling_state<n>"),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=sap_t",group:"sap_t"},"let x = Tezos.sapling_empty_state\n"))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=sap_t",group:"sap_t"},"let x = Tezos.sapling_empty_state ;\n"))),(0,o.kt)("p",null,"Sapling empty state"),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val sapling_verify_update : 'a sapling_transaction -> 'a sapling_state -> (bytes * (int * 'a sapling_state)) option"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let sapling_verify_update: sapling_transaction<'a> => sapling_state<'a> => option<[bytes, [int, sapling_state<'a>]]>"),(0,o.kt)("p",null,"Verify sapling update"),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=sap_t",group:"sap_t"},'let f (tr : tr) =\n  match Tezos.sapling_verify_update tr x with\n    Some (_, x) -> x\n  | None -> (failwith "failed" : int * st)\n'))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=sap_t",group:"sap_t"},'let f = (tr : tr) =>\n  match (Tezos.sapling_verify_update(tr, x)) {\n    when(Some(p)): p[1];\n    when(None()): failwith ("failed")\n  };\n'))),(0,o.kt)("h3",{id:"linearity"},"Linearity"),(0,o.kt)("p",null,"If a contract storage type contains a ticket, you must destructure the parameter-storage pair within the body to preserve storage linearity (e.g. avoid ",(0,o.kt)("inlineCode",{parentName:"p"},"DUP"),"-ing storage).\nFor the same reasons, if tickets are stored in a ",(0,o.kt)("inlineCode",{parentName:"p"},"map"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"big_map")," you must use the new operator ",(0,o.kt)("inlineCode",{parentName:"p"},"get_and_update")," to update your bindings."),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=contract_ticket",group:"contract_ticket"},'type storage = (string, int ticket) big_map\ntype parameter = int\ntype result = operation list * storage\n\n[@entry]\nlet main (i : parameter) (store : storage) : result =\n  let my_ticket1 = Option.unopt (Tezos.create_ticket i 10n) in\n  let _, x = Big_map.get_and_update "hello" (Some my_ticket1) store\n  in [], x\n'))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=contract_ticket",group:"contract_ticket"},'type storage = big_map<string, ticket<int>> ;\n\ntype parameter = int ;\n\ntype result = [list<operation>, storage];\n\n@entry\nfunction main (i: parameter, store : storage): result {\n  let my_ticket1 = Option.unopt (Tezos.create_ticket (i, 10n));\n  let [_x, ret] = Big_map.get_and_update ("hello", Some(my_ticket1), store);\n  return [[], ret]\n};\n'))),(0,o.kt)("h2",{id:"timelock"},"Timelock"),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val open_chest : chest_key -> chest -> nat -> bytes option"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let open_chest : (key: chest_key, chest: chest, time: nat) => option<bytes>"),(0,o.kt)("p",null,"Open a timelocked chest given its key and the time."))}u.isMDXComponent=!0},23746:(e,t,n)=>{n.r(t),n.d(t,{Prism:()=>a.Z,default:()=>m,defaultProps:()=>i});var a=n(87410);const o={plain:{backgroundColor:"#2a2734",color:"#9a86fd"},styles:[{types:["comment","prolog","doctype","cdata","punctuation"],style:{color:"#6c6783"}},{types:["namespace"],style:{opacity:.7}},{types:["tag","operator","number"],style:{color:"#e09142"}},{types:["property","function"],style:{color:"#9a86fd"}},{types:["tag-id","selector","atrule-id"],style:{color:"#eeebff"}},{types:["attr-name"],style:{color:"#c4b9fe"}},{types:["boolean","string","entity","url","attr-value","keyword","control","directive","unit","statement","regex","atrule","placeholder","variable"],style:{color:"#ffcc99"}},{types:["deleted"],style:{textDecorationLine:"line-through"}},{types:["inserted"],style:{textDecorationLine:"underline"}},{types:["italic"],style:{fontStyle:"italic"}},{types:["important","bold"],style:{fontWeight:"bold"}},{types:["important"],style:{color:"#c4b9fe"}}]};var r=n(67294),i={Prism:a.Z,theme:o};function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l.apply(this,arguments)}var p=/\r\n|\r|\n/,c=function(e){0===e.length?e.push({types:["plain"],content:"\n",empty:!0}):1===e.length&&""===e[0].content&&(e[0].content="\n",e[0].empty=!0)},g=function(e,t){var n=e.length;return n>0&&e[n-1]===t?e:e.concat(t)},y=function(e,t){var n=e.plain,a=Object.create(null),o=e.styles.reduce((function(e,n){var a=n.languages,o=n.style;return a&&!a.includes(t)||n.types.forEach((function(t){var n=l({},e[t],o);e[t]=n})),e}),a);return o.root=n,o.plain=l({},n,{backgroundColor:null}),o};function u(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===t.indexOf(a)&&(n[a]=e[a]);return n}const m=function(e){function t(){for(var t=this,n=[],a=arguments.length;a--;)n[a]=arguments[a];e.apply(this,n),s(this,"getThemeDict",(function(e){if(void 0!==t.themeDict&&e.theme===t.prevTheme&&e.language===t.prevLanguage)return t.themeDict;t.prevTheme=e.theme,t.prevLanguage=e.language;var n=e.theme?y(e.theme,e.language):void 0;return t.themeDict=n})),s(this,"getLineProps",(function(e){var n=e.key,a=e.className,o=e.style,r=l({},u(e,["key","className","style","line"]),{className:"token-line",style:void 0,key:void 0}),i=t.getThemeDict(t.props);return void 0!==i&&(r.style=i.plain),void 0!==o&&(r.style=void 0!==r.style?l({},r.style,o):o),void 0!==n&&(r.key=n),a&&(r.className+=" "+a),r})),s(this,"getStyleForToken",(function(e){var n=e.types,a=e.empty,o=n.length,r=t.getThemeDict(t.props);if(void 0!==r){if(1===o&&"plain"===n[0])return a?{display:"inline-block"}:void 0;if(1===o&&!a)return r[n[0]];var i=a?{display:"inline-block"}:{},s=n.map((function(e){return r[e]}));return Object.assign.apply(Object,[i].concat(s))}})),s(this,"getTokenProps",(function(e){var n=e.key,a=e.className,o=e.style,r=e.token,i=l({},u(e,["key","className","style","token"]),{className:"token "+r.types.join(" "),children:r.content,style:t.getStyleForToken(r),key:void 0});return void 0!==o&&(i.style=void 0!==i.style?l({},i.style,o):o),void 0!==n&&(i.key=n),a&&(i.className+=" "+a),i})),s(this,"tokenize",(function(e,t,n,a){var o={code:t,grammar:n,language:a,tokens:[]};e.hooks.run("before-tokenize",o);var r=o.tokens=e.tokenize(o.code,o.grammar,o.language);return e.hooks.run("after-tokenize",o),r}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.render=function(){var e=this.props,t=e.Prism,n=e.language,a=e.code,o=e.children,r=this.getThemeDict(this.props),i=t.languages[n];return o({tokens:function(e){for(var t=[[]],n=[e],a=[0],o=[e.length],r=0,i=0,s=[],l=[s];i>-1;){for(;(r=a[i]++)<o[i];){var y=void 0,u=t[i],m=n[i][r];if("string"==typeof m?(u=i>0?u:["plain"],y=m):(u=g(u,m.type),m.alias&&(u=g(u,m.alias)),y=m.content),"string"==typeof y){var d=y.split(p),k=d.length;s.push({types:u,content:d[0]});for(var h=1;h<k;h++)c(s),l.push(s=[]),s.push({types:u,content:d[h]})}else i++,t.push(u),n.push(y),a.push(0),o.push(y.length)}i--,t.pop(),n.pop(),a.pop(),o.pop()}return c(s),l}(void 0!==i?this.tokenize(t,a,i,n):[a]),className:"prism-code language-"+n,style:void 0!==r?r.root:{},getLineProps:this.getLineProps,getTokenProps:this.getTokenProps})},t}(r.Component)},87552:(e,t,n)=>{n.d(t,{Z:()=>a});const a={plain:{color:"#bfc7d5",backgroundColor:"#292d3e"},styles:[{types:["comment"],style:{color:"rgb(105, 112, 152)",fontStyle:"italic"}},{types:["string","inserted"],style:{color:"rgb(195, 232, 141)"}},{types:["number"],style:{color:"rgb(247, 140, 108)"}},{types:["builtin","char","constant","function"],style:{color:"rgb(130, 170, 255)"}},{types:["punctuation","selector"],style:{color:"rgb(199, 146, 234)"}},{types:["variable"],style:{color:"rgb(191, 199, 213)"}},{types:["class-name","attr-name"],style:{color:"rgb(255, 203, 107)"}},{types:["tag","deleted"],style:{color:"rgb(255, 85, 114)"}},{types:["operator"],style:{color:"rgb(137, 221, 255)"}},{types:["boolean"],style:{color:"rgb(255, 88, 116)"}},{types:["keyword"],style:{fontStyle:"italic"}},{types:["doctype"],style:{color:"rgb(199, 146, 234)",fontStyle:"italic"}},{types:["namespace"],style:{color:"rgb(178, 204, 214)"}},{types:["url"],style:{color:"rgb(221, 221, 221)"}}]}}}]);