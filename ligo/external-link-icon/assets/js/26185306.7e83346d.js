"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[64946],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>u});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var m=r.createContext({}),l=function(e){var n=r.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=l(e.components);return r.createElement(m.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,m=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),g=l(t),u=a,f=g["".concat(m,".").concat(u)]||g[u]||c[u]||i;return t?r.createElement(f,o(o({ref:n},s),{},{components:t})):r.createElement(f,o({ref:n},s))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=g;var p={};for(var m in n)hasOwnProperty.call(n,m)&&(p[m]=n[m]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},48720:(e,n,t)=>{t.d(n,{D:()=>a.Z,Z:()=>i});var r=t(67294),a=t(75402);const i=function(e){return r.createElement(a.Z.Consumer,null,(n=>{let{syntax:t}=n;return t===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},33975:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>p,default:()=>g,frontMatter:()=>o,metadata:()=>m,toc:()=>s});var r=t(87462),a=(t(67294),t(3905)),i=t(48720);const o={id:"removing",title:"Removing"},p=void 0,m={unversionedId:"tezos/big_maps/removing",id:"version-1.6.0/tezos/big_maps/removing",title:"Removing",description:"The function Big_map.remove creates a big map containing the",source:"@site/versioned_docs/version-1.6.0/tezos/big_maps/removing.md",sourceDirName:"tezos/big_maps",slug:"/tezos/big_maps/removing",permalink:"/previews/ligo/external-link-icon/docs/1.6.0/tezos/big_maps/removing",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"removing",title:"Removing"},sidebar:"docs",previous:{title:"Adding",permalink:"/previews/ligo/external-link-icon/docs/1.6.0/tezos/big_maps/adding"},next:{title:"Updating",permalink:"/previews/ligo/external-link-icon/docs/1.6.0/tezos/big_maps/updating"}},l={},s=[],c={toc:s};function g(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The function ",(0,a.kt)("inlineCode",{parentName:"p"},"Big_map.remove")," creates a big map containing the\nelements of a given big map, without a given element. If the element\nis not already present, the new big map is the same as the old one, as\nexpected."),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=big_map_removing",group:"big_map_removing"},'let my_map : (int, string) big_map =\n  Big_map.literal [(1,"one"); (2,"two")]\nlet new_map = Big_map.remove 2 my_map\nlet contains_3 = Big_map.mem 2 new_map // = false\n'))),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=big_map_removing",group:"big_map_removing"},'const my_map: big_map<int,string> =\n  Big_map.literal([[1,"one"],[2,"two"]]);\nconst new_map = Big_map.remove(2, my_map);\nconst contains_3 = Big_map.mem(2, new_map); // == false\n'))))}g.isMDXComponent=!0}}]);