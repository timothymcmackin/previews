"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[69925],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var m=a.createContext({}),l=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(m.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,m=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(n),u=s,g=d["".concat(m,".").concat(u)]||d[u]||c[u]||r;return n?a.createElement(g,o(o({ref:t},p),{},{components:n})):a.createElement(g,o({ref:t},p))}));function u(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=d;var i={};for(var m in t)hasOwnProperty.call(t,m)&&(i[m]=t[m]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var l=2;l<r;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>s.Z,Z:()=>r});var a=n(67294),s=n(75402);const r=function(e){return a.createElement(s.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},15131:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>m,toc:()=>p});var a=n(87462),s=(n(67294),n(3905)),r=n(48720);const o={id:"timestamps-addresses",title:"Timestamps, Addresses"},i=void 0,m={unversionedId:"advanced/timestamps-addresses",id:"version-1.9.2/advanced/timestamps-addresses",title:"Timestamps, Addresses",description:"Timestamps",source:"@site/versioned_docs/version-1.9.2/advanced/timestamps-addresses.md",sourceDirName:"advanced",slug:"/advanced/timestamps-addresses",permalink:"/previews/ligo/external-link-icon/docs/advanced/timestamps-addresses",draft:!1,tags:[],version:"1.9.2",frontMatter:{id:"timestamps-addresses",title:"Timestamps, Addresses"}},l={},p=[{value:"Timestamps",id:"timestamps",level:2},{value:"Starting time of the current block",id:"starting-time-of-the-current-block",level:3},{value:"Timestamp Arithmetics",id:"timestamp-arithmetics",level:3},{value:"In 24 hours",id:"in-24-hours",level:4},{value:"24 hours Ago",id:"24-hours-ago",level:4},{value:"Subtracting timestamps",id:"subtracting-timestamps",level:3},{value:"Comparing Timestamps",id:"comparing-timestamps",level:3},{value:"Addresses",id:"addresses",level:2},{value:"Signatures",id:"signatures",level:2},{value:"Keys",id:"keys",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"timestamps"},"Timestamps"),(0,s.kt)("p",null,"LIGO features timestamps, as Michelson does, while bakers baking the\nblock (including the transaction in a block) are responsible for\nproviding the given current timestamp for the contract."),(0,s.kt)("h3",{id:"starting-time-of-the-current-block"},"Starting time of the current block"),(0,s.kt)("p",null,"You can obtain the starting time of the current block using the\nbuilt-in ",(0,s.kt)("inlineCode",{parentName:"p"},"Tezos.get_now"),". This timestamp does not change during the execution\nof the contract. Please be aware that it is up to the baker to set the\ncurrent timestamp value."),(0,s.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=a",group:"a"},"let today : timestamp = Tezos.get_now ()\n"))),(0,s.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=a",group:"a"},"const today: timestamp = Tezos.get_now();\n"))),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"When running code, the LIGO CLI option ",(0,s.kt)("inlineCode",{parentName:"p"},"--now"),"\nallows you to control what ",(0,s.kt)("inlineCode",{parentName:"p"},"Tezos.get_now")," returns.")),(0,s.kt)("h3",{id:"timestamp-arithmetics"},"Timestamp Arithmetics"),(0,s.kt)("p",null,"In LIGO, timestamps can be added to integers, allowing you to set time\nconstraints on your smart contracts. Consider the following scenarios."),(0,s.kt)("h4",{id:"in-24-hours"},"In 24 hours"),(0,s.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=b",group:"b"},'let today : timestamp = Tezos.get_now ()\nlet one_day : int = 86_400\nlet in_24_hrs : timestamp = today + one_day\nlet some_date : timestamp = ("2000-01-01t10:10:10Z" : timestamp)\nlet one_day_later : timestamp = some_date + one_day\n'))),(0,s.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=b",group:"b"},'const today: timestamp = Tezos.get_now();\nconst one_day: int = 86_400;\nconst in_24_hrs: timestamp = today + one_day;\nconst some_date: timestamp = "2000-01-01t10:10:10Z" as timestamp;\nconst one_day_later: timestamp = some_date + one_day;\n'))),(0,s.kt)("h4",{id:"24-hours-ago"},"24 hours Ago"),(0,s.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=c",group:"c"},"let today : timestamp = Tezos.get_now ()\nlet one_day : int = 86400\nlet in_24_hrs : timestamp = today - one_day\n"))),(0,s.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=c",group:"c"},"const today: timestamp = Tezos.get_now();\nconst one_day: int = 86400;\nconst in_24_hrs: timestamp = today - one_day;\n"))),(0,s.kt)("h3",{id:"subtracting-timestamps"},"Subtracting timestamps"),(0,s.kt)("p",null,"Timestamps can be subtracted, that means, we can use minus (",(0,s.kt)("inlineCode",{parentName:"p"},"-"),") between two timestamps:"),(0,s.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=g",group:"g"},'let today : timestamp = Tezos.get_now ()\nlet some_date : timestamp = ("2035-01-01t10:10:10Z" : timestamp)\nlet secs_until_some_date : int = some_date - today\n'))),(0,s.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=g",group:"g"},'const today: timestamp = Tezos.get_now();\nconst some_date: timestamp = "2035-01-01t10:10:10Z" as timestamp;\nconst secs_until_some_date: int = some_date - today;\n'))),(0,s.kt)("p",null,"Notice that the result of such subtraction is an ",(0,s.kt)("inlineCode",{parentName:"p"},"int"),", which describes the difference in seconds between the two timestamps."),(0,s.kt)("h3",{id:"comparing-timestamps"},"Comparing Timestamps"),(0,s.kt)("p",null,"You can compare timestamps using the same comparison operators\napplying to numbers."),(0,s.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=c",group:"c"},"let not_tomorrow : bool = (Tezos.get_now () = in_24_hrs)\n"))),(0,s.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=c",group:"c"},"const not_tomorrow: bool = (Tezos.get_now() == in_24_hrs);\n"))),(0,s.kt)("h2",{id:"addresses"},"Addresses"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"address")," type in LIGO denotes Tezos addresses (tz1, tz2, tz3,\nKT1, ...). Currently, addresses are created by casting a string to the\n",(0,s.kt)("inlineCode",{parentName:"p"},"address")," type. Beware of failures if the address is invalid. Consider\nthe following examples."),(0,s.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=d",group:"d"},'let my_account : address =\n  ("tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" : address)\n'))),(0,s.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=d",group:"d"},'const my_account: address = "tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx";\n'))),(0,s.kt)("h2",{id:"signatures"},"Signatures"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"signature")," type in LIGO datatype is used for Tezos signatures\n(edsig, spsig). Signatures are created by casting a string. Beware of\nfailure if the signature is invalid."),(0,s.kt)("p",null,"Here is how you can define a signature:"),(0,s.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=e",group:"e"},'let my_sig : signature =\n   ("edsigthTzJ8X7MPmNeEwybRAvdxS1pupqcM5Mk4uCuyZAe7uEk68YpuGDeViW8wSXMrCi5CwoNgqs8V2w8ayB5dMJzrYCHhD8C7" :\n   signature)\n'))),(0,s.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=e",group:"e"},'const my_sig: signature =\n"edsigthTzJ8X7MPmNeEwybRAvdxS1pupqcM5Mk4uCuyZAe7uEk68YpuGDeViW8wSXMrCi5CwoNgqs8V2w8ayB5dMJzrYCHhD8C7" as\nsignature;\n'))),(0,s.kt)("h2",{id:"keys"},"Keys"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"key")," type in LIGO is used for Tezos public keys. Do not confuse\nthem with map keys. Keys are made by casting strings. Beware of\nfailure if the key is invalid."),(0,s.kt)("p",null,"Here is how you can define a key."),(0,s.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=f",group:"f"},'let my_key : key = "edpkuBknW28nW72KG6RoHtYW7p12T6GKc7nAbwYX5m8Wd9sDVC9yav"\n'))),(0,s.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=f",group:"f"},'const my_key : key = "edpkuBknW28nW72KG6RoHtYW7p12T6GKc7nAbwYX5m8Wd9sDVC9yav";\n'))))}d.isMDXComponent=!0}}]);