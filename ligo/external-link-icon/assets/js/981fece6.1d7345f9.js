"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[13274],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(g,i(i({ref:t},p),{},{components:n})):a.createElement(g,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>r.Z,Z:()=>o});var a=n(67294),r=n(75402);const o=function(e){return a.createElement(r.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},69386:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905)),o=n(48720);const i={id:"declaring",title:"Declaring"},l=void 0,s={unversionedId:"modules/declaring",id:"version-1.6.0/modules/declaring",title:"Declaring",description:"Modules are a programming language construction that allows us to",source:"@site/versioned_docs/version-1.6.0/modules/declaring.md",sourceDirName:"modules",slug:"/modules/declaring",permalink:"/previews/ligo/external-link-icon/docs/1.6.0/modules/declaring",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"declaring",title:"Declaring"},sidebar:"docs",previous:{title:"Looping",permalink:"/previews/ligo/external-link-icon/docs/1.6.0/maps/looping"},next:{title:"Accessing",permalink:"/previews/ligo/external-link-icon/docs/1.6.0/modules/accessing"}},c={},p=[],u={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("p",null,"Modules are a programming language construction that allows us to\npackage related definitions together. A canonical example of a module\nis a data type and associated operations over it (e.g. stacks or\nqueues). The rest of the program can access these definitions in a\nregular way, providing maintainability, reusability and safety."),(0,r.kt)("p",null,"By contrast, a record cannot package type definitions together with\nvalues: modules can, but records are values and modules are not values:\nthis is where design comes into play: do we want to create a kind of\nlibrary, which we use for other tasks, or do we want to compute? If\nthe former, we would probably use a module; if the latter, a record."),(0,r.kt)("p",null,"For a concrete example, we could create a module that packages a type\nthat represents amounts in a particular currency together with\nfunctions that manipulate these amounts: constants, addition,\nsubtraction, etc."),(0,r.kt)("p",null,"Modules are introduced by the keyword ",(0,r.kt)("inlineCode",{parentName:"p"},"module"),", and type and value\ndefinitions are grouped within a block opened by the keyword ",(0,r.kt)("inlineCode",{parentName:"p"},"struct"),",\nand closed by the keyword ",(0,r.kt)("inlineCode",{parentName:"p"},"end"),", called a ",(0,r.kt)("em",{parentName:"p"},"structure"),", as in\nOCaml. Module names must start with a capital letter."),(0,r.kt)("p",null,"For example, the following code defines a module ",(0,r.kt)("inlineCode",{parentName:"p"},"Euro")," that packages\ntogether a type, called ",(0,r.kt)("inlineCode",{parentName:"p"},"t"),", together with an operation ",(0,r.kt)("inlineCode",{parentName:"p"},"add")," that\nsums two values of the given currency, as well as coins for one and\ntwo euros."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=Euro",group:"Euro"},"module Euro =\n  struct\n    type t = nat\n    let add (a, b : t * t) : t = a + b\n    let one : t = 1n\n    let two : t = 2n\n  end\n")),(0,r.kt)("p",null,'By default all the definitions in a module are "exported", that is,\nthey are accessible from outside the module. (We will see how to\nrestrict the access by means of\n',(0,r.kt)("a",{parentName:"p",href:"/previews/ligo/external-link-icon/docs/1.6.0/signatures/declaring"},"module types"),".)")),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("p",null,"Namespaces are a programming language construction that allows us to\npackage related definitions together. A canonical example of a\nnamespace is a data type and associated operations over it\n(e.g. stacks or queues). The rest of the program can access these\ndefinitions in a regular way, providing maintainability, reusability\nand safety."),(0,r.kt)("p",null,"By contrast, a record cannot package type definitions together with\nvalues: namespaces can, but records are values and namespaces are not\nvalues: this is where design comes into play: do we want to create a\nkind of library, which we use for other tasks, or do we want to\ncompute? If the former, we would probably use a namespace; if the\nlatter, an record."),(0,r.kt)("p",null,"For a concrete example, we could create a namespace that packages a\ntype that represents amounts in a particular currency together with\nfunctions that manipulate these amounts: constants, addition,\nsubtraction, etc."),(0,r.kt)("p",null,"Namespaces are introduced using the keyword ",(0,r.kt)("inlineCode",{parentName:"p"},"namespace"),', and type and\nvalue definitions are grouped within a block opened by "',(0,r.kt)("inlineCode",{parentName:"p"},"{"),'" and\nclosed by "',(0,r.kt)("inlineCode",{parentName:"p"},"}"),'". Namespace names must start with a capital letter.'),(0,r.kt)("p",null,"For example, the following code defines a module ",(0,r.kt)("inlineCode",{parentName:"p"},"Euro")," that packages\ntogether a type, called ",(0,r.kt)("inlineCode",{parentName:"p"},"t"),", together with an operation ",(0,r.kt)("inlineCode",{parentName:"p"},"add")," that\nsums two values of the given currency, as well as coins for one and\ntwo euros."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=Euro",group:"Euro"},"namespace Euro {\n  export type t = nat;\n  export const add = (a: t, b: t) : t => a + b;\n  export const one: t = 1n;\n  export const two: t = 2n;\n};\n")),(0,r.kt)("p",null,"In this example you will also notice how all definitions are prefixed\nby the keyword ",(0,r.kt)("inlineCode",{parentName:"p"},"export"),": this enables access to them from outside the\nnamespace.")))}d.isMDXComponent=!0}}]);