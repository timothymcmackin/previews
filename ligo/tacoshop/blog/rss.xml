<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Ligo Blog</title>
        <link>https://ligolang.org/previews/ligo/tacoshop/blog</link>
        <description>Ligo Blog</description>
        <lastBuildDate>Wed, 20 Sep 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Migration to LIGO v1.0]]></title>
            <link>https://ligolang.org/previews/ligo/tacoshop/blog/v1-migration-guide</link>
            <guid>https://ligolang.org/previews/ligo/tacoshop/blog/v1-migration-guide</guid>
            <pubDate>Wed, 20 Sep 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Exciting news, LIGO has released version 1.0! Please continue reading to learn which changes may affect your existing codebase.]]></description>
            <content:encoded><![CDATA[<p>Exciting news, LIGO has released version 1.0! We made sure to fit in this release a number of pending breaking changes, so that our users do not need to catch up with small breaking changes every release, and can handle the migration in bulk. Please continue reading to learn which changes may affect your existing codebase.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="all-syntaxes">All syntaxes<a href="#all-syntaxes" class="hash-link" aria-label="Direct link to All syntaxes" title="Direct link to All syntaxes">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="no-more-main-function">No more <code>main</code> function<a href="#no-more-main-function" class="hash-link" aria-label="Direct link to no-more-main-function" title="Direct link to no-more-main-function">​</a></h3><p>You should not manually craft a <code>main</code> function that calls your entry points anymore. Instead, above each entry point function, you can now write <code>@entry</code> for JsLIGO or <code>[@entry]</code> for CameLIGO. This will cause a <code>main</code> function to be automatically generated behind the scenes.</p><p>If you need more fine-grained control, it is still possible to write a <code>main</code> function, but you will need to add <code>@entry</code> or <code>[@entry]</code> above that <code>main</code> function (and only that function). See <a href="/previews/ligo/tacoshop/docs/syntax/contracts/entrypoints#the-main-function">the documentation on the main function and entry points</a> for more details on how to do this.</p><p><a href="/previews/ligo/tacoshop/docs/syntax/contracts/views">Views</a> can be declared in a similar way with <code>@view</code> for JsLIGO and <code>[@view]</code> for CameLIGO.</p><p>As the use of <code>@entry</code> or <code>[@entry]</code> (and <code>@view</code> or <code>[@view]</code>) in the source is now mandatory, it is not possible anymore to rely on the auto-detection of the <code>main</code> function as the sole entry point, and it is not possible anymore to specify a entry points via the <code>-e</code> function on the command-line or views via the <code>--views</code> / <code>-v</code> options.</p><p>Another consequence of this change is that, when originating a contract for tests, <code>Test.originate</code> now take as an argument a module containing multiple entry points instead of a single function, i.e. a single entry point</p><p>We are also rolling out a new feature allowing the addition, removal and update of dynamic entry points for a contract after deployment. This could be a useful feature for example when building a DAO which allows on-chain vote to upgrade its code (or a DAO which controls the code of another separate contract). For more information, see <a href="/previews/ligo/tacoshop/docs/syntax/contracts/dynamic-entrypoints">the documentation</a> and <a href="/previews/ligo/tacoshop/docs/reference/dynamic-entrypoints-reference">the reference</a> for this feature.</p><p>MRs:</p><ul><li><a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2818" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2818</a></li><li><a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2814" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2814</a></li><li><a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2810" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2810</a></li><li><a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2805" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2805</a></li><li><a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2831" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2831</a></li><li><a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2885" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2885</a></li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="uniform-calling-convention-for-views-and-entry-points">Uniform calling convention for views and entry points.<a href="#uniform-calling-convention-for-views-and-entry-points" class="hash-link" aria-label="Direct link to Uniform calling convention for views and entry points." title="Direct link to Uniform calling convention for views and entry points.">​</a></h4><p>Views used to be functions taking a tuple, they are now functions taking two arguments:</p><div class="codeBlockContent_vqWU"><button type="button" aria-label="Copy code to clipboard" class="copyButton_H_xL">Copy</button><div tabindex="0" class="prism-code language-jsligo codeBlock_wPnj"><div class="codeBlockLines_fQUY" style="color:#F8F8F2;background-color:#282A36"><div class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">// @entry</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> set_storage </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">new_storage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> _old_storage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">list</span><span class="token operator">&lt;</span><span class="token plain">operation</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> new_storage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block">
</span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token decorator at operator">@</span><span class="token decorator function" style="color:rgb(80, 250, 123)">view</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> get_storage </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">_</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> storage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">unit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">:</span><span class="token plain"> int </span><span class="token operator">=&gt;</span><span class="token plain"> storage</span></div></div></div></div><p>is now written</p><div class="codeBlockContent_vqWU"><button type="button" aria-label="Copy code to clipboard" class="copyButton_H_xL">Copy</button><div tabindex="0" class="prism-code language-jsligo codeBlock_wPnj"><div class="codeBlockLines_fQUY" style="color:#F8F8F2;background-color:#282A36"><div class="token-line" style="color:#F8F8F2"><span class="token decorator at operator">@</span><span class="token decorator function" style="color:rgb(80, 250, 123)">entry</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> set_storage </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">new_storage</span><span class="token operator">:</span><span class="token plain"> int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> _old_storage</span><span class="token operator">:</span><span class="token plain"> int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">list</span><span class="token operator">&lt;</span><span class="token plain">operation</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> new_storage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block">
</span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token decorator at operator">@</span><span class="token decorator function" style="color:rgb(80, 250, 123)">view</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> get_storage </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">_</span><span class="token operator">:</span><span class="token plain"> unit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> storage</span><span class="token operator">:</span><span class="token plain"> int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">:</span><span class="token plain"> int </span><span class="token operator">=&gt;</span><span class="token plain"> storage</span></div></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="contract_of-and-parameter_of"><code>contract_of</code> and <code>parameter_of</code><a href="#contract_of-and-parameter_of" class="hash-link" aria-label="Direct link to contract_of-and-parameter_of" title="Direct link to contract_of-and-parameter_of">​</a></h4><p>The aforementioned changes to <code>@entry</code> and the <code>main</code> function have affected how contracts are tested, starting from <a href="https://gitlab.com/ligolang/ligo/-/releases/0.64.2" target="_blank" rel="noopener noreferrer">v0.64.2</a> (<a href="/previews/ligo/tacoshop/docs/intro/changelog#0642">changelog</a>). See <a href="/previews/ligo/tacoshop/docs/testing">the documentation on testing</a> for examples on how to use <code>contract_of</code> and <code>parameter_of</code>.</p><p>MRs:</p><ul><li><a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2476" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2476</a></li><li><a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2685" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2685</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="export-and-private-now-have-the-expected-effect"><code>export</code> and <code>@private</code> now have the expected effect<a href="#export-and-private-now-have-the-expected-effect" class="hash-link" aria-label="Direct link to export-and-private-now-have-the-expected-effect" title="Direct link to export-and-private-now-have-the-expected-effect">​</a></h3><p>Previously, all declarations would be exported regardless whether <code>export</code>, <code>@private</code> or neither was used.</p><p>In LIGO v1, JsLIGO definitions which are not marked with <code>export</code> are not exported, and CameLIGO definitions which are marked with <code>@private</code> are not exported. In other words, the default for JsLIGO is now to make definitions private unless specified otherwise with <code>export</code>, and the default for CameLIGO is now to make definitions public unless specified otherwise with <code>[@private]</code>.</p><p>Furthermore, in JsLIGO nested namespaces need to be exported in order to be accessed, e.g.</p><div class="codeBlockContent_vqWU"><button type="button" aria-label="Copy code to clipboard" class="copyButton_H_xL">Copy</button><div tabindex="0" class="prism-code language-jsligo codeBlock_wPnj"><div class="codeBlockLines_fQUY" style="color:#F8F8F2;background-color:#282A36"><div class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">namespace</span><span class="token plain"> Foo </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">namespace</span><span class="token plain"> Bar </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> x </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block">
</span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> y </span><span class="token operator">=</span><span class="token plain"> Foo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Bar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">x</span></div></div></div></div><p>MRs:</p><ul><li><a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2796" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2796</a></li><li><a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2684" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2684</a> in <a href="https://gitlab.com/ligolang/ligo/-/releases/0.69.0" target="_blank" rel="noopener noreferrer">v0.69.0</a> (<a href="/previews/ligo/tacoshop/docs/intro/changelog#0690">changelog</a>)</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-comb-layout-is-now-used-by-default">The comb layout is now used by default<a href="#the-comb-layout-is-now-used-by-default" class="hash-link" aria-label="Direct link to The comb layout is now used by default" title="Direct link to The comb layout is now used by default">​</a></h3><p>Some types can have several isomorphic representations in Michelson, and LIGO allows choosing between two of these, <code>comb</code> and <code>tree</code>, via an <code>@layout</code> decorator (e.g. <code>@layout("comb")</code> in JsLIGO, or <code>[@layout comb]</code> in CameLIGO).</p><p>Previously, the default layout was <code>tree</code>, and in LIGO v1, the default becomes <code>comb</code>.</p><p>The rationale is that the <code>comb</code> layout is usually more optimal, especially for records: records with a <code>comb</code> layout are compiled to Michelson combs, which have better support and look more readable. The <code>comb</code> layout is also more predictable / less surprising, because the fields are in declared order instead of alphabetical order. The <code>comb</code> layout can be less efficient for variants, but the difference should not be significant in most cases. For more info on why this change happened, see <a href="/previews/ligo/tacoshop/blog/layout-comb-why">Why did the default datatype layout change to <code>@layout comb</code>?</a></p><p>If your project has a stable ABI that other tools rely on, you might need to manually annotate the type of entry point arguments and the entry point return types with <code>@layout("tree")</code> / <code>[@layout tree]</code>.</p><p>Once reaching the optimization phase of your development process, youu may wish to try annotating large variants (which contain many cases) with <code>@layout("tree")</code> / <code>[@layout tree]</code> and comparing the size and gas consumption of the compiled contracts.</p><p>MRs:</p><ul><li><a href="https://gitlab.com/ligolang/ligo/-/merge_requests/1816" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/1816</a>.</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="a-small-set-of-annotations--decorators-are-now-supported">A small set of annotations / decorators are now supported<a href="#a-small-set-of-annotations--decorators-are-now-supported" class="hash-link" aria-label="Direct link to A small set of annotations / decorators are now supported" title="Direct link to A small set of annotations / decorators are now supported">​</a></h3><ul><li><code>@entry</code></li><li><code>@dyn_entry</code></li><li><code>@inline</code></li><li><code>@view</code></li><li><code>@no_mutation</code></li><li><code>@private</code></li><li><code>@public</code></li><li><code>@annot</code></li><li><code>@layout</code></li></ul><p>These annotations / decorators should now be written without prefixing them with a comment, e.g.</p><div class="codeBlockContent_vqWU"><button type="button" aria-label="Copy code to clipboard" class="copyButton_H_xL">Copy</button><div tabindex="0" class="prism-code language-jsligo codeBlock_wPnj"><div class="codeBlockLines_fQUY" style="color:#F8F8F2;background-color:#282A36"><div class="token-line" style="color:#F8F8F2"><span class="token decorator at operator">@</span><span class="token decorator function" style="color:rgb(80, 250, 123)">entry</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> my_entry_point </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">_</span><span class="token operator">:</span><span class="token plain"> unit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> n</span><span class="token operator">:</span><span class="token plain"> int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">list</span><span class="token operator">&lt;</span><span class="token plain">operation</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span></div></div></div></div><p>instead of</p><div class="codeBlockContent_vqWU"><button type="button" aria-label="Copy code to clipboard" class="copyButton_H_xL">Copy</button><div tabindex="0" class="prism-code language-jsligo codeBlock_wPnj"><div class="codeBlockLines_fQUY" style="color:#F8F8F2;background-color:#282A36"><div class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">// @entry</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> my_entry_point </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">_</span><span class="token operator">:</span><span class="token plain"> unit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> n</span><span class="token operator">:</span><span class="token plain"> int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">list</span><span class="token operator">&lt;</span><span class="token plain">operation</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span></div></div></div></div><p>There are also two internal annotations / decorators, which should not appear in normal source code:</p><ul><li><code>@thunk</code></li><li><code>@hidden</code></li></ul><p>MRs:</p><ul><li><a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2619" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2619</a> in <a href="https://gitlab.com/ligolang/ligo/-/releases/0.67.0" target="_blank" rel="noopener noreferrer">v0.67.0</a> (<a href="/previews/ligo/tacoshop/docs/intro/changelog#0670">changelog</a>)</li></ul><p>MRs:</p><ul><li><a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2476" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2476</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="field-and-tuple-component-access">Field and tuple component access<a href="#field-and-tuple-component-access" class="hash-link" aria-label="Direct link to Field and tuple component access" title="Direct link to Field and tuple component access">​</a></h3><p>Fields can be accessed with dot notation <code>stuff.y</code> and brackets <code>stuff["y"]</code> interchangeably:</p><div class="codeBlockContent_vqWU"><button type="button" aria-label="Copy code to clipboard" class="copyButton_H_xL">Copy</button><div tabindex="0" class="prism-code language-jsligo codeBlock_wPnj"><div class="codeBlockLines_fQUY" style="color:#F8F8F2;background-color:#282A36"><div class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> stuff </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">    x </span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"foo"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">    y </span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> universe </span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">42</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"life"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block">
</span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> part </span><span class="token operator">:</span><span class="token plain"> bool </span><span class="token operator">=</span><span class="token plain"> stuff</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">"universe"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span></div></div></div></div><ul><li><a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2661" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2661</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="miscellaneous">Miscellaneous<a href="#miscellaneous" class="hash-link" aria-label="Direct link to Miscellaneous" title="Direct link to Miscellaneous">​</a></h3><ul><li>The internal command <code>ligo daemon</code> has been removed in <a href="https://gitlab.com/ligolang/ligo/-/releases/0.69.0" target="_blank" rel="noopener noreferrer">v0.69.0</a> (<a href="/previews/ligo/tacoshop/docs/intro/changelog#0690">changelog</a>). It was previously used by the old language server to create a persistent LIGO process, but it was hacky and offered no performance improvements. There should be no noticeable change for the user, as the new language server (used e.g. by the VsCode plug-in) does not make use of this command anymore. MR: <a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2690" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2690</a>.</li><li>The support for CST mutation testing has been dropped in <a href="https://gitlab.com/ligolang/ligo/-/releases/0.66.0" target="_blank" rel="noopener noreferrer">v0.66.0</a> (<a href="/previews/ligo/tacoshop/docs/intro/changelog#0660">changelog</a>). Unfortunately, that feature was incomplete and broken. With the disappearance of this feature, the command <code>ligo mutate</code> has been removed. However, AST mutation testing is still supported and part of the <a href="/previews/ligo/tacoshop/docs/testing/mutation-testing">testing framework</a>. MRs: <a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2455" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2455</a> and <a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2607" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2607</a>.</li><li>Starting from <a href="https://gitlab.com/ligolang/ligo/-/releases/0.64.2" target="_blank" rel="noopener noreferrer">v0.64.2</a> (<a href="/previews/ligo/tacoshop/docs/intro/changelog#0642">changelog</a>), the transpilation commands now take <code>--from-syntax</code> and <code>--to-syntax</code>, instead of the former, less clear use of <code>--syntax</code> for the source syntax and an unnamed parameter for the destination syntax. The destination syntax can still be inferred from the filename given to <code>-o</code>, e.g. <code>-o dest.jsligo</code>. MR: <a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2501" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2501</a></li><li>Starting from <a href="https://gitlab.com/ligolang/ligo/-/releases/0.64.2" target="_blank" rel="noopener noreferrer">v0.64.2</a> (<a href="/previews/ligo/tacoshop/docs/intro/changelog#0642">changelog</a>), the Kathmandu protocol is deprecated. If you need to recompile an old LIGO contract for an outdated protocol version, you may use the compiler version that the project was developed with. MR: <a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2500" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2500</a></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="jsligo">JsLIGO<a href="#jsligo" class="hash-link" aria-label="Direct link to JsLIGO" title="Direct link to JsLIGO">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="short-notation-for-tez-and-mutez">Short notation for <code>tez</code> and <code>mutez</code><a href="#short-notation-for-tez-and-mutez" class="hash-link" aria-label="Direct link to short-notation-for-tez-and-mutez" title="Direct link to short-notation-for-tez-and-mutez">​</a></h3><p>You can now write <code>3tez</code> or <code>3mutez</code> instead of <code>3 as tez</code> or <code>3 as mutez</code>. This convenient feature was already present in CameLIGO and is now available in JsLIGO too!</p><p>MRs:</p><ul><li><a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2853" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2853</a></li><li><a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2661" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2661</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="new-bitwise-operators">New bitwise operators<a href="#new-bitwise-operators" class="hash-link" aria-label="Direct link to New bitwise operators" title="Direct link to New bitwise operators">​</a></h3><p>The following operators have been added, and can be used with <code>nat</code> and <code>bytes</code>.</p><ul><li><code>&amp;</code> Bitwise <em>and</em></li><li><code>|</code> Bitwise <em>or</em></li><li><code>^</code> Bitwise <em>xor</em></li><li><code>&lt;&lt;</code> Bitwise left shift (the shift amount is always a <code>nat\, even when shifting </code>bytes`)</li><li><code>&gt;&gt;</code> Bitwise right shift (the shift amount is always a <code>nat\, even when shifting </code>bytes`)</li></ul><p>Here are examples of these operators in context:</p><div class="codeBlockContent_vqWU"><button type="button" aria-label="Copy code to clipboard" class="copyButton_H_xL">Copy</button><div tabindex="0" class="prism-code language-jsligo codeBlock_wPnj"><div class="codeBlockLines_fQUY" style="color:#F8F8F2;background-color:#282A36"><div class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> zero</span><span class="token operator">:</span><span class="token plain"> nat </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">2n</span><span class="token plain"> </span><span class="token operator">&amp;</span><span class="token plain"> </span><span class="token number">1n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// Bitwise and</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> two_bytes </span><span class="token operator">:</span><span class="token plain"> bytes </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0x11</span><span class="token plain"> </span><span class="token operator">&amp;</span><span class="token plain"> </span><span class="token number">0x10</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block">
</span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> five</span><span class="token operator">:</span><span class="token plain"> nat </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">4n</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token number">1n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// Bitwise or</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> three_bytes </span><span class="token operator">:</span><span class="token plain"> bytes </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0x11</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token number">0x10</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block">
</span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> three </span><span class="token operator">:</span><span class="token plain"> nat </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">2n</span><span class="token plain"> </span><span class="token operator">^</span><span class="token plain"> </span><span class="token number">1n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// Bitwise xor</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> one_byte </span><span class="token operator">:</span><span class="token plain"> bytes </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0x11</span><span class="token plain"> </span><span class="token operator">^</span><span class="token plain"> </span><span class="token number">0x10</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block">
</span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> four </span><span class="token operator">:</span><span class="token plain"> nat </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">2n</span><span class="token plain"> </span><span class="token operator">&lt;&lt;</span><span class="token plain"> </span><span class="token number">1n</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// Bitwise left shift</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> five_one_two </span><span class="token operator">:</span><span class="token plain"> bytes </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0x0100</span><span class="token plain"> </span><span class="token operator">&lt;&lt;</span><span class="token plain"> </span><span class="token number">1n</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block">
</span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> one </span><span class="token operator">:</span><span class="token plain"> nat </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">2n</span><span class="token plain"> </span><span class="token operator">&gt;&gt;</span><span class="token plain"> </span><span class="token number">1n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// Bitwise right shift</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> zero_bytes </span><span class="token operator">:</span><span class="token plain"> bytes </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0x01</span><span class="token plain"> </span><span class="token operator">&gt;&gt;</span><span class="token plain"> </span><span class="token number">1n</span></div></div></div></div><p>MRs:</p><ul><li><a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2661" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2661</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="changes-to-pattern-matching">Changes to pattern matching<a href="#changes-to-pattern-matching" class="hash-link" aria-label="Direct link to Changes to pattern matching" title="Direct link to Changes to pattern matching">​</a></h3><p>JsLIGO's pattern matchin is inspired by the <a href="https://github.com/tc39/proposal-pattern-matching" target="_blank" rel="noopener noreferrer">ECMAScript Pattern Matching proposal</a>. This section covers some of the changes this implies.</p><p>The new <code>when</code> keyword makes pattern matching more explicit.</p><p>Furthermore, pattern matching is now a keyword, it is not anymore a function taking an object with cases as fields.</p><p>The <code>do { ... }</code> expression is equivalent to the <code>(() =&gt; { ... }) ()</code> thunk, i.e. it allows a block of code containing statements (like <code>const xyz = ...</code> or <code>return 42</code>) to be used where an expression is expected.</p><p>Therefore, a simple pattern matching like the following:</p><div class="codeBlockContent_vqWU"><button type="button" aria-label="Copy code to clipboard" class="copyButton_H_xL">Copy</button><div tabindex="0" class="prism-code language-jsligo codeBlock_wPnj"><div class="codeBlockLines_fQUY" style="color:#F8F8F2;background-color:#282A36"><div class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">force_positive</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">key</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> dict</span><span class="token operator">:</span><span class="token plain"> map</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> int</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">match</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">Map</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">find_opt</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">key</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> dict</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">Some</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">val </span><span class="token operator">:</span><span class="token plain"> int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">val </span><span class="token operator">&gt;=</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> val</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token function" style="color:rgb(80, 250, 123)">failwith</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Negative value."</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">None</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">failwith</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Not found."</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span></div></div></div></div><p>becomes:</p><div class="codeBlockContent_vqWU"><button type="button" aria-label="Copy code to clipboard" class="copyButton_H_xL">Copy</button><div tabindex="0" class="prism-code language-jsligo codeBlock_wPnj"><div class="codeBlockLines_fQUY" style="color:#F8F8F2;background-color:#282A36"><div class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">force_positive</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">key</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> dict</span><span class="token operator">:</span><span class="token plain"> map</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> int</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">match</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">Map</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">find_opt</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">key</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> dict</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">when</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token function" style="color:rgb(80, 250, 123)">Some</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">val</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">do</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">val </span><span class="token operator">&gt;=</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> val</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token function" style="color:rgb(80, 250, 123)">failwith</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Negative value"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">when</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token function" style="color:rgb(80, 250, 123)">None</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">failwith</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Not found."</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span></div></div></div></div><p>Pattern-matching on lists uses the syntaxes <code>when([])</code> and <code>when([head, ...tail])</code>:</p><div class="codeBlockContent_vqWU"><button type="button" aria-label="Copy code to clipboard" class="copyButton_H_xL">Copy</button><div tabindex="0" class="prism-code language-jsligo codeBlock_wPnj"><div class="codeBlockLines_fQUY" style="color:#F8F8F2;background-color:#282A36"><div class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">storage</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> list </span><span class="token operator">&lt;</span><span class="token plain">int</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">parameter</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> list </span><span class="token operator">&lt;</span><span class="token plain">int</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">returnx</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">list </span><span class="token operator">&lt;</span><span class="token plain">operation</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> storage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block">
</span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> main </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">p </span><span class="token operator">:</span><span class="token plain"> parameter</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> s </span><span class="token operator">:</span><span class="token plain"> storage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> returnx </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> storage </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">match</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">p</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">when</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">:</span><span class="token plain"> s</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">when</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">hd</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token operator">...</span><span class="token plain">tl</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">s</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> hd</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> tl</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">as</span><span class="token plain"> list</span><span class="token operator">&lt;</span><span class="token plain">operation</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> storage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span></div></div></div></div><p>Furthermore, there are a few changes to how patterns are written:</p><ul><li>Patterns for parameterless constructors take a <code>()</code> within the <code>when(...)</code>, therefore <code>Nil: () =&gt; 1</code> becomes <code>when(Nil()): 1</code></li><li>Patterns which match a constructor containing a tuple work similarly, e.g. <code>Cons: (pair) =&gt; pair.1 + f(pair.2)</code> becomes <code>when(Cons(pair)) =&gt; pair.1 + f(pair.2)</code></li><li>Patterns with one variable per parameter are written as expected: <code>Foo: (a, b) =&gt; a + b</code> becomes <code>when(Foo(a, b)): a + b</code></li></ul><p>MRs:</p><ul><li><a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2661" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2661</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="_-is-now-a-valid-variable-name-and-cant-be-used-for-its-former-throw-away-semantics"><code>_</code> is now a valid variable name and can't be used for its former throw-away semantics<a href="#_-is-now-a-valid-variable-name-and-cant-be-used-for-its-former-throw-away-semantics" class="hash-link" aria-label="Direct link to _-is-now-a-valid-variable-name-and-cant-be-used-for-its-former-throw-away-semantics" title="Direct link to _-is-now-a-valid-variable-name-and-cant-be-used-for-its-former-throw-away-semantics">​</a></h3><p>Previously, following the tradition of some functional languages, <code>_</code> was used to discard the value bound to it, e.g.</p><div class="codeBlockContent_vqWU"><button type="button" aria-label="Copy code to clipboard" class="copyButton_H_xL">Copy</button><div tabindex="0" class="prism-code language-jsligo codeBlock_wPnj"><div class="codeBlockLines_fQUY" style="color:#F8F8F2;background-color:#282A36"><div class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">// don't do this anymore</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">f</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> _ </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">some_check</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">match</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">foobar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">when</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"empty list"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">when</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">_</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token operator">...</span><span class="token plain">_</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"non-empty list"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span></div></div></div></div><p>Instead, <code>_</code> is now a normal variable name, following the JavaScript and TypeScript tradition, where <code>_</code> is used as a short
name for a namespace containing many utilities, e.g. as an alias for the <code>lodash</code> library. This means that the code above should now assign unique names to the discarded value, like so:</p><div class="codeBlockContent_vqWU"><button type="button" aria-label="Copy code to clipboard" class="copyButton_H_xL">Copy</button><div tabindex="0" class="prism-code language-jsligo codeBlock_wPnj"><div class="codeBlockLines_fQUY" style="color:#F8F8F2;background-color:#282A36"><div class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">// don't do this anymore</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">f</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> _chk </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">some_check</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">match</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">foobar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">when</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"empty list"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">when</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">_hd</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token operator">...</span><span class="token plain">_tl</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"non-empty list"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span></div></div></div></div><p>If multiple <em> variable are bound in the same scope, it will result in an error (duplicate block-scoped variable) just as in TypeScript. However, it is still possible to shadow a `</em><code>within a smaller scope, e.g. if</code><em><code>is globally defined as an alias for another module, a function can still specify</code></em>` as an argument name and shadow the global definition, which could cause issues. It is wise to skim over existing code for such cases.</p><p>MRs:</p><ul><li><a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2674" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2674</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="imports-are-now-automatically-re-exported">Imports are now automatically re-exported<a href="#imports-are-now-automatically-re-exported" class="hash-link" aria-label="Direct link to Imports are now automatically re-exported" title="Direct link to Imports are now automatically re-exported">​</a></h3><p>When a module is imported e.g. with <code>#import "foo.jsligo" "Foo"</code> inside the file <code>bar.jsligo</code>, it is automatically re-exported.</p><p>For example, a third file importing <code>bar.jsligo</code> as <code>Bar</code> can write <code>Bar.Foo.x</code> to access the <code>x</code> defined in <code>foo.jsligo</code></p><p>MRs:</p><ul><li><a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2815" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2815</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="miscellaneous-1">Miscellaneous<a href="#miscellaneous-1" class="hash-link" aria-label="Direct link to Miscellaneous" title="Direct link to Miscellaneous">​</a></h3><ul><li><code>true</code> and <code>false</code> are now keywords (not variables), and cannot be shadowed by a local variable declaration. <a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2661" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2661</a></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="cameligo">CameLIGO<a href="#cameligo" class="hash-link" aria-label="Direct link to CameLIGO" title="Direct link to CameLIGO">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="field-and-tuple-component-access-1">Field and tuple component access<a href="#field-and-tuple-component-access-1" class="hash-link" aria-label="Direct link to Field and tuple component access" title="Direct link to Field and tuple component access">​</a></h3><p>Fields and tuple components can be accessed with the same dot notation:</p><div class="codeBlockContent_vqWU"><button type="button" aria-label="Copy code to clipboard" class="copyButton_H_xL">Copy</button><div tabindex="0" class="prism-code language-cameligo codeBlock_wPnj"><div class="codeBlockLines_fQUY" style="color:#F8F8F2;background-color:#282A36"><div class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> stuff </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">    x </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"foo"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">    y </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">42</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"life"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> universe </span><span class="token operator">=</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block">
</span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> part </span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> bool </span><span class="token operator">=</span><span class="token plain"> stuff</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">universe</span></div></div></div></div><p>MRs:</p><ul><li><a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2661" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2661</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="package-management-use-ligojson-instead-of-packagejson-or-esyjson">Package management: use ligo.json instead of package.json or esy.json<a href="#package-management-use-ligojson-instead-of-packagejson-or-esyjson" class="hash-link" aria-label="Direct link to Package management: use ligo.json instead of package.json or esy.json" title="Direct link to Package management: use ligo.json instead of package.json or esy.json">​</a></h3><p>Users often work with JaveScript toolchain alongside ours. Using package.json to manage both is tricky. It's better to have a separate manfiest to manage ligo dependencies. We therefore now use a separate <code>ligo.json</code> maninfest to manage LIGO packages.</p><p>As part of this change, we are no longer using the <code>esy</code> tool for package management, and the <code>installation.json</code> file, formerly located at <code>_esy/ligo/installation.json</code>, should now be moved to <code>_ligo/ligo/installation.json</code>.</p><p>MRs:</p><ul><li><a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2817" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2817</a></li><li><a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2785" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2785</a></li><li><a href="https://gitlab.com/ligolang/ligo/-/merge_requests/2883" target="_blank" rel="noopener noreferrer">https://gitlab.com/ligolang/ligo/-/merge_requests/2883</a></li></ul>]]></content:encoded>
            <author>suzanne@marigold.dev (Suzanne Soy)</author>
            <category>migration</category>
        </item>
        <item>
            <title><![CDATA[How to deal with the change of the default datatype layout to @layout comb ?]]></title>
            <link>https://ligolang.org/previews/ligo/tacoshop/blog/layout-comb-how</link>
            <guid>https://ligolang.org/previews/ligo/tacoshop/blog/layout-comb-how</guid>
            <pubDate>Sat, 09 Sep 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Explore the challenges and solutions associated with the default datatype layout change to @layout comb in LIGO 1.0. For a comprehensive background on the change, refer to our "Why" article.]]></description>
            <content:encoded><![CDATA[<p>See <a href="/previews/ligo/tacoshop/blog/layout-comb-why">Why did the default datatype layout change to <code>@layout comb</code> ?</a>
for background about this change.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="easy-way-out">Easy way out<a href="#easy-way-out" class="hash-link" aria-label="Direct link to Easy way out" title="Direct link to Easy way out">​</a></h2><p>To take the easy way out, set the <code>LIGO_LEGACY_LAYOUT_TREE</code>
environment variable:</p><div class="codeBlockContent_vqWU"><button type="button" aria-label="Copy code to clipboard" class="copyButton_H_xL">Copy</button><div tabindex="0" class="prism-code language-shell codeBlock_wPnj"><div class="codeBlockLines_fQUY" style="color:#F8F8F2;background-color:#282A36"><div class="token-line" style="color:#F8F8F2"><span class="token builtin class-name" style="color:rgb(189, 147, 249)">export</span><span class="token plain"> </span><span class="token assign-left variable" style="color:rgb(189, 147, 249);font-style:italic">LIGO_LEGACY_LAYOUT_TREE</span><span class="token operator">=</span></div></div></div></div><p>This will cause LIGO to undo the change, letting <code>@layout tree</code> remain
the default.</p><p>This is only a temporary solution, intended to let people easily
migrate to LIGO 1.0, which should be considered already deprecated
as it will eventually be removed.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-the-problem">What's the problem?<a href="#whats-the-problem" class="hash-link" aria-label="Direct link to What's the problem?" title="Direct link to What's the problem?">​</a></h2><p>If you do not take the easy way out, it's important to understand the
problem.</p><p>In theory, it is possible that after upgrading to LIGO 1.0, your
contracts could compile successfully, your <code>ligo run test</code> could pass,
and even "integration" tests (e.g. using a sandbox or test Tezos
network) could pass, yet after deployment you might still find that
your contracts are catastrophically broken.</p><p>This can happen if your contracts need to interact with other
contracts, which are either:</p><ul><li>already deployed on mainnet, or</li><li>compiled using an older version of LIGO, or</li><li>compiled using a non-LIGO compiler, or</li><li>implementing some standardized interface</li></ul><p>If the compiled interface types (parameter, view, ...) for these
interactions change when you upgrade to LIGO 1.0, because you
previously (implicitly) used <code>@layout tree</code> and now the types use
<code>@layout comb</code>, this will break compatibility, and the interactions
will fail.</p><p>For example, consider the following test, involving communication
between two contracts over a parameter type <code>foo</code>:</p><div class="codeBlockContent_vqWU"><button type="button" aria-label="Copy code to clipboard" class="copyButton_H_xL">Copy</button><div tabindex="0" class="prism-code language-jsligo codeBlock_wPnj"><div class="codeBlockLines_fQUY" style="color:#F8F8F2;background-color:#282A36"><div class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">foo</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  foo </span><span class="token operator">:</span><span class="token plain"> nat</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  bar </span><span class="token operator">:</span><span class="token plain"> int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  baz </span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block">
</span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">namespace</span><span class="token plain"> Foo </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token decorator at operator">@</span><span class="token decorator function" style="color:rgb(80, 250, 123)">entry</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> foo </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">_</span><span class="token operator">:</span><span class="token plain"> foo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> s</span><span class="token operator">:</span><span class="token plain"> unit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">list</span><span class="token operator">&lt;</span><span class="token plain">operation</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> unit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> s</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block">
</span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// dummy entrypoint to avoid bug with single entrypoint :(</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token decorator at operator">@</span><span class="token decorator function" style="color:rgb(80, 250, 123)">entry</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> dummy </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">_</span><span class="token operator">:</span><span class="token plain"> unit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> s</span><span class="token operator">:</span><span class="token plain"> unit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">list</span><span class="token operator">&lt;</span><span class="token plain">operation</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> unit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> s</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block">
</span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">namespace</span><span class="token plain"> Bar </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token decorator at operator">@</span><span class="token decorator function" style="color:rgb(80, 250, 123)">entry</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> bar </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">addr</span><span class="token operator">:</span><span class="token plain"> address</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> s</span><span class="token operator">:</span><span class="token plain"> unit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">list</span><span class="token operator">&lt;</span><span class="token plain">operation</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> unit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> arg </span><span class="token operator">:</span><span class="token plain"> foo </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">foo</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">1n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> bar</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> baz</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"three"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> amt </span><span class="token operator">:</span><span class="token plain"> tez </span><span class="token operator">=</span><span class="token plain"> 0tz</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> dst </span><span class="token operator">:</span><span class="token plain"> contract</span><span class="token operator">&lt;</span><span class="token plain">foo</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Tezos</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">get_entrypoint</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"%foo"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> addr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> tx </span><span class="token operator">=</span><span class="token plain"> Tezos</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">transaction</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">arg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> amt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> dst</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">tx</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> s</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block">
</span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// dummy entrypoint to avoid bug with single entrypoint :(</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token decorator at operator">@</span><span class="token decorator function" style="color:rgb(80, 250, 123)">entry</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> dummy </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">_</span><span class="token operator">:</span><span class="token plain"> unit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> s</span><span class="token operator">:</span><span class="token plain"> unit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">list</span><span class="token operator">&lt;</span><span class="token plain">operation</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> unit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> s</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block">
</span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> test_interaction </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">do</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> orig_foo </span><span class="token operator">=</span><span class="token plain"> Test</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">originate</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token function" style="color:rgb(80, 250, 123)">contract_of</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">Foo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> unit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> 0tz</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> foo_addr </span><span class="token operator">=</span><span class="token plain"> Test</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">to_address</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">orig_foo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">addr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> orig_bar </span><span class="token operator">=</span><span class="token plain"> Test</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">originate</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token function" style="color:rgb(80, 250, 123)">contract_of</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">Bar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> unit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> 0tz</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  Test</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">transfer_exn</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">orig_bar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">addr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">Bar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">foo_addr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> 0tz</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span></div></div></div></div><p>Note that this test will pass after upgrading to LIGO 1.0, because
when running the test, both <code>Foo</code> and <code>Bar</code> use the <code>comb</code> layout for
the parameter type <code>foo</code>. However, if there is already a <code>Foo</code>
contract deployed on mainnet, e.g. compiled using an older LIGO
version, then a newly compiled <code>Bar</code> contract will be unable to
communicate with it, because the new <code>foo</code> type will be incompatible!</p><p>So, in order to test that your contracts still work correctly, you
must either manually check that the interface types have changed, or
test interactions with the actual contracts you will need to interact
with.</p><p>In particular, if you are testing compatibility for interactions, you
should NOT only test interactions against contracts compiled using
LIGO 1.0, e.g. using <code>ligo test</code>, because those contracts will use the
new layout too!</p><p>If, on the other hand, you will deploy a <em>new</em> set of contracts which
only interact amongst themselves, then you have nothing to worry
about. It is only interactions with pre-existing or standardized
contracts that can cause trouble.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-deal-with-compatibility-problems">How to deal with compatibility problems?<a href="#how-to-deal-with-compatibility-problems" class="hash-link" aria-label="Direct link to How to deal with compatibility problems?" title="Direct link to How to deal with compatibility problems?">​</a></h2><p>If you have compatibility problems like this, and you don't take the
easy way out with <code>LIGO_LEGACY_LAYOUT_TREE</code>, you might need to switch
some types back to the tree layout.</p><p>Here are some examples of how to do that:</p><div class="codeBlockContent_vqWU"><button type="button" aria-label="Copy code to clipboard" class="copyButton_H_xL">Copy</button><div tabindex="0" class="prism-code language-jsligo codeBlock_wPnj"><div class="codeBlockLines_fQUY" style="color:#F8F8F2;background-color:#282A36"><div class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">tree_variant</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token decorator at operator">@</span><span class="token decorator function" style="color:rgb(80, 250, 123)">layout</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"tree"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token operator">|</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">"Foo"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> nat</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token operator">|</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">"Bar"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token operator">|</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">"Baz"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block">
</span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">tree_record</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token decorator at operator">@</span><span class="token decorator function" style="color:rgb(80, 250, 123)">layout</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"tree"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">    foo </span><span class="token operator">:</span><span class="token plain"> int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">    bar </span><span class="token operator">:</span><span class="token plain"> int</span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block">
</span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// in JsLIGO, you must assign names to tuple types in order to put</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// them back into tree layout, and then use these names at use sites instead</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// of repeating the tuple type</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block">
</span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token class-name keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> tree_tuple </span><span class="token operator">=</span><span class="token plain"> </span><span class="token decorator at operator">@</span><span class="token decorator function" style="color:rgb(80, 250, 123)">layout</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"tree"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">nat</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span></div></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="type-errors-from-layouts">Type errors from layouts<a href="#type-errors-from-layouts" class="hash-link" aria-label="Direct link to Type errors from layouts" title="Direct link to Type errors from layouts">​</a></h2><p>In some cases, you may get type errors due to mismatched type layouts.</p><p>Here is an example. Before LIGO 1.0, this code worked OK:</p><div class="codeBlockContent_vqWU"><button type="button" aria-label="Copy code to clipboard" class="copyButton_H_xL">Copy</button><div tabindex="0" class="prism-code language-jsligo codeBlock_wPnj"><div class="codeBlockLines_fQUY" style="color:#F8F8F2;background-color:#282A36"><div class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">record1</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  foo </span><span class="token operator">:</span><span class="token plain"> nat</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  bar </span><span class="token operator">:</span><span class="token plain"> int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  baz </span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block">
</span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">record2</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  baz </span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  bar </span><span class="token operator">:</span><span class="token plain"> int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  foo </span><span class="token operator">:</span><span class="token plain"> nat</span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block">
</span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> id </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">r</span><span class="token operator">:</span><span class="token plain"> record1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">:</span><span class="token plain"> record2 </span><span class="token operator">=&gt;</span><span class="token plain"> r</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span></div></div></div></div><p>However, as of LIGO 1.0, this example gives a type error:</p><div class="codeBlockContent_vqWU"><button type="button" aria-label="Copy code to clipboard" class="copyButton_H_xL">Copy</button><div tabindex="0" class="prism-code language-undefined codeBlock_wPnj"><div class="codeBlockLines_fQUY" style="color:#F8F8F2;background-color:#282A36"><div class="token-line" style="color:#F8F8F2"><span class="token plain">Invalid type(s)</span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">Cannot unify "record1" with "record2" due to differing layouts "({ name: foo }, { name: bar }, { name: baz })" and "({ name: baz }, { name: bar }, { name: foo })"</span></div></div></div></div><p>The reason for this is that in the old <code>tree</code> layout, the fields were sorted alphabetically, but in the <code>comb</code> layout they are taken in the declared order.</p><p>You can fix this problem either by switching back to the <code>tree</code> layout (see the previous section) or by writing the fields in a consistent order.</p>]]></content:encoded>
            <author>tom@marigold.dev (Tom Jack)</author>
            <category>explainer</category>
        </item>
        <item>
            <title><![CDATA[Why did the default datatype layout change to @layout comb?]]></title>
            <link>https://ligolang.org/previews/ligo/tacoshop/blog/layout-comb-why</link>
            <guid>https://ligolang.org/previews/ligo/tacoshop/blog/layout-comb-why</guid>
            <pubDate>Sat, 09 Sep 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Discover the evolution of Michelson data type layouts in LIGO and the shift to @layout comb as the default choice in version 1.0. Explore the benefits, including improved performance and code size reduction.]]></description>
            <content:encoded><![CDATA[<p>When compiling to Michelson, LIGO must choose a "layout" for record
and variant data types. Unfortunately, Michelson only has binary
<code>pair</code>/<code>or</code> types, for esoteric theoretical reasons.</p><p>This means that for each record or variant type, LIGO must pick one of
the many isomorphic binary tree structures which can represent it in
Michelson. This choice needs to be consistent (else we will get type
errors) and ideally it should be flexible (so that users can
interoperate with Michelson types defined in standards or emitted by
other compilers.)</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="background">Background<a href="#background" class="hash-link" aria-label="Direct link to Background" title="Direct link to Background">​</a></h2><p>In early versions of LIGO, two layouts were supported: <code>tree</code> and
<code>comb</code>.</p><p>Layout <code>tree</code> was made the default, primarily because this layout
supports record field access and update with cost O(log n), where n is
the number of fields in the record type. This layout also sorted
fields alphabetically by name, which made it compatible with LIGO's
structural handling of record and variant types at the time, where
order doesn't matter.</p><p>The <code>tree</code> layout was also used for tuple types, and originally this
could not be changed.</p><p>The <code>comb</code> layout was also supported because it was expected that it
would show up in standards and in interop with Michelson generated by
other compilers (and indeed it did.) At some point, LIGO was modified
to preserve the order of comb layout record fields and variant cases,
since this is useful for interop. (The order now also matters for
these types; two comb-layout record types are equal in LIGO only if
their fields are in the same order.)</p><p>Originally, the comb layout had worse performance, with cost O(n) for
record field access and updates.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-change-the-default">Why change the default?<a href="#why-change-the-default" class="hash-link" aria-label="Direct link to Why change the default?" title="Direct link to Why change the default?">​</a></h2><p>Since then, Michelson has added native O(log n) record field accesses
and updates with the <code>comb</code> layout. Additionally, there is an n-ary
<code>pair x y z ...</code> notation for comb layout, which makes large comb pair
types cheaper and more readable.</p><p>Thus, current best practice is for LIGO developers to almost always
mark record and tuple types as <code>@layout comb</code>. This generally leads to
smaller code size, and so less gas and storage burn.</p><p>It would be more convenient if this were the default. Unfortunately,
changing the default is a breaking change. But with 1.0, we are taking
the chance to finally make this breaking change...</p><p>Variant types still do not have any special comb support in Michelson
(again, for esoteric theoretical reasons.) However, for consistency
and simplicity, we are making comb layout the default always. We
believe that in most cases, the difference will not be
significant. Users can explicitly mark variants as <code>@layout tree</code> if
desired.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-do-i-do">What do I do?<a href="#what-do-i-do" class="hash-link" aria-label="Direct link to What do I do?" title="Direct link to What do I do?">​</a></h2><p>See the <a href="/previews/ligo/tacoshop/blog/layout-comb-how">How to deal with the change of the default datatype layout to <code>@layout comb</code> ?</a> doc for advice on how to deal
with this breaking change.</p>]]></content:encoded>
            <author>tom@marigold.dev (Tom Jack)</author>
            <category>explainer</category>
        </item>
    </channel>
</rss>