"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[44881],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(n),g=i,d=m["".concat(c,".").concat(g)]||m[g]||u[g]||o;return n?r.createElement(d,a(a({ref:t},p),{},{components:n})):r.createElement(d,a({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>i.Z,Z:()=>o});var r=n(67294),i=n(75402);const o=function(e){return r.createElement(i.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},16759:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>p});var r=n(87462),i=(n(67294),n(3905)),o=n(48720);const a={id:"asserting",title:"Asserting"},s=void 0,c={unversionedId:"imperative/asserting",id:"version-1.9.2/imperative/asserting",title:"Asserting",description:"Assertions can be used to ensure a certain condition is met when",source:"@site/versioned_docs/version-1.9.2/imperative/asserting.md",sourceDirName:"imperative",slug:"/imperative/asserting",permalink:"/previews/ligo/tacoshop/docs/imperative/asserting",draft:!1,tags:[],version:"1.9.2",frontMatter:{id:"asserting",title:"Asserting"},sidebar:"docs",previous:{title:"Looping",permalink:"/previews/ligo/tacoshop/docs/imperative/looping"},next:{title:"The switch statement",permalink:"/previews/ligo/tacoshop/docs/imperative/switches"}},l={},p=[],u={toc:p};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Assertions can be used to ensure a certain condition is met when\nrunning a contract. The predefined function ",(0,i.kt)("inlineCode",{parentName:"p"},"assert")," is used to check\nwhether a given a Boolean condition holds. The function ",(0,i.kt)("inlineCode",{parentName:"p"},"assert_some"),"\nis used to check if an option value is not ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),". The function\n",(0,i.kt)("inlineCode",{parentName:"p"},"assert_some_with_error")," is like ",(0,i.kt)("inlineCode",{parentName:"p"},"assert_some")," but an error message\ncan be given. Whenever the assertion fails, the contract will stop and\nan error will be left on the execution stack."),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=asserting",group:"asserting"},"let incr_if_true (b : bool) (n : int) : int =\n  let () = assert b in n+1\n\nlet incr_if_some (b : unit option) (n : int) : int =\n  let () = assert_some b in n+1\n"))),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=asserting",group:"asserting"},"const incr_if_true = (b: bool, n: int) : int => {\n  assert(b);\n  return n+1;\n};\n\nconst incr_if_some = (b: option<unit>, n: int) : int => {\n  assert_some(b);\n  return n+1;\n};\n"))),(0,i.kt)("p",null,"You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"assert_with_error")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"assert_some_with_error")," to use a\ncustom error message."),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=assert_with_error",group:"assert_with_error"},'let incr_if_true (b : bool) (n : int) : int =\n  let () = assert_with_error b "My custom error message."\n  in n+1\n'))),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=assert_with_error",group:"assert_with_error"},'const incr_if_true = (b: bool, n: int) : int => {\n  assert_with_error (b, "My custom error message.");\n  return n+1;\n};\n'))),(0,i.kt)("p",null,"Likewise, we can check for ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"Some")," by using\n",(0,i.kt)("inlineCode",{parentName:"p"},"assert_none")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"assert_none_with_error"),"."))}m.isMDXComponent=!0}}]);