"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[18436],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,h=u["".concat(l,".").concat(d)]||u[d]||g[d]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>r.Z,Z:()=>o});var a=n(67294),r=n(75402);const o=function(e){return a.createElement(r.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},99191:(e,t,n)=>{n.d(t,{Z:()=>p});var a=n(23746),r=n(67294),o=n(52263),i=n(48720),s=n(87552);function l(){return l=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l.apply(this,arguments)}const{Prism:c}=n(23746);c.languages={...c.languages,cameligo:{...c.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:c.languages.typescript};const p=function(e){const{siteConfig:{themeConfig:{prism:t={}}}}=(0,o.Z)(),n=t.singleTheme||s.Z,[c,p]=(0,r.useState)(!1);return(0,r.useEffect)((()=>{p(!0)}),[]),r.createElement(i.D.Consumer,null,(t=>{let{syntax:o}=t;return o===e.syntax?r.createElement(a.default,l({},a.defaultProps,{key:c,language:e.syntax,code:e.children,theme:n}),(e=>{let{className:t,tokens:n,getLineProps:a,getTokenProps:o}=e;return r.createElement("h4",{className:t,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((e,t)=>r.createElement("div",a({line:e,key:t}),e.map(((e,t)=>r.createElement("span",o({token:e,key:t}))))))))})):r.createElement("div",null)}))}},83417:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>g});var a=n(87462),r=(n(67294),n(3905)),o=n(48720),i=n(99191);const s={id:"views",title:"Views"},l=void 0,c={unversionedId:"syntax/contracts/views",id:"syntax/contracts/views",title:"Views",description:"Views are a way for contracts to expose information to other contracts and to off-chain consumers.",source:"@site/../docs/syntax/contracts/views.md",sourceDirName:"syntax/contracts",slug:"/syntax/contracts/views",permalink:"/previews/ligo/tacoshop/docs/next/syntax/contracts/views",draft:!1,tags:[],version:"current",frontMatter:{id:"views",title:"Views"},sidebar:"docs",previous:{title:"Events",permalink:"/previews/ligo/tacoshop/docs/next/syntax/contracts/events"},next:{title:"Dynamic entrypoints",permalink:"/previews/ligo/tacoshop/docs/next/syntax/contracts/dynamic-entrypoints"}},p={},g=[{value:"Defining on-chain views",id:"defining-on-chain-views",level:2},{value:"Defining off-chain views",id:"defining-off-chain-views",level:2},{value:"Calling views",id:"calling-views",level:2}],u={toc:g};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Views are a way for contracts to expose information to other contracts and to off-chain consumers.\nLike entrypoints, views are functions that receive a parameter and the current value of the contract storage.\nUnlike entrypoints, views return a value directly to the caller, and that value can be any type."),(0,r.kt)("p",null,"Clients can call views off-chain without paying fees or sending transactions to Tezos because clients can calculate the output of a view from the current state of the contract.\nHowever, when a contract calls a view on-chain as part of an operation, it increases the gas fee of the operation."),(0,r.kt)("p",null,"Contracts can store the source code of their views either on-chain or off-chain:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The code of on-chain views is stored in the smart contract code itself, like entrypoints."),(0,r.kt)("li",{parentName:"ul"},"The code of off-chain views is stored externally, usually in decentralized data storage such as IPFS.\nThe contract metadata has information about its off-chain views that consumers such as indexers and other dApps use to know what off-chain views are available and to run them.")),(0,r.kt)("p",null,"On-chain and off-chain views have the same capabilities and limitations."),(0,r.kt)("p",null,"For more information about views, see ",(0,r.kt)("a",{parentName:"p",href:"https://docs.tezos.com/smart-contracts/views"},"Views")," on docs.tezos.com."),(0,r.kt)("h2",{id:"defining-on-chain-views"},"Defining on-chain views"),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("p",null,"To define an on-chain view, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"@view")," attribute."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=onchainviews",group:"onchainviews"},'type storage = string\ntype ret = operation list * storage\n\n[@entry]\nlet main (word : string) (storage : storage) : ret\n  = [] , storage ^ " " ^ word\n\n(* This view returns the storage *)\n[@view] let view1 (() : unit) (storage : storage) : storage\n  = storage\n\n(* This view returns true if the storage has a given length *)\n[@view] let view2 (expected_length : nat) (storage : storage) : bool\n  = (String.length storage = expected_length)\n\n(* This view does not use the parameters or storage and returns a constant int *)\n[@view] let view3 (() : unit) (_ : storage) : int\n  = 42\n'))),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("p",null,"To define an on-chain view, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"@view")," decorator."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=onchainviews",group:"onchainviews"},'type storage = string\ntype ret = [list<operation>, storage];\n\n@entry\nconst main = (word : string, storage : storage) : ret\n  => [[] , storage + " " + word]\n\n// This view returns the storage\n@view\nconst view1 = (_arg : unit, storage : storage) : storage\n  => storage;\n\n// This view returns true if the storage has a given length\n@view\nconst view2 = (expected_length : nat , storage : storage) : bool\n  => (String.length (storage) == expected_length);\n\n// This view does not use the parameters or storage and returns a constant int\n@view\nconst view3 = (_arg : unit , _s : storage) : int\n  => 42;\n'))),(0,r.kt)("h2",{id:"defining-off-chain-views"},"Defining off-chain views"),(0,r.kt)("p",null,"To compile an off-chain view, create a function, compile it as an expression, and put the expression in the contract's metadata."),(0,r.kt)("p",null,"To compile an expression as a off-chain view, use the LIGO ",(0,r.kt)("inlineCode",{parentName:"p"},"compile expression")," command and pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"--function-body")," flag.\nTo use an expression from a file, pass it in the ",(0,r.kt)("inlineCode",{parentName:"p"},"--init-file")," argument."),(0,r.kt)("p",null,"For example, this file has a contract named ",(0,r.kt)("inlineCode",{parentName:"p"},"C")," with a function named ",(0,r.kt)("inlineCode",{parentName:"p"},"v"),":"),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=view_file",group:"view_file"},'module C = struct\n  type storage = string\n\n  [@entry] let append (a : string) (s : storage) : operation list * storage = [] , s ^ a\n\n  [@entry] let clear (_ : unit) (_ : storage) : operation list * storage = [] , ""\n\n  let v (expected_length: nat) (s: storage) : bool = (String.length s = expected_length)\nend\n'))),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=view_file",group:"view_file"},'namespace C {\n  type storage = string\n\n  @entry\n  const append = (a: string, s: storage) : [list<operation> , storage] => [[], s + a];\n\n  @entry\n  const clear = (_p: unit, _s: storage) : [list<operation>, storage] => [[], ""];\n\n  export const v = (expected_length: nat, s: storage) : bool => (String.length (s) == expected_length);\n}\n'))),(0,r.kt)("p",null,"To compile the function ",(0,r.kt)("inlineCode",{parentName:"p"},"v")," as an off-chain view, pass ",(0,r.kt)("inlineCode",{parentName:"p"},"C.v")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"compile expression")," command, as in this example:"),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'ligo compile expression cameligo "C.v" --init-file off_chain.mligo --function-body\n'))),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'ligo compile expression jsligo "C.v" --init-file off_chain.jsligo --function-body\n'))),(0,r.kt)("p",null,"The response is the function compiled to Michelson.\nIt is up to you to store this code and link to it from the contract metadata."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-michelson"},"{ UNPAIR ; SWAP ; SIZE ; COMPARE ; EQ }\n")),(0,r.kt)("p",null,"Note that the function is not annotated as an entrypoint or on-chain view; it is just a function declared in the context of the contract."),(0,r.kt)("h2",{id:"calling-views"},"Calling views"),(0,r.kt)("p",null,"Contracts can call on-chain and off-chain views with the ",(0,r.kt)("inlineCode",{parentName:"p"},"Tezos.call_view")," function and use the result immediately."),(0,r.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val call_view : string -> 'arg -> address -> 'ret option"),(0,r.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"const call_view : string => 'arg => address => option <'ret>"),(0,r.kt)("p",null,"The function accepts these parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The name of the view"),(0,r.kt)("li",{parentName:"ul"},"The parameter to pass to the view"),(0,r.kt)("li",{parentName:"ul"},"The address of the contract")),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("p",null,"For example, this contract has a view that multiplies the integer in storage with the integer that the caller passes and returns the result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=callonchainview",group:"callonchainview"},"module ContractWithView = struct\n  type storage = int\n  type return_type = operation list * storage\n\n  [@entry] let main (param : int) (_storage : storage) : return_type =\n    [], param\n\n  [@view] let multiply (param : int) (storage : storage) : int =\n    param * storage\n\nend\n")),(0,r.kt)("p",null,"This contract stores the address of the first contract and calls its view:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=callonchainview",group:"callonchainview"},'module CallView = struct\n  type storage = address * int\n  type return_type = operation list * storage\n\n  [@entry] let callView (param : int) (storage : storage) : return_type =\n    let (targetAddress, _s) = storage in\n    let resultOpt : int option = Tezos.call_view "multiply" param targetAddress in\n    match resultOpt with\n      Some newValue -> [], (targetAddress, newValue)\n    | None -> failwith("Something went wrong")\nend\n')),(0,r.kt)("p",null,"This test deploys both contracts, calls the contract that calls the view, and verifies the result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=callonchainview",group:"callonchainview"},'let test =\n\n  // Originate ContractWithView\n  let contract1 = Test.Next.Originate.contract (contract_of ContractWithView) 5 0tez in\n  let addr1 = Test.Next.Typed_address.to_address contract1.taddr in\n\n  // Originate CallView with address of ContractWithView in storage\n  let initial_storage = (addr1, 0) in\n  let contract2 = Test.Next.Originate.contract (contract_of CallView) initial_storage 0tez in\n\n  // Call callView\n  let _ : nat = Test.Next.Contract.transfer_exn (Test.Next.Typed_address.get_entrypoint "default" contract2.taddr) 12 0tez in\n  let (_address, integer) = Test.Next.Typed_address.get_storage contract2.taddr in\n  Assert.assert(integer = 60)\n'))),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("p",null,"For example, this contract has a view that multiplies the integer in storage with the integer that the caller passes and returns the result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=callonchainview",group:"callonchainview"},"namespace ContractWithView {\n  type storage = int;\n  type return_type = [list<operation>, storage];\n\n  @entry\n  const main = (param: int, _storage: storage): return_type =>\n    [[], param];\n\n  @view\n  const multiply = (param: int, storage: storage): int =>\n    param * storage;\n}\n")),(0,r.kt)("p",null,"This contract stores the address of the first contract and calls its view:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=callonchainview",group:"callonchainview"},'namespace CallView {\n  type storage = [address, int];\n  type return_type = [list<operation>, storage];\n\n  @entry\n  const callView = (param: int, storage: storage): return_type => {\n    const [targetAddress, _s] = storage;\n    const resultOpt: option<int> = Tezos.call_view(\n      "multiply",\n      param,\n      targetAddress\n    );\n    return match(resultOpt) {\n      when (None):\n        failwith("Something went wrong");\n      when (Some(newValue)):\n        [[], [targetAddress, newValue]];\n    }\n  }\n}\n')),(0,r.kt)("p",null,"This test deploys both contracts, calls the contract that calls the view, and verifies the result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=callonchainview",group:"callonchainview"},'const test = (() => {\n\n  // Originate ContractWithView\n  const contract1 = Test.Next.Originate.contract(contract_of(ContractWithView), 5, 0tez);\n  const addr1 = Test.Next.Typed_address.to_address(contract1.taddr);\n\n  // Originate CallView with address of ContractWithView in storage\n  const initial_storage = [addr1, 0 as int];\n  const contract2 = Test.Next.Originate.contract(contract_of(CallView), initial_storage, 0tez);\n\n  // Call callView\n  Test.Next.Contract.transfer_exn(Test.Next.Typed_address.get_entrypoint("default", contract2.taddr), 12, 0tez);\n  const [_address, integer] = Test.Next.Typed_address.get_storage(contract2.taddr);\n  Assert.assert(integer == 60);\n}) ()\n'))),(0,r.kt)("p",null,"To call views directly in tests, see ",(0,r.kt)("a",{parentName:"p",href:"../../testing#testing-views"},"Testing views"),"."))}d.isMDXComponent=!0},23746:(e,t,n)=>{n.r(t),n.d(t,{Prism:()=>a.Z,default:()=>h,defaultProps:()=>i});var a=n(87410);const r={plain:{backgroundColor:"#2a2734",color:"#9a86fd"},styles:[{types:["comment","prolog","doctype","cdata","punctuation"],style:{color:"#6c6783"}},{types:["namespace"],style:{opacity:.7}},{types:["tag","operator","number"],style:{color:"#e09142"}},{types:["property","function"],style:{color:"#9a86fd"}},{types:["tag-id","selector","atrule-id"],style:{color:"#eeebff"}},{types:["attr-name"],style:{color:"#c4b9fe"}},{types:["boolean","string","entity","url","attr-value","keyword","control","directive","unit","statement","regex","atrule","placeholder","variable"],style:{color:"#ffcc99"}},{types:["deleted"],style:{textDecorationLine:"line-through"}},{types:["inserted"],style:{textDecorationLine:"underline"}},{types:["italic"],style:{fontStyle:"italic"}},{types:["important","bold"],style:{fontWeight:"bold"}},{types:["important"],style:{color:"#c4b9fe"}}]};var o=n(67294),i={Prism:a.Z,theme:r};function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l.apply(this,arguments)}var c=/\r\n|\r|\n/,p=function(e){0===e.length?e.push({types:["plain"],content:"\n",empty:!0}):1===e.length&&""===e[0].content&&(e[0].content="\n",e[0].empty=!0)},g=function(e,t){var n=e.length;return n>0&&e[n-1]===t?e:e.concat(t)},u=function(e,t){var n=e.plain,a=Object.create(null),r=e.styles.reduce((function(e,n){var a=n.languages,r=n.style;return a&&!a.includes(t)||n.types.forEach((function(t){var n=l({},e[t],r);e[t]=n})),e}),a);return r.root=n,r.plain=l({},n,{backgroundColor:null}),r};function d(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===t.indexOf(a)&&(n[a]=e[a]);return n}const h=function(e){function t(){for(var t=this,n=[],a=arguments.length;a--;)n[a]=arguments[a];e.apply(this,n),s(this,"getThemeDict",(function(e){if(void 0!==t.themeDict&&e.theme===t.prevTheme&&e.language===t.prevLanguage)return t.themeDict;t.prevTheme=e.theme,t.prevLanguage=e.language;var n=e.theme?u(e.theme,e.language):void 0;return t.themeDict=n})),s(this,"getLineProps",(function(e){var n=e.key,a=e.className,r=e.style,o=l({},d(e,["key","className","style","line"]),{className:"token-line",style:void 0,key:void 0}),i=t.getThemeDict(t.props);return void 0!==i&&(o.style=i.plain),void 0!==r&&(o.style=void 0!==o.style?l({},o.style,r):r),void 0!==n&&(o.key=n),a&&(o.className+=" "+a),o})),s(this,"getStyleForToken",(function(e){var n=e.types,a=e.empty,r=n.length,o=t.getThemeDict(t.props);if(void 0!==o){if(1===r&&"plain"===n[0])return a?{display:"inline-block"}:void 0;if(1===r&&!a)return o[n[0]];var i=a?{display:"inline-block"}:{},s=n.map((function(e){return o[e]}));return Object.assign.apply(Object,[i].concat(s))}})),s(this,"getTokenProps",(function(e){var n=e.key,a=e.className,r=e.style,o=e.token,i=l({},d(e,["key","className","style","token"]),{className:"token "+o.types.join(" "),children:o.content,style:t.getStyleForToken(o),key:void 0});return void 0!==r&&(i.style=void 0!==i.style?l({},i.style,r):r),void 0!==n&&(i.key=n),a&&(i.className+=" "+a),i})),s(this,"tokenize",(function(e,t,n,a){var r={code:t,grammar:n,language:a,tokens:[]};e.hooks.run("before-tokenize",r);var o=r.tokens=e.tokenize(r.code,r.grammar,r.language);return e.hooks.run("after-tokenize",r),o}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.render=function(){var e=this.props,t=e.Prism,n=e.language,a=e.code,r=e.children,o=this.getThemeDict(this.props),i=t.languages[n];return r({tokens:function(e){for(var t=[[]],n=[e],a=[0],r=[e.length],o=0,i=0,s=[],l=[s];i>-1;){for(;(o=a[i]++)<r[i];){var u=void 0,d=t[i],h=n[i][o];if("string"==typeof h?(d=i>0?d:["plain"],u=h):(d=g(d,h.type),h.alias&&(d=g(d,h.alias)),u=h.content),"string"==typeof u){var m=u.split(c),y=m.length;s.push({types:d,content:m[0]});for(var f=1;f<y;f++)p(s),l.push(s=[]),s.push({types:d,content:m[f]})}else i++,t.push(d),n.push(u),a.push(0),r.push(u.length)}i--,t.pop(),n.pop(),a.pop(),r.pop()}return p(s),l}(void 0!==i?this.tokenize(t,a,i,n):[a]),className:"prism-code language-"+n,style:void 0!==o?o.root:{},getLineProps:this.getLineProps,getTokenProps:this.getTokenProps})},t}(o.Component)},87552:(e,t,n)=>{n.d(t,{Z:()=>a});const a={plain:{color:"#bfc7d5",backgroundColor:"#292d3e"},styles:[{types:["comment"],style:{color:"rgb(105, 112, 152)",fontStyle:"italic"}},{types:["string","inserted"],style:{color:"rgb(195, 232, 141)"}},{types:["number"],style:{color:"rgb(247, 140, 108)"}},{types:["builtin","char","constant","function"],style:{color:"rgb(130, 170, 255)"}},{types:["punctuation","selector"],style:{color:"rgb(199, 146, 234)"}},{types:["variable"],style:{color:"rgb(191, 199, 213)"}},{types:["class-name","attr-name"],style:{color:"rgb(255, 203, 107)"}},{types:["tag","deleted"],style:{color:"rgb(255, 85, 114)"}},{types:["operator"],style:{color:"rgb(137, 221, 255)"}},{types:["boolean"],style:{color:"rgb(255, 88, 116)"}},{types:["keyword"],style:{fontStyle:"italic"}},{types:["doctype"],style:{color:"rgb(199, 146, 234)",fontStyle:"italic"}},{types:["namespace"],style:{color:"rgb(178, 204, 214)"}},{types:["url"],style:{color:"rgb(221, 221, 221)"}}]}}}]);