"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[78251],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=l(t),g=a,m=d["".concat(c,".").concat(g)]||d[g]||p[g]||i;return t?r.createElement(m,s(s({ref:n},u),{},{components:t})):r.createElement(m,s({ref:n},u))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=d;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},48720:(e,n,t)=>{t.d(n,{D:()=>a.Z,Z:()=>i});var r=t(67294),a=t(75402);const i=function(e){return r.createElement(a.Z.Consumer,null,(n=>{let{syntax:t}=n;return t===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},93680:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>u});var r=t(87462),a=(t(67294),t(3905)),i=t(48720);const s={id:"accessing",title:"Accessing"},o=void 0,c={unversionedId:"records/accessing",id:"version-1.6.0/records/accessing",title:"Accessing",description:"If we want the contents of a given field, we use the selection operator",source:"@site/versioned_docs/version-1.6.0/records/accessing.md",sourceDirName:"records",slug:"/records/accessing",permalink:"/previews/ligo/tacoshop/docs/1.6.0/records/accessing",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"accessing",title:"Accessing"},sidebar:"docs",previous:{title:"Declaring",permalink:"/previews/ligo/tacoshop/docs/1.6.0/records/declaring"},next:{title:"Assigning",permalink:"/previews/ligo/tacoshop/docs/1.6.0/records/assigning"}},l={},u=[],p={toc:u};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,'If we want the contents of a given field, we use the selection operator\n"',(0,a.kt)("inlineCode",{parentName:"p"},"."),'", like so:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=record_access",group:"record_access"},'type user = {\n  login : string;\n  name  : string\n}\n\ntype account = {\n  user     : user;\n  id       : int;\n  is_admin : bool\n}\n\nlet user : user = {login = "al"; name = "Alice"}\nlet alice : account = {user; id=5; is_admin = true}\nlet is_alice_admin : bool = alice.is_admin // = true\n'))),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,'If we want to access a field, we use the selection operator "',(0,a.kt)("inlineCode",{parentName:"p"},"."),'"\nfollowed by the field name, like so:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=record_access",group:"record_access"},'type user = {\n  login : string,\n  name  : string\n};\n\ntype account = {\n  user     : user,\n  id       : int,\n  is_admin : bool\n};\n\nconst user : user = {login: "al", name: "Alice"};\nconst alice : account = {user, id: 5, is_admin: true};\nconst is_alice_admin = alice.is_admin; // == true\n')),(0,a.kt)("p",null,"Instead of the field name, we can provide between square brackets a\nstring that contains the field name, or an integer that is the index\nof the field in the record declaration:")),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"We can also access fields of a record using a destructuring syntax,\nknown as ",(0,a.kt)("em",{parentName:"p"},"pattern matching"),", which enables accessing multiple fields of\na record in parallel, like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=record_access",group:"record_access"},"let user_to_triple (a : account) =\n  let {user; id; is_admin} = a\n  in user, id, is_admin\n"))),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"We can also access fields of a record using the destructuring\nsyntax, known as ",(0,a.kt)("em",{parentName:"p"},"pattern matching"),", which allows accessing multiple\nfields of a record in parallel, like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=record_access",group:"record_access"},"function userToTuple (a : account) {\n  const {user, id, is_admin} = a;\n  return [user, id, is_admin];\n}\n"))),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"If we do not use some of the fields we matched, we assign them the\nspecial variable ",(0,a.kt)("inlineCode",{parentName:"p"},"_"),", to avoid triggering a warning about an unused\nvariable, like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=record_access",group:"record_access"},"let get_id (a : account) =\n  let {user=_; id; is_admin=_} = a // To avoid a warning\n  in id\n"))),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"We can ignore some fields by calling the predefined function\n",(0,a.kt)("inlineCode",{parentName:"p"},"ignore")," on them, like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=record_access",group:"record_access"},"function getId (a : account) {\n  let {user, id, is_admin} = a;\n  ignore([user, is_admin]); // To avoid a warning\n  return id;\n}\n"))))}d.isMDXComponent=!0}}]);