"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[81121],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),g=s(n),u=o,d=g["".concat(p,".").concat(u)]||g[u]||m[u]||r;return n?a.createElement(d,i(i({ref:t},c),{},{components:n})):a.createElement(d,i({ref:t},c))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=g;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>o.Z,Z:()=>r});var a=n(67294),o=n(75402);const r=function(e){return a.createElement(o.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},88839:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var a=n(87462),o=(n(67294),n(3905)),r=n(48720);const i={id:"compiling",title:"Compiling contracts"},l=void 0,p={unversionedId:"compiling/compiling",id:"compiling/compiling",title:"Compiling contracts",description:"You must compile LIGO contracts to Michelson before deploying them.",source:"@site/../docs/compiling/compiling.md",sourceDirName:"compiling",slug:"/compiling/",permalink:"/previews/ligo/tacoshop/docs/next/compiling/",draft:!1,tags:[],version:"current",frontMatter:{id:"compiling",title:"Compiling contracts"},sidebar:"docs",previous:{title:"Preprocessor",permalink:"/previews/ligo/tacoshop/docs/next/compiling/preprocessor"},next:{title:"Deploying contracts",permalink:"/previews/ligo/tacoshop/docs/next/compiling/deploying"}},s={},c=[{value:"Compiling contracts",id:"compiling-contracts",level:2},{value:"Compiling storage",id:"compiling-storage",level:2},{value:"Compiling parameters",id:"compiling-parameters",level:2}],m={toc:c};function g(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You must compile LIGO contracts to Michelson before deploying them.\nLIGO can also help you compile the initial storage value for a contract and parameters for calls to contracts."),(0,o.kt)("h2",{id:"compiling-contracts"},"Compiling contracts"),(0,o.kt)("p",null,"To compile a LIGO contract, make sure that LIGO is installed as described in ",(0,o.kt)("a",{parentName:"p",href:"../intro/installation"},"Installation"),".\nThen, pass the source file to the ",(0,o.kt)("inlineCode",{parentName:"p"},"ligo compile contract")," command."),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("p",null,"For example, this command compiles a contract that is at the root level of a source file named ",(0,o.kt)("inlineCode",{parentName:"p"},"my_contract.mligo")," and writes it to the file ",(0,o.kt)("inlineCode",{parentName:"p"},"my_contract.tz"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ligo compile contract my_contract.mligo -o my_contract.tz\n"))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("p",null,"For example, this command compiles a contract that is at the root level of a source file named ",(0,o.kt)("inlineCode",{parentName:"p"},"my_contract.jsligo")," and writes it to the file ",(0,o.kt)("inlineCode",{parentName:"p"},"my_contract.tz"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ligo compile contract my_contract.jsligo -o my_contract.tz\n"))),(0,o.kt)("p",null,"If the contract is in a module, pass the name of the module to the ",(0,o.kt)("inlineCode",{parentName:"p"},"-m")," argument, as in this example:"),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ligo compile contract my_contract.mligo -m MyModule -o my_contract.tz\n"))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ligo compile contract my_contract.jsligo -m MyModule  -o my_contract.tz\n"))),(0,o.kt)("p",null,"Now you can deploy (originate) the contract; see ",(0,o.kt)("a",{parentName:"p",href:"./deploying"},"Deploying contracts"),"."),(0,o.kt)("p",null,"For more information about the ",(0,o.kt)("inlineCode",{parentName:"p"},"ligo compile contract")," command, see ",(0,o.kt)("a",{parentName:"p",href:"../manpages/compile%20contract"},(0,o.kt)("inlineCode",{parentName:"a"},"compile contract")),"."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ligo compile contract")," command does not automatically run tests in the source file.\nTo run tests, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"ligo run test")," command as described in ",(0,o.kt)("a",{parentName:"p",href:"../testing"},"Testing"),".")),(0,o.kt)("h2",{id:"compiling-storage"},"Compiling storage"),(0,o.kt)("p",null,"When you originate a contract, you set the initial value of the contract storage as a Michelson value.\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"ligo compile storage")," command compiles LIGO expressions to Michelson expressions that you can use for the initial value of the storage."),(0,o.kt)("p",null,"For example, this contract has a complex storage type that includes two records and an address:"),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=compile_storage",group:"compile_storage"},"module ComplexStorage = struct\n  type my_record = {\n    x: int;\n    y: int;\n    z: int;\n  }\n  type my_labels = {\n    a: string;\n    b: string;\n    c: string;\n  }\n  type storage = (my_record * my_labels * address)\n  type return_type = operation list * storage\n\n  [@entry]\n  let noop (_u : unit) (storage : storage) : return_type = [], storage\n\nend\n")),(0,o.kt)("p",null,"To compile an initial storage value for this contract, create a CameLIGO expression of the storage type and pass it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"ligo compile storage")," command, as in this example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'ligo compile storage -m ComplexStorage complexStorage.mligo \\\n  \'{x = 1; y = 2; z = 3}, {a = "A"; b = "B"; c = "C"}, ("tz1QCVQinE8iVj1H2fckqx6oiM85CNJSK9Sx" : address)\'\n'))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=compile_storage",group:"compile_storage"},"namespace ComplexStorage {\n  type my_record = {\n    x: int,\n    y: int,\n    z: int,\n  };\n  type my_labels = {\n    a: string,\n    b: string,\n    c: string,\n  };\n  type storage = [my_record, my_labels, address];\n  type return_type = [list<operation>, storage];\n\n  @entry\n  const noop = (_u: unit, storage: storage): return_type => [[], storage];\n\n}\n")),(0,o.kt)("p",null,"To compile an initial storage value for this contract, create a JsLIGO expression of the storage type and pass it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"ligo compile storage")," command, as in this example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'ligo compile storage -m ComplexStorage complexStorage.jsligo \\\n  \'[{x: 1, y: 2, z: 3}, {a: "A", b: "B", c: "C"}, "tz1QCVQinE8iVj1H2fckqx6oiM85CNJSK9Sx" as address]\'\n'))),(0,o.kt)("p",null,"The result is a Michelson expression that you can use as the initial storage value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-michelson"},'(Pair (Pair 1 2 3) (Pair "A" "B" "C") "tz1QCVQinE8iVj1H2fckqx6oiM85CNJSK9Sx")\n')),(0,o.kt)("p",null,"If you deploy a contract with the ",(0,o.kt)("inlineCode",{parentName:"p"},"octez-client originate contract")," command, you can pass this expression as the value of the ",(0,o.kt)("inlineCode",{parentName:"p"},"--init")," argument, as in this example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'octez-client originate contract ComplexStorage \\\n  transferring 0 from my_wallet running ComplexStorage.tz \\\n  --init \'(Pair (Pair 1 2 3) (Pair "A" "B" "C") "tz1QCVQinE8iVj1H2fckqx6oiM85CNJSK9Sx")\' --burn-cap 2\n')),(0,o.kt)("p",null,"For more information about the ",(0,o.kt)("inlineCode",{parentName:"p"},"ligo compile storage")," command, see ",(0,o.kt)("a",{parentName:"p",href:"../manpages/compile%20storage"},(0,o.kt)("inlineCode",{parentName:"a"},"compile storage")),"."),(0,o.kt)("h2",{id:"compiling-parameters"},"Compiling parameters"),(0,o.kt)("p",null,"If you have the source code of a LIGO contract, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"ligo compile parameter")," command to compile the parameter that another contract or client can use to call it."),(0,o.kt)("p",null,"For example, this contract has an entrypoint that accepts a complex parameter:"),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=compile_param",group:"compile_param"},"module ComplexParam = struct\n  type storage = int\n  type return_type = operation list * storage\n  type paramType = (int list * int list * (string * string))\n\n  let sum_fold = fun (result, i: int * int) -> result + i\n  let mult_fold = fun (result, i: int * int) -> result * i\n\n  [@entry]\n  let complexmath (param : paramType) (_s : storage) : return_type =\n    let list1, list2, str_tuple = param in\n    let sum : int = List.fold sum_fold list1 0 in\n    let product : int = List.fold mult_fold list2 1 in\n    let str1, str2 = str_tuple in\n    let string_diff : int = String.length(str2) - String.length(str1) in\n    let newVal = (sum + product) * string_diff in\n    [], newVal\n\nend\n")),(0,o.kt)("p",null,"To compile a parameter to call this contract, create a CameLIGO expression for the parameter and pass it and the entrypoint name to the ",(0,o.kt)("inlineCode",{parentName:"p"},"ligo compile parameter")," command, as in this example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'ligo compile parameter -m ComplexParam ComplexParam.mligo \'Complexmath([1; 2; 3], [2; 2; 1], ("three", "fifteen"))\'\n'))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=compile_param",group:"compile_param"},"namespace ComplexParam {\n  type storage = int;\n  type returnType = [list<operation>, storage];\n  type paramType = [list<int>, list<int>, [string, string]];\n\n  const sum_fold = ([result, i]: [int, int]): int => result + i;\n  const mult_fold = ([result, i]: [int, int]): int => result * i;\n\n  @entry\n  const complexmath = (param: paramType, _s: storage): returnType => {\n    const [list1, list2, str_tuple] = param;\n    const sum: int = List.fold(sum_fold, list1, 0);\n    const product: int = List.fold(mult_fold, list2, 1);\n    const [str1, str2] = str_tuple;\n    const string_diff: int = String.length(str2) - String.length(str1);\n    const newVal = (sum + product) * string_diff;\n    return [list([]), newVal];\n  }\n\n}\n")),(0,o.kt)("p",null,"To compile a parameter to call this contract, create a JsLIGO expression for the parameter and pass it and the entrypoint name to the ",(0,o.kt)("inlineCode",{parentName:"p"},"ligo compile parameter")," command, as in this example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'ligo compile parameter ComplexParam.jsligo -m ComplexParam \'Complexmath([[1, 2, 3], [2, 2, 1], ["three", "fifteen"]])\'\n'))),(0,o.kt)("p",null,"The result is a Michelson expression that represents passing the value to the entrypoint:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-michelson"},'(Pair { 1 ; 2 ; 3 } { 2 ; 2 ; 1 } "three" "fifteen")\n')),(0,o.kt)("p",null,"You can use this expression as the parameter to call the contract, as in this example:"),(0,o.kt)("p",null,"If you deploy a contract with the ",(0,o.kt)("inlineCode",{parentName:"p"},"octez-client originate contract")," command, you can pass this expression as the value of the ",(0,o.kt)("inlineCode",{parentName:"p"},"--init")," argument, as in this example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'octez-client transfer 0 from my_wallet to ComplexParam \\\n  --arg \'(Pair { 1 ; 2 ; 3 } { 2 ; 2 ; 1 } "three" "fifteen")\' \\\n  --burn-cap 1\n')),(0,o.kt)("p",null,"For more information about the ",(0,o.kt)("inlineCode",{parentName:"p"},"ligo compile parameter")," command, see ",(0,o.kt)("a",{parentName:"p",href:"../manpages/compile%20parameter"},(0,o.kt)("inlineCode",{parentName:"a"},"compile parameter")),"."))}g.isMDXComponent=!0}}]);