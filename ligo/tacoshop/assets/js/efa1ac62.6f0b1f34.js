"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[56006],{3905:(t,e,n)=>{n.d(e,{Zo:()=>l,kt:()=>u});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function c(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=a.createContext({}),p=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):c(c({},e),t)),n},l=function(t){var e=p(t.components);return a.createElement(s.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,s=t.parentName,l=i(t,["components","mdxType","originalType","parentName"]),d=p(n),u=r,y=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(y,c(c({ref:e},l),{},{components:n})):a.createElement(y,c({ref:e},l))}));function u(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,c=new Array(o);c[0]=d;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i.mdxType="string"==typeof t?t:r,c[1]=i;for(var p=2;p<o;p++)c[p]=n[p];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},48720:(t,e,n)=>{n.d(e,{D:()=>r.Z,Z:()=>o});var a=n(67294),r=n(75402);const o=function(t){return a.createElement(r.Z.Consumer,null,(e=>{let{syntax:n}=e;return n===t.syntax?t.children:a.createElement(a.Fragment,null)}))}},22497:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>c,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905)),o=n(48720);const c={id:"contracts-type",title:"Contracts"},i=void 0,s={unversionedId:"data-types/contracts-type",id:"data-types/contracts-type",title:"Contracts",description:"The contract type represents a smart contract.",source:"@site/../docs/data-types/contracts.md",sourceDirName:"data-types",slug:"/data-types/contracts-type",permalink:"/previews/ligo/tacoshop/docs/next/data-types/contracts-type",draft:!1,tags:[],version:"current",frontMatter:{id:"contracts-type",title:"Contracts"},sidebar:"docs",previous:{title:"Address",permalink:"/previews/ligo/tacoshop/docs/next/data-types/address"},next:{title:"Big sets",permalink:"/previews/ligo/tacoshop/docs/next/data-types/big_sets"}},p={},l=[{value:"Creating contract types in contracts",id:"creating-contract-types-in-contracts",level:2},{value:"Creating contract types in tests",id:"creating-contract-types-in-tests",level:2},{value:"Implicit types and functions",id:"implicit-types-and-functions",level:2}],m={toc:l};function d(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"contract")," type represents a smart contract.\nThere is no way to create a literal value of this type; you must create a ",(0,r.kt)("inlineCode",{parentName:"p"},"contract")," type by passing the address of the account to a predefined function.\nBeware of failures if the address is invalid."),(0,r.kt)("p",null,"For information about the components of a contract and how to use them, see ",(0,r.kt)("a",{parentName:"p",href:"../syntax/contracts"},"Contracts"),"."),(0,r.kt)("h2",{id:"creating-contract-types-in-contracts"},"Creating contract types in contracts"),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("p",null,"The call ",(0,r.kt)("inlineCode",{parentName:"p"},"Tezos.implicit_account kh")," casts the public key hash ",(0,r.kt)("inlineCode",{parentName:"p"},"kh")," of an implicit (user) account to a ",(0,r.kt)("inlineCode",{parentName:"p"},"contract")," type that represents that user account.\nContract types that represent implicit accounts always have the type ",(0,r.kt)("inlineCode",{parentName:"p"},"unit contract")," because they accept no parameter."),(0,r.kt)("p",null,"The call ",(0,r.kt)("inlineCode",{parentName:"p"},"Tezos.get_contract address")," casts the address of a smart contract (originated account) to a ",(0,r.kt)("inlineCode",{parentName:"p"},"contract")," type that represents that contract.\nThe type is parameterized based on the parameter that the contract accepts.\nFor example, if the contract accepts an integer, the type is ",(0,r.kt)("inlineCode",{parentName:"p"},"int contract"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=get_contract",group:"get_contract"},'type returnType = operation list * int\n\ntype contractParam =\nReset\n| Decrement of int\n| Increment of int\n\n[@entry]\nlet callContract (_ : unit) (storage : int) : returnType =\n  let contractAddress : address = ("KT1FpuaoBHwXMXJ6zn3F4ZhpjpPZV28MAinz" : address) in\n  let myContract: contractParam contract = Tezos.get_contract contractAddress in\n  let operation = Tezos.transaction (Increment 4) 0tez myContract in\n  [operation], storage\n'))),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("p",null,"The call ",(0,r.kt)("inlineCode",{parentName:"p"},"Tezos.implicit_account(kh)")," casts the public key hash ",(0,r.kt)("inlineCode",{parentName:"p"},"kh")," of an implicit account to a ",(0,r.kt)("inlineCode",{parentName:"p"},"contract")," type that represents that user account.\nContract types that represent implicit accounts always have the type ",(0,r.kt)("inlineCode",{parentName:"p"},"contract<unit>")," because they accept no parameter."),(0,r.kt)("p",null,"The call ",(0,r.kt)("inlineCode",{parentName:"p"},"Tezos.get_contract(address)")," casts the address of a smart contract (originated account) to a ",(0,r.kt)("inlineCode",{parentName:"p"},"contract")," type that represents that contract.\nThe type is parameterized based on the parameter that the contract accepts.\nFor example, if the contract accepts an integer, the type is ",(0,r.kt)("inlineCode",{parentName:"p"},"contract<int>"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=get_contract",group:"get_contract"},'type returnType = [list<operation>, int];\n\ntype contractParam =\n  | ["Reset", unit]\n  | ["Decrement", int]\n  | ["Increment", int];\n\n@entry\nconst callContract = (_: unit, storage: int): returnType => {\n  const contractAddress: address = ("KT1FpuaoBHwXMXJ6zn3F4ZhpjpPZV28MAinz" as address);\n  const myContract: contract<contractParam> = Tezos.get_contract(contractAddress);\n  const contractArg: contractParam = Increment(4);\n  const operation = Tezos.transaction(contractArg, 0tez, myContract);\n  return [list([operation]), storage + 1]\n}\n'))),(0,r.kt)("h2",{id:"creating-contract-types-in-tests"},"Creating contract types in tests"),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("p",null,"To create a contract type in a test, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"contract_of")," function, which accepts a module and returns a contract type.\nSee ",(0,r.kt)("a",{parentName:"p",href:"../testing"},"Testing"),".")),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("p",null,"To create a contract type in a test, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"contract_of")," function, which accepts a namespace and returns a contract type.\nSee ",(0,r.kt)("a",{parentName:"p",href:"../testing"},"Testing"),".")),(0,r.kt)("h2",{id:"implicit-types-and-functions"},"Implicit types and functions"),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("p",null,"When declaring the entry points of a contract using ",(0,r.kt)("inlineCode",{parentName:"p"},"@entry"),", LIGO generates two hidden values in the module:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"An implicit ",(0,r.kt)("inlineCode",{parentName:"li"},"main")," function, which can be obtained using the keyword ",(0,r.kt)("inlineCode",{parentName:"li"},"contract_of(C)")," where ",(0,r.kt)("inlineCode",{parentName:"li"},"C")," is the namespace or module containing the entry points"),(0,r.kt)("li",{parentName:"ul"},"The input type for that ",(0,r.kt)("inlineCode",{parentName:"li"},"main")," function, which can be obtained using the keyword ",(0,r.kt)("inlineCode",{parentName:"li"},"parameter_of C"))),(0,r.kt)("p",null,"In the example below, ",(0,r.kt)("inlineCode",{parentName:"p"},"contract_of(C)")," returns the implicitly-declared ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," function that calls the ",(0,r.kt)("inlineCode",{parentName:"p"},"increment")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"decrement")," entry points depending on the argument given, and ",(0,r.kt)("inlineCode",{parentName:"p"},"parameter_of C")," is the ",(0,r.kt)("a",{parentName:"p",href:"./variants"},"variant")," ",(0,r.kt)("inlineCode",{parentName:"p"},'["Increment", int] | ["Decrement", int]'),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=contract_of",group:"contract_of"},'type storage = int\ntype return = operation list * storage\n\nmodule C = struct\n  [@entry]\n  let decrement (param : int) (storage : storage) : return =\n    [], storage   - param\n\n  [@entry]\n  let increment (param : int) (storage : storage) : return =\n    [], storage + param\n\n  [@entry]\n  let reset () (_ : storage) : return = [], 0\nend\n\nmodule Test = Test.Next\n\nlet test_initial_storage () : unit =\n  let init_storage = 42 in\n  let fee = 0mutez in\n  let contract = Test.Originate.contract (contract_of C) init_storage fee in\n\n  (* Call contract through entrypoints *)\n  let _ = Test.Contract.transfer_exn (Test.Typed_address.get_entrypoint "increment" contract.taddr) 15 0tez in\n  let _ = Test.Contract.transfer_exn (Test.Typed_address.get_entrypoint "decrement" contract.taddr) 14 0tez in\n\n  (* Call contract through `main` function *)\n  let increment_param : C parameter_of = Increment 8 in\n  let decrement_param : C parameter_of = Decrement 3 in\n  let _ = Test.transfer_exn contract.taddr increment_param 0mutez in\n  let _ = Test.transfer_exn contract.taddr decrement_param 0mutez in\n\n  let new_storage = Test.Typed_address.get_storage contract.taddr\n  in Assert.assert (new_storage = init_storage + 15 - 14 + 8 - 3)\n'))),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("p",null,"When declaring the entry points of a contract using ",(0,r.kt)("inlineCode",{parentName:"p"},"@entry"),", LIGO generates two hidden values in the module:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"An implicit ",(0,r.kt)("inlineCode",{parentName:"li"},"main")," function, which can be obtained using the keyword ",(0,r.kt)("inlineCode",{parentName:"li"},"contract_of(C)")," where ",(0,r.kt)("inlineCode",{parentName:"li"},"C")," is the namespace or module containing the entry points"),(0,r.kt)("li",{parentName:"ul"},"The input type for that ",(0,r.kt)("inlineCode",{parentName:"li"},"main")," function, which can be obtained using the keyword ",(0,r.kt)("inlineCode",{parentName:"li"},"parameter_of(C)"))),(0,r.kt)("p",null,"In the example below, ",(0,r.kt)("inlineCode",{parentName:"p"},"contract_of(C)")," returns the implicitly-declared ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," function that calls the ",(0,r.kt)("inlineCode",{parentName:"p"},"increment")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"decrement")," entry points depending on the argument given, and ",(0,r.kt)("inlineCode",{parentName:"p"},"parameter_of(C)")," is the ",(0,r.kt)("a",{parentName:"p",href:"./variants"},"variant")," ",(0,r.kt)("inlineCode",{parentName:"p"},'["Increment", int] | ["Decrement", int]'),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=contract_of",group:"contract_of"},'type storage = int;\ntype @return = [list<operation>, storage];\n\nnamespace C {\n  @entry\n  const decrement = (param: int, storage: storage) : @return =>\n    [[], storage - param];\n\n  @entry\n  const increment = (param: int, storage: storage) : @return =>\n    [[], storage + param];\n\n  @entry\n  const reset = (_unit: unit, _storage: storage) : @return =>\n    [[], 0];\n}\n\nimport Test = Test.Next;\n\nconst test_initial_storage = () : unit => {\n  const init_storage = 42;\n  const fee = 0mutez;\n  const contract = Test.Originate.contract(contract_of(C), init_storage, fee);\n\n  // Call contract through entrypoints\n  Test.Contract.transfer_exn(Test.Typed_address.get_entrypoint("increment", contract.taddr), 15, 0tez);\n  Test.Contract.transfer_exn(Test.Typed_address.get_entrypoint("decrement", contract.taddr), 14, 0tez);\n\n  // Call contract through `main` function\n  const increment_param: parameter_of C = Increment(8);\n  const decrement_param: parameter_of C = Decrement(3);\n  Test.transfer_exn(contract.taddr, increment_param, 0mutez);\n  Test.transfer_exn(contract.taddr, decrement_param, 0mutez);\n\n  const new_storage = Test.Typed_address.get_storage(contract.taddr);\n  Assert.assert(new_storage == init_storage + 15 - 14 + 8 - 3);\n}\n'))))}d.isMDXComponent=!0}}]);