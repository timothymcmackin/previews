"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2406],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(n),d=a,y=m["".concat(c,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(y,o(o({ref:t},p),{},{components:n})):r.createElement(y,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>i});var r=n(67294),a=n(75402);const i=function(e){return r.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},37866:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var r=n(87462),a=(n(67294),n(3905)),i=n(48720);const o={id:"switches",title:"The switch statement"},s=void 0,c={unversionedId:"imperative/switches",id:"version-1.9.2/imperative/switches",title:"The switch statement",description:'This feature is not available in CameLIGO."',source:"@site/versioned_docs/version-1.9.2/imperative/switches.md",sourceDirName:"imperative",slug:"/imperative/switches",permalink:"/previews/ligo/tacoshop/docs/imperative/switches",draft:!1,tags:[],version:"1.9.2",frontMatter:{id:"switches",title:"The switch statement"},sidebar:"docs",previous:{title:"Asserting",permalink:"/previews/ligo/tacoshop/docs/imperative/asserting"},next:{title:"Exceptions",permalink:"/previews/ligo/tacoshop/docs/imperative/exceptions"}},l={},p=[],u={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},'This feature is not available in CameLIGO."'),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"TypeScript developers are familiar with the ",(0,a.kt)("inlineCode",{parentName:"p"},"switch")," statement. By\ncontrast, ",(0,a.kt)("a",{parentName:"p",href:"../data-types/variants#matching"},"pattern matching")," is a conditional\nexpression that destructures a value of almost any type to control the\nflow of execution. Switches only work on simple types, like ",(0,a.kt)("inlineCode",{parentName:"p"},"int"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"nat"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"bool"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," etc., which makes them akin to ",(0,a.kt)("em",{parentName:"p"},"enumerated\ntypes"),". They are most useful when they avoid writing nested\nconditional statements."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=switch",group:"switch"},'function hello (day: nat) : string {\n  let greeting = "Hello";\n  switch (day) {\n    case 1n: greeting += " Monday!"; break;\n    case 2n: greeting += " Tuesday!"; break;\n    case 3n: greeting += " Wednesday!"; break;\n    case 4n: greeting += " Thursday!"; break;\n    case 5n: greeting += " Friday!"; break;\n    case 6n: greeting += " Saturday!"; break;\n    case 7n: greeting += " Sunday!"; break;\n    default: greeting += "!"; break;\n  };\n  return greeting;\n}\n')),(0,a.kt)("p",null,"Each case is introduced by the keyword ",(0,a.kt)("inlineCode",{parentName:"p"},"case"),", except the ",(0,a.kt)("inlineCode",{parentName:"p"},"default"),"\ncase, which must be last and applies when all the previous cases have\nfailed to match.")))}m.isMDXComponent=!0}}]);