"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[44722],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},p=Object.keys(e);for(a=0;a<p.length;a++)n=p[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(a=0;a<p.length;a++)n=p[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,p=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=m(n),f=r,g=u["".concat(l,".").concat(f)]||u[f]||c[f]||p;return n?a.createElement(g,o(o({ref:t},s),{},{components:n})):a.createElement(g,o({ref:t},s))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var p=n.length,o=new Array(p);o[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var m=2;m<p;m++)o[m]=n[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>r.Z,Z:()=>p});var a=n(67294),r=n(75402);const p=function(e){return a.createElement(r.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},96464:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(87462),r=(n(67294),n(3905)),p=n(48720);const o={id:"mapping",title:"Mapping"},i=void 0,l={unversionedId:"maps/mapping",id:"version-1.5.0/maps/mapping",title:"Mapping",description:"We may want to change all the values of a given map by applying to",source:"@site/versioned_docs/version-1.5.0/maps/mapping.md",sourceDirName:"maps",slug:"/maps/mapping",permalink:"/previews/ligo/tacoshop/docs/1.5.0/maps/mapping",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"mapping",title:"Mapping"},sidebar:"docs",previous:{title:"Folding",permalink:"/previews/ligo/tacoshop/docs/1.5.0/maps/folding"},next:{title:"Iterating",permalink:"/previews/ligo/tacoshop/docs/1.5.0/maps/iterating"}},m={},s=[],c={toc:s};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"We may want to change all the values of a given map by applying to\nthem a function. This is called a ",(0,r.kt)("em",{parentName:"p"},"map operation"),", not to be confused\nwith the map data structure. The predefined functional iterator\nimplementing the mapped operation over maps is called ",(0,r.kt)("inlineCode",{parentName:"p"},"Map.map"),". It\ntakes a binding, that is, a key and its associated value in the map,\nand computes a new value for that key."),(0,r.kt)("p",null,"In the following example, from a map from integers to integers is made\na map whose values are the sum of the keys and values of each binding."),(0,r.kt)(p.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=map_mapping",group:"map_mapping"},"let my_map : (int, int) map = Map.literal [(0,0); (1,1); (2,2)]\n// plus_one = Map.literal [(0,0); (1,2); (2,4)]\nlet plus_one = Map.map (fun (k,v) -> k + v) my_map\n")),(0,r.kt)("p",null,"Note: See the predefined\n",(0,r.kt)("a",{parentName:"p",href:"../reference/map-reference"},"module Map"))),(0,r.kt)(p.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=map_mapping",group:"map_mapping"},"const my_map: map<int,int> = Map.literal(list([[0,0], [1,1], [2,2]]));\n// plus_one == Map.literal(list([[0,0],[1,2],[2,4]]))\nconst plus_one = Map.map(([k,v]) => k + v, my_map);\n")),(0,r.kt)("p",null,"Note: See the predefined\n",(0,r.kt)("a",{parentName:"p",href:"../reference/map-reference"},"namespace Map"))))}u.isMDXComponent=!0}}]);