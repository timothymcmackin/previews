"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[76358],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),h=c(n),y=o,d=h["".concat(l,".").concat(y)]||h[y]||u[y]||a;return n?r.createElement(d,s(s({ref:t},p),{},{components:n})):r.createElement(d,s({ref:t},p))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>o.Z,Z:()=>a});var r=n(67294),o=n(75402);const a=function(e){return r.createElement(o.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},99191:(e,t,n)=>{n.d(t,{Z:()=>p});var r=n(23746),o=n(67294),a=n(52263),s=n(48720),i=n(87552);function l(){return l=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l.apply(this,arguments)}const{Prism:c}=n(23746);c.languages={...c.languages,cameligo:{...c.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:c.languages.typescript};const p=function(e){const{siteConfig:{themeConfig:{prism:t={}}}}=(0,a.Z)(),n=t.singleTheme||i.Z,[c,p]=(0,o.useState)(!1);return(0,o.useEffect)((()=>{p(!0)}),[]),o.createElement(s.D.Consumer,null,(t=>{let{syntax:a}=t;return a===e.syntax?o.createElement(r.default,l({},r.defaultProps,{key:c,language:e.syntax,code:e.children,theme:n}),(e=>{let{className:t,tokens:n,getLineProps:r,getTokenProps:a}=e;return o.createElement("h4",{className:t,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((e,t)=>o.createElement("div",r({line:e,key:t}),e.map(((e,t)=>o.createElement("span",a({token:e,key:t}))))))))})):o.createElement("div",null)}))}},36707:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var r=n(87462),o=(n(67294),n(3905)),a=(n(48720),n(99191));const s={id:"bitwise-reference",title:"bitwise",hide_table_of_contents:!0},i=void 0,l={unversionedId:"reference/bitwise-reference",id:"version-1.6.0/reference/bitwise-reference",title:"bitwise",description:"Bitwise operations",source:"@site/versioned_docs/version-1.6.0/reference/bitwise.md",sourceDirName:"reference",slug:"/reference/bitwise-reference",permalink:"/previews/ligo/tacoshop/docs/1.6.0/reference/bitwise-reference",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"bitwise-reference",title:"bitwise",hide_table_of_contents:!0},sidebar:"API",previous:{title:"big_map",permalink:"/previews/ligo/tacoshop/docs/1.6.0/reference/big-map-reference"},next:{title:"list",permalink:"/previews/ligo/tacoshop/docs/1.6.0/reference/list-reference"}},c={},p=[],u={toc:p};function h(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Bitwise operations"),(0,o.kt)(a.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val and : 'a 'b.'a -> 'b -> ('a, 'b) external_and"),(0,o.kt)(a.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let and: <a, b>(_: a) => (_: b) => external_and<a, b>"),'The call `@and a b` is the conjunction defined on boolean, natural number and bytes operands. In the boolean case, the result is the logical "and" of the operands. In the natural number and bytes cases, the result is the bitwise "and" of the operands.',(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'The function `@and` is also defined when the left operand is of\ntype `int`. Negative numbers are considered in two\'s complement\nrepresentation, starting with a virtual infinite number of 1s.\n\nWhen `@and` is used for bytes operands, the bytes result has the\nsame length as the shorter operand. The prefix of the longer\noperand is cut to match with the length of the shorter one before\ntaking the bitwise "and".\n')),(0,o.kt)(a.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val or : 'a 'b.'a -> 'b -> ('a, 'b) external_xor"),(0,o.kt)(a.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let or: <a, b>(_: a) => (_: b) => external_xor<a, b>"),'The call `@or a b` is the disjunction defined on boolean, natural number and bytes operands. In the boolean case, the result is the logical "or" of the operands. In the natural number and bytes cases, the result is the bitwise "or" of the operands.',(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'When the function `@or` is used for bytes operands, the result\nbytes has the same length as the longer operand. The shorter\noperand is zero-padded on the left to match with the length of the\nlonger one before taking the bitwise "or".\n')),(0,o.kt)(a.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val xor : 'a 'b.'a -> 'b -> ('a, 'b) external_or"),(0,o.kt)(a.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let xor: <a, b>(_: a) => (_: b) => external_or<a, b>"),'The call `xor a b` is the exclusive disjunction defined on boolean, natural number and bytes operands. In the boolean case, the result is the logical "exclusive or" of the operands. In the natural number and bytes cases, the result is the bitwise "xor" of the operands.',(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'When `xor` is used for bytes operands, the result bytes has the\nsame length as the longer operand. The shorter operand is\nzero-padded on the left to match with the length of the longer one\nbefore taking the bitwise "xor".\n')),(0,o.kt)(a.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val shift_left : 'a 'b.'a -> 'b -> ('a, 'b) external_lsl"),(0,o.kt)(a.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let shift_left: <a, b>(_: a) => (_: b) => external_lsl<a, b>"),"The function `shift_left` on natural numbers consumes two natural numbers and produces the first number logically left-shifted by the second number. This instruction is only defined if the second number is less than or equal to 256.",(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"For bytes, the function `shift_left` consumes one byte sequence\nand one natural number, and produces the bytes logically\nleft-shifted by the natural number. The vacated bits on the right\nare filled with zeros. The shifted bits are minimally zero-padded\non the left in order to keep all the original bits, regardless if\nthey are 0 or 1: for example, `shift_left 0x1234 1` is `0x002468`,\ninstead of `0x2468` (even though in this case no significant bit\nwould be lost) or `0x00002468` (where padding is not minimal). The\nlength of the bytes returned by `shift_left` is `l + (s + 7) / 8`\nbytes where `l` is the length of the original bytes and `s` is the\nnatural number. This instruction is only defined if the second\nnumber is less than or equal to 64000.\n")),(0,o.kt)(a.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val shift_right : 'a 'b.'a -> 'b -> ('a, 'b) external_lsr"),(0,o.kt)(a.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let shift_right: <a, b>(_: a) => (_: b) => external_lsr<a, b>"),"The function `shift_right` on natural numbers consumes two natural numbers and produces the first number logically right-shifted by second number. This function is only defined if the second number is less than or equal to 256.",(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"For bytes, the function `shift_right` consumes one chunk of bytes\nand one natural number and produces the bytes logically\nright-shifted by the natural number. The shifted bits are\nminimally zero-padded on the left. For example, `shift_right\n0x012349 9` is `0x0091`, instead of `0x91` (where the 7 left-most\nbits are lost) or `0x000091` (not minimal padding). The length of\nthe returned bytes by `shift_right` is `max 0 (l - s / 8)` bytes,\nwhere `l` is the length of the original bytes, and `s` is the\nnatural number.\n")))}h.isMDXComponent=!0},23746:(e,t,n)=>{n.r(t),n.d(t,{Prism:()=>r.Z,default:()=>d,defaultProps:()=>s});var r=n(87410);const o={plain:{backgroundColor:"#2a2734",color:"#9a86fd"},styles:[{types:["comment","prolog","doctype","cdata","punctuation"],style:{color:"#6c6783"}},{types:["namespace"],style:{opacity:.7}},{types:["tag","operator","number"],style:{color:"#e09142"}},{types:["property","function"],style:{color:"#9a86fd"}},{types:["tag-id","selector","atrule-id"],style:{color:"#eeebff"}},{types:["attr-name"],style:{color:"#c4b9fe"}},{types:["boolean","string","entity","url","attr-value","keyword","control","directive","unit","statement","regex","atrule","placeholder","variable"],style:{color:"#ffcc99"}},{types:["deleted"],style:{textDecorationLine:"line-through"}},{types:["inserted"],style:{textDecorationLine:"underline"}},{types:["italic"],style:{fontStyle:"italic"}},{types:["important","bold"],style:{fontWeight:"bold"}},{types:["important"],style:{color:"#c4b9fe"}}]};var a=n(67294),s={Prism:r.Z,theme:o};function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l.apply(this,arguments)}var c=/\r\n|\r|\n/,p=function(e){0===e.length?e.push({types:["plain"],content:"\n",empty:!0}):1===e.length&&""===e[0].content&&(e[0].content="\n",e[0].empty=!0)},u=function(e,t){var n=e.length;return n>0&&e[n-1]===t?e:e.concat(t)},h=function(e,t){var n=e.plain,r=Object.create(null),o=e.styles.reduce((function(e,n){var r=n.languages,o=n.style;return r&&!r.includes(t)||n.types.forEach((function(t){var n=l({},e[t],o);e[t]=n})),e}),r);return o.root=n,o.plain=l({},n,{backgroundColor:null}),o};function y(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===t.indexOf(r)&&(n[r]=e[r]);return n}const d=function(e){function t(){for(var t=this,n=[],r=arguments.length;r--;)n[r]=arguments[r];e.apply(this,n),i(this,"getThemeDict",(function(e){if(void 0!==t.themeDict&&e.theme===t.prevTheme&&e.language===t.prevLanguage)return t.themeDict;t.prevTheme=e.theme,t.prevLanguage=e.language;var n=e.theme?h(e.theme,e.language):void 0;return t.themeDict=n})),i(this,"getLineProps",(function(e){var n=e.key,r=e.className,o=e.style,a=l({},y(e,["key","className","style","line"]),{className:"token-line",style:void 0,key:void 0}),s=t.getThemeDict(t.props);return void 0!==s&&(a.style=s.plain),void 0!==o&&(a.style=void 0!==a.style?l({},a.style,o):o),void 0!==n&&(a.key=n),r&&(a.className+=" "+r),a})),i(this,"getStyleForToken",(function(e){var n=e.types,r=e.empty,o=n.length,a=t.getThemeDict(t.props);if(void 0!==a){if(1===o&&"plain"===n[0])return r?{display:"inline-block"}:void 0;if(1===o&&!r)return a[n[0]];var s=r?{display:"inline-block"}:{},i=n.map((function(e){return a[e]}));return Object.assign.apply(Object,[s].concat(i))}})),i(this,"getTokenProps",(function(e){var n=e.key,r=e.className,o=e.style,a=e.token,s=l({},y(e,["key","className","style","token"]),{className:"token "+a.types.join(" "),children:a.content,style:t.getStyleForToken(a),key:void 0});return void 0!==o&&(s.style=void 0!==s.style?l({},s.style,o):o),void 0!==n&&(s.key=n),r&&(s.className+=" "+r),s})),i(this,"tokenize",(function(e,t,n,r){var o={code:t,grammar:n,language:r,tokens:[]};e.hooks.run("before-tokenize",o);var a=o.tokens=e.tokenize(o.code,o.grammar,o.language);return e.hooks.run("after-tokenize",o),a}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.render=function(){var e=this.props,t=e.Prism,n=e.language,r=e.code,o=e.children,a=this.getThemeDict(this.props),s=t.languages[n];return o({tokens:function(e){for(var t=[[]],n=[e],r=[0],o=[e.length],a=0,s=0,i=[],l=[i];s>-1;){for(;(a=r[s]++)<o[s];){var h=void 0,y=t[s],d=n[s][a];if("string"==typeof d?(y=s>0?y:["plain"],h=d):(y=u(y,d.type),d.alias&&(y=u(y,d.alias)),h=d.content),"string"==typeof h){var f=h.split(c),b=f.length;i.push({types:y,content:f[0]});for(var m=1;m<b;m++)p(i),l.push(i=[]),i.push({types:y,content:f[m]})}else s++,t.push(y),n.push(h),r.push(0),o.push(h.length)}s--,t.pop(),n.pop(),r.pop(),o.pop()}return p(i),l}(void 0!==s?this.tokenize(t,r,s,n):[r]),className:"prism-code language-"+n,style:void 0!==a?a.root:{},getLineProps:this.getLineProps,getTokenProps:this.getTokenProps})},t}(a.Component)},87552:(e,t,n)=>{n.d(t,{Z:()=>r});const r={plain:{color:"#bfc7d5",backgroundColor:"#292d3e"},styles:[{types:["comment"],style:{color:"rgb(105, 112, 152)",fontStyle:"italic"}},{types:["string","inserted"],style:{color:"rgb(195, 232, 141)"}},{types:["number"],style:{color:"rgb(247, 140, 108)"}},{types:["builtin","char","constant","function"],style:{color:"rgb(130, 170, 255)"}},{types:["punctuation","selector"],style:{color:"rgb(199, 146, 234)"}},{types:["variable"],style:{color:"rgb(191, 199, 213)"}},{types:["class-name","attr-name"],style:{color:"rgb(255, 203, 107)"}},{types:["tag","deleted"],style:{color:"rgb(255, 85, 114)"}},{types:["operator"],style:{color:"rgb(137, 221, 255)"}},{types:["boolean"],style:{color:"rgb(255, 88, 116)"}},{types:["keyword"],style:{fontStyle:"italic"}},{types:["doctype"],style:{color:"rgb(199, 146, 234)",fontStyle:"italic"}},{types:["namespace"],style:{color:"rgb(178, 204, 214)"}},{types:["url"],style:{color:"rgb(221, 221, 221)"}}]}}}]);