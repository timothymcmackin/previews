"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[10046],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},y={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),g=c(n),m=o,u=g["".concat(l,".").concat(m)]||g[m]||y[m]||r;return n?a.createElement(u,i(i({ref:t},p),{},{components:n})):a.createElement(u,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>o.Z,Z:()=>r});var a=n(67294),o=n(75402);const r=function(e){return a.createElement(o.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},99191:(e,t,n)=>{n.d(t,{Z:()=>p});var a=n(23746),o=n(67294),r=n(52263),i=n(48720),s=n(87552);function l(){return l=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l.apply(this,arguments)}const{Prism:c}=n(23746);c.languages={...c.languages,cameligo:{...c.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:c.languages.typescript};const p=function(e){const{siteConfig:{themeConfig:{prism:t={}}}}=(0,r.Z)(),n=t.singleTheme||s.Z,[c,p]=(0,o.useState)(!1);return(0,o.useEffect)((()=>{p(!0)}),[]),o.createElement(i.D.Consumer,null,(t=>{let{syntax:r}=t;return r===e.syntax?o.createElement(a.default,l({},a.defaultProps,{key:c,language:e.syntax,code:e.children,theme:n}),(e=>{let{className:t,tokens:n,getLineProps:a,getTokenProps:r}=e;return o.createElement("h4",{className:t,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((e,t)=>o.createElement("div",a({line:e,key:t}),e.map(((e,t)=>o.createElement("span",r({token:e,key:t}))))))))})):o.createElement("div",null)}))}},35503:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>y});var a=n(87462),o=(n(67294),n(3905)),r=n(48720),i=n(99191);const s={id:"hangzhou",title:"Hangzhou",description:"Hangzhou changes"},l=void 0,c={unversionedId:"protocol/hangzhou",id:"version-1.5.0/protocol/hangzhou",title:"Hangzhou",description:"Hangzhou changes",source:"@site/versioned_docs/version-1.5.0/protocol/hangzhou.md",sourceDirName:"protocol",slug:"/protocol/hangzhou",permalink:"/previews/ligo/tacoshop/docs/1.5.0/protocol/hangzhou",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"hangzhou",title:"Hangzhou",description:"Hangzhou changes"},sidebar:"API",previous:{title:"LIGO Changelog",permalink:"/previews/ligo/tacoshop/docs/1.5.0/intro/changelog"},next:{title:"Ithaca",permalink:"/previews/ligo/tacoshop/docs/1.5.0/protocol/ithaca"}},p={},y=[{value:"API",id:"api",level:2},{value:"New types",id:"new-types",level:3},{value:"New primitives",id:"new-primitives",level:3},{value:"Tezos",id:"tezos",level:4},{value:"Test",id:"test",level:4},{value:"Examples",id:"examples",level:2},{value:"Timelock",id:"timelock",level:3},{value:"On-chain views",id:"on-chain-views",level:3},{value:"Global constant",id:"global-constant",level:3}],g={toc:y};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"api"},"API"),(0,o.kt)("h3",{id:"new-types"},"New types"),(0,o.kt)(i.Z,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type chest"),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type chest"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type chest"),"A type for chests",(0,o.kt)(i.Z,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type chest_key"),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type chest_key"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type chest_key"),"A type for chest keys",(0,o.kt)(i.Z,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type chest_opening_result is Ok_opening of bytes | Fail_decrypt | Fail_timelock"),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type chest_opening_result = Ok_opening of bytes | Fail_decrypt | Fail_timelock"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},'type chest_opening_result = ["Ok_opening", bytes] | ["Fail_decrypt"] | ["Fail_timelock"];'),(0,o.kt)("p",null,"A type for the result of chest opening, see ",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.open_chest")),(0,o.kt)("h3",{id:"new-primitives"},"New primitives"),(0,o.kt)("h4",{id:"tezos"},"Tezos"),(0,o.kt)(i.Z,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"val open_chest : chest_key -> chest -> nat -> chest_opening_result"),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val open_chest : chest_key -> chest -> nat -> chest_opening_result"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let open_chest : chest_key => chest => nat => chest_opening_result"),(0,o.kt)(i.Z,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"val call_view<arg,reg> : string -> arg -> address -> option (ret)"),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val call_view : string -> 'arg -> address -> 'ret option"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let call_view : string => 'arg => address => option <'ret>"),(0,o.kt)(i.Z,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function constant: string -> 'a"),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val constant : string -> 'a"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let constant : string => 'a"),(0,o.kt)("h4",{id:"test"},"Test"),(0,o.kt)("p",null,"New signature for originate_from_file:"),(0,o.kt)(i.Z,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"val originate_from_file : string -> string -> list (string) -> michelson_program -> tez -> (address * michelson_program * int)"),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val originate_from_file : string -> string -> string list -> michelson_program -> tez -> (address * michelson_program * int)"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let originate_from_file = (filepath: string, entrypoint: string , views : list <'string> , init: michelson_program, balance: tez) => [address, michelson_program, int]"),(0,o.kt)("p",null,"Originate a contract with a path to the contract file, an entrypoint, a list of views, an initial storage and an initial balance."),(0,o.kt)(i.Z,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"val create_chest : bytes -> nat -> chest * chest_key"),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val create_chest : bytes -> nat -> chest * chest_key"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let create_chest : bytes => nat => [chest , chest_key]"),(0,o.kt)("p",null,"Generate a locked value, the RSA parameters and encrypt the payload. Also returns the chest key\nExposes tezos timelock library function ",(0,o.kt)("a",{parentName:"p",href:"https://gitlab.com/tezos/tezos/-/blob/v11-release/src/lib_crypto/timelock.mli#L197"},"create_chest_and_chest_key")),(0,o.kt)(i.Z,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"val create_chest_key : chest -> nat -> chest_key"),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val create_chest_key : chest -> nat -> chest_key"),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let create_chest_key : chest => nat => chest_key"),(0,o.kt)("p",null,"Unlock the value and create the time-lock proof.\nExposes tezos timelock library function ",(0,o.kt)("a",{parentName:"p",href:"https://gitlab.com/tezos/tezos/-/blob/v11-release/src/lib_crypto/timelock.mli#L201"},"create_chest_key"),"."),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("h3",{id:"timelock"},"Timelock"),(0,o.kt)("p",null,"Extensive documentation about timelock can be found ",(0,o.kt)("a",{parentName:"p",href:"https://octez.tezos.com/docs/active/timelock.html#timelock"},"here"),".\nHere is an example of a contract trying to open a chest and the corresponding tests to trigger all error kinds:"),(0,o.kt)(r.Z,{"test-ligo":!0,syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"skip",skip:!0},"type storage = bytes\ntype parameter = chest_key * chest\n\ntype return = operation list * storage\n\nlet main (p, _ : parameter * storage) : return =\n  let (ck,c) = p in\n  let new_s =\n    match Tezos.open_chest ck c 10n with\n    | Ok_opening b -> b\n    | Fail_timelock -> 0x00\n    | Fail_decrypt -> 0x01\n  in [], new_s\n\n\nlet test =\n  let init_storage : bytes = 0x00 in\n  let addr, _, _ = Test.originate main init_storage 0tez in\n  let payload = 0x0101\n  in\n  let test_open (cc : chest_key * chest) (expected : bytes) : unit =\n    let x : parameter contract = Test.to_contract addr in\n    let _ = Test.transfer_to_contract_exn x cc 0tez in\n    let s = Test.get_storage addr in\n    assert (s = expected)\n  in\n  let test1 = (* chest key/payload and time matches -> OK *)\n    let chest, chest_key = Test.create_chest payload 10n\n    in test_open (chest_key, chest) payload\n  in\n  let test2 = (* chest key/payload do not match -> Fail_decrypt *)\n    let chest, _ = Test.create_chest payload 10n in\n    let _, chest_key = Test.create_chest 0x2020 10n\n    in test_open (chest_key,chest) 0x01\n  in\n  let test3 = (* chest time do not match -> Fail_timelock *)\n    let chest, _ = Test.create_chest payload 2n in\n    let chest_key = Test.create_chest_key chest 10n\n    in test_open (chest_key, chest) 0x00\n  in ()\n\n"))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"skip",skip:!0},'let open_or_fail = ([ck, c, @time] : [chest_key, chest, nat]) : bytes => {\n  return (match ( Tezos.open_chest(ck,c,@time), {\n    Ok_opening: (b:bytes) => b,\n    Fail_decrypt: () => failwith("decrypt"),\n    Fail_timelock: () => failwith("timelock"),\n  }))\n};\n'))),(0,o.kt)(r.Z,{syntax:"pascaligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-pascaligo",metastring:"skip",skip:!0},'function open_or_fail (const ck : chest_key; const c : chest; const @time : nat) : bytes is\n  case Tezos.open_chest (ck, c, @time) of [\n    Ok_opening (b) -> b\n  | Fail_decrypt -> (failwith("decrypt"))\n  | Fail_timelock -> (failwith("timelock"))\n  ]\n'))),(0,o.kt)("h3",{id:"on-chain-views"},"On-chain views"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Tezos documentation on views can be found ",(0,o.kt)("a",{parentName:"p",href:"https://octez.tezos.com/docs/active/views.html"},"here"))),(0,o.kt)("p",null,'On-chain views are named routines attached to your contract allowing\nanother contract to call them to get a "view" of your contract current\nstorage. It cannot modify your storage nor emit operations.  These\nroutines can either simply return your contract storage or apply some\nkind of processing to it: they take your current storage, a parameter\nand returns the data of your choice. Note that parameter and return\ntypes can be anything except ',(0,o.kt)("inlineCode",{parentName:"p"},"big_map"),"; ",(0,o.kt)("inlineCode",{parentName:"p"},"sapling_state")," ; ",(0,o.kt)("inlineCode",{parentName:"p"},"operation"),"\nand ",(0,o.kt)("inlineCode",{parentName:"p"},"ticket"),".  Views are named after their declaration name and can be\ncompiled in two ways:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"by passing their names to the command line option ",(0,o.kt)("inlineCode",{parentName:"p"},"--views"),"\n(e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"ligo compile contract --views v1,v2,v3"),")")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"by annotating their declarations in your code with ",(0,o.kt)("inlineCode",{parentName:"p"},"view")))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Important: the first way (",(0,o.kt)("inlineCode",{parentName:"p"},"--views"),") will override any annotated\ndeclarations")),(0,o.kt)("p",null,"Given a very simple contract having a storage of type ",(0,o.kt)("inlineCode",{parentName:"p"},"string"),", here\nare a few legit views:"),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=views",group:"views"},"type storage = string\nlet main (((),s): unit * storage) : operation list * storage = [] , s\n\n(* view 'view1', simply returns the storage *)\n[@view] let view1 ((),s: unit * storage) : storage = s\n\n(* view 'v2', returns true if the storage has a given length *)\n[@view] let v2 (expected_length,s: nat * storage) : bool = (String.length s = expected_length)\n\n(* view 'v3' returns a constant int *)\n[@view] let v3 ((),_ : unit * storage) : int = 42\n"))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=views",group:"views"},"type storage = string\nlet main = ([_ , s]: [unit , storage]) : [ list<operation> , storage] => [list([]), s];\n\n/* view 'view1', simply returns the storage */\n@view\nlet view1 = ([_ , s]: [unit , storage]) : storage => s;\n\n/* view 'v2', returns true if the storage has a given length */\n@view\nlet v2 = ([expected_length,s] : [nat , storage]) : bool => (String.length (s) == expected_length);\n\n/* view 'view3' returns a constant int */\n@view\nlet view3 = ([_ , _s]: [unit , storage]) : int => 42;\n"))),(0,o.kt)(r.Z,{syntax:"pascaligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-pascaligo",metastring:"group=views",group:"views"},"type storage is string\nfunction main (const _ : unit ; const s : storage) : list (operation) * storage is (nil, s)\n\n(* view 'view1', simply returns the storage *)\n[@view] function view1 (const _ : unit; const s: storage) : storage is s\n\n(* view 'v2', returns true if the storage has a given length *)\n[@view] function v2 (const expected_length : nat; const s: storage) : bool is (String.length (s) = expected_length)\n\n(* view 'v3' returns a constant int *)\n[@view] function v3 (const _ : unit; const _ : storage) is 42\n"))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: ",(0,o.kt)("inlineCode",{parentName:"p"},"[@view]")," attribute is only supported for top-level functions."),(0,o.kt)("p",{parentName:"blockquote"},"The use of ",(0,o.kt)("inlineCode",{parentName:"p"},"[@view]")," attribute anywhere other than top-level will be ignored.")),(0,o.kt)("p",null,"A few primitives have a slightly different meaning when executed as part of a view:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Tezos.get_balance")," represents the current amount of mutez held by the contract attached to the view"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Tezos.get_sender")," represents the caller of the view"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Tezos.get_amount")," is always 0 mutez"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Tezos.get_self_address")," represents the contract attached to the view")),(0,o.kt)("p",null,"On the caller side, the primitive ",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.call_view")," will allow you to call another contract view and get its result by providing the view name; the contract address and the parameter of the view. If the address is nonexistent; the name does not match of of the contract\nview or the parameter type do not match, ",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.call_view")," will return ",(0,o.kt)("inlineCode",{parentName:"p"},"None"),"."),(0,o.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=views",group:"views"},'let view_call ((name,parameter,addr): string * int * address) : int option = Tezos.call_view "sto_plus_n" 1 addr\n'))),(0,o.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=views",group:"views"},'let view_call = ([name,parameter,addr]: [string , int , address]) : option<int> => Tezos.call_view ("sto_plus_n", 1, addr)\n'))),(0,o.kt)(r.Z,{syntax:"pascaligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-pascaligo",metastring:"group=views",group:"views"},'function view_call (const name : string; const parameter : int; const addr: address) : option (int) is Tezos.call_view ("sto_plus_n", 1, addr)\n'))),(0,o.kt)("h3",{id:"global-constant"},"Global constant"),(0,o.kt)("p",null,"The new primitive ",(0,o.kt)("inlineCode",{parentName:"p"},"Tezos.constant")," allows you to use a predefined\nconstant already registered on chain.  It accepts a hash in the form\nof a string and will require a type annotation."))}m.isMDXComponent=!0},23746:(e,t,n)=>{n.r(t),n.d(t,{Prism:()=>a.Z,default:()=>u,defaultProps:()=>i});var a=n(87410);const o={plain:{backgroundColor:"#2a2734",color:"#9a86fd"},styles:[{types:["comment","prolog","doctype","cdata","punctuation"],style:{color:"#6c6783"}},{types:["namespace"],style:{opacity:.7}},{types:["tag","operator","number"],style:{color:"#e09142"}},{types:["property","function"],style:{color:"#9a86fd"}},{types:["tag-id","selector","atrule-id"],style:{color:"#eeebff"}},{types:["attr-name"],style:{color:"#c4b9fe"}},{types:["boolean","string","entity","url","attr-value","keyword","control","directive","unit","statement","regex","atrule","placeholder","variable"],style:{color:"#ffcc99"}},{types:["deleted"],style:{textDecorationLine:"line-through"}},{types:["inserted"],style:{textDecorationLine:"underline"}},{types:["italic"],style:{fontStyle:"italic"}},{types:["important","bold"],style:{fontWeight:"bold"}},{types:["important"],style:{color:"#c4b9fe"}}]};var r=n(67294),i={Prism:a.Z,theme:o};function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l.apply(this,arguments)}var c=/\r\n|\r|\n/,p=function(e){0===e.length?e.push({types:["plain"],content:"\n",empty:!0}):1===e.length&&""===e[0].content&&(e[0].content="\n",e[0].empty=!0)},y=function(e,t){var n=e.length;return n>0&&e[n-1]===t?e:e.concat(t)},g=function(e,t){var n=e.plain,a=Object.create(null),o=e.styles.reduce((function(e,n){var a=n.languages,o=n.style;return a&&!a.includes(t)||n.types.forEach((function(t){var n=l({},e[t],o);e[t]=n})),e}),a);return o.root=n,o.plain=l({},n,{backgroundColor:null}),o};function m(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===t.indexOf(a)&&(n[a]=e[a]);return n}const u=function(e){function t(){for(var t=this,n=[],a=arguments.length;a--;)n[a]=arguments[a];e.apply(this,n),s(this,"getThemeDict",(function(e){if(void 0!==t.themeDict&&e.theme===t.prevTheme&&e.language===t.prevLanguage)return t.themeDict;t.prevTheme=e.theme,t.prevLanguage=e.language;var n=e.theme?g(e.theme,e.language):void 0;return t.themeDict=n})),s(this,"getLineProps",(function(e){var n=e.key,a=e.className,o=e.style,r=l({},m(e,["key","className","style","line"]),{className:"token-line",style:void 0,key:void 0}),i=t.getThemeDict(t.props);return void 0!==i&&(r.style=i.plain),void 0!==o&&(r.style=void 0!==r.style?l({},r.style,o):o),void 0!==n&&(r.key=n),a&&(r.className+=" "+a),r})),s(this,"getStyleForToken",(function(e){var n=e.types,a=e.empty,o=n.length,r=t.getThemeDict(t.props);if(void 0!==r){if(1===o&&"plain"===n[0])return a?{display:"inline-block"}:void 0;if(1===o&&!a)return r[n[0]];var i=a?{display:"inline-block"}:{},s=n.map((function(e){return r[e]}));return Object.assign.apply(Object,[i].concat(s))}})),s(this,"getTokenProps",(function(e){var n=e.key,a=e.className,o=e.style,r=e.token,i=l({},m(e,["key","className","style","token"]),{className:"token "+r.types.join(" "),children:r.content,style:t.getStyleForToken(r),key:void 0});return void 0!==o&&(i.style=void 0!==i.style?l({},i.style,o):o),void 0!==n&&(i.key=n),a&&(i.className+=" "+a),i})),s(this,"tokenize",(function(e,t,n,a){var o={code:t,grammar:n,language:a,tokens:[]};e.hooks.run("before-tokenize",o);var r=o.tokens=e.tokenize(o.code,o.grammar,o.language);return e.hooks.run("after-tokenize",o),r}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.render=function(){var e=this.props,t=e.Prism,n=e.language,a=e.code,o=e.children,r=this.getThemeDict(this.props),i=t.languages[n];return o({tokens:function(e){for(var t=[[]],n=[e],a=[0],o=[e.length],r=0,i=0,s=[],l=[s];i>-1;){for(;(r=a[i]++)<o[i];){var g=void 0,m=t[i],u=n[i][r];if("string"==typeof u?(m=i>0?m:["plain"],g=u):(m=y(m,u.type),u.alias&&(m=y(m,u.alias)),g=u.content),"string"==typeof g){var h=g.split(c),d=h.length;s.push({types:m,content:h[0]});for(var k=1;k<d;k++)p(s),l.push(s=[]),s.push({types:m,content:h[k]})}else i++,t.push(m),n.push(g),a.push(0),o.push(g.length)}i--,t.pop(),n.pop(),a.pop(),o.pop()}return p(s),l}(void 0!==i?this.tokenize(t,a,i,n):[a]),className:"prism-code language-"+n,style:void 0!==r?r.root:{},getLineProps:this.getLineProps,getTokenProps:this.getTokenProps})},t}(r.Component)},87552:(e,t,n)=>{n.d(t,{Z:()=>a});const a={plain:{color:"#bfc7d5",backgroundColor:"#292d3e"},styles:[{types:["comment"],style:{color:"rgb(105, 112, 152)",fontStyle:"italic"}},{types:["string","inserted"],style:{color:"rgb(195, 232, 141)"}},{types:["number"],style:{color:"rgb(247, 140, 108)"}},{types:["builtin","char","constant","function"],style:{color:"rgb(130, 170, 255)"}},{types:["punctuation","selector"],style:{color:"rgb(199, 146, 234)"}},{types:["variable"],style:{color:"rgb(191, 199, 213)"}},{types:["class-name","attr-name"],style:{color:"rgb(255, 203, 107)"}},{types:["tag","deleted"],style:{color:"rgb(255, 85, 114)"}},{types:["operator"],style:{color:"rgb(137, 221, 255)"}},{types:["boolean"],style:{color:"rgb(255, 88, 116)"}},{types:["keyword"],style:{fontStyle:"italic"}},{types:["doctype"],style:{color:"rgb(199, 146, 234)",fontStyle:"italic"}},{types:["namespace"],style:{color:"rgb(178, 204, 214)"}},{types:["url"],style:{color:"rgb(221, 221, 221)"}}]}}}]);