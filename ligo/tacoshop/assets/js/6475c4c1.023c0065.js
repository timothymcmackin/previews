"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[35872],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>u});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,s=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),m=l(r),u=i,b=m["".concat(c,".").concat(u)]||m[u]||g[u]||s;return r?n.createElement(b,o(o({ref:t},p),{},{components:r})):n.createElement(b,o({ref:t},p))}));function u(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=r.length,o=new Array(s);o[0]=m;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:i,o[1]=a;for(var l=2;l<s;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},48720:(e,t,r)=>{r.d(t,{D:()=>i.Z,Z:()=>s});var n=r(67294),i=r(75402);const s=function(e){return n.createElement(i.Z.Consumer,null,(t=>{let{syntax:r}=t;return r===e.syntax?e.children:n.createElement(n.Fragment,null)}))}},3528:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var n=r(87462),i=(r(67294),r(3905)),s=r(48720);const o={id:"searching",title:"Searching"},a=void 0,c={unversionedId:"tezos/big_sets/searching",id:"version-1.6.0/tezos/big_sets/searching",title:"Searching",description:"The predicate Big_set.mem tests for membership in a given big set.",source:"@site/versioned_docs/version-1.6.0/tezos/big_sets/searching.md",sourceDirName:"tezos/big_sets",slug:"/tezos/big_sets/searching",permalink:"/previews/ligo/tacoshop/docs/1.6.0/tezos/big_sets/searching",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"searching",title:"Searching"},sidebar:"docs",previous:{title:"Declaring",permalink:"/previews/ligo/tacoshop/docs/1.6.0/tezos/big_sets/declaring"},next:{title:"Adding",permalink:"/previews/ligo/tacoshop/docs/1.6.0/tezos/big_sets/adding"}},l={},p=[],g={toc:p};function m(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},g,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The predicate ",(0,i.kt)("inlineCode",{parentName:"p"},"Big_set.mem")," tests for membership in a given big set."),(0,i.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=big_set_membership",group:"big_set_membership"},"let my_big_set : int big_set = Big_set.literal [3; 2; 2; 1]\nlet contains_3 : bool = Big_set.mem 3 my_big_set // = true\n"))),(0,i.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=big_set_membership",group:"big_set_membership"},"const my_big_set: big_set<int> = Big_set.literal([3, 2, 2, 1]);\nconst contains_3: bool = Big_set.mem(3, my_big_set); // == true\n"))))}m.isMDXComponent=!0}}]);