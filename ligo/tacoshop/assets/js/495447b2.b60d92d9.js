"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[33506],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),y=i,d=m["".concat(s,".").concat(y)]||m[y]||u[y]||o;return n?r.createElement(d,a(a({ref:t},c),{},{components:n})):r.createElement(d,a({ref:t},c))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>i.Z,Z:()=>o});var r=n(67294),i=n(75402);const o=function(e){return r.createElement(i.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},94760:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(87462),i=(n(67294),n(3905)),o=n(48720);const a={id:"multiplying",title:"Multiplying"},l=void 0,s={unversionedId:"numbers/multiplying",id:"version-1.5.0/numbers/multiplying",title:"Multiplying",description:"Multiplication in LIGO is accomplished by means of the * binary",source:"@site/versioned_docs/version-1.5.0/numbers/multiplying.md",sourceDirName:"numbers",slug:"/numbers/multiplying",permalink:"/previews/ligo/tacoshop/docs/1.5.0/numbers/multiplying",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"multiplying",title:"Multiplying"},sidebar:"docs",previous:{title:"Negating",permalink:"/previews/ligo/tacoshop/docs/1.5.0/numbers/negating"},next:{title:"Dividing",permalink:"/previews/ligo/tacoshop/docs/1.5.0/numbers/dividing"}},p={},c=[],u={toc:c};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Multiplication in LIGO is accomplished by means of the ",(0,i.kt)("inlineCode",{parentName:"p"},"*")," binary\noperator which is overloaded to apply to any combination of natural\nnumbers and integers, as shown in the following examples. The type\nrules for multiplication are the same as for the addition:"),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=multiplying",group:"multiplying"},"let a : int = 5 * 10   // int * int yields int\nlet b : nat = 5n * 2n  // nat * nat yields nat\nlet c : int = 10n * 5  // nat * int yields int\nlet d : int = 5 * 10n  // int * nat yields int\n"))),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=multiplying",group:"multiplying"},"const a : int = 5 * 10;   // int * int yields int\nconst b : nat = 5n * 2n;  // nat * nat yields nat\nconst c : int = 10n * 5;  // nat * int yields int\nconst d : int = 5 * 10n;  // int * nat yields int\n"))))}m.isMDXComponent=!0}}]);