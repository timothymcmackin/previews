"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[90934],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>u});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),g=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=g(e.components);return r.createElement(o.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=g(t),u=a,d=m["".concat(o,".").concat(u)]||m[u]||c[u]||i;return t?r.createElement(d,l(l({ref:n},p),{},{components:t})):r.createElement(d,l({ref:n},p))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=m;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var g=2;g<i;g++)l[g]=t[g];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},48720:(e,n,t)=>{t.d(n,{D:()=>a.Z,Z:()=>i});var r=t(67294),a=t(75402);const i=function(e){return r.createElement(a.Z.Consumer,null,(n=>{let{syntax:t}=n;return t===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},79197:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=t(87462),a=(t(67294),t(3905)),i=t(48720);const l={title:"Strings"},s=void 0,o={unversionedId:"data-types/strings",id:"version-1.9.2/data-types/strings",title:"Strings",description:"Strings are of the predefined type string. Literal strings are set",source:"@site/versioned_docs/version-1.9.2/data-types/strings.md",sourceDirName:"data-types",slug:"/data-types/strings",permalink:"/previews/ligo/tacoshop/docs/data-types/strings",draft:!1,tags:[],version:"1.9.2",frontMatter:{title:"Strings"},sidebar:"docs",previous:{title:"Booleans",permalink:"/previews/ligo/tacoshop/docs/data-types/booleans"},next:{title:"Timestamps",permalink:"/previews/ligo/tacoshop/docs/data-types/timestamp"}},g={},p=[{value:"Casting",id:"casting",level:3},{value:"Concatenating",id:"concatenating",level:2},{value:"Sizing",id:"sizing",level:2},{value:"Slicing",id:"slicing",level:2},{value:"Verbatim",id:"verbatim",level:2}],c={toc:p};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Strings are of the predefined type ",(0,a.kt)("inlineCode",{parentName:"p"},"string"),". Literal strings are set\nbetween double quotes."),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=strings",group:"strings"},'let a : string = "Hello Alice"\n')),(0,a.kt)("p",null,"Note: See the predefined\n",(0,a.kt)("a",{parentName:"p",href:"../reference/string-reference/?lang=cameligo"},"module String"))),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=strings",group:"strings"},'const a :string = "Hello Alice";\n')),(0,a.kt)("p",null,"Note: See predefined ",(0,a.kt)("a",{parentName:"p",href:"../reference/string-reference/?lang=jsligo"},"namespace String"))),(0,a.kt)("h3",{id:"casting"},"Casting"),(0,a.kt)("p",null,"Strings can be used in contexts where a boolean is expected: an empty\nstring is then interpreted as ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," otherwise."),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=strings",group:"strings"},'let one  = if "" then 0 else 1\nlet zero = if "foo" then 0 else 1\n'))),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=strings",group:"strings"},'const one  = "" ? 0 : 1;\nconst zero = "foo" ? 0 : 1;\n'))),(0,a.kt)("h2",{id:"concatenating"},"Concatenating"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"Strings can be concatenated using the ",(0,a.kt)("inlineCode",{parentName:"p"},"^")," operator, as in OCaml:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=concatenating",group:"concatenating"},'let name = "Alice"\nlet greeting = "Hello"\nlet full_greeting = greeting ^ " " ^ name\n')),(0,a.kt)("p",null,"Note: See the predefined\n",(0,a.kt)("a",{parentName:"p",href:"../reference/string-reference/?lang=cameligo"},"module String"))),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"Strings can be concatenated using the overloaded ",(0,a.kt)("inlineCode",{parentName:"p"},"+")," operator, like\nso:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=concatenating",group:"concatenating"},'const name = "Alice";\nconst greeting = "Hello";\nconst full_greeting = greeting + " " + name;\n')),(0,a.kt)("p",null,"Note: See predefined ",(0,a.kt)("a",{parentName:"p",href:"../reference/string-reference/?lang=jsligo"},"namespace String"))),(0,a.kt)("h2",{id:"sizing"},"Sizing"),(0,a.kt)("p",null,"The length of a string can be obtain by calling the predefined\nfunctions ",(0,a.kt)("inlineCode",{parentName:"p"},"String.length")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"String.size"),":"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=length",group:"length"},'let length : nat = String.size "Alice" // length = 5n\n')),(0,a.kt)("p",null,"Note: See the predefined\n",(0,a.kt)("a",{parentName:"p",href:"../reference/string-reference/?lang=cameligo"},"module String"))),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=length",group:"length"},'const length : nat = String.size("Alice"); // length == 5n\n')),(0,a.kt)("p",null,"Note: See predefined ",(0,a.kt)("a",{parentName:"p",href:"../reference/string-reference/?lang=jsligo"},"namespace String"))),(0,a.kt)("h2",{id:"slicing"},"Slicing"),(0,a.kt)("p",null,"Substrings can be extracted using the predefined function\n",(0,a.kt)("inlineCode",{parentName:"p"},"String.sub"),". The first character has index 0 and the interval of\nindices for the substring has inclusive bounds."),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=slicing",group:"slicing"},'let name  = "Alice"\nlet slice = String.sub 0n 1n name  // slice = "A"\n')),(0,a.kt)("p",null,"Note: See the predefined\n",(0,a.kt)("a",{parentName:"p",href:"../reference/string-reference/?lang=cameligo"},"module String"))),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The offset and length of the slice are natural number:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=slicing",group:"slicing"},'const name = "Alice";\nconst slice = String.sub (0n, 1n, name); // slice == "A"\n')),(0,a.kt)("p",null,"Note: See predefined ",(0,a.kt)("a",{parentName:"p",href:"../reference/string-reference/?lang=jsligo"},"namespace String"))),(0,a.kt)("h2",{id:"verbatim"},"Verbatim"),(0,a.kt)("p",null,"Strings can contain control characters, like ",(0,a.kt)("inlineCode",{parentName:"p"},"\\n"),". Sometimes we need\nthat each character in a string is interpreted on its own, for example\n",(0,a.kt)("inlineCode",{parentName:"p"},"\\n")," as two characters instead of a newline character. In that case,\neither we escape the backslash character, or we use ",(0,a.kt)("em",null,"verbatim\nstrings"),". Those have the same type ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," as normal (that is,\ninterpreted) strings."),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"Verbatim strings are given between the delimiters ",(0,a.kt)("inlineCode",{parentName:"p"},"{|")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"|}"),",\ninstead of double quotes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=verbatim",group:"verbatim"},"let s : string = {|\\n|} // String made of two characters\n")),(0,a.kt)("p",null,"Note: See the predefined\n",(0,a.kt)("a",{parentName:"p",href:"../reference/string-reference/?lang=cameligo"},"module String"))),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"Verbatim strings are given between backquotes (a.k.a. backticks),\ninstead of double quotes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=verbatim",group:"verbatim"},"const s : string = `\\n` // String made of two characters\n")),(0,a.kt)("p",null,"Note: See predefined ",(0,a.kt)("a",{parentName:"p",href:"../reference/string-reference/?lang=jsligo"},"namespace String"))))}m.isMDXComponent=!0}}]);