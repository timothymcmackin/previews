"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[50989],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),d=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=d(e.components);return i.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(t),m=a,g=u["".concat(s,".").concat(m)]||u[m]||c[m]||r;return t?i.createElement(g,o(o({ref:n},p),{},{components:t})):i.createElement(g,o({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var d=2;d<r;d++)o[d]=t[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},48720:(e,n,t)=>{t.d(n,{D:()=>a.Z,Z:()=>r});var i=t(67294),a=t(75402);const r=function(e){return i.createElement(a.Z.Consumer,null,(n=>{let{syntax:t}=n;return t===e.syntax?e.children:i.createElement(i.Fragment,null)}))}},53616:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var i=t(87462),a=(t(67294),t(3905)),r=t(48720);const o={id:"dividing",title:"Dividing"},l=void 0,s={unversionedId:"numbers/dividing",id:"version-1.5.0/numbers/dividing",title:"Dividing",description:"Because LIGO features neither floating-point nor fixed-point",source:"@site/versioned_docs/version-1.5.0/numbers/dividing.md",sourceDirName:"numbers",slug:"/numbers/dividing",permalink:"/previews/ligo/tacoshop/docs/1.5.0/numbers/dividing",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"dividing",title:"Dividing"},sidebar:"docs",previous:{title:"Multiplying",permalink:"/previews/ligo/tacoshop/docs/1.5.0/numbers/multiplying"},next:{title:"Booleans",permalink:"/previews/ligo/tacoshop/docs/1.5.0/booleans/"}},d={},p=[],c={toc:p};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Because LIGO features neither floating-point nor fixed-point\narithmetic, division in LIGO is Euclidean. The predefined binary\noperator ",(0,a.kt)("inlineCode",{parentName:"p"},"/")," returns the quotient and is overloaded like the\nmultiplication. Of course, division by zero triggers an exception that\ninterrups the execution, so the programmer must make sure this case\ncannot happen because the compiler cannot determine, in general, if a\nvariable will have a given value (or not) for all inputs."),(0,a.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=dividing",group:"dividing"},"let a : int = 10 / 3    // int / int yields int\nlet b : nat = 10n / 3n  // nat / nat yields nat\nlet c : int = 10n / 3   // nat / int yields int\nlet d : int = 10 / 3n   // int / nat yields int\n"))),(0,a.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=dividing",group:"dividing"},"const a : int = 10 / 3;    // int / int yields int\nconst b : nat = 10n / 3n;  // nat / nat yields nat\nconst c : int = 10n / 3;   // nat / int yields int\nconst d : int = 10 / 3n;   // int / nat yields int\n"))),(0,a.kt)(r.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The binary operator ",(0,a.kt)("inlineCode",{parentName:"p"},"mod")," returns the ",(0,a.kt)("em",null,"positive modulo")," of the\nEuclidean division, that is, the following holds:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"(n*(a/n)+(a%n) == a) && (0n <= a % n) && (a % n < abs(n))")),(0,a.kt)("p",null,"It is overloaded as the Euclidean division ",(0,a.kt)("inlineCode",{parentName:"p"},"/")," to allow for\nall four combinations of natural numbers and integers."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=mod",group:"mod"},"let a : nat = 120  mod 9  // int mod int yields nat\nlet b : nat = 120n mod 9  // nat mod int yields nat\nlet b : nat = 120n mod 9n // nat mod nat yields nat\nlet c : nat = 120  mod 9n // int mod nat yields nat\n"))),(0,a.kt)(r.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The binary operator ",(0,a.kt)("inlineCode",{parentName:"p"},"%")," returns the ",(0,a.kt)("em",null,"positive modulo")," of the\nEuclidean division, that is, the following holds:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"(n*(a/n)+(a%n) == a) && (0n <= a % n) && (a % n < abs(n))")),(0,a.kt)("p",null,"It is overloaded as the Euclidean division ",(0,a.kt)("inlineCode",{parentName:"p"},"/")," to allow for all four\ncombinations of natural numbers and integers."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=mod",group:"mod"},"const a : nat = 120  % 9;  // int % int yields nat\nconst b : nat = 120n % 9;  // nat % int yields nat\nconst c : nat = 120n % 9n; // nat % nat yields nat\nconst d : nat = 120  % 9n; // int % nat yields nat\n"))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"It is possible to obtain both the quotient and remainder together, by\nmeans of the predefined function ",(0,a.kt)("inlineCode",{parentName:"p"},"ediv"),": See ",(0,a.kt)("a",{parentName:"p",href:"/previews/ligo/tacoshop/docs/1.5.0/variants/options"},"optional values"),".")))}u.isMDXComponent=!0}}]);