"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[42607],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},y={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),b=r,m=u["".concat(l,".").concat(b)]||u[b]||y[b]||s;return n?o.createElement(m,a(a({ref:t},p),{},{components:n})):o.createElement(m,a({ref:t},p))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,a=new Array(s);a[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var c=2;c<s;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>r.Z,Z:()=>s});var o=n(67294),r=n(75402);const s=function(e){return o.createElement(r.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:o.createElement(o.Fragment,null)}))}},99191:(e,t,n)=>{n.d(t,{Z:()=>p});var o=n(23746),r=n(67294),s=n(52263),a=n(48720),i=n(87552);function l(){return l=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},l.apply(this,arguments)}const{Prism:c}=n(23746);c.languages={...c.languages,cameligo:{...c.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:c.languages.typescript};const p=function(e){const{siteConfig:{themeConfig:{prism:t={}}}}=(0,s.Z)(),n=t.singleTheme||i.Z,[c,p]=(0,r.useState)(!1);return(0,r.useEffect)((()=>{p(!0)}),[]),r.createElement(a.D.Consumer,null,(t=>{let{syntax:s}=t;return s===e.syntax?r.createElement(o.default,l({},o.defaultProps,{key:c,language:e.syntax,code:e.children,theme:n}),(e=>{let{className:t,tokens:n,getLineProps:o,getTokenProps:s}=e;return r.createElement("h4",{className:t,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((e,t)=>r.createElement("div",o({line:e,key:t}),e.map(((e,t)=>r.createElement("span",s({token:e,key:t}))))))))})):r.createElement("div",null)}))}},65250:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var o=n(87462),r=(n(67294),n(3905)),s=n(48720);n(99191);const a={id:"mumbai",title:"Mumbai",description:"Mumbai changes"},i=void 0,l={unversionedId:"protocol/mumbai",id:"version-1.5.0/protocol/mumbai",title:"Mumbai",description:"Mumbai changes",source:"@site/versioned_docs/version-1.5.0/protocol/mumbai.md",sourceDirName:"protocol",slug:"/protocol/mumbai",permalink:"/previews/ligo/tacoshop/docs/1.5.0/protocol/mumbai",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"mumbai",title:"Mumbai",description:"Mumbai changes"},sidebar:"API",previous:{title:"Lima",permalink:"/previews/ligo/tacoshop/docs/1.5.0/protocol/lima"},next:{title:"Nairobi",permalink:"/previews/ligo/tacoshop/docs/1.5.0/protocol/nairobi"}},c={},p=[{value:"API",id:"api",level:2},{value:"Deprecation",id:"deprecation",level:3},{value:"New operators",id:"new-operators",level:3},{value:"Bitwise operators of <code>bytes</code>",id:"bitwise-operators-of-bytes",level:4},{value:"Conversion between <code>bytes</code>-<code>int</code> &amp; <code>bytes</code>-<code>nat</code>",id:"conversion-between-bytes-int--bytes-nat",level:4}],y={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("h3",{id:"deprecation"},"Deprecation"),(0,r.kt)("p",null,"The type ",(0,r.kt)("inlineCode",{parentName:"p"},"tx_rollup_l2_address")," has been disabled (see the ",(0,r.kt)("a",{parentName:"p",href:"https://octez.tezos.com/docs/protocols/016_mumbai.html#breaking-changes"},"changelog")," for the Mumbai protocol)."),(0,r.kt)("h3",{id:"new-operators"},"New operators"),(0,r.kt)("h4",{id:"bitwise-operators-of-bytes"},"Bitwise operators of ",(0,r.kt)("inlineCode",{parentName:"h4"},"bytes")),(0,r.kt)("p",null,"Bitwise operations are now supported on ",(0,r.kt)("inlineCode",{parentName:"p"},"bytes")),(0,r.kt)(s.Z,{syntax:"pascaligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pascaligo",metastring:"test-ligo group=test_bitwise","test-ligo":!0,group:"test_bitwise"},"const test_foo = {\n  const b_and           = Bitwise.and         (0x0005, 0x0106);\n  const b_or            = Bitwise.or          (0x0005, 0x0106);\n  const b_xor           = Bitwise.xor         (0x0005, 0x0106);\n  const b_shift_left    = Bitwise.shift_left  (0x06  , 8n    );\n  const b_shift_right   = Bitwise.shift_right (0x0006, 1n    );\n} with assert (b_and         = 0x0004 and\n               b_or          = 0x0107 and\n               b_xor         = 0x0103 and\n               b_shift_left  = 0x0600 and\n               b_shift_right = 0x0003   )\n"))),(0,r.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"test-ligo group=test_bitwise","test-ligo":!0,group:"test_bitwise"},"let test_bytes_bitwise_ops  =\n  let b_and         = 0x0005 land 0x0106 in\n  let b_or          = 0x0005 lor  0x0106 in\n  let b_xor         = 0x0005 lxor 0x0106 in\n  let b_shift_left  = 0x06   lsl  8n     in\n  let b_shift_right = 0x0006 lsr  1n     in\n\n  assert (b_and         = 0x0004 &&\n          b_or          = 0x0107 &&\n          b_xor         = 0x0103 &&\n          b_shift_left  = 0x0600 &&\n          b_shift_right = 0x0003  )\n"))),(0,r.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"test-ligo group=test_bitwise","test-ligo":!0,group:"test_bitwise"},"const test_bytes_bitwise_module = (() => {\n  const b_and           = Bitwise.and         (0x0005, 0x0106  );\n  const b_or            = Bitwise.or          (0x0005, 0x0106  );\n  const b_xor           = Bitwise.xor         (0x0005, 0x0106  );\n  const b_shift_left    = Bitwise.shift_left  (0x06  , 8 as nat);\n  const b_shift_right   = Bitwise.shift_right (0x0006, 1 as nat);\n\n  assert (b_and         == 0x0004 &&\n          b_or          == 0x0107 &&\n          b_xor         == 0x0103 &&\n          b_shift_left  == 0x0600 &&\n          b_shift_right == 0x0003  )})()\n"))),(0,r.kt)("h4",{id:"conversion-between-bytes-int--bytes-nat"},"Conversion between ",(0,r.kt)("inlineCode",{parentName:"h4"},"bytes"),"-",(0,r.kt)("inlineCode",{parentName:"h4"},"int")," & ",(0,r.kt)("inlineCode",{parentName:"h4"},"bytes"),"-",(0,r.kt)("inlineCode",{parentName:"h4"},"nat")),(0,r.kt)("p",null,"We can now convert between ",(0,r.kt)("inlineCode",{parentName:"p"},"bytes"),"-",(0,r.kt)("inlineCode",{parentName:"p"},"int")," & ",(0,r.kt)("inlineCode",{parentName:"p"},"bytes"),"-",(0,r.kt)("inlineCode",{parentName:"p"},"nat")," using the functions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"int"),"   (Convert ",(0,r.kt)("inlineCode",{parentName:"li"},"bytes")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"int"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"nat"),"   (Convert ",(0,r.kt)("inlineCode",{parentName:"li"},"bytes")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"nat"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bytes")," (Convert ",(0,r.kt)("inlineCode",{parentName:"li"},"bytes")," to either ",(0,r.kt)("inlineCode",{parentName:"li"},"int")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"nat"),")")),(0,r.kt)(s.Z,{syntax:"pascaligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pascaligo",metastring:"test-ligo group=test_bytes_conv","test-ligo":!0,group:"test_bytes_conv"},"(* bytes -> nat *)\nconst test_bytes_nat = nat(0x1234) // 1234n\n\n(* nat -> bytes *)\nconst test_nat_bytes = bytes(4660n) // 0x1234\n\n(* bytes -> int *)\nconst test_bytes_int = int(0x1234) // 4660\n\n(* int -> bytes *)\nconst test_int_bytes = bytes(4660) // 0x1234\n"))),(0,r.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"test-ligo group=test_bytes_conv","test-ligo":!0,group:"test_bytes_conv"},"(* bytes -> nat *)\nlet test_bytes_nat = nat 0x1234 (* 1234n *)\n\n(* nat -> bytes *)\nlet test_nat_bytes = bytes 4660n (* 0x1234 *)\n\n(* bytes -> int *)\nlet test_bytes_int = int 0x1234 (* 4660 *)\n\n(* int -> bytes *)\nlet test_int_bytes = bytes 4660 (* 0x1234 *)\n"))),(0,r.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"test-ligo group=test_bytes_conv","test-ligo":!0,group:"test_bytes_conv"},"/* bytes -> nat */\nconst test_bytes_nat = nat(0x1234) // (1234 as nat)\n\n/* nat -> bytes */\nconst test_nat_bytes = bytes(4660 as nat) // 0x1234\n\n/* bytes -> int */\nconst test_bytes_int = int(0x1234) // 4660\n\n/* int -> bytes */\nconst test_int_bytes = bytes(4660) // 0x1234\n"))))}u.isMDXComponent=!0},23746:(e,t,n)=>{n.r(t),n.d(t,{Prism:()=>o.Z,default:()=>m,defaultProps:()=>a});var o=n(87410);const r={plain:{backgroundColor:"#2a2734",color:"#9a86fd"},styles:[{types:["comment","prolog","doctype","cdata","punctuation"],style:{color:"#6c6783"}},{types:["namespace"],style:{opacity:.7}},{types:["tag","operator","number"],style:{color:"#e09142"}},{types:["property","function"],style:{color:"#9a86fd"}},{types:["tag-id","selector","atrule-id"],style:{color:"#eeebff"}},{types:["attr-name"],style:{color:"#c4b9fe"}},{types:["boolean","string","entity","url","attr-value","keyword","control","directive","unit","statement","regex","atrule","placeholder","variable"],style:{color:"#ffcc99"}},{types:["deleted"],style:{textDecorationLine:"line-through"}},{types:["inserted"],style:{textDecorationLine:"underline"}},{types:["italic"],style:{fontStyle:"italic"}},{types:["important","bold"],style:{fontWeight:"bold"}},{types:["important"],style:{color:"#c4b9fe"}}]};var s=n(67294),a={Prism:o.Z,theme:r};function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},l.apply(this,arguments)}var c=/\r\n|\r|\n/,p=function(e){0===e.length?e.push({types:["plain"],content:"\n",empty:!0}):1===e.length&&""===e[0].content&&(e[0].content="\n",e[0].empty=!0)},y=function(e,t){var n=e.length;return n>0&&e[n-1]===t?e:e.concat(t)},u=function(e,t){var n=e.plain,o=Object.create(null),r=e.styles.reduce((function(e,n){var o=n.languages,r=n.style;return o&&!o.includes(t)||n.types.forEach((function(t){var n=l({},e[t],r);e[t]=n})),e}),o);return r.root=n,r.plain=l({},n,{backgroundColor:null}),r};function b(e,t){var n={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&-1===t.indexOf(o)&&(n[o]=e[o]);return n}const m=function(e){function t(){for(var t=this,n=[],o=arguments.length;o--;)n[o]=arguments[o];e.apply(this,n),i(this,"getThemeDict",(function(e){if(void 0!==t.themeDict&&e.theme===t.prevTheme&&e.language===t.prevLanguage)return t.themeDict;t.prevTheme=e.theme,t.prevLanguage=e.language;var n=e.theme?u(e.theme,e.language):void 0;return t.themeDict=n})),i(this,"getLineProps",(function(e){var n=e.key,o=e.className,r=e.style,s=l({},b(e,["key","className","style","line"]),{className:"token-line",style:void 0,key:void 0}),a=t.getThemeDict(t.props);return void 0!==a&&(s.style=a.plain),void 0!==r&&(s.style=void 0!==s.style?l({},s.style,r):r),void 0!==n&&(s.key=n),o&&(s.className+=" "+o),s})),i(this,"getStyleForToken",(function(e){var n=e.types,o=e.empty,r=n.length,s=t.getThemeDict(t.props);if(void 0!==s){if(1===r&&"plain"===n[0])return o?{display:"inline-block"}:void 0;if(1===r&&!o)return s[n[0]];var a=o?{display:"inline-block"}:{},i=n.map((function(e){return s[e]}));return Object.assign.apply(Object,[a].concat(i))}})),i(this,"getTokenProps",(function(e){var n=e.key,o=e.className,r=e.style,s=e.token,a=l({},b(e,["key","className","style","token"]),{className:"token "+s.types.join(" "),children:s.content,style:t.getStyleForToken(s),key:void 0});return void 0!==r&&(a.style=void 0!==a.style?l({},a.style,r):r),void 0!==n&&(a.key=n),o&&(a.className+=" "+o),a})),i(this,"tokenize",(function(e,t,n,o){var r={code:t,grammar:n,language:o,tokens:[]};e.hooks.run("before-tokenize",r);var s=r.tokens=e.tokenize(r.code,r.grammar,r.language);return e.hooks.run("after-tokenize",r),s}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.render=function(){var e=this.props,t=e.Prism,n=e.language,o=e.code,r=e.children,s=this.getThemeDict(this.props),a=t.languages[n];return r({tokens:function(e){for(var t=[[]],n=[e],o=[0],r=[e.length],s=0,a=0,i=[],l=[i];a>-1;){for(;(s=o[a]++)<r[a];){var u=void 0,b=t[a],m=n[a][s];if("string"==typeof m?(b=a>0?b:["plain"],u=m):(b=y(b,m.type),m.alias&&(b=y(b,m.alias)),u=m.content),"string"==typeof u){var g=u.split(c),d=g.length;i.push({types:b,content:g[0]});for(var f=1;f<d;f++)p(i),l.push(i=[]),i.push({types:b,content:g[f]})}else a++,t.push(b),n.push(u),o.push(0),r.push(u.length)}a--,t.pop(),n.pop(),o.pop(),r.pop()}return p(i),l}(void 0!==a?this.tokenize(t,o,a,n):[o]),className:"prism-code language-"+n,style:void 0!==s?s.root:{},getLineProps:this.getLineProps,getTokenProps:this.getTokenProps})},t}(s.Component)},87552:(e,t,n)=>{n.d(t,{Z:()=>o});const o={plain:{color:"#bfc7d5",backgroundColor:"#292d3e"},styles:[{types:["comment"],style:{color:"rgb(105, 112, 152)",fontStyle:"italic"}},{types:["string","inserted"],style:{color:"rgb(195, 232, 141)"}},{types:["number"],style:{color:"rgb(247, 140, 108)"}},{types:["builtin","char","constant","function"],style:{color:"rgb(130, 170, 255)"}},{types:["punctuation","selector"],style:{color:"rgb(199, 146, 234)"}},{types:["variable"],style:{color:"rgb(191, 199, 213)"}},{types:["class-name","attr-name"],style:{color:"rgb(255, 203, 107)"}},{types:["tag","deleted"],style:{color:"rgb(255, 85, 114)"}},{types:["operator"],style:{color:"rgb(137, 221, 255)"}},{types:["boolean"],style:{color:"rgb(255, 88, 116)"}},{types:["keyword"],style:{fontStyle:"italic"}},{types:["doctype"],style:{color:"rgb(199, 146, 234)",fontStyle:"italic"}},{types:["namespace"],style:{color:"rgb(178, 204, 214)"}},{types:["url"],style:{color:"rgb(221, 221, 221)"}}]}}}]);