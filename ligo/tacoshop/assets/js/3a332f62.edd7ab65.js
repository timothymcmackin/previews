"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[36673],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),f=c(n),m=i,g=f["".concat(s,".").concat(m)]||f[m]||u[m]||a;return n?r.createElement(g,l(l({ref:t},p),{},{components:n})):r.createElement(g,l({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=f;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var c=2;c<a;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>i.Z,Z:()=>a});var r=n(67294),i=n(75402);const a=function(e){return r.createElement(i.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},69048:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>f,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var r=n(87462),i=(n(67294),n(3905)),a=n(48720);const l={id:"iterating",title:"Iterating"},o=void 0,s={unversionedId:"lists/iterating",id:"version-1.6.0/lists/iterating",title:"Iterating",description:"The iterated operation is an iteration over the list with a unit",source:"@site/versioned_docs/version-1.6.0/lists/iterating.md",sourceDirName:"lists",slug:"/lists/iterating",permalink:"/previews/ligo/tacoshop/docs/1.6.0/lists/iterating",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"iterating",title:"Iterating"}},c={},p=[],u={toc:p};function f(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"iterated operation")," is an iteration over the list with a unit\nreturn value. It is useful to enforce certain invariants on the\nelement of a list, or else fail."),(0,i.kt)("p",null,"For example you might want to check that each value inside of a list\nis within a certain range, and fail otherwise. The predefined\nfunctional iterator implementing the iterated operation over lists is\ncalled ",(0,i.kt)("inlineCode",{parentName:"p"},"List.iter"),"."),(0,i.kt)("p",null,"In the following example, a list is iterated to check that all its\nelements (integers) are strictly greater than ",(0,i.kt)("inlineCode",{parentName:"p"},"3"),"."),(0,i.kt)(a.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=iterating_lists",group:"iterating_lists"},"let assert_all_greater_than_three (l : int list) : unit =\n  List.iter (fun i -> assert (i > 3)) l\n")),(0,i.kt)("p",null,"See predefined\n",(0,i.kt)("a",{parentName:"p",href:"../reference/list-reference/?lang=cameligo"},"module List"),".")),(0,i.kt)(a.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=iterating_lists",group:"iterating_lists"},"const assert_all_greater_than_three = (l: list<int>): unit =>\n  List.iter (i => assert (i > 3), l);\n")),(0,i.kt)("p",null,"See predefined\n",(0,i.kt)("a",{parentName:"p",href:"../reference/list-reference/?lang=jsligo"},"namespace List"),".")))}f.isMDXComponent=!0}}]);