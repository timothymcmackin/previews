"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[17361],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(n),d=a,g=m["".concat(c,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>o});var r=n(67294),a=n(75402);const o=function(e){return r.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},38275:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var r=n(87462),a=(n(67294),n(3905)),o=n(48720);const i={id:"contract_of",title:"Contract of module/namespace"},s=void 0,c={unversionedId:"tezos/contracts/contract_of",id:"version-1.6.0/tezos/contracts/contract_of",title:"Contract of module/namespace",description:"For technical reasons, contracts are not modules, and modules are not",source:"@site/versioned_docs/version-1.6.0/tezos/contracts/contract_of.md",sourceDirName:"tezos/contracts",slug:"/tezos/contracts/contract_of",permalink:"/previews/ligo/tacoshop/docs/1.6.0/tezos/contracts/contract_of",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"contract_of",title:"Contract of module/namespace"},sidebar:"docs",previous:{title:"Contracts",permalink:"/previews/ligo/tacoshop/docs/1.6.0/tezos/contracts/"},next:{title:"Michelson",permalink:"/previews/ligo/tacoshop/docs/1.6.0/tezos/contracts/michelson"}},l={},p=[],u={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"For technical reasons, contracts are not modules, and modules are not\ncontracts. In order to use a module as contract, it needs to hold\nfunctions with the type of an entrypoint, these need to be attributed\nas ",(0,a.kt)("inlineCode",{parentName:"p"},"[@entry]"),"."),(0,a.kt)("p",null,"When declaring the entry points of a contract using ",(0,a.kt)("inlineCode",{parentName:"p"},"@entry"),", LIGO generates two hidden values in the module:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"an implicit ",(0,a.kt)("inlineCode",{parentName:"li"},"main")," function, which can be obtained using the keyword ",(0,a.kt)("inlineCode",{parentName:"li"},"contract_of(C)")," where ",(0,a.kt)("inlineCode",{parentName:"li"},"C")," is the namespace or module containing the entry points, and"),(0,a.kt)("li",{parentName:"ul"},"the input type for that ",(0,a.kt)("inlineCode",{parentName:"li"},"main")," function, which can be obtained using the keyword ",(0,a.kt)("inlineCode",{parentName:"li"},"parameter_of C"),".")),(0,a.kt)("p",null,"In the example below, ",(0,a.kt)("inlineCode",{parentName:"p"},"contract_of(C)")," is returns the implicitly-declared ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," function that calls the ",(0,a.kt)("inlineCode",{parentName:"p"},"increment")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"decrement")," entry points depending on the argument given, and ",(0,a.kt)("inlineCode",{parentName:"p"},"parameter_of C")," is the ",(0,a.kt)("a",{parentName:"p",href:"https://ligolang.org/docs/language-basics/unit-option-pattern-matching#variant-types"},"variant")," ",(0,a.kt)("inlineCode",{parentName:"p"},'["Increment", int] | ["Decrement", int]'),"."),(0,a.kt)("p",null,"for example for testing, we need the\nbuilt-in function ",(0,a.kt)("inlineCode",{parentName:"p"},"contract_of"),". It is built-in (and a keyword)\nbecause it takes a module as parameter, and the type system of LIGO\nhas also a predefined type for its return value: ",(0,a.kt)("inlineCode",{parentName:"p"},"('param, 'storage)\nmodule_contract"),", but not the full type."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=contract_of",group:"contract_of"},"type storage = int\ntype return = operation list * storage\n\nmodule C = struct\n  [@entry]\n  let decrement (param : int) (storage : storage) : return =\n    [], storage   - param\n\n  [@entry]\n  let increment (param : int) (storage : storage) : return =\n    [], storage + param\n\n  [@entry]\n  let reset () (_ : storage) : return = [], 0\nend\n\nlet test_initial_storage () : unit =\n  let init_storage = 42 in\n  let fee = 0mutez in\n  let orig = Test.Next.originate (contract_of C) init_storage fee in\n  let new_storage = Test.Next.Typed_address.get_storage orig.taddr\n  in assert (new_storage = init_storage)\n"))),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"For technical reasons, contracts are not namespaces, and namespaces\nare not contracts. In order to use a namespace that contains functions\nwith the type of an entrypoint, and that are decorated as ",(0,a.kt)("inlineCode",{parentName:"p"},"@entry"),", as\na contract, for example for testing, we need the built-in function\n",(0,a.kt)("inlineCode",{parentName:"p"},"contract_of"),". It is built-in (and a keyword) because it takes a\nmodule as parameter, and the type system of LIGO has also a predefined\ntype for its return value: ",(0,a.kt)("inlineCode",{parentName:"p"},"module_contract<param, storage>"),", but not\nthe full type."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=contract_of",group:"contract_of"},"type storage = int;\ntype @return = [list<operation>, storage];\n\nnamespace C {\n  @entry\n  const decrement = (param: int, storage: storage) : @return =>\n    [[], storage - param];\n\n  @entry\n  const increment = (param: int, storage: storage) : @return =>\n    [[], storage + param];\n\n  @entry\n  const reset = (_unit: unit, _storage: storage) : @return =>\n    [[], 0];\n}\n\nconst test_initial_storage = () : unit => {\n  const init_storage = 42;\n  const fee = 0mutez;\n  const orig = Test.Next.originate (contract_of(C), init_storage, fee);\n  const new_storage = Test.Next.Typed_address.get_storage(orig.taddr);\n  assert(new_storage == init_storage);\n}\n"))))}m.isMDXComponent=!0}}]);