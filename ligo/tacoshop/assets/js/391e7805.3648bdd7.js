"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[53581],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>y});var r=o(67294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(o),y=n,f=u["".concat(s,".").concat(y)]||u[y]||m[y]||a;return o?r.createElement(f,i(i({ref:t},p),{},{components:o})):r.createElement(f,i({ref:t},p))}));function y(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,i=new Array(a);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var c=2;c<a;c++)i[c]=o[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,o)}u.displayName="MDXCreateElement"},48720:(e,t,o)=>{o.d(t,{D:()=>n.Z,Z:()=>a});var r=o(67294),n=o(75402);const a=function(e){return r.createElement(n.Z.Consumer,null,(t=>{let{syntax:o}=t;return o===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},51814:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=o(87462),n=(o(67294),o(3905)),a=o(48720);const i={id:"polymorphic-comparison",title:"How to write a polymorphic comparison function ?"},l=void 0,s={unversionedId:"faq/polymorphic-comparison",id:"version-1.6.0/faq/polymorphic-comparison",title:"How to write a polymorphic comparison function ?",description:"I'm trying to write some functions in (came)ligo that compare several values as long as they are ints, strings, or nats. compare_equal is one of them.",source:"@site/versioned_docs/version-1.6.0/faq/polymorphic-comparison.md",sourceDirName:"faq",slug:"/faq/polymorphic-comparison",permalink:"/previews/ligo/tacoshop/docs/1.6.0/faq/polymorphic-comparison",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"polymorphic-comparison",title:"How to write a polymorphic comparison function ?"},sidebar:"faq",previous:{title:"How to convert an address to a contract in LIGO testing framework ?",permalink:"/previews/ligo/tacoshop/docs/1.6.0/faq/convert-address-to-contract"},next:{title:"How to catch an error thrown in a view ?",permalink:"/previews/ligo/tacoshop/docs/1.6.0/faq/catch-error-view"}},c={},p=[],m={toc:p};function u(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,r.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)(a.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"I'm trying to write some functions in (came)ligo that compare several values as long as they are ints, strings, or nats. compare_equal is one of them."),(0,n.kt)("p",{parentName:"blockquote"},"This errors out with Only composed types of not more than two element are allowed to be compared."),(0,n.kt)("pre",{parentName:"blockquote"},(0,n.kt)("code",{parentName:"pre",className:"language-cameligo"},"let compare_equal (type k) (a, b: k * k) : bool =\n    if(a = b) then true\n    else false\n")),(0,n.kt)("p",{parentName:"blockquote"},"Is it possible to convert a and b to their composed types?"),(0,n.kt)("pre",{parentName:"blockquote"},(0,n.kt)("code",{parentName:"pre",className:"language-cameligo"},"let compare_equal (type k) (a, b: k * k) : bool =\n    match a with\n        int(v) -> if(a=b) then true else false\n     |  string(v) -> if(a=b) then true else false\n")))),(0,n.kt)(a.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"I'm trying to write some functions in (came)ligo that compare several values as long as they are ints, strings, or nats. compare_equal is one of them."),(0,n.kt)("p",{parentName:"blockquote"},"This errors out with Only composed types of not more than two element are allowed to be compared."),(0,n.kt)("pre",{parentName:"blockquote"},(0,n.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"skip",skip:!0},"const compare_equal = <k>(a : k, b: k) : bool => {\n    if (a == b) {\n      return true;\n    } else {\n      return false;\n    }\n}\n")),(0,n.kt)("p",{parentName:"blockquote"},"Is it possible to convert a and b to their composed types?"),(0,n.kt)("pre",{parentName:"blockquote"},(0,n.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"skip",skip:!0},"const compare_equal = <k>(a : k, b: k) : bool =>\n    match (a) {\n      when(int(v)): do { if (a = b) { return true; } else { return false; } };\n      when(string(v)): do { if (a = b) { return true; } else { return false; } };\n    }\n")))),(0,n.kt)("p",null,"The problem here is that LIGO usually tries to prevent you from seeing Michelson typechecking errors, by raising errors early when you do something that might cause a Michelson typechecking error."),(0,n.kt)("p",null,"If LIGO allowed comparisons ",(0,n.kt)("inlineCode",{parentName:"p"},"a = b"),' on any types, you might get such\nan error -- because not all types are "comparable" in Michelson -- and\nit might be difficult to understand the raw Michelson error, or for\nLIGO to explain the error to you in terms of your source program.'),(0,n.kt)("p",null,'In the meantime, if you are willing to risk seeing a Michelson\ntypechecking error, it is possible to work around this by using\n"unsafe" inline Michelson:'),(0,n.kt)(a.Z,{syntax:"camligo",mdxType:"Syntax"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cameligo"},"[@inline] let compare_equal (type k) (a : k) (b : k) =\n  [%Michelson ({|{ UNPAIR; COMPARE; EQ }|} : k * k -> bool)] (a, b)\n"))),(0,n.kt)(a.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsligo"},"// @inline\nconst compare_equal = <k>(a : k, b : k) : bool =>\n  (Michelson `{ UNPAIR; COMPARE; EQ }` as ((x : [k, k]) => bool)) ([a, b])\n"))),(0,n.kt)("p",null,"If you apply this to types which aren't comparable in Michelson, you will get a Michelson typechecking error."))}u.isMDXComponent=!0}}]);