"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[16688],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>c});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),u=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(n),c=i,g=d["".concat(p,".").concat(c)]||d[c]||m[c]||o;return n?a.createElement(g,r(r({ref:t},s),{},{components:n})):a.createElement(g,r({ref:t},s))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var u=2;u<o;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>i.Z,Z:()=>o});var a=n(67294),i=n(75402);const o=function(e){return a.createElement(i.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},26094:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>p,toc:()=>s});var a=n(87462),i=(n(67294),n(3905)),o=n(48720);const r={id:"tez",title:"tez"},l=void 0,p={unversionedId:"tezos/tez",id:"version-1.6.0/tezos/tez",title:"tez",description:"LIGO offers some Tezos-specific data types. Here we list some of",source:"@site/versioned_docs/version-1.6.0/tezos/tez.md",sourceDirName:"tezos",slug:"/tezos/tez",permalink:"/previews/ligo/tacoshop/docs/1.6.0/tezos/tez",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"tez",title:"tez"},sidebar:"docs",previous:{title:"Comparing",permalink:"/previews/ligo/tacoshop/docs/1.6.0/tezos/timestamp/comparing"},next:{title:"The Chain Identifier",permalink:"/previews/ligo/tacoshop/docs/1.6.0/tezos/chain_id"}},u={},s=[{value:"Adding",id:"adding",level:3},{value:"Subtracting",id:"subtracting",level:3},{value:"Multiplying",id:"multiplying",level:3},{value:"Dividing",id:"dividing",level:3},{value:"Euclidean Division",id:"euclidean-division",level:2}],m={toc:s};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"LIGO offers some Tezos-specific data types. Here we list some of\nthem. Others have their own dedicated section."),(0,i.kt)("p",null,"The token unit on Tezos is called ",(0,i.kt)("inlineCode",{parentName:"p"},"tez")," in LIGO. There are several\nways to write literal values of type ",(0,i.kt)("inlineCode",{parentName:"p"},"tez"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"units of millionth of ",(0,i.kt)("inlineCode",{parentName:"li"},"tez"),", using the suffix ",(0,i.kt)("inlineCode",{parentName:"li"},"mutez")," after a\nnatural number, like ",(0,i.kt)("inlineCode",{parentName:"li"},"10000mutez")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"0mutez"),";"),(0,i.kt)("li",{parentName:"ul"},"units of ",(0,i.kt)("inlineCode",{parentName:"li"},"tez"),", using the suffix ",(0,i.kt)("inlineCode",{parentName:"li"},"tz")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"tez"),", like ",(0,i.kt)("inlineCode",{parentName:"li"},"3tz")," or\n",(0,i.kt)("inlineCode",{parentName:"li"},"3tez"),";"),(0,i.kt)("li",{parentName:"ul"},"decimal amounts of ",(0,i.kt)("inlineCode",{parentName:"li"},"tz")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"tez"),", like ",(0,i.kt)("inlineCode",{parentName:"li"},"12.3tz")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"12.4tez"),".")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The type is ",(0,i.kt)("inlineCode",{parentName:"p"},"tez"),", ",(0,i.kt)("em",{parentName:"p"},"not")," ",(0,i.kt)("inlineCode",{parentName:"p"},"mutez")," --- which is a suffix to write\nliterals.")),(0,i.kt)("p",null,"Note that large amounts, like with numerical values of type ",(0,i.kt)("inlineCode",{parentName:"p"},"int")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"nat"),", can be expressed using underscores to separate groups of\ndigits, like ",(0,i.kt)("inlineCode",{parentName:"p"},"1_000mutez")," (one thousand mutez) or ",(0,i.kt)("inlineCode",{parentName:"p"},"0.000_004tez"),"."),(0,i.kt)("h3",{id:"adding"},"Adding"),(0,i.kt)("p",null,"Addition in LIGO is accomplished by means of the ",(0,i.kt)("inlineCode",{parentName:"p"},"+")," infix\noperator. Some type constraints apply, for example you cannot add a\nvalue of type ",(0,i.kt)("inlineCode",{parentName:"p"},"tez")," to a value of type ",(0,i.kt)("inlineCode",{parentName:"p"},"nat"),"."),(0,i.kt)("p",null,"In the following example you can find a series of arithmetic\noperations, including various numerical types. However, some bits\nremain in comments as they would otherwise not compile, for example,\nadding a value of type ",(0,i.kt)("inlineCode",{parentName:"p"},"int")," to a value of type ",(0,i.kt)("inlineCode",{parentName:"p"},"tez")," is invalid. Note\nthat adding an integer to a natural number produces an integer."),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=tez",group:"tez"},"let sum : tez = 5mutez + 0.000_010tez\n"))),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=tez",group:"tez"},"const sum: tez = 5mutez + 1tez;\n"))),(0,i.kt)("h3",{id:"subtracting"},"Subtracting"),(0,i.kt)("p",null,"Since subtracting two amounts could result in a negative amount,\nsubtraction of two ",(0,i.kt)("inlineCode",{parentName:"p"},"tez")," amounts result in an\n",(0,i.kt)("a",{parentName:"p",href:"/previews/ligo/tacoshop/docs/1.6.0/variants/options"},"optional amount"),", like so:"),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=tez",group:"tez"},"let amount : tez option = 5mutez - 1mutez (* Some (4mutez) *)\nlet negative : tez option = 1mutez - 5mutez (* None *)\n"))),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=tez",group:"tez"},"const amount: option<tez> = 5mutez - 1mutez; /* Some (4mutez) */\nconst negative: option<tez> = 1mutez - 5mutez; /* None */\n"))),(0,i.kt)("h3",{id:"multiplying"},"Multiplying"),(0,i.kt)("p",null,"You can multiply ",(0,i.kt)("inlineCode",{parentName:"p"},"nat")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tez")," values:"),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=tez",group:"tez"},"let mult : tez = 5n * 5mutez\n"))),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=tez",group:"tez"},"const mult: tez = 5n * 5mutez;\n"))),(0,i.kt)("h3",{id:"dividing"},"Dividing"),(0,i.kt)("p",null,"The division of two ",(0,i.kt)("inlineCode",{parentName:"p"},"tez")," values results into a ",(0,i.kt)("inlineCode",{parentName:"p"},"nat"),"."),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=tez",group:"tez"},"let div : nat = 10mutez / 3mutez\n"))),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=tez",group:"tez"},"const div: nat = 10mutez / 3mutez;\n"))),(0,i.kt)("h2",{id:"euclidean-division"},"Euclidean Division"),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"For cases when you need both the quotient and the remainder, LIGO\nprovides the ",(0,i.kt)("inlineCode",{parentName:"p"},"ediv")," operation. ",(0,i.kt)("inlineCode",{parentName:"p"},"ediv x y")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"Some (quotient,\nremainder)"),", unless ",(0,i.kt)("inlineCode",{parentName:"p"},"y")," is zero, in which case it returns ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),". The\nfunction ",(0,i.kt)("inlineCode",{parentName:"p"},"ediv")," is overloaded to accept tez, beyond all the\ncombinations of natural and integer numbers:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=tez_euclidean",group:"tez_euclidean"},"// Some (7, 2mutez)\nlet ediv1 : (nat * tez) option = ediv 37mutez 5mutez\n\n// Some (7mutez, 2mutez)\nlet ediv2 : (tez * tez) option = ediv 37mutez 5n\n"))),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"For cases when you need both the quotient and the remainder, LIGO\nprovides the ",(0,i.kt)("inlineCode",{parentName:"p"},"ediv")," operation. ",(0,i.kt)("inlineCode",{parentName:"p"},"ediv(x,y)")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"Some (quotient,\nremainder)"),", unless ",(0,i.kt)("inlineCode",{parentName:"p"},"y")," is zero, in which case it returns ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),". The\nfunction ",(0,i.kt)("inlineCode",{parentName:"p"},"ediv")," is overloaded to accept tez, beyond all the\ncombinations of natural and integer numbers:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=tez_euclidean",group:"tez_euclidean"},"// Some (7, 2mutez)\nconst ediv1: option<[nat, tez]> = ediv(37mutez, 5mutez);\n\n// Some (7mutez, 2mutez)\nconst ediv2: option<[tez, tez]> = ediv(37mutez, 5n);\n"))))}d.isMDXComponent=!0}}]);