"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[17134],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,g=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(g,s(s({ref:t},p),{},{components:n})):a.createElement(g,s({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>r.Z,Z:()=>o});var a=n(67294),r=n(75402);const o=function(e){return a.createElement(r.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},21615:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var a=n(87462),r=(n(67294),n(3905)),o=n(48720);const s={id:"constants",title:"Constants"},i=void 0,c={unversionedId:"constants/constants",id:"version-1.6.0/constants/constants",title:"Constants",description:"Constants are defined by assigning the value of an expression to a",source:"@site/versioned_docs/version-1.6.0/constants/constants.md",sourceDirName:"constants",slug:"/constants/",permalink:"/previews/ligo/tacoshop/docs/1.6.0/constants/",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"constants",title:"Constants"},sidebar:"docs",previous:{title:"Escaped variables",permalink:"/previews/ligo/tacoshop/docs/1.6.0/keywords/escaped_vars"},next:{title:"Silent variables",permalink:"/previews/ligo/tacoshop/docs/1.6.0/constants/silent_vars"}},l={},p=[],u={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Constants are defined by assigning the value of an expression to a\nvariable (that is, a value name). They are immutable by design, which\nmeans that their values cannot be reassigned. Put in another way, they\ncan be assigned once, at their declaration. When defining a constant\nyou can also ascribe a type to it."),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("p",null,"Constant declarations are introduced by the keyword ",(0,r.kt)("inlineCode",{parentName:"p"},"let"),", like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=constants",group:"constants"},"let a = 1\nlet b : int = a // Type ascription (a.k.a. annotation)\n")),(0,r.kt)("p",null,"Note that constants can be redefined in the same scope:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=constants",group:"constants"},"let x = 1\nlet x = 2 // No error: this x shadows the previous one.\n")),(0,r.kt)("p",null,"This is also called ",(0,r.kt)("em",{parentName:"p"},"shadowing"),".")),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("p",null,"Constant declarations are introduced by the keyword ",(0,r.kt)("inlineCode",{parentName:"p"},"const"),", like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=constants",group:"constants"},"const a = 1;\nconst b : int = a; // Type ascription (a.k.a. annotation)\n")),(0,r.kt)("p",null,"Note that constants cannot be redefined in the same block scope:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"skip",skip:!0},"const x = 1;\nconst x = 2; // Yields an error\n")),(0,r.kt)("p",null,"However, the following does work:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=constants",group:"constants"},"const d = do {\n  const x = 1;\n  {\n    const x = 2; // No error: a sub-block\n    return x;\n  }\n};\n"))))}d.isMDXComponent=!0}}]);