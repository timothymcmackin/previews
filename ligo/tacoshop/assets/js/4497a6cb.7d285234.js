"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[16538],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(r),d=o,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||a;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},48720:(e,t,r)=>{r.d(t,{D:()=>o.Z,Z:()=>a});var n=r(67294),o=r(75402);const a=function(e){return n.createElement(o.Z.Consumer,null,(t=>{let{syntax:r}=t;return r===e.syntax?e.children:n.createElement(n.Fragment,null)}))}},88166:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=r(87462),o=(r(67294),r(3905)),a=r(48720);const i={id:"decorators",title:"Attributes/Decorators"},s=void 0,l={unversionedId:"tezos/decorators/decorators",id:"version-1.5.0/tezos/decorators/decorators",title:"Attributes/Decorators",description:"It is sometimes useful or necessary to modify the default semantics of",source:"@site/versioned_docs/version-1.5.0/tezos/decorators/decorators.md",sourceDirName:"tezos/decorators",slug:"/tezos/decorators/",permalink:"/previews/ligo/tacoshop/docs/1.5.0/tezos/decorators/",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"decorators",title:"Attributes/Decorators"},sidebar:"docs",previous:{title:"Updating",permalink:"/previews/ligo/tacoshop/docs/1.5.0/tezos/big_sets/updating"},next:{title:"annot",permalink:"/previews/ligo/tacoshop/docs/1.5.0/tezos/decorators/annot"}},c={},p=[{value:"Internal attributes",id:"internal-attributes",level:2}],u={toc:p};function m(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(a.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("p",null,"It is sometimes useful or necessary to modify the default semantics of\na LIGO construct. This is done by annotating the construct with an\n",(0,o.kt)("em",{parentName:"p"},"attribute"),". Attributes have one of the three forms:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"[@name_of_attribute]"),","),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},'[@name_of_attribute "Some string"]'),","),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"[@name_of_attribute name]"),".")),(0,o.kt)("p",null,"Attributes are located just before the construct they apply to,\ncontrary to OCaml. (Also, contrary to OCaml, LIGO attributes only have\none\n",(0,o.kt)("inlineCode",{parentName:"p"},"[@")," opening syntax.) Attributes can be composed by simple juxtaposition, like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=attributes",group:"attributes"},"type storage = int\ntype result = operation list * storage\n\n[@entry] [@no_mutation]\nlet sub (delta : int) (store : storage) : result =\n  [], store - delta\n")),(0,o.kt)("h2",{id:"internal-attributes"},"Internal attributes"),(0,o.kt)("p",null,"Furthermore, the following attributes are used internally by the\ncompiler. You may encounter them when exporting the Abstract Syntax\nTree (AST) after a certain compilation pass, but they should not\nappear in normal source code:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"[@thunk]")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"[@hidden]")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"[@public]")))),(0,o.kt)(a.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("p",null,"It is sometimes useful or necessary to modify the default semantics of\na LIGO construct. This is done by annotating the construct with a\n",(0,o.kt)("em",{parentName:"p"},"decorator"),". Decorators have one of the two forms:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"@name_of_decorator"),","),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},'@name_of_decorator("Some string")'),".")),(0,o.kt)("p",null,"Decorators are located just before the construct they apply to. Note\nthat the lexical convention for decorators clashes with that of\n",(0,o.kt)("a",{parentName:"p",href:"/previews/ligo/tacoshop/docs/1.5.0/keywords/escaped_vars"},"escaped variables"),", therefore\n",(0,o.kt)("em",{parentName:"p"},"predefined decorators cannot be variables.")),(0,o.kt)("p",null,"Decorators can be composed by simple juxtaposition, like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=decorators",group:"decorators"},"type storage = int;\ntype result = [list<operation>, storage];\n\n@entry @no_mutation\nconst sub = (delta: int, store: storage) : result =>\n  [list([]), store - delta];\n"))))}m.isMDXComponent=!0}}]);