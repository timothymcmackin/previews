"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[14124],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),f=s(r),m=o,d=f["".concat(l,".").concat(m)]||f[m]||u[m]||a;return r?n.createElement(d,i(i({ref:t},p),{},{components:r})):n.createElement(d,i({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},48720:(e,t,r)=>{r.d(t,{D:()=>o.Z,Z:()=>a});var n=r(67294),o=r(75402);const a=function(e){return n.createElement(o.Z.Consumer,null,(t=>{let{syntax:r}=t;return r===e.syntax?e.children:n.createElement(n.Fragment,null)}))}},11252:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=r(87462),o=(r(67294),r(3905)),a=r(48720);const i={id:"catch-error-view",title:"How to catch an error thrown in a view ?"},c=void 0,l={unversionedId:"faq/catch-error-view",id:"version-1.6.0/faq/catch-error-view",title:"How to catch an error thrown in a view ?",description:"Error thrown by calling failwith cannot be caught, the call is compiled to Michelson's FAILWITH instruction.",source:"@site/versioned_docs/version-1.6.0/faq/catch-error-view.md",sourceDirName:"faq",slug:"/faq/catch-error-view",permalink:"/previews/ligo/tacoshop/docs/1.6.0/faq/catch-error-view",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"catch-error-view",title:"How to catch an error thrown in a view ?"},sidebar:"faq",previous:{title:"How to write a polymorphic comparison function ?",permalink:"/previews/ligo/tacoshop/docs/1.6.0/faq/polymorphic-comparison"},next:{title:"What are the differences between syntaxes of CameLIGO and OCaml ?",permalink:"/previews/ligo/tacoshop/docs/1.6.0/faq/cameligo-ocaml-syntax-diff"}},s={},p=[],u={toc:p};function f(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Error thrown by calling ",(0,o.kt)("inlineCode",{parentName:"p"},"failwith")," cannot be caught, the call is compiled to Michelson's ",(0,o.kt)("inlineCode",{parentName:"p"},"FAILWITH")," instruction."),(0,o.kt)("p",null,"Therefore, if the error does not need to carry information, you can\nsimply use the type ",(0,o.kt)("inlineCode",{parentName:"p"},"option")," where ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," means that an error\noccurred.  If you need more information on the kind of error, you can\neither add variants to the correct values if their type is a sum type,\nor define your own type result like in OCaml:"),(0,o.kt)(a.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("p",null,"In CameLIGO:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=failwith_view",group:"failwith_view"},"type ('success,'failure) result =\n| Ok of 'success\n| Error of 'failure\n"))),(0,o.kt)(a.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("p",null,"In JsLIGO:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=failwith_view",group:"failwith_view"},'type result<success,failure> =\n| ["Ok", success]\n| ["Error", failure]\n'))),(0,o.kt)("p",null,"An exception (pun not intended) to this is that when using the test framework, some functions are able to detect a ",(0,o.kt)("inlineCode",{parentName:"p"},"failwith")," raised by one of their callbacks, and return a different result based on the success or failure."),(0,o.kt)("p",null,"For example, the ",(0,o.kt)("a",{parentName:"p",href:"/previews/ligo/tacoshop/docs/1.6.0/reference/test-reference"},"Test.transfer")," function catches errors raised with ",(0,o.kt)("inlineCode",{parentName:"p"},"failwith")," and converts them to a result of type ",(0,o.kt)("inlineCode",{parentName:"p"},"type test_exec_result = Success of nat | Fail of test_exec_error"),".\nThis allows the programmer to write positive and negative test, checking that the contract runs as intended and fails as intended."))}f.isMDXComponent=!0}}]);