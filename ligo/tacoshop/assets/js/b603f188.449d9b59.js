"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[52846],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var l=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},i=Object.keys(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=l.createContext({}),p=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return l.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},y=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),y=p(n),d=a,k=y["".concat(s,".").concat(d)]||y[d]||c[d]||i;return n?l.createElement(k,o(o({ref:t},m),{},{components:n})):l.createElement(k,o({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=y;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:a,o[1]=r;for(var p=2;p<i;p++)o[p]=n[p];return l.createElement.apply(null,o)}return l.createElement.apply(null,n)}y.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>i});var l=n(67294),a=n(75402);const i=function(e){return l.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:l.createElement(l.Fragment,null)}))}},99191:(e,t,n)=>{n.d(t,{Z:()=>m});var l=n(23746),a=n(67294),i=n(52263),o=n(48720),r=n(87552);function s(){return s=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(e[l]=n[l])}return e},s.apply(this,arguments)}const{Prism:p}=n(23746);p.languages={...p.languages,cameligo:{...p.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:p.languages.typescript};const m=function(e){const{siteConfig:{themeConfig:{prism:t={}}}}=(0,i.Z)(),n=t.singleTheme||r.Z,[p,m]=(0,a.useState)(!1);return(0,a.useEffect)((()=>{m(!0)}),[]),a.createElement(o.D.Consumer,null,(t=>{let{syntax:i}=t;return i===e.syntax?a.createElement(l.default,s({},l.defaultProps,{key:p,language:e.syntax,code:e.children,theme:n}),(e=>{let{className:t,tokens:n,getLineProps:l,getTokenProps:i}=e;return a.createElement("h4",{className:t,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((e,t)=>a.createElement("div",l({line:e,key:t}),e.map(((e,t)=>a.createElement("span",i({token:e,key:t}))))))))})):a.createElement("div",null)}))}},50276:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>p,toc:()=>c});var l=n(87462),a=(n(67294),n(3905)),i=n(48720),o=n(99191);const r={id:"set-reference",title:"set",hide_table_of_contents:!0},s=void 0,p={unversionedId:"reference/set-reference",id:"reference/set-reference",title:"set",description:"Totally ordered sets",source:"@site/../docs/reference/set.md",sourceDirName:"reference",slug:"/reference/set-reference",permalink:"/previews/ligo/tacoshop/docs/next/reference/set-reference",draft:!1,tags:[],version:"current",frontMatter:{id:"set-reference",title:"set",hide_table_of_contents:!0},sidebar:"API",previous:{title:"bitwise",permalink:"/previews/ligo/tacoshop/docs/next/reference/bitwise-reference"},next:{title:"toplevel",permalink:"/previews/ligo/tacoshop/docs/next/reference/toplevel-reference"}},m={},c=[],y={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,l.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Totally ordered sets"),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type 'elt t = 'elt set"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type t<elt> = set<elt>"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The type ",(0,a.kt)("inlineCode",{parentName:"p"},"'elt Set.t")," is an alias for ",(0,a.kt)("inlineCode",{parentName:"p"},"'elt set"),".")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The type ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.t<elt>")," is an alias for ",(0,a.kt)("inlineCode",{parentName:"p"},"set<elt>"),".")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val empty : 'elt.'elt t"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let empty: <elt>t<elt>"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The value ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.empty")," denotes the empty set. In some contexts, it is\nuseful to annotate it with its type, for example:\n",(0,a.kt)("inlineCode",{parentName:"p"},"(Set.empty : int set)"),".")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The value ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.empty")," denotes the empty set. In some contexts, it is\nuseful to annotate it with its type, for example:\n",(0,a.kt)("inlineCode",{parentName:"p"},"(Set.empty as set<int>)"),".")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val update : 'elt.'elt -> bool -> 'elt t -> 'elt t"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let update: <elt>(_: elt) => (_: bool) => (_: t<elt>) => t<elt>"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.update elt true set")," is a copy of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),"\ncontaining the element ",(0,a.kt)("inlineCode",{parentName:"p"},"elt"),". The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.update elt false set")," is a\ncopy of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," where the element ",(0,a.kt)("inlineCode",{parentName:"p"},"elt")," is absent.")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.update(elt, true, set)")," is a copy of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),"\ncontaining the element ",(0,a.kt)("inlineCode",{parentName:"p"},"elt"),". The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.update(elt, false, set)")," is a\ncopy of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," where the element ",(0,a.kt)("inlineCode",{parentName:"p"},"elt")," is absent.")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val add : 'elt.'elt -> 'elt t -> 'elt t"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let add: <elt>(_: elt) => (_: t<elt>) => t<elt>"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.add elt set")," is a set containing all the elements of\nthe set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),", plus the element ",(0,a.kt)("inlineCode",{parentName:"p"},"elt"),".")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.add(elt, set)")," is a set containing all the elements of\nthe set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),", plus the element ",(0,a.kt)("inlineCode",{parentName:"p"},"elt"),".")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val remove : 'elt.'elt -> 'elt t -> 'elt t"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let remove: <elt>(_: elt) => (_: t<elt>) => t<elt>"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.remove elt set")," is a copy of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," without the\nelement ",(0,a.kt)("inlineCode",{parentName:"p"},"elt"),".")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.remove(elt, set)")," is a copy of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," without the\nelement ",(0,a.kt)("inlineCode",{parentName:"p"},"elt"),".")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val literal : 'elt.'elt list -> 'elt t"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let literal: <elt>(_: list<elt>) => t<elt>"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.literal [e1; ...; en]")," is a set containing exactly the\nelements in the list. Note: The list must be literal, not an\nexpression (compile-time list of values).")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.literal(list([e1, ..., en]))")," is a set containing\nexactly the elements in the list. Note: The list must be literal,\nnot an expression (compile-time list of values).")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val of_list : 'elt.'elt list -> 'elt t"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let of_list: <elt>(_: list<elt>) => t<elt>"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.of_list elements")," is a set containing exactly the\nelements in the list ",(0,a.kt)("inlineCode",{parentName:"p"},"elements"),". Note: Use ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.literal")," instead if\nusing a literal list. Note: Use ",(0,a.kt)("inlineCode",{parentName:"p"},"literal")," instead if using a\nliteral list.")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.of_list(elements)")," is a set containing exactly the\nelements in the list ",(0,a.kt)("inlineCode",{parentName:"p"},"elements"),". Note: Use ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.literal")," instead if\nusing a literal list. Note: Use ",(0,a.kt)("inlineCode",{parentName:"p"},"literal")," instead if using a\nliteral list.")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val size : 'elt.'elt t -> nat"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let size: <elt>(_: t<elt>) => nat"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.size set")," is the number of elements of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),".")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.size(set)")," is the number of elements of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),".")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val cardinal : 'elt.'elt t -> nat"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let cardinal: <elt>(_: t<elt>) => nat"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.cardinal set")," is the number of elements of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),".")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.cardinal(set)")," is the number of elements of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),".")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val mem : 'elt.'elt -> 'elt t -> bool"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let mem: <elt>(_: elt) => (_: t<elt>) => bool"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.mem elt set")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," if, and only if, the element\n",(0,a.kt)("inlineCode",{parentName:"p"},"elt")," belongs to the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),".")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.mem(elt, set)")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," if, and only if, the element\n",(0,a.kt)("inlineCode",{parentName:"p"},"elt")," belongs to the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),".")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val fold : 'elt 'acc.(('acc * 'elt) -> 'acc) -> 'elt t -> 'acc -> 'acc"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let fold: <elt, acc>(_: (_: [acc, elt]) => acc) => (_: t<elt>) => (_: acc) => acc"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.fold f set init")," is\n",(0,a.kt)("inlineCode",{parentName:"p"},"f(... (f (f (init, e1), e2), ...), en)"),",\nwhere ",(0,a.kt)("inlineCode",{parentName:"p"},"e1"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"e2"),", ..., ",(0,a.kt)("inlineCode",{parentName:"p"},"en")," are the elements of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," in\nincreasing order.")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.fold(f, set, init)")," is\n",(0,a.kt)("inlineCode",{parentName:"p"},"f(... (f (f (init, e1), e2), ...), en)"),",\nwhere ",(0,a.kt)("inlineCode",{parentName:"p"},"e1"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"e2"),", ..., ",(0,a.kt)("inlineCode",{parentName:"p"},"en")," are the elements of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," in\nincreasing order.")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val fold_desc : 'elt 'acc.(('elt * 'acc) -> 'acc) -> 'elt t -> 'acc -> 'acc"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let fold_desc: <elt, acc>(_: (_: [elt, acc]) => acc) => (_: t<elt>) => (_: acc) => acc"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.fold f set init")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"f(... (f (init, en), ...), e1)"),",\nwhere ",(0,a.kt)("inlineCode",{parentName:"p"},"e1"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"e2"),", ..., ",(0,a.kt)("inlineCode",{parentName:"p"},"en")," are the elements of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," in\nincreasing order.")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.fold(f, set, init)")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"f(... (f (init, en), ...), e1)"),",\nwhere ",(0,a.kt)("inlineCode",{parentName:"p"},"e1"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"e2"),", ..., ",(0,a.kt)("inlineCode",{parentName:"p"},"en")," are the elements of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," in\nincreasing order.")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val filter_map : 'old 'new.('old -> 'new option) -> 'old t -> 'new t"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let filter_map: <old, new>(_: (_: old) => option<new>) => (_: t<old>) => t<new>"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.filter_map f set")," is a set made by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," (the\nfilter) on each element of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),": if ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," returns ",(0,a.kt)("inlineCode",{parentName:"p"},"None"),",\nthe element is skipped in the result, otherwise, if it is\n",(0,a.kt)("inlineCode",{parentName:"p"},"Some e"),", then ",(0,a.kt)("inlineCode",{parentName:"p"},"e")," is kept.")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.filter_map(f, set)")," is a set made by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," (the\nfilter) on each element of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),": if ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," returns ",(0,a.kt)("inlineCode",{parentName:"p"},"None()"),",\nthe element is skipped in the result, otherwise, if it is\n",(0,a.kt)("inlineCode",{parentName:"p"},"Some(e)"),", then ",(0,a.kt)("inlineCode",{parentName:"p"},"e")," is kept.")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val iter : 'elt.('elt -> unit) -> 'elt t -> unit"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let iter: <elt>(_: (_: elt) => unit) => (_: t<elt>) => unit"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.iter f set")," applies ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," to all the elements of the set\n",(0,a.kt)("inlineCode",{parentName:"p"},"set")," in increasing order.")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.iter(f, set)")," applies ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," to all the elements of the set\n",(0,a.kt)("inlineCode",{parentName:"p"},"set")," in increasing order.")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val map : 'old 'new.('old -> 'new) -> 'old t -> 'new t"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let map: <old, new>(_: (_: old) => new) => (_: t<old>) => t<new>"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.map f set")," evaluates in a set whose elements have been\nobtained by applying ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," to the elements of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),".")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.map(f, set)")," evaluates in a set whose elements have been\nobtained by applying ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," to the elements of the set ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),".")))}d.isMDXComponent=!0},23746:(e,t,n)=>{n.r(t),n.d(t,{Prism:()=>l.Z,default:()=>k,defaultProps:()=>o});var l=n(87410);const a={plain:{backgroundColor:"#2a2734",color:"#9a86fd"},styles:[{types:["comment","prolog","doctype","cdata","punctuation"],style:{color:"#6c6783"}},{types:["namespace"],style:{opacity:.7}},{types:["tag","operator","number"],style:{color:"#e09142"}},{types:["property","function"],style:{color:"#9a86fd"}},{types:["tag-id","selector","atrule-id"],style:{color:"#eeebff"}},{types:["attr-name"],style:{color:"#c4b9fe"}},{types:["boolean","string","entity","url","attr-value","keyword","control","directive","unit","statement","regex","atrule","placeholder","variable"],style:{color:"#ffcc99"}},{types:["deleted"],style:{textDecorationLine:"line-through"}},{types:["inserted"],style:{textDecorationLine:"underline"}},{types:["italic"],style:{fontStyle:"italic"}},{types:["important","bold"],style:{fontWeight:"bold"}},{types:["important"],style:{color:"#c4b9fe"}}]};var i=n(67294),o={Prism:l.Z,theme:a};function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(e[l]=n[l])}return e},s.apply(this,arguments)}var p=/\r\n|\r|\n/,m=function(e){0===e.length?e.push({types:["plain"],content:"\n",empty:!0}):1===e.length&&""===e[0].content&&(e[0].content="\n",e[0].empty=!0)},c=function(e,t){var n=e.length;return n>0&&e[n-1]===t?e:e.concat(t)},y=function(e,t){var n=e.plain,l=Object.create(null),a=e.styles.reduce((function(e,n){var l=n.languages,a=n.style;return l&&!l.includes(t)||n.types.forEach((function(t){var n=s({},e[t],a);e[t]=n})),e}),l);return a.root=n,a.plain=s({},n,{backgroundColor:null}),a};function d(e,t){var n={};for(var l in e)Object.prototype.hasOwnProperty.call(e,l)&&-1===t.indexOf(l)&&(n[l]=e[l]);return n}const k=function(e){function t(){for(var t=this,n=[],l=arguments.length;l--;)n[l]=arguments[l];e.apply(this,n),r(this,"getThemeDict",(function(e){if(void 0!==t.themeDict&&e.theme===t.prevTheme&&e.language===t.prevLanguage)return t.themeDict;t.prevTheme=e.theme,t.prevLanguage=e.language;var n=e.theme?y(e.theme,e.language):void 0;return t.themeDict=n})),r(this,"getLineProps",(function(e){var n=e.key,l=e.className,a=e.style,i=s({},d(e,["key","className","style","line"]),{className:"token-line",style:void 0,key:void 0}),o=t.getThemeDict(t.props);return void 0!==o&&(i.style=o.plain),void 0!==a&&(i.style=void 0!==i.style?s({},i.style,a):a),void 0!==n&&(i.key=n),l&&(i.className+=" "+l),i})),r(this,"getStyleForToken",(function(e){var n=e.types,l=e.empty,a=n.length,i=t.getThemeDict(t.props);if(void 0!==i){if(1===a&&"plain"===n[0])return l?{display:"inline-block"}:void 0;if(1===a&&!l)return i[n[0]];var o=l?{display:"inline-block"}:{},r=n.map((function(e){return i[e]}));return Object.assign.apply(Object,[o].concat(r))}})),r(this,"getTokenProps",(function(e){var n=e.key,l=e.className,a=e.style,i=e.token,o=s({},d(e,["key","className","style","token"]),{className:"token "+i.types.join(" "),children:i.content,style:t.getStyleForToken(i),key:void 0});return void 0!==a&&(o.style=void 0!==o.style?s({},o.style,a):a),void 0!==n&&(o.key=n),l&&(o.className+=" "+l),o})),r(this,"tokenize",(function(e,t,n,l){var a={code:t,grammar:n,language:l,tokens:[]};e.hooks.run("before-tokenize",a);var i=a.tokens=e.tokenize(a.code,a.grammar,a.language);return e.hooks.run("after-tokenize",a),i}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.render=function(){var e=this.props,t=e.Prism,n=e.language,l=e.code,a=e.children,i=this.getThemeDict(this.props),o=t.languages[n];return a({tokens:function(e){for(var t=[[]],n=[e],l=[0],a=[e.length],i=0,o=0,r=[],s=[r];o>-1;){for(;(i=l[o]++)<a[o];){var y=void 0,d=t[o],k=n[o][i];if("string"==typeof k?(d=o>0?d:["plain"],y=k):(d=c(d,k.type),k.alias&&(d=c(d,k.alias)),y=k.content),"string"==typeof y){var u=y.split(p),f=u.length;r.push({types:d,content:u[0]});for(var x=1;x<f;x++)m(r),s.push(r=[]),r.push({types:d,content:u[x]})}else o++,t.push(d),n.push(y),l.push(0),a.push(y.length)}o--,t.pop(),n.pop(),l.pop(),a.pop()}return m(r),s}(void 0!==o?this.tokenize(t,l,o,n):[l]),className:"prism-code language-"+n,style:void 0!==i?i.root:{},getLineProps:this.getLineProps,getTokenProps:this.getTokenProps})},t}(i.Component)},87552:(e,t,n)=>{n.d(t,{Z:()=>l});const l={plain:{color:"#bfc7d5",backgroundColor:"#292d3e"},styles:[{types:["comment"],style:{color:"rgb(105, 112, 152)",fontStyle:"italic"}},{types:["string","inserted"],style:{color:"rgb(195, 232, 141)"}},{types:["number"],style:{color:"rgb(247, 140, 108)"}},{types:["builtin","char","constant","function"],style:{color:"rgb(130, 170, 255)"}},{types:["punctuation","selector"],style:{color:"rgb(199, 146, 234)"}},{types:["variable"],style:{color:"rgb(191, 199, 213)"}},{types:["class-name","attr-name"],style:{color:"rgb(255, 203, 107)"}},{types:["tag","deleted"],style:{color:"rgb(255, 85, 114)"}},{types:["operator"],style:{color:"rgb(137, 221, 255)"}},{types:["boolean"],style:{color:"rgb(255, 88, 116)"}},{types:["keyword"],style:{fontStyle:"italic"}},{types:["doctype"],style:{color:"rgb(199, 146, 234)",fontStyle:"italic"}},{types:["namespace"],style:{color:"rgb(178, 204, 214)"}},{types:["url"],style:{color:"rgb(221, 221, 221)"}}]}}}]);