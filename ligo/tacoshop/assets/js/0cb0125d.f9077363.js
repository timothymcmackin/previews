"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[89013],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(r),d=a,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},48720:(e,t,r)=>{r.d(t,{D:()=>a.Z,Z:()=>o});var n=r(67294),a=r(75402);const o=function(e){return n.createElement(a.Z.Consumer,null,(t=>{let{syntax:r}=t;return r===e.syntax?e.children:n.createElement(n.Fragment,null)}))}},61662:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=r(87462),a=(r(67294),r(3905)),o=r(48720);const i={id:"decorators",title:"Attributes",jsligoTitle:"Decorators"},l=void 0,s={unversionedId:"syntax/decorators",id:"version-1.9.2/syntax/decorators",title:"Attributes",description:"Attributes modify the default semantics of a piece of code.",source:"@site/versioned_docs/version-1.9.2/syntax/decorators.md",sourceDirName:"syntax",slug:"/syntax/decorators",permalink:"/previews/ligo/tacoshop/docs/syntax/decorators",draft:!1,tags:[],version:"1.9.2",frontMatter:{id:"decorators",title:"Attributes",jsligoTitle:"Decorators"},sidebar:"docs",previous:{title:"Michelson injection",permalink:"/previews/ligo/tacoshop/docs/syntax/contracts/michelson-injection"},next:{title:"Declaring",permalink:"/previews/ligo/tacoshop/docs/signatures/declaring"}},c={},p=[{value:"Internal attributes",id:"internal-attributes",level:2},{value:"List of attributes",id:"list-of-attributes",level:2},{value:"List of decorators",id:"list-of-decorators",level:2}],u={toc:p};function m(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"Attributes modify the default semantics of a piece of code.\nAttributes come in three forms:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"[@name_of_attribute]")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},'[@name_of_attribute "Some string"]')),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"[@name_of_attribute name]"))),(0,a.kt)("p",null,"Attributes are located just before the construct they apply to, contrary to OCaml.\nAlso contrary to OCaml, LIGO attributes always use only one ",(0,a.kt)("inlineCode",{parentName:"p"},"@")," symbol."),(0,a.kt)("p",null,"The most common use of an attribute is to denote an ",(0,a.kt)("a",{parentName:"p",href:"../syntax/contracts/entrypoints"},"entrypoint"),"."),(0,a.kt)("p",null,"Attributes are placed immediately before the code they apply to.\nYou can also apply multiple attributes on one line, as in this example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=attributes",group:"attributes"},"type storage = int\ntype result = operation list * storage\n\n[@entry] [@no_mutation]\nlet sub (delta : int) (storage : storage) : result =\n  [], storage - delta\n")),(0,a.kt)("h2",{id:"internal-attributes"},"Internal attributes"),(0,a.kt)("p",null,"The following attributes are used internally by the compiler.\nYou may encounter them when exporting the Abstract Syntax Tree (AST) after a certain compilation pass, but they should not appear in normal source code:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"[@thunk]")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"[@hidden]"))),(0,a.kt)("h2",{id:"list-of-attributes"},"List of attributes")),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"Decorators modify the default semantics of a piece of code.\nDecorators come in two forms:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"@name_of_decorator")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},'@name_of_decorator("Some string")'))),(0,a.kt)("p",null,"The most common use of a decorator is to denote an ",(0,a.kt)("a",{parentName:"p",href:"../syntax/contracts/entrypoints"},"entrypoint"),"."),(0,a.kt)("p",null,"Decorators are placed immediately before the code they apply to.\nYou can also apply multiple decorators on one line, as in this example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=decorators",group:"decorators"},"type storage = int;\ntype result = [list<operation>, storage];\n\n@entry @no_mutation\nconst sub = (delta: int, storage: storage) : result =>\n  [[], storage - delta];\n")),(0,a.kt)("p",null,"Note that the lexical convention for decorators clashes with that of ",(0,a.kt)("a",{parentName:"p",href:"keywords#escaping-keywords"},"escaped variables"),".\nTherefore, you cannot escape the name of a decorator and use it as a variable name."),(0,a.kt)("h2",{id:"list-of-decorators"},"List of decorators")),(0,a.kt)("p",null,"LIGO supports these decorators:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"../reference/decorators/annot"},(0,a.kt)("inlineCode",{parentName:"a"},"annot"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"../reference/decorators/deprecated"},(0,a.kt)("inlineCode",{parentName:"a"},"deprecated"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"../reference/decorators/dyn_entry"},(0,a.kt)("inlineCode",{parentName:"a"},"dyn_entry"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"../reference/decorators/entry"},(0,a.kt)("inlineCode",{parentName:"a"},"entry"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"../reference/decorators/inline"},(0,a.kt)("inlineCode",{parentName:"a"},"inline"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"../reference/decorators/layout"},(0,a.kt)("inlineCode",{parentName:"a"},"layout"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"../reference/decorators/private"},(0,a.kt)("inlineCode",{parentName:"a"},"private"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"../reference/decorators/public"},(0,a.kt)("inlineCode",{parentName:"a"},"public"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"../reference/decorators/view"},(0,a.kt)("inlineCode",{parentName:"a"},"view")))))}m.isMDXComponent=!0}}]);