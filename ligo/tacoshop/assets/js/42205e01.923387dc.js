"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[78159],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>u});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(t),u=o,m=d["".concat(s,".").concat(u)]||d[u]||g[u]||i;return t?r.createElement(m,a(a({ref:n},p),{},{components:t})):r.createElement(m,a({ref:n},p))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},48720:(e,n,t)=>{t.d(n,{D:()=>o.Z,Z:()=>i});var r=t(67294),o=t(75402);const i=function(e){return r.createElement(o.Z.Consumer,null,(n=>{let{syntax:t}=n;return t===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},17514:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=t(87462),o=(t(67294),t(3905)),i=t(48720);const a={id:"adding",title:"Adding"},l=void 0,s={unversionedId:"lists/adding",id:"version-1.5.0/lists/adding",title:"Adding",description:"Lists can be augmented by adding an element before the head (or, in",source:"@site/versioned_docs/version-1.5.0/lists/adding.md",sourceDirName:"lists",slug:"/lists/adding",permalink:"/previews/ligo/tacoshop/docs/1.5.0/lists/adding",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"adding",title:"Adding"},sidebar:"docs",previous:{title:"Declaring",permalink:"/previews/ligo/tacoshop/docs/1.5.0/lists/declaring"},next:{title:"Matching",permalink:"/previews/ligo/tacoshop/docs/1.5.0/lists/matching"}},c={},p=[],g={toc:p};function d(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Lists can be augmented by adding an element before the head (or, in\nterms of stack, by ",(0,o.kt)("em",{parentName:"p"},"pushing an element on top"),"). This operation is\nusually called ",(0,o.kt)("em",{parentName:"p"},"consing")," in functional languages."),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("p",null,"The ",(0,o.kt)("em",{parentName:"p"},"cons operator"),' is infix and noted "',(0,o.kt)("inlineCode",{parentName:"p"},"::"),'". It is not symmetric: on\nthe left lies the element to cons, and, on the right, a list on which\nto cons.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=consing",group:"consing"},"let short_list = [1; 2; 2]\n// long_list = [5; 1; 2; 2]\nlet long_list : int list = 5 :: short_list\n")),(0,o.kt)("p",null,"There is also a predefined function ",(0,o.kt)("inlineCode",{parentName:"p"},"List.cons"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=consing",group:"consing"},"// longer_list = [6; 5; 1; 2; 2]\nlet longer_list = List.cons 6 long_list\n")),(0,o.kt)("p",null,"See predefined\n",(0,o.kt)("a",{parentName:"p",href:"../reference/list-reference/?lang=cameligo"},"module List"),".")),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("p",null,"The ",(0,o.kt)("em",{parentName:"p"},"cons operator"),' is infix and noted "',(0,o.kt)("inlineCode",{parentName:"p"},", ..."),'". It is not symmetric:\non the left lies the element to cons, and, on the right, a list on\nwhich to cons.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=consing",group:"consing"},"const short_list = list([1,2,2]);\n// long_list == [5,1,2,2]\nconst long_list = list([5, ...short_list]);\n")),(0,o.kt)("p",null,"There is also a predefined function ",(0,o.kt)("inlineCode",{parentName:"p"},"List.cons"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=consing",group:"consing"},"// longer_list == list([6, 5, 1, 2, 2])\nconst longer_list = List.cons(6, long_list);\n")),(0,o.kt)("p",null,"See predefined\n",(0,o.kt)("a",{parentName:"p",href:"../reference/list-reference/?lang=jsligo"},"namespace List"),".")))}d.isMDXComponent=!0}}]);