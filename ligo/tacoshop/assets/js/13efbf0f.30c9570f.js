"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[16957],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=s(n),f=a,d=m["".concat(l,".").concat(f)]||m[f]||u[f]||i;return n?r.createElement(d,o(o({ref:t},c),{},{components:n})):r.createElement(d,o({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>i});var r=n(67294),a=n(75402);const i=function(e){return r.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},19096:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(87462),a=(n(67294),n(3905)),i=n(48720);const o={id:"iterating",title:"Iterating"},p=void 0,l={unversionedId:"maps/iterating",id:"version-1.5.0/maps/iterating",title:"Iterating",description:"An iterated operation is a fold over the map that returns the value",source:"@site/versioned_docs/version-1.5.0/maps/iterating.md",sourceDirName:"maps",slug:"/maps/iterating",permalink:"/previews/ligo/tacoshop/docs/1.5.0/maps/iterating",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"iterating",title:"Iterating"},sidebar:"docs",previous:{title:"Mapping",permalink:"/previews/ligo/tacoshop/docs/1.5.0/maps/mapping"},next:{title:"Looping",permalink:"/previews/ligo/tacoshop/docs/1.5.0/maps/looping"}},s={},c=[],u={toc:c};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"An ",(0,a.kt)("em",{parentName:"p"},"iterated operation")," is a fold over the map that returns the value\nof type ",(0,a.kt)("inlineCode",{parentName:"p"},"unit"),", that is, its only use is to produce side-effects. This\ncan be useful if, for example, you would like to check that each value\nof a map is within a certain range, and fail with an error otherwise."),(0,a.kt)("p",null,"The predefined functional iterator implementing the iterated operation\nover maps is called ",(0,a.kt)("inlineCode",{parentName:"p"},"Map.iter"),". It\ntakes a binding, that is, a key and its associated value in the map,\nperforms some side-effect and returns the unit value."),(0,a.kt)("p",null,"In the following example, a map is iterated to check that all its\ninteger values are greater than ",(0,a.kt)("inlineCode",{parentName:"p"},"3"),"."),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=map_iterating",group:"map_iterating"},"let assert_all_greater_than_3 (m : (int, int) map) : unit =\n  Map.iter (fun (_,v) -> assert (v > 3)) m  // The key is discarded\n")),(0,a.kt)("p",null,"Note: See the predefined\n",(0,a.kt)("a",{parentName:"p",href:"../reference/map-reference"},"module Map"))),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=map_iterating",group:"map_iterating"},"const assert_all_greater_than_3 =\n  (m: map<int,int>) : unit => Map.iter(([_k,v]) => assert(v > 3), m);\n")),(0,a.kt)("p",null,"Note: See the predefined\n",(0,a.kt)("a",{parentName:"p",href:"../reference/map-reference"},"namespace Map"))))}m.isMDXComponent=!0}}]);