"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[67781],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=i,y=m["".concat(o,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(y,s(s({ref:t},p),{},{components:n})):r.createElement(y,s({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:i,s[1]=l;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>i.Z,Z:()=>a});var r=n(67294),i=n(75402);const a=function(e){return r.createElement(i.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},90322:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var r=n(87462),i=(n(67294),n(3905)),a=n(48720);const s={id:"matching",title:"Matching"},l=void 0,o={unversionedId:"lists/matching",id:"version-1.5.0/lists/matching",title:"Matching",description:"Polymorphism is especially useful when writing functions over",source:"@site/versioned_docs/version-1.5.0/lists/matching.md",sourceDirName:"lists",slug:"/lists/matching",permalink:"/previews/ligo/tacoshop/docs/1.5.0/lists/matching",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"matching",title:"Matching"},sidebar:"docs",previous:{title:"Adding",permalink:"/previews/ligo/tacoshop/docs/1.5.0/lists/adding"},next:{title:"Updating",permalink:"/previews/ligo/tacoshop/docs/1.5.0/lists/updating"}},c={},p=[],u={toc:p};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Polymorphism is especially useful when writing functions over\nparametric types, which include built-in types like lists, sets, and\nmaps."),(0,i.kt)("p",null,"As an example, we will see how to implement list reversing\nparametrically on any type, rather than just on lists of a specific\ntype."),(0,i.kt)("p",null,"Similarly to the polymorphic identity function, we can introduce a\ntype variable that can be generalised. We will write a direct version\nof the function using an accumulator."),(0,i.kt)(a.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=reverse",group:"reverse"},"let rev (type a) (xs : a list) : a list =\n  let rec rev (type a) (xs : a list) (acc : a list) : a list =\n    match xs with\n    | [] -> acc\n    | x :: xs -> rev xs (x::acc)\n  in rev xs []\n")),(0,i.kt)("p",null,"Note that because the type variable ",(0,i.kt)("inlineCode",{parentName:"p"},"a")," was introduced (bound) by\nmeans of ",(0,i.kt)("inlineCode",{parentName:"p"},"type"),", it does not need a quote, like ",(0,i.kt)("inlineCode",{parentName:"p"},"'a"),".")),(0,i.kt)(a.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=reverse",group:"reverse"},"function rev <T>(xs : list<T>) : list<T> {\n  const rev = <T>([xs, acc] : [list<T>, list<T>]) : list<T> =>\n    match(xs) {\n      when([]): acc;\n      when([y,...ys]): rev([ys, list([y,...acc])])\n    };\n\n  return rev([xs, list([])]);\n};\n")),(0,i.kt)("p",null,"Note how the type checker was able to infer the types of ",(0,i.kt)("inlineCode",{parentName:"p"},"[]")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"[y,...ys]")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"when")," clauses (without the need of using\n",(0,i.kt)("inlineCode",{parentName:"p"},"list([])")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"list([y,...ys])"),"), but in ",(0,i.kt)("inlineCode",{parentName:"p"},"list([y,...acc])")," the cast\nto ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," is necessary, because of the rest property that needs to be\ninterpreted as a cons. Similarly, the ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"[xs, list([])]")," is\nneeded to force the interpretation of ",(0,i.kt)("inlineCode",{parentName:"p"},"[]"),' as the empty list, instead\nof the empty array ("unit").'),(0,i.kt)("p",null,"See predefined\n",(0,i.kt)("a",{parentName:"p",href:"../reference/list-reference/?lang=cameligo"},"module List"),".")),(0,i.kt)("p",null,"We use an accumulator variable ",(0,i.kt)("inlineCode",{parentName:"p"},"acc")," to keep the elements of the list\nprocessed, consing each element on it."),(0,i.kt)("p",null,"As with the identity function, we can then use ",(0,i.kt)("inlineCode",{parentName:"p"},"rev")," directly with\ndifferent type instances:"),(0,i.kt)(a.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=reverse",group:"reverse"},"let ints : int list = rev [1; 2; 3]\nlet nats : nat list = rev [1n; 2n; 3n]\n"))),(0,i.kt)(a.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=reverse",group:"reverse"},"const ints : list<int> = rev(list([1, 2, 3]));\nconst nats : list<nat> = rev(list([1n, 2n, 3n]));\n")),(0,i.kt)("p",null,"See predefined\n",(0,i.kt)("a",{parentName:"p",href:"../reference/list-reference/?lang=jsligo"},"namespace List"),".")))}m.isMDXComponent=!0}}]);