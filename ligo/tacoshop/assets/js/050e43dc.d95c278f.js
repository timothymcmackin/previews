"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[38733],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,g=u["".concat(l,".").concat(d)]||u[d]||m[d]||s;return n?o.createElement(g,r(r({ref:t},p),{},{components:n})):o.createElement(g,r({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,r=new Array(s);r[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,r[1]=i;for(var c=2;c<s;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>s});var o=n(67294),a=n(75402);const s=function(e){return o.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:o.createElement(o.Fragment,null)}))}},61515:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var o=n(87462),a=(n(67294),n(3905)),s=n(48720);const r={id:"michelson_testing",title:"Testing Michelson code"},i=void 0,l={unversionedId:"advanced/michelson_testing",id:"version-1.6.0/advanced/michelson_testing",title:"Testing Michelson code",description:"Testing Michelson code",source:"@site/versioned_docs/version-1.6.0/advanced/michelson_testing.md",sourceDirName:"advanced",slug:"/advanced/michelson_testing",permalink:"/previews/ligo/tacoshop/docs/1.6.0/advanced/michelson_testing",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"michelson_testing",title:"Testing Michelson code"},sidebar:"docs",previous:{title:"Mutation testing",permalink:"/previews/ligo/tacoshop/docs/1.6.0/advanced/mutation-testing"},next:{title:"Package management",permalink:"/previews/ligo/tacoshop/docs/1.6.0/advanced/package-management"}},c={},p=[{value:"Testing Michelson code",id:"testing-michelson-code",level:2},{value:"Testing with <code>tezos-client</code>&#39;s mockup",id:"testing-with-tezos-clients-mockup",level:3}],m={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"testing-michelson-code"},"Testing Michelson code"),(0,a.kt)("p",null,"There are multiple frameworks for testing Michelson contracts, we will\nnot get into details, but here is a list of tutorials showing how to\ntest contracts in Michelson:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"https://baking-bad.org/blog/2019/09/16/testing-michelson-tezos-contracts-with-pytezos-library/"},"PyTezos"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"https://gitlab.com/morley-framework/morley/-/blob/9455cd384b2ab897fb7b31822abca3730a4ad08b/code/cleveland/testingEDSL.md"},"Cleveland")))),(0,a.kt)("p",null,"Another alternative is to use Tezos's binary ",(0,a.kt)("inlineCode",{parentName:"p"},"tezos-client"),"\ndirectly. There's a new\n",(0,a.kt)("a",{parentName:"p",href:"https://octez.tezos.com/docs/user/mockup.html"},"mockup")," mode which is does\nnot need a Tezos node to be running (albeit this is less similar to\nmainnet than running a Tezos sandbox node)."),(0,a.kt)("h3",{id:"testing-with-tezos-clients-mockup"},"Testing with ",(0,a.kt)("inlineCode",{parentName:"h3"},"tezos-client"),"'s mockup"),(0,a.kt)("p",null,"We show the main steps that need to be done to use the mockup mode to\ntest our LIGO contracts. As a first step, we need to compile our LIGO\ncontract to Michelson code. Suppose we write the following simple\ncontract:"),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=mockup_testme",group:"mockup_testme"},"(* This is mockup_testme.mligo *)\ntype storage = string\n\ntype result = operation list * storage\n\n[@entry]\nlet append (s : string) (store : storage) : result =\n [],    (* No operations *)\n store ^ s\n"))),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=mockup_testme",group:"mockup_testme"},"// This is mockup_testme.jsligo\ntype storage = string;\n\ntype result = [list<operation>, storage];\n\n@entry\nconst append = (s : string, store: storage): result =>\n  [[], store + s]\n"))),(0,a.kt)("p",null,"To obtain Michelson code from it, we run the LIGO compiler like so:"),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"ligo compile contract gitlab-pages/docs/advanced/src/michelson_testing/mockup_testme.mligo\n# Outputs:\n# { parameter string ;\n#   storage string ;\n#   code { UNPAIR ; SWAP ; CONCAT ; NIL operation ; PAIR } }\n"))),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"ligo compile contract gitlab-pages/docs/advanced/src/michelson_testing/mockup_testme.jsligo\n# Outputs:\n# { parameter string ;\n#   storage string ;\n#   code { UNPAIR ; SWAP ; CONCAT ; NIL operation ; PAIR } }\n"))),(0,a.kt)("p",null,"Instead of outputting the resulted compiled code in the screen, we can\ntell LIGO to write it in a file called ",(0,a.kt)("inlineCode",{parentName:"p"},"mockup_testme.tz"),":"),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"ligo compile contract gitlab-pages/docs/advanced/src/michelson_testing/mockup_testme.mligo --output-file mockup_testme.tz\n"))),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"ligo compile contract gitlab-pages/docs/advanced/src/michelson_testing/mockup_testme.jsligo --output-file mockup_testme.tz\n"))),(0,a.kt)("p",null,"Now it is time to test this Michelson code we obtained: we want to\nexecute it using the mockup mode."),(0,a.kt)("p",null,"Before anything, make sure you have installed ",(0,a.kt)("inlineCode",{parentName:"p"},"tezos-client"),", a simple\nway to do so is by using opam (",(0,a.kt)("inlineCode",{parentName:"p"},"opam install tezos-client"),")."),(0,a.kt)("p",null,"We can list all the protocols available using ",(0,a.kt)("inlineCode",{parentName:"p"},"tezos-client list\nmockup protocols"),". In this example, we will use Edo for testing, so\nthe command we use for creating a mockup instance on the directory\n",(0,a.kt)("inlineCode",{parentName:"p"},"/tmp/mockup/")," is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"skip",skip:!0},"tezos-client \\\n  --protocol PtEdoTezd3RHSC31mpxxo1npxFjoWWcFgQtxapi51Z8TLu6v6Uq \\\n  --base-dir /tmp/mockup \\\n  --mode mockup \\\n  create mockup\n")),(0,a.kt)("p",null,"This command returns a list of Tezos addresses that we can use with\nthe client in subsequent commands. As recommended in the Tezos\ndocumentation, we can add a shell alias to avoid mistakes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"alias mockup-client='tezos-client --mode mockup --base-dir /tmp/mockup'\n")),(0,a.kt)("p",null,"We can list the addresses returned above by running:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"skip",skip:!0},"mockup-client list known addresses\n# Outputs:\n# bootstrap5: tz1ddb9NMYHZi5UzPdzTZMYQQZoMub195zgv (unencrypted sk known)\n# bootstrap4: tz1b7tUupMgCNw2cCLpKTkSD1NZzB5TkP2sv (unencrypted sk known)\n# bootstrap3: tz1faswCTDciRzE4oJ9jn2Vm2dvjeyA9fUzU (unencrypted sk known)\n# bootstrap2: tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN (unencrypted sk known)\n# bootstrap1: tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx (unencrypted sk known)\n")),(0,a.kt)("p",null,'We are now ready to originate (or "deploy") the contract on our mockup\nTezos:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"skip",skip:!0},'mockup-client originate contract mockup_testme \\\n              transferring 0 from bootstrap1 \\\n              running "`cat mockup_testme.tz`" \\\n              --init \\"foo\\" --burn-cap 0.1\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"--init")," argument (",(0,a.kt)("inlineCode",{parentName:"p"},'"foo"'),") is the initial storage for our\ndeployed contract. In case we had a more complex storage, we could\nhave used LIGO's ",(0,a.kt)("inlineCode",{parentName:"p"},"compile-storage")," sub-command to compile a LIGO\nexpression to a Michelson storage."),(0,a.kt)("p",null,"Now it is time to test! The property we want to check is that if we\nexecute ",(0,a.kt)("inlineCode",{parentName:"p"},'Append ("bar")')," on our contract with storage ",(0,a.kt)("inlineCode",{parentName:"p"},'"foo"'),", then\nthe contract updates its storage to ",(0,a.kt)("inlineCode",{parentName:"p"},'"foobar"'),"."),(0,a.kt)("p",null,"As a first sanity check, we can confirm that the storage is currently ",(0,a.kt)("inlineCode",{parentName:"p"},'"foo"'),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"skip",skip:!0},'mockup-client get contract storage for mockup_testme\n# Outputs:\n# "foo"\n')),(0,a.kt)("p",null,"Then, we execute a call to our contract with parameter ",(0,a.kt)("inlineCode",{parentName:"p"},'Append\n("bar")'),". To do so, we first compile the parameter as follows:"),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'ligo compile parameter gitlab-pages/docs/advanced/src/michelson_testing/mockup_testme.mligo "Append (\\"bar\\")"\n# Outputs:\n# "bar"\n'))),(0,a.kt)("p",null,"So our parameter is simply the string (notice that the constructor\n",(0,a.kt)("inlineCode",{parentName:"p"},"Append")," was removed). We execute a call to the contract with this\ncompiled parameter as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"skip",skip:!0},'mockup-client transfer 0 from bootstrap2 \\\n              to mockup_testme \\\n              --arg \\"bar\\" --burn-cap 0.01\n')),(0,a.kt)("p",null,"We have chosen ",(0,a.kt)("inlineCode",{parentName:"p"},"bootstrap2")," as the origin of this call (for no\nparticular reason, any address could do)."),(0,a.kt)("p",null,'We can finally check that that our property holds: the storage is now\n"foobar":'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"skip",skip:!0},'mockup-client get contract storage for mockup_testme\n# Outputs:\n# "foobar"\n')),(0,a.kt)("p",null,"Good! Our contract passed the test successfully!"))}u.isMDXComponent=!0}}]);