"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[10230],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,f=m["".concat(l,".").concat(d)]||m[d]||c[d]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>o});var r=n(67294),a=n(75402);const o=function(e){return r.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},79913:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905)),o=n(48720);const i={id:"aliasing",title:"Aliasing"},s=void 0,l={unversionedId:"modules/aliasing",id:"modules/aliasing",title:"Aliasing",description:"CameLIGO supports module aliases, that is, modules that work as",source:"@site/../docs/modules/aliasing.md",sourceDirName:"modules",slug:"/modules/aliasing",permalink:"/docs/next/modules/aliasing",draft:!1,tags:[],version:"current",frontMatter:{id:"aliasing",title:"Aliasing"},sidebar:"docs",previous:{title:"Nesting",permalink:"/docs/next/modules/nesting"},next:{title:"Importing",permalink:"/docs/next/modules/importing"}},u={},p=[],c={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"CameLIGO supports module aliases, that is, modules that work as\nsynonyms of other (previously defined) modules. This feature can be\nuseful if we implement a module using a previously defined one, but in\nthe future, we might need to change it. For example, until 2025, the\nBulgarian Lev is pegged to the euro currency:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=Lev",group:"Lev"},"module Euro =\n  struct\n    type t = nat\n    let add (a, b : t * t) : t = a + b\n    let one : t = 1n\n    let two : t = 2n\n  end\n\nmodule Bulgarian_Lev = Euro\n"))),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"JsLIGO supports namespace aliases, that is, namespaces that work as\nsynonyms of other (previously defined) namespaces. This feature can be\nuseful if we implement a namespace using a previously defined one, but\nin the future, we might need to change it. For example, until 2025,\nthe Bulgarian Lev is pegged to the euro currency:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=Lev",group:"Lev"},"namespace Euro {\n  export type t = nat;\n  export const add = (a: t, b: t) : t => a + b;\n  export const one: t = 1n;\n  export const two: t = 2n;\n};\n\nimport Bulgarian_Lev = Euro;\n")),(0,a.kt)("p",null,"Note the keyword ",(0,a.kt)("inlineCode",{parentName:"p"},"import"),", even if the module ",(0,a.kt)("inlineCode",{parentName:"p"},"Euro")," is defined in the\nsame file (this might be a bit counter-intuitive, but this is the\nconvention).")))}m.isMDXComponent=!0}}]);