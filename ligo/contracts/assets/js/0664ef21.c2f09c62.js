"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[12005],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),f=s(n),u=i,m=f["".concat(p,".").concat(u)]||f[u]||c[u]||o;return n?r.createElement(m,a(a({ref:t},d),{},{components:n})):r.createElement(m,a({ref:t},d))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=f;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>i.Z,Z:()=>o});var r=n(67294),i=n(75402);const o=function(e){return r.createElement(i.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},60768:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(87462),i=(n(67294),n(3905));n(48720);const o={id:"define",title:"#define"},a=void 0,l={unversionedId:"preprocessor/define",id:"preprocessor/define",title:"#define",description:"The booleans false and true are predefined. The way to define",source:"@site/../docs/preprocessor/define.md",sourceDirName:"preprocessor",slug:"/preprocessor/define",permalink:"/previews/ligo/contracts/docs/next/preprocessor/define",draft:!1,tags:[],version:"current",frontMatter:{id:"define",title:"#define"},sidebar:"docs",previous:{title:"#if",permalink:"/previews/ligo/contracts/docs/next/preprocessor/if"},next:{title:"#include",permalink:"/previews/ligo/contracts/docs/next/preprocessor/include"}},p={},s=[],d={toc:s};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The booleans ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," are predefined. The way to define\n",(0,i.kt)("em",{parentName:"p"},"symbols")," (that is the traditional name of those identifiers) consists\nin using the ",(0,i.kt)("inlineCode",{parentName:"p"},"#define")," directive, followed by the symbol, like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"#define SYM\n\n#if SYM\nThis IS copied to the output.\n#else\nThis is NOT copied to the output, except the newline character.\n#endif\n")),(0,i.kt)("p",null,"This opens the possibility to use Boolean expressions made of"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"true")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"false")," already mentioned;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"||"),' for the disjunction ("or");'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"&&"),' for the conjunction ("and");'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"==")," for equality;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"!=")," for inequality;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"!")," for negation;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"(")," and ",(0,i.kt)("inlineCode",{parentName:"li"},")")," around expressions to specify priorities.")),(0,i.kt)("p",null,"Directives are processed in sequence in the input file. This\npreprocessor, like that of ",(0,i.kt)("inlineCode",{parentName:"p"},"C#"),", allows us to ",(0,i.kt)("em",{parentName:"p"},"undefine")," a symbol,\nthat is, giving it the Boolean value ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),", like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"#define SYM\n#undef SYM\n\n#if SYM\nThis is NOT copied to the output, except the newline character.\n#else\nThis IS copied to the output.\n#endif\n")),(0,i.kt)("p",null,"The result is"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'# 1 "Tests/undef.txt"\n\n\n\n\n\n\nThis IS copied to the output.\n\n')),(0,i.kt)("p",null,"Note: If you wish to redefine a symbol, you must undefine it first."),(0,i.kt)("p",null,"When we want to write a cascade of conditionals, the preprocessor\nenables a shortcut by means of the ",(0,i.kt)("inlineCode",{parentName:"p"},"#elif")," directive, like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"#if ...\n...\n#elif ...\n...\n#elif ...\n...\n#endif\n")),(0,i.kt)("p",null,"Basically, a ",(0,i.kt)("inlineCode",{parentName:"p"},"#elif")," directive is equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"#else")," followed by\n",(0,i.kt)("inlineCode",{parentName:"p"},"#if"),", but we only need to close with only one ",(0,i.kt)("inlineCode",{parentName:"p"},"#endif"),"."),(0,i.kt)("p",null,"The rationale for using conditional directives in LIGO is to enable in\na single smart contract several versions of a standard."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"#if STANDARD_1\n...\n#elif STANDARD_2\n...\n#else\n#error Standard not implemented\n#endif\n")),(0,i.kt)("p",null,"A real life example could be\n",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.com/dexter2tz/dexter2tz/-/blob/febd360cf6df6e090dedbf21b27538681246f980/dexter.mligo#L52"},"Dexter"),". It\nprovides another interesting use of a conditional directive, where\n",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.com/dexter2tz/dexter2tz/-/blob/febd360cf6df6e090dedbf21b27538681246f980/dexter.mligo#L84"},"a record type depends on the version of the standard"),"."))}c.isMDXComponent=!0}}]);