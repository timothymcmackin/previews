"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[81710],{48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>o});var r=n(67294),a=n(75402);const o=function(e){return r.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},99191:(e,t,n)=>{n.d(t,{Z:()=>d});var r=n(43164),a=n(67294),o=n(52263),c=n(48720),s=n(11506);function i(){return i=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i.apply(this,arguments)}const{Prism:l}=n(43164);l.languages={...l.languages,cameligo:{...l.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:l.languages.typescript};const d=function(e){const{siteConfig:{themeConfig:{prism:t={}}}}=(0,o.Z)(),n=t.singleTheme||s.Z,[l,d]=(0,a.useState)(!1);return(0,a.useEffect)((()=>{d(!0)}),[]),a.createElement(c.D.Consumer,null,(t=>{let{syntax:o}=t;return o===e.syntax?a.createElement(r.default,i({},r.defaultProps,{key:l,language:e.syntax,code:e.children,theme:n}),(e=>{let{className:t,tokens:n,getLineProps:r,getTokenProps:o}=e;return a.createElement("h4",{className:t,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((e,t)=>a.createElement("div",r({line:e,key:t}),e.map(((e,t)=>a.createElement("span",o({token:e,key:t}))))))))})):a.createElement("div",null)}))}},12519:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>c,metadata:()=>i,toc:()=>d});var r=n(87462),a=(n(67294),n(3905)),o=(n(48720),n(99191));const c={id:"test.next.account.contract-reference",title:"contract",hide_table_of_contents:!0},s=void 0,i={unversionedId:"reference/test.next.account.contract-reference",id:"reference/test.next.account.contract-reference",title:"contract",description:"val bootstrap : nat -&gt; address",source:"@site/../docs/reference/test.next.account.contract.md",sourceDirName:"reference",slug:"/reference/test.next.account.contract-reference",permalink:"/previews/ligo/contracts/docs/next/reference/test.next.account.contract-reference",draft:!1,tags:[],version:"current",frontMatter:{id:"test.next.account.contract-reference",title:"contract",hide_table_of_contents:!0},sidebar:"API",previous:{title:"mutation",permalink:"/previews/ligo/contracts/docs/next/reference/test.next.mutation-reference"},next:{title:"account",permalink:"/previews/ligo/contracts/docs/next/reference/test.next.account-reference"}},l={},d=[],p={toc:d};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val bootstrap : nat -> address"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let bootstrap: (_: nat) => address"),"Returns the address corresponding to the nth bootstrapped contract.",(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val bootstrap_typed_address : 'a 'b.nat -> ('a, 'b) typed_address"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let bootstrap_typed_address: <a, b>(_: nat) => typed_address<a, b>"),"Returns the typed address corresponding to the nth bootstrapped contract currently loaded. The types are inferred from those contracts loaded with `Test.State.Reset.add_func_contract` (before reset).")}u.isMDXComponent=!0}}]);