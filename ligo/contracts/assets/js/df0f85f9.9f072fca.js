"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[63038],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(n),d=a,g=m["".concat(c,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>i});var r=n(67294),a=n(75402);const i=function(e){return r.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},69194:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var r=n(87462),a=(n(67294),n(3905)),i=n(48720);const o={id:"casting",title:"Casting"},s=void 0,c={unversionedId:"numbers/casting",id:"version-1.5.0/numbers/casting",title:"Casting",description:"In mathematics, natural numbers are a strict subset of integers, and",source:"@site/versioned_docs/version-1.5.0/numbers/casting.md",sourceDirName:"numbers",slug:"/numbers/casting",permalink:"/previews/ligo/contracts/docs/1.5.0/numbers/casting",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"casting",title:"Casting"},sidebar:"docs",previous:{title:"Declaring",permalink:"/previews/ligo/contracts/docs/1.5.0/numbers/declaring"},next:{title:"Adding",permalink:"/previews/ligo/contracts/docs/1.5.0/numbers/adding"}},l={},p=[],u={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In mathematics, natural numbers are a strict subset of integers, and\ncan be used in any context where an integer is expected. In LIGO, this\nproperty does not hold true in general. Instead, a given binary\narithmetic operation, say, is defined four times, so it can apply to\nany combination of natural numbers and integers: this is called\n",(0,a.kt)("em",{parentName:"p"},"overloading"),", and some programming languages extend it to\nuser-defined functions (e.g. members in C++) -- but not LIGO."),(0,a.kt)("p",null,"So there are no implicit type casts in LIGO, but we can ",(0,a.kt)("em",{parentName:"p"},"explicitly\ncast")," natural numbers to integers (this is safe in all contexts where\nan integer is valid) by calling the predefined function ",(0,a.kt)("inlineCode",{parentName:"p"},"int"),". The\ninverse cast, from ",(0,a.kt)("inlineCode",{parentName:"p"},"int")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"nat")," is called in mathematics the\n",(0,a.kt)("em",{parentName:"p"},"absolute value"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"abs")," in LIGO."),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=casting",group:"casting"},"let one : int = int 1n // Explicit cast from nat to int\nlet two : nat = abs 2  // Explicit cast from int to nat\n"))),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=casting",group:"casting"},"const one : int = int(1n); // Explicit cast from nat to int\nconst two : nat = abs(2);  // Explicit cast from int to nat\n"))))}m.isMDXComponent=!0}}]);