"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[11324],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),g=l(n),d=r,k=g["".concat(c,".").concat(d)]||g[d]||u[d]||o;return n?a.createElement(k,i(i({ref:t},p),{},{components:n})):a.createElement(k,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=g;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>r.Z,Z:()=>o});var a=n(67294),r=n(75402);const o=function(e){return a.createElement(r.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},57662:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>g,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var a=n(87462),r=(n(67294),n(3905)),o=n(48720);const i={id:"tezos-specific",title:"Tezos Domain-Specific Operations"},s=void 0,c={unversionedId:"language-basics/tezos-specific",id:"version-1.5.0/language-basics/tezos-specific",title:"Tezos Domain-Specific Operations",description:"LIGO is a programming language for writing Tezos smart contracts. It",source:"@site/versioned_docs/version-1.5.0/language-basics/tezos-specific.md",sourceDirName:"language-basics",slug:"/language-basics/tezos-specific",permalink:"/docs/1.5.0/language-basics/tezos-specific",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"tezos-specific",title:"Tezos Domain-Specific Operations"}},l={},p=[{value:"Pack and Unpack",id:"pack-and-unpack",level:2},{value:"Hashing Keys",id:"hashing-keys",level:2},{value:"Checking Signatures",id:"checking-signatures",level:2},{value:"Contract&#39;s Own Address",id:"contracts-own-address",level:2},{value:"Origination of a contract",id:"origination-of-a-contract",level:2}],u={toc:p};function g(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"LIGO is a programming language for writing Tezos smart contracts. It\nwould be a little odd if it did not have any Tezos specific\nfunctions. This page will tell you about them."),(0,r.kt)("h2",{id:"pack-and-unpack"},"Pack and Unpack"),(0,r.kt)("p",null,"As Michelson provides the ",(0,r.kt)("inlineCode",{parentName:"p"},"PACK")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"UNPACK")," instructions for data\nserialisation, so does LIGO with ",(0,r.kt)("inlineCode",{parentName:"p"},"Bytes.pack")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Bytes.unpack"),".  The\nformer serialises Michelson data structures into a binary format, and\nthe latter reverses that transformation. Unpacking may fail, so the\nreturn type of ",(0,r.kt)("inlineCode",{parentName:"p"},"Byte.unpack")," is an option that needs to be annotated."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f ",(0,r.kt)("inlineCode",{parentName:"p"},"PACK")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"UNPACK")," are Michelson instructions that are intended\nto be used by people that really know what they are doing. There are\nseveral risks and failure cases, such as unpacking a lambda from an\nuntrusted source or casting the result to the wrong type. Do not use\nthe corresponding LIGO functions without doing your homework first.")),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=a",group:"a"},"let id_string (p : string) : string option =\n  let packed: bytes = Bytes.pack p in\n  Bytes.unpack packed\n"))),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=a",group:"a"},"const id_string = (p) => {\n  let packed = Bytes.pack(p);\n  return Bytes.unpack(packed);\n};\n"))),(0,r.kt)("h2",{id:"hashing-keys"},"Hashing Keys"),(0,r.kt)("p",null,"It is often desirable to hash a public key. In Michelson, certain data\nstructures such as maps will not allow the use of the ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," type. Even\nif this were not the case, hashes are much smaller than keys, and\nstorage on blockchains comes at a cost premium. You can hash keys with\na predefined functions returning a value of type ",(0,r.kt)("inlineCode",{parentName:"p"},"key_hash"),"."),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=b",group:"b"},"let check_hash_key (kh1, k2 : key_hash * key) : bool * key_hash =\n  let kh2 : key_hash = Crypto.hash_key k2 in\n  (kh1 = kh2), kh2\n"))),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=b",group:"b"},"const check_hash_key = (kh1: key_hash, k2: key) => {\n  let kh2 = Crypto.hash_key(k2);\n  return [kh1 == kh2, kh2];\n};\n"))),(0,r.kt)("h2",{id:"checking-signatures"},"Checking Signatures"),(0,r.kt)("p",null,"Sometimes a contract will want to check that a message has been signed\nby a particular key. For example, a point-of-sale system might want a\ncustomer to sign a transaction so it can be processed\nasynchronously. You can do this in LIGO using the ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"signature")," types."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f There is no way to ",(0,r.kt)("em",{parentName:"p"},"generate")," a signed message in LIGO. This is\nbecause that would require storing a private key on chain, at which\npoint it is not... private anymore.")),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=c",group:"c"},"let check_signature (pk, signed, msg : key * signature * bytes) : bool =\n  Crypto.check pk signed msg\n"))),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=c",group:"c"},"const check_signature =\n  (pk: key, signed: signature, msg: bytes) =>\n  Crypto.check(pk, signed, msg);\n"))),(0,r.kt)("h2",{id:"contracts-own-address"},"Contract's Own Address"),(0,r.kt)("p",null,"Often you want to get the address of the contract being executed. You\ncan do it with ",(0,r.kt)("inlineCode",{parentName:"p"},"Tezos.get_self_address"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f Due to limitations in Michelson, ",(0,r.kt)("inlineCode",{parentName:"p"},"Tezos.get_self_address")," in a\ncontract is only allowed at the top-level. Using it in an embedded\nfunction will cause an error.")),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=d",group:"d"},"let current_addr : address = Tezos.get_self_address ()\n"))),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=d",group:"d"},"const current_addr = Tezos.get_self_address();\n"))),(0,r.kt)("h2",{id:"origination-of-a-contract"},"Origination of a contract"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Tezos.create_contract")," allows you to originate a contract given its code, delegate (if any), initial balance and initial storage.\nThe return value is a pair of type ",(0,r.kt)("inlineCode",{parentName:"p"},"(operation * address)"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f Due to limitations in Michelson, ",(0,r.kt)("inlineCode",{parentName:"p"},"Tezos.create_contract")," first argument\nmust be inlined and must not contain references to free variables")),(0,r.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=e",group:"e"},'let origination : operation * address = Tezos.create_contract\n  (fun (p : nat) (s : string) -> ([], s))\n  None\n  3tz\n  "initial_storage"\n'))),(0,r.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=e",group:"e"},'const origination = Tezos.create_contract(\n  (p: nat, s: string) => [list([]), s],\n  None(),\n  3tez,\n  "initial_storage"\n);\n'))))}g.isMDXComponent=!0}}]);