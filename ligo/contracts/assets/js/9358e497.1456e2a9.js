"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[77556],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>g});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var m=n.createContext({}),o=function(e){var t=n.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=o(e.components);return n.createElement(m.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,s=e.originalType,m=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),d=o(a),g=i,u=d["".concat(m,".").concat(g)]||d[g]||p[g]||s;return a?n.createElement(u,l(l({ref:t},c),{},{components:a})):n.createElement(u,l({ref:t},c))}));function g(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=a.length,l=new Array(s);l[0]=d;var r={};for(var m in t)hasOwnProperty.call(t,m)&&(r[m]=t[m]);r.originalType=e,r.mdxType="string"==typeof e?e:i,l[1]=r;for(var o=2;o<s;o++)l[o]=a[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},48720:(e,t,a)=>{a.d(t,{D:()=>i.Z,Z:()=>s});var n=a(67294),i=a(75402);const s=function(e){return n.createElement(i.Z.Consumer,null,(t=>{let{syntax:a}=t;return a===e.syntax?e.children:n.createElement(n.Fragment,null)}))}},42592:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>m,toc:()=>c});var n=a(87462),i=(a(67294),a(3905)),s=a(48720);const l={id:"cheat-sheet",title:"Cheat Sheet"},r=void 0,m={unversionedId:"api/cheat-sheet",id:"version-1.5.0/api/cheat-sheet",title:"Cheat Sheet",description:"Contract, view and test",source:"@site/versioned_docs/version-1.5.0/api/cheat-sheet.md",sourceDirName:"api",slug:"/api/cheat-sheet",permalink:"/docs/1.5.0/api/cheat-sheet",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"cheat-sheet",title:"Cheat Sheet"}},o={},c=[],p={toc:c};function d(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("div",{className:"cheatsheet"},(0,i.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("div",{className:"codeTable"},(0,i.kt)("div",{className:"primitive"},"Contract, view and test"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=simple_contract_with_view_and_test",group:"simple_contract_with_view_and_test"},'module C = struct\n  type storage = int\n\n  [@entry]\n  let increment (action: int) (store: storage) : operation list * storage =\n    [], store + action\n\n  [@entry]\n  let decrement (action: int) (store: storage) : operation list * storage =\n    [], store - action\n\n  [@view]\n  let get_storage (must_be_positive: bool) (storage: int) : int =\n    if must_be_positive && storage < 0 then\n      failwith "Negative value in storage"\n    else\n      storage\nend\n\nlet testC =\n    let initial_storage = 42 in\n    let originated = Test.originate (contract_of C) initial_storage 0tez in\n    let p : C parameter_of = Increment 1 in\n    let _ = Test.transfer_exn originated.addr p 1mutez in\n    assert (Test.get_storage originated.addr = initial_storage + 1)\n'))),(0,i.kt)("div",{className:"primitive"},"Strings"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},'let name : string = "Tezos"\n'))),(0,i.kt)("div",{className:"primitive"},"Characters"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},'let t : string = "t"\n'))),(0,i.kt)("div",{className:"primitive"},"Integers"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},"let i : int = 42\n"))),(0,i.kt)("div",{className:"primitive"},"Natural numbers"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},"let n : nat = 7n\n"))),(0,i.kt)("div",{className:"primitive"},"Unit"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},"let u : unit = unit\n"))),(0,i.kt)("div",{className:"primitive"},"Boolean"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},"let has_drivers_license : bool = false\nlet adult : bool = true\n"))),(0,i.kt)("div",{className:"primitive"},"Boolean Logic"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},"let booleanLogic : bool =\n    (not true) =\n    false =\n    (false && true) =\n    (false || false)\n"))),(0,i.kt)("div",{className:"primitive"},"Mutez (micro tez)"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},"let tez : tez = 42tez\nlet tez : tez = 7mutez\n"))),(0,i.kt)("div",{className:"primitive"},"Address"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},'let tz1address : address =\n  ("tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" : address)\nlet kt1address : address =\n  ("KT1JepfBfMSqkQyf9B1ndvURghGsSB8YCLMD" : address)\n'))),(0,i.kt)("div",{className:"primitive"},"String"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},'let my_str : string = "Hello World!"\n'))),(0,i.kt)("div",{className:"primitive"},"Verbatim string"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},"let verbatim_str : string = {|verbatim string|}\n"))),(0,i.kt)("div",{className:"primitive"},"Addition"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},"let add_int : int = 3 + 4\nlet add_nat : nat = 3n + 4n\n"))),(0,i.kt)("div",{className:"primitive"},"Multiplication & Division"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},"let mul_int : int = 3 * 4\nlet mul_nat : nat = 3n * 4n\n\nlet div_int : int = 10 / 5\nlet div_nat : nat = 10n / 5n\n"))),(0,i.kt)("div",{className:"primitive"},"Modulo"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},"let mod_nat : nat = 10 mod 3\n"))),(0,i.kt)("div",{className:"primitive"},"Tuples"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},'type name = string * string\n\nlet winner : name = "John", "Doe"\n\nlet firstName : string = winner.0\nlet lastName : string = winner.1\n'))),(0,i.kt)("div",{className:"primitive"},"Types"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},"type age = int\ntype name = string\n"))),(0,i.kt)("div",{className:"primitive"},"Include (prefer import)"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"skip",skip:!0},'#include "library.mligo"\n'))),(0,i.kt)("div",{className:"primitive"},"Import (better)"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"skip",skip:!0},'#import "library.mligo" "MyLibrary"\nlet foo = MyLibrary.bar\n'))),(0,i.kt)("div",{className:"primitive"},"Functions"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},"let add (a : int) (b : int) : int =\n  a + b\n"))),(0,i.kt)("div",{className:"primitive"},"If Statement"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},'let can_drive (age : nat) : string =\n  if age >= 16n then "yes" else "no"\n'))),(0,i.kt)("div",{className:"primitive"},"Options"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},'type middle_name = string option\nlet middle_name : middle_name = Some "Foo"\nlet middle_name : middle_name = None\n'))),(0,i.kt)("div",{className:"primitive"},"Variable Binding"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},"let age : int = 5\n"))),(0,i.kt)("div",{className:"primitive"},"Type Annotations"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},'let someAddress : address =\n  ("tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" : address)\n'))),(0,i.kt)("div",{className:"primitive"},"Variants"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=variants",group:"variants"},"type action =\n  Increment of int\n| Decrement of int\n"))),(0,i.kt)("div",{className:"primitive"},"Variant *(pattern)* matching"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=variants",group:"variants"},"let a : action = Increment 5\n\nlet result : int =\n  match a with\n    Increment n -> n + 1\n  | Decrement n -> n - 1\n"))),(0,i.kt)("div",{className:"primitive"},"Records"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},'type person = {\n  age  : int;\n  name : string\n}\n\nlet john : person = {\n  age  = 18;\n  name = "john doe"\n}\n\nlet name : string = john.name\n'))),(0,i.kt)("div",{className:"primitive"},"Maps"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},"type prices = (nat, tez) map\n\nlet prices : prices =\n  Map.literal [\n    (10n, 60mutez);\n    (50n, 30mutez);\n    (100n, 10mutez);\n  ]\n\nlet price : tez option = Map.find_opt 50n prices\n\nlet prices : prices = Map.update 200n (Some 5mutez) prices\n"))),(0,i.kt)("div",{className:"primitive"},"Contracts & Accounts"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=tezos_specific",group:"tezos_specific"},'let destinationAddress : address =\n  ("tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" : address)\n\nlet contract : unit contract =\n  match (Tezos.get_contract_opt (Tezos.get_sender ()) : unit contract option) with\n    Some contract -> contract\n    | None -> (failwith "no contract" : unit contract)\n'))),(0,i.kt)("div",{className:"primitive"},"Transactions"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=tezos_specific",group:"tezos_specific"},"\nlet payment : operation =\n  Tezos.transaction unit 100mutez contract\n\n"))),(0,i.kt)("div",{className:"primitive"},"Exception/Failure"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},'let fail (u : unit) : unit =\n  failwith "a failure message"\n'))),(0,i.kt)("div",{className:"primitive"},"Comb layout (default)"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},"type animal =\n[@layout comb]\n| Elephant\n| Dog\n| Cat\n"))),(0,i.kt)("div",{className:"primitive"},"Tree layout"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},"type animal =\n[@layout tree]\n| Elephant\n| Dog\n| Cat\n"))),(0,i.kt)("div",{className:"primitive"},"Module definition (auto-inferred type)"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},"module FA0_inferred = struct\n  type t = unit\n  [@entry] let transfer (_ : unit) (_ : t) : operation list * t = [], ()\nend\n"))),(0,i.kt)("div",{className:"primitive"},"Module Type"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},"module type FA0_SIG = sig\n  type t\n  [@entry] val transfer : unit -> t -> operation list * t\nend\n"))),(0,i.kt)("div",{className:"primitive"},"Extending Module Type"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},"module type FA0Ext_SIG = sig\n  include FA0_SIG\n  [@entry] val transfer2 : unit -> t -> operation list * t\nend\n"))),(0,i.kt)("div",{className:"primitive"},"Module definition"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},"module FA0 : FA0_SIG = struct\n  type t = unit\n  [@entry] let transfer (_ : unit) (_ : t) : operation list * t = [], ()\nend\n"))),(0,i.kt)("div",{className:"primitive"},"Extending module definition"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo"},"module FA0Ext : FA0Ext_SIG = struct\n  include FA0\n  [@entry] let transfer2 (a : unit) (b : t) = transfer a b\nend\n"))))),(0,i.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("div",{className:"codeTable"},(0,i.kt)("div",{className:"primitive"},"Contract, view and test"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=simple_contract_with_view_and_test",group:"simple_contract_with_view_and_test"},'namespace C {\n  export type storage = int;\n\n  @entry\n  const increment = (action: int, store: storage) : [list <operation>, storage] => [list([]), store + action];\n\n  @entry\n  const decrement = (action: int, store: storage) : [list <operation>, storage] => [list([]), store - action];\n\n  @view\n  const get_storage = (must_be_positive: bool, storage: int): int => {\n    if (must_be_positive && storage < 0) {\n      return failwith("Negative value in storage");\n    } else {\n      return storage;\n    }\n  }\n};\n\nconst testC = do {\n    let initial_storage = 42;\n    let originated = Test.originate(contract_of(C), initial_storage, 0tez);\n    let p : parameter_of C = Increment(1);\n    Test.transfer_exn(originated.addr, p, 1mutez);\n    return assert(Test.get_storage(originated.addr) == initial_storage + 1);\n}\n'))),(0,i.kt)("div",{className:"primitive"},"Strings"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},'const name: string = "Tezos";\n'))),(0,i.kt)("div",{className:"primitive"},"Characters"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},'const t: string = "t";\n'))),(0,i.kt)("div",{className:"primitive"},"Integers"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},"const i: int = 42;\n"))),(0,i.kt)("div",{className:"primitive"},"Natural numbers"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},"const n: nat = 7n;\n"))),(0,i.kt)("div",{className:"primitive"},"Unit"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},"const u: unit = unit;\n"))),(0,i.kt)("div",{className:"primitive"},"Boolean"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},"const has_drivers_license: bool = false\nconst adult: bool = true\n"))),(0,i.kt)("div",{className:"primitive"},"Boolean Logic"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},"const booleanLogic: bool =\n    (!true) ==\n    false ==\n    (false && true) ==\n    (false || false)\n"))),(0,i.kt)("div",{className:"primitive"},"Mutez (micro tez)"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},"const tez_amount: tez = 42tez\nconst tez_amount2: tez = tez_amount + 7mutez // == 42000007mutez\n"))),(0,i.kt)("div",{className:"primitive"},"Address"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},'const tz1address: address =\n  "tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" as address;\nconst kt1address: address =\n  "KT1JepfBfMSqkQyf9B1ndvURghGsSB8YCLMD" as address;\n'))),(0,i.kt)("div",{className:"primitive"},"String"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},'const my_str : string = "Hello World!";\n'))),(0,i.kt)("div",{className:"primitive"},"Verbatim string"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},"const verbatim_str : string = `verbatim string`;\n"))),(0,i.kt)("div",{className:"primitive"},"Addition"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},"const add_int: int = 3 + 4;\nconst add_nat: nat = 3n + 4n;\n"))),(0,i.kt)("div",{className:"primitive"},"Multiplication & Division"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},"const mul_int: int = 3 * 4;\nconst mul_nat: nat = 3n * 4n;\n\nconst div_int: int = 10 / 5;\nconst div_nat: nat = 10n / 5n; // can fail (division by zero), check your inputs first.\n"))),(0,i.kt)("div",{className:"primitive"},"Modulo"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},"const mod_nat: nat = 10 % 3; // can fail (division by zero), check your inputs first.\n"))),(0,i.kt)("div",{className:"primitive"},"Tuples"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},'type name = [string, string];\n\nconst winner: name = ["John", "Doe"];\n\nconst firstName: string = winner[0];\nconst lastName: string = winner[1];\n'))),(0,i.kt)("div",{className:"primitive"},"Types"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=b",group:"b"},"type age = int\ntype name = string\n"))),(0,i.kt)("div",{className:"primitive"},"Include (prefer import)"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"skip",skip:!0},'#include "library.jsligo"\n'))),(0,i.kt)("div",{className:"primitive"},"Import (better)"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"skip",skip:!0},'#import "library.jsligo" "MyLibrary"\nconst foo = MyLibrary.bar;\n'))),(0,i.kt)("div",{className:"primitive"},"Functions (short form)"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},"const add = (a: int, b: int): int =>\n  a + b;\n"))),(0,i.kt)("div",{className:"primitive"},"Functions (long form)"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=b",group:"b"},"const add = (a: int, b: int): int => {\n  let c = a;\n  let d = b;\n  return c + d\n};\n"))),(0,i.kt)("div",{className:"primitive"},"If/else Statement"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},'function if_statement (age : nat): string {\n  if (age >= 16n) return "yes" else return "no"\n}\n'))),(0,i.kt)("div",{className:"primitive"},"Options"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},'type middle_name = option<string>;\nconst a_middle_name : middle_name = Some("Foo");\nconst no_middle_name : middle_name = None();\n'))),(0,i.kt)("div",{className:"primitive"},"Variable Binding"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},"const age: int = 5\n"))),(0,i.kt)("div",{className:"primitive"},"Type Annotations"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},'const someAddress: address =\n  "tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" as address;\n'))),(0,i.kt)("div",{className:"primitive"},"Variants (label + optional value)"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=variants",group:"variants"},'type action =\n  ["Increment", int]\n| ["Decrement", int]\n| ["Reset"];\n'))),(0,i.kt)("div",{className:"primitive"},"Matching on variant cases"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=variants",group:"variants"},"let a: action = Increment(5)\nconst result: int = match(a) {\n  when(Increment(n)): n + 1;\n  when(Decrement(n)): n - 1;\n  when(Reset()): 0;\n}\n"))),(0,i.kt)("div",{className:"primitive"},"Records / Plain Old Data Objects"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},'type person = {\n  age: int,\n  name: string\n}\n\nconst john : person = {\n  age: 18,\n  name: "john doe"\n}\n\nconst name_: string = john.name\n'))),(0,i.kt)("div",{className:"primitive"},"Maps"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},"type prices = map<nat, tez>;\n\nconst prices: prices = Map.literal(list([\n  [10n, 60mutez],\n  [50n, 30mutez],\n  [100n, 10mutez]\n]));\n\nconst price: option<tez> = Map.find_opt(50n, prices)\n\nconst prices2: prices = Map.update(200n, Some (5mutez), prices)\n"))),(0,i.kt)("div",{className:"primitive"},"Contracts & Accounts"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=tezos_specific",group:"tezos_specific"},'const destinationAddress: address =\n  "tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" as address;\n\nconst contract : contract<unit> =\n  match(Tezos.get_contract_opt(Tezos.get_sender()) as option<contract<unit>>) {\n    when(Some(contract)): contract;\n    when(None()): failwith("no contract or wrong contract type")\n  }\n'))),(0,i.kt)("div",{className:"primitive"},"Transactions"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=tezos_specific",group:"tezos_specific"},"const payment: operation =\n  Tezos.transaction(unit, 100mutez, contract);\n"))),(0,i.kt)("div",{className:"primitive"},"Exception/Failure"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},'const fail = (u: unit) : unit =>\n  failwith("a failure message")\n'))),(0,i.kt)("div",{className:"primitive"},"Comb layout (default)"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},'type animal =\n@layout("comb")\n| ["Elephant"]\n| ["Dog"]\n| ["Cat"];\n'))),(0,i.kt)("div",{className:"primitive"},"Tree layout"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},'type animal =\n@layout("tree")\n| ["Elephant"]\n| ["Dog"]\n| ["Cat"];\n'))),(0,i.kt)("div",{className:"primitive"},"Namespace (auto-inferred type)"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},"namespace FA0_inferred {\n  type storage = int;\n  @entry const add = (s : int, k : int) : [list<operation>, int] => [list([]), s + k];\n  @entry const extra = (s : int, k : int) : [list<operation>, int] => [list([]), s - k];\n}\n"))),(0,i.kt)("div",{className:"primitive"},"Interface"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},"interface FA0_INTF {\n  type storage;\n  @entry const add : (s : int, k : storage) => [list<operation>, storage];\n}\n"))),(0,i.kt)("div",{className:"primitive"},"Extending Interface"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},"interface FA0_EXT_INTF extends FA0_INTF {\n  type storage;\n  @entry const add : (s : int, k : storage) => [list<operation>, storage];\n}\n"))),(0,i.kt)("div",{className:"primitive"},"Namespace impmlementing"),(0,i.kt)("div",{className:"example"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo"},"namespace FA0 implements FA0_INTF {\n  export type storage = int;\n  @entry const add = (s : int, k : int) : [list<operation>, int] => [list([]), s + k];\n  @entry const extra = (s : int, k : int) : [list<operation>, int] => [list([]), s - k];\n}\n"))),(0,i.kt)("div",{className:"primitive"},"Extending namespace"),(0,i.kt)("div",{className:"example"},(0,i.kt)("p",null,"Not available in JsLIGO, use CameLIGO."))))))}d.isMDXComponent=!0}}]);