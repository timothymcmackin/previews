"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[40219],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),f=c(n),y=i,b=f["".concat(l,".").concat(y)]||f[y]||u[y]||s;return n?r.createElement(b,o(o({ref:t},p),{},{components:n})):r.createElement(b,o({ref:t},p))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,o=new Array(s);o[0]=f;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:i,o[1]=a;for(var c=2;c<s;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>i.Z,Z:()=>s});var r=n(67294),i=n(75402);const s=function(e){return r.createElement(i.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},32771:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(87462),i=(n(67294),n(3905)),s=n(48720);const o={id:"bitwise",title:"Bitwise"},a=void 0,l={unversionedId:"tezos/bytes/bitwise",id:"version-1.6.0/tezos/bytes/bitwise",title:"Bitwise",description:"The bitwise operations on sequences of bytes are as follows:",source:"@site/versioned_docs/version-1.6.0/tezos/bytes/bitwise.md",sourceDirName:"tezos/bytes",slug:"/tezos/bytes/bitwise",permalink:"/docs/1.6.0/tezos/bytes/bitwise",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"bitwise",title:"Bitwise"},sidebar:"docs",previous:{title:"Slicing",permalink:"/docs/1.6.0/tezos/bytes/slicing"},next:{title:"Packing & Unpacking",permalink:"/docs/1.6.0/tezos/bytes/packing"}},c={},p=[],u={toc:p};function f(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The bitwise operations on sequences of bytes are as follows:"),(0,i.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=bitwise",group:"bitwise"},'// Bitwise "and"\nlet and : bytes = 0x0005 land 0x0106 // 0x0004\n\n// Bitwise "or"\nlet @or : bytes = 0x0005 lor 0x0106 // 0x0107\n\n// Bitwise "xor"\nlet xor : bytes = 0x0005 lxor 0x0106 // 0x0103\n\n// Bitwise "shift left"\nlet shift_left : bytes = 0x06 lsl 8n // 0x0600\n\n// Bitwise "shift right"\nlet shift_right : bytes = 0x0006 lsr 1n // 0x0003\n'))),(0,i.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=bitwise",group:"bitwise"},'// Bitwise "and"\nconst and: bytes = 0x0005 & 0x0106; // 0x0004\n\n// Bitwise "or"\nconst or: bytes = 0x0005 | 0x0106; // 0x0107\n\n// Bitwise "xor"\nconst xor: bytes = 0x0005 ^ 0x0106; // 0x0103\n\n// Bitwise "shift left"\nconst shift_left: bytes = 0x06 << 8n; // 0x0600\n\n// Bitwise "shift right"\nconst shift_right: bytes = 0x0006 >> 1n; // 0x0003\n'))))}f.isMDXComponent=!0}}]);