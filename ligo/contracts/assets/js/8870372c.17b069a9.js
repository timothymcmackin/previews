"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[37205],{48720:(e,n,t)=>{t.d(n,{D:()=>i.Z,Z:()=>o});var a=t(67294),i=t(75402);const o=function(e){return a.createElement(i.Z.Consumer,null,(n=>{let{syntax:t}=n;return t===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},99191:(e,n,t)=>{t.d(n,{Z:()=>p});var a=t(43164),i=t(67294),o=t(52263),s=t(48720),r=t(11506);function l(){return l=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},l.apply(this,arguments)}const{Prism:c}=t(43164);c.languages={...c.languages,cameligo:{...c.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:c.languages.typescript};const p=function(e){const{siteConfig:{themeConfig:{prism:n={}}}}=(0,o.Z)(),t=n.singleTheme||r.Z,[c,p]=(0,i.useState)(!1);return(0,i.useEffect)((()=>{p(!0)}),[]),i.createElement(s.D.Consumer,null,(n=>{let{syntax:o}=n;return o===e.syntax?i.createElement(a.default,l({},a.defaultProps,{key:c,language:e.syntax,code:e.children,theme:t}),(e=>{let{className:n,tokens:t,getLineProps:a,getTokenProps:o}=e;return i.createElement("h4",{className:n,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},t.map(((e,n)=>i.createElement("div",a({line:e,key:n}),e.map(((e,n)=>i.createElement("span",o({token:e,key:n}))))))))})):i.createElement("div",null)}))}},12772:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>c,toc:()=>g});var a=t(87462),i=(t(67294),t(3905)),o=t(48720),s=t(99191);const r={id:"views",title:"LIGO views",description:"Views for Tezos written in LIGO",hide_table_of_contents:!0},l=void 0,c={unversionedId:"contract/views",id:"version-1.7.0/contract/views",title:"LIGO views",description:"Views for Tezos written in LIGO",source:"@site/versioned_docs/version-1.7.0/contract/views.md",sourceDirName:"contract",slug:"/contract/views",permalink:"/docs/contract/views",draft:!1,tags:[],version:"1.7.0",frontMatter:{id:"views",title:"LIGO views",description:"Views for Tezos written in LIGO",hide_table_of_contents:!0}},p={},g=[{value:"Defining On-Chain Views",id:"defining-on-chain-views",level:2},{value:"Calling On-Chain Views",id:"calling-on-chain-views",level:2},{value:"Defining Off-Chain Views",id:"defining-off-chain-views",level:2}],d={toc:g};function m(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"defining-on-chain-views"},"Defining On-Chain Views"),(0,i.kt)("p",null,"On-chain views can be defined using the ",(0,i.kt)("inlineCode",{parentName:"p"},"@view")," attribute. For more information ",(0,i.kt)("a",{parentName:"p",href:"/docs/protocol/hangzhou"},"see here"),"."),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=onchainviews",group:"onchainviews"},"type storage = string\ntype ret = operation list * storage\n\n[@entry]\nlet main (word : string) (store : storage) : ret\n  = [] , store ^ \" \" ^ word\n\n(* view 'view1', simply returns the storage *)\n[@view] let view1 (() : unit) (s : storage) : storage\n  = s\n\n(* view 'v2', returns true if the storage has a given length *)\n[@view] let v2 (expected_length : nat) (s : storage) : bool\n  = (String.length s = expected_length)\n\n(* view 'v3' does not use its parameters and returns a constant int *)\n[@view] let v3 (() : unit) (_ : storage) : int\n  = 42\n"))),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=onchainviews",group:"onchainviews"},"type storage = string\ntype ret = [list<operation>, storage];\n\nconst main = (word : string, store : storage) : ret\n  => [[] , store + \" \" + word]\n\n/* view 'view1', simply returns the storage */\n@view\nconst view1 = (_arg : unit, s : storage) : storage\n  => s;\n\n/* view 'v2', returns true if the storage has a given length */\n@view\nconst v2 = (expected_length : nat , s : storage) : bool\n  => (String.length (s) == expected_length);\n\n/* view 'view3' does not use its parameters and returns a constant int */\n@view\nconst view3 = (_arg : unit , _s : storage) : int\n  => 42;\n"))),(0,i.kt)("h2",{id:"calling-on-chain-views"},"Calling On-Chain Views"),(0,i.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val call_view : string -> 'arg -> address -> 'ret option"),(0,i.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let call_view : string => 'arg => address => option <'ret>"),(0,i.kt)("p",null,"The primitive ",(0,i.kt)("inlineCode",{parentName:"p"},"Tezos.call_view")," will allow you to call another contract view and get its result by providing the view name; the contract address and the parameter of the view. If the address is nonexistent; the name does not match of of the contract\nview or the parameter type do not match, ",(0,i.kt)("inlineCode",{parentName:"p"},"Tezos.call_view")," will return ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),"."),(0,i.kt)("h2",{id:"defining-off-chain-views"},"Defining Off-Chain Views"),(0,i.kt)("p",null,"In addition to on-chain views, LIGO views can be compiled and used as off-chain views (e.g. to be placed in metadata)."),(0,i.kt)("p",null,"To compile an expression as a off-chain view, we can use the LIGO sub-command ",(0,i.kt)("inlineCode",{parentName:"p"},"compile expression"),", passing the ",(0,i.kt)("inlineCode",{parentName:"p"},"--function-body")," flag. Moreover, the ",(0,i.kt)("inlineCode",{parentName:"p"},"--init-file")," argument can be passed to\nre-use expressions from a file."),(0,i.kt)("p",null,"For example, if we have the following ",(0,i.kt)("inlineCode",{parentName:"p"},"off_chain")," file containing a contract ",(0,i.kt)("inlineCode",{parentName:"p"},"C"),":"),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=view_file",group:"view_file"},'module C = struct\n  type storage = string\n\n  [@entry] let append (a : string) (s : storage) : operation list * storage = [] , s ^ a\n\n  [@entry] let clear (_ : unit) (_ : storage) : operation list * storage = [] , ""\n\n  let v (expected_length: nat) (s: storage) : bool = (String.length s = expected_length)\nend\n'))),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=view_file",group:"view_file"},'namespace C {\n  type storage = string\n\n  @entry\n  const append = (a: string, s: storage) : [list<operation> , storage] => [[], s + a];\n\n  @entry\n  const clear = (_p: unit, _s: storage) : [list<operation>, storage] => [[], ""];\n\n  export const v = (expected_length: nat, s: storage) : bool => (String.length (s) == expected_length);\n}\n'))),(0,i.kt)("p",null,"We can compile function ",(0,i.kt)("inlineCode",{parentName:"p"},"v")," from contract ",(0,i.kt)("inlineCode",{parentName:"p"},"C")," as an off-chain view as follows:"),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"Input"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'\u276f ligo compile expression cameligo "C.v" --init-file off_chain.mligo --function-body\n')),(0,i.kt)("p",null,"Output"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"{ UNPAIR ; SWAP ; SIZE ; COMPARE ; EQ }\n"))),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"Input"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'\u276f ligo compile expression jsligo "C.v" --init-file off_chain.jsligo --function-body\n')),(0,i.kt)("p",null,"Output"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"{ UNPAIR ; SWAP ; SIZE ; COMPARE ; EQ }\n"))),(0,i.kt)("p",null,"Notice that ",(0,i.kt)("inlineCode",{parentName:"p"},"v")," is not a contract entry of ",(0,i.kt)("inlineCode",{parentName:"p"},"C")," (no ",(0,i.kt)("inlineCode",{parentName:"p"},"@entry"),") nor a on-chain view (no ",(0,i.kt)("inlineCode",{parentName:"p"},"@view"),"), it is just a function declared in the context of the contract, which can be used as an off-chain view."))}m.isMDXComponent=!0}}]);