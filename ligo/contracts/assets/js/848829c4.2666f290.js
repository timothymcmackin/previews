"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[17282],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(t),d=a,g=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return t?r.createElement(g,i(i({ref:n},p),{},{components:t})):r.createElement(g,i({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},48720:(e,n,t)=>{t.d(n,{D:()=>a.Z,Z:()=>o});var r=t(67294),a=t(75402);const o=function(e){return r.createElement(a.Z.Consumer,null,(n=>{let{syntax:t}=n;return t===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},47537:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=t(87462),a=(t(67294),t(3905)),o=t(48720);const i={id:"declaring",title:"Declaring"},l=void 0,s={unversionedId:"numbers/declaring",id:"version-1.6.0/numbers/declaring",title:"Declaring",description:"In LIGO, there are two types of numbers: integers and natural",source:"@site/versioned_docs/version-1.6.0/numbers/declaring.md",sourceDirName:"numbers",slug:"/numbers/declaring",permalink:"/previews/ligo/contracts/docs/1.6.0/numbers/declaring",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"declaring",title:"Declaring"},sidebar:"docs",previous:{title:"Silent variables",permalink:"/previews/ligo/contracts/docs/1.6.0/constants/silent_vars"},next:{title:"Casting",permalink:"/previews/ligo/contracts/docs/1.6.0/numbers/casting"}},c={},p=[],u={toc:p};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In LIGO, there are two types of numbers: integers and natural\nnumbers."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Integer literals are the same found in mainstream programming\nlanguages, for example, ",(0,a.kt)("inlineCode",{parentName:"p"},"10"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"-6")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),", but there is only one\ncanonical zero: ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," (so, for instance, ",(0,a.kt)("inlineCode",{parentName:"p"},"-0")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"00")," are invalid).")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Natural numbers are written as digits followed by the suffix ",(0,a.kt)("inlineCode",{parentName:"p"},"n"),",\nlike so: ",(0,a.kt)("inlineCode",{parentName:"p"},"12n"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"0n"),", and the same restriction on zero as integers\napplies: ",(0,a.kt)("inlineCode",{parentName:"p"},"0n")," is the only way to specify the natural zero."))),(0,a.kt)("p",null,"Contrary to integral numbers in other programming languages, numbers\nin LIGO have arbitrary-precision, that is, they do not overflow or\nunderflow. (See ",(0,a.kt)("a",{parentName:"p",href:"/previews/ligo/contracts/docs/1.6.0/language-basics/tezos-specific"},"Tezos-specific features")," for more)."),(0,a.kt)("p",null,"Digits of large numbers can be separated by an underscore, to increase\nreadability."),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=int_and_nat",group:"int_and_nat"},"// The following are integers\nlet zero = 0\nlet million = 1_000_000 // Grouping in French\nlet baekman = 100_0000 // Grouping in Korean\n\n// The following are natural numbers\nlet zero_nat = 0n\nlet million_nat = 1_000_000n\nlet baekman_nat = 100_0000n\n")),(0,a.kt)("p",null,"As a form of documentation, a type can be ascribed to each constant:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=typed_int_and_nat",group:"typed_int_and_nat"},"let zero : int = 0\nlet million : int = 1_000_000\nlet baekman : int = 100_0000\n\nlet zero_nat : nat = 0n\nlet million_nat : nat = 1_000_000n\nlet baekman_nat : nat = 100_0000n\n"))),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=int_and_nat",group:"int_and_nat"},"// The following are integers\nconst zero = 0\nconst million = 1_000_000 // Grouping in French\nconst baekman = 100_0000 // Grouping in Korean\n\n// The following are natural numbers\nconst zero_nat = 0n\nconst million_nat = 1_000_000n\nconst baekman_nat = 100_0000n\n")),(0,a.kt)("p",null,"As a form of documentation, a type can be ascribed to each constant:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=typed_int_and_nat",group:"typed_int_and_nat"},"const zero : int = 0\nconst million : int = 1_000_000\nconst baekman : int = 100_0000\n\nconst zero_nat : nat = 0n\nconst million_nat : nat = 1_000_000n\nconst baekman_nat : nat = 100_0000n\n"))))}m.isMDXComponent=!0}}]);