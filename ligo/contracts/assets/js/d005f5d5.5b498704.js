"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[52410],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},85761:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={},i=void 0,l={unversionedId:"manpages/compile contract",id:"manpages/compile contract",title:"compile contract",description:"SYNOPSIS",source:"@site/../docs/manpages/compile contract.md",sourceDirName:"manpages",slug:"/manpages/compile contract",permalink:"/docs/next/manpages/compile contract",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"API",previous:{title:"compile constant",permalink:"/docs/next/manpages/compile constant"},next:{title:"compile expression",permalink:"/docs/next/manpages/compile expression"}},s={},p=[{value:"SYNOPSIS",id:"synopsis",level:3},{value:"DESCRIPTION",id:"description",level:3},{value:"FLAGS",id:"flags",level:3}],c={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"synopsis"},"SYNOPSIS"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"ligo compile contract SOURCE_FILE\n")),(0,r.kt)("h3",{id:"description"},"DESCRIPTION"),(0,r.kt)("p",null,'This sub-command compiles a contract to Michelson code. It expects a source file and an entrypoint function that has the type of a contract: "parameter ',(0,r.kt)("em",{parentName:"p"}," storage -> operations list "),' storage". If top-level is not a contract and defines only one contract module, this module become the compilation target (to avoid usage of -m)'),(0,r.kt)("h3",{id:"flags"},"FLAGS"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"--constants CONSTANTS"),"\nA list of global constants that will be assumed in the context, separated by ',' (alias: -c)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"--disable-michelson-typechecking"),"\nDisable Michelson typecking, this might produce ill-typed Michelson code."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"--display-format FORMAT"),"\nthe format that will be used by the CLI. Available formats are 'dev', 'json', and 'human-readable' (default). When human-readable lacks details (we are still tweaking it), please contact us and use another format in the meanwhile. (alias: --format)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"--enable-michelson-typed-opt"),"\nEnable Michelson optimizations that work using typecking."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"--experimental-disable-optimizations-for-debugging"),"\nExperimental: Disable certain optimizations in order to simplify the relationship between the source LIGO and the target Michelson. Intended for use with stepwise Michelson debuggers."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"--feature-infer-array-as-list"),"\nInfer array as lists."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"--file-constants FILE_CONSTANTS"),"\nA file with a JSON list of strings with Michelson code. Those Michelson values will be registered as global constants in the context."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"--library LIBS"),"\nA comma-separated list of paths to directories where to search for files to be included by the preprocessor (alias: -l)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"--michelson-comments COMMENT_TYPE"),"\n.. Selects kinds of comments to be added to the Michelson output. Currently 'location' and 'env' are supported. 'location' propagates original source locations. 'env' inserts additional empty Seq nodes with comments relating the Michelson stack to the source LIGO environment."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"--michelson-format CODE_FORMAT"),"\nformat that will be used by compile-contract for the resulting Michelson. Available formats are 'text' (default), 'json', 'msgpack' and 'hex'."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"--no-color"),"\ndisable coloring in CLI output"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"--no-metadata-check"),"\ndisable TZIP-16 metadata compliance check"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"--no-stdlib"),"\ndisable stdlib inclusion."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"--no-warn"),"\ndisable warning messages"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"--output-file FILENAME"),"\nif used, prints the output into the specified file instead of stdout (alias: -o)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"--project-root PATH"),"\nThe path to root of the project."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"--skip-analytics"),"\nAvoid ligo analytics publication. Configurable with environment variable LIGO_SKIP_ANALYTICS too"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"--syntax SYNTAX"),'\nthe syntax that will be used. Currently supported syntaxes are "cameligo" and "jsligo". By default, the syntax is guessed from the extension (.mligo and .jsligo respectively). (alias: -s)'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"--transpiled"),"\nDisable checks that are unapplicable to transpiled contracts."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"--views VIEWS"),"\n(this command is deprecated) A list of declaration name that will be compiled as on-chain views, separated by ',' (alias: -v)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"--warn-infinite-loop"),"\nwarn about infinite loop"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"--warn-unused-rec"),"\nwarn about unused recursion in a recursive function"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"--werror"),"\ntreat warnings as errors"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"-D pass"),"\na list of defines to the preprocessor"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"-e ENTRY-POINT"),"\n(this command is deprecated) the entry-point that will be compiled. (alias: --entry-point)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"-m MODULE"),"\nthe entry-point will be compiled from that module. Files containing a single contract module are automatically infered (alias: --module)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"-p PROTOCOL"),"\nchoose protocol's types/values pre-loaded into the LIGO environment (deprecated) (alias: --protocol)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"-help"),"\nprint this help text and exit (alias: -?)"))}m.isMDXComponent=!0}}]);