"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[94058],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(n),f=a,d=u["".concat(l,".").concat(f)]||u[f]||m[f]||o;return n?r.createElement(d,i(i({ref:t},c),{},{components:n})):r.createElement(d,i({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>o});var r=n(67294),a=n(75402);const o=function(e){return r.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},18101:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(87462),a=(n(67294),n(3905)),o=n(48720);const i={id:"folding",title:"Folding"},p=void 0,l={unversionedId:"maps/folding",id:"version-1.6.0/maps/folding",title:"Folding",description:"A functional iterator is a function that traverses a data structure",source:"@site/versioned_docs/version-1.6.0/maps/folding.md",sourceDirName:"maps",slug:"/maps/folding",permalink:"/previews/ligo/contracts/docs/1.6.0/maps/folding",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"folding",title:"Folding"},sidebar:"docs",previous:{title:"Updating",permalink:"/previews/ligo/contracts/docs/1.6.0/maps/updating"},next:{title:"Mapping",permalink:"/previews/ligo/contracts/docs/1.6.0/maps/mapping"}},s={},c=[],m={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A ",(0,a.kt)("em",{parentName:"p"},"functional iterator")," is a function that traverses a data structure\nand calls in turn a given function over the elements of that structure\nto compute some value. Another approach is sometimes possible:\n",(0,a.kt)("em",{parentName:"p"},"loops"),"."),(0,a.kt)("p",null,"There are three kinds of functional iterations over maps: the ",(0,a.kt)("em",{parentName:"p"},"fold"),",\nthe ",(0,a.kt)("em",{parentName:"p"},"map")," (not to be confused with the ",(0,a.kt)("em",{parentName:"p"},"map data structure"),") and the\n",(0,a.kt)("em",{parentName:"p"},"iteration"),"."),(0,a.kt)("p",null,"Let us consider first here the fold, which is the most general form of\nfunctional iteration. The folded function takes two arguments: an\n",(0,a.kt)("em",{parentName:"p"},"accumulator")," and the structure ",(0,a.kt)("em",{parentName:"p"},"element")," at hand, with which it then\nproduces a new accumulator. This enables having a partial result that\nbecomes complete when the traversal of the data structure is over."),(0,a.kt)("p",null,"The function ",(0,a.kt)("inlineCode",{parentName:"p"},"Map.fold")," performs a fold over the binding of a map, in\nincreasing order of its keys."),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=map_folding",group:"map_folding"},"type player = string\ntype abscissa = int\ntype ordinate = int\ntype move = abscissa * ordinate\ntype game = (player, move) map\n\nlet horizontal_offset (g : game) : int =\n  let folded = fun (acc, j : int * (player * move)) -> acc + j.1.0\n  in Map.fold folded g 0\n")),(0,a.kt)("p",null,"Note: See the predefined\n",(0,a.kt)("a",{parentName:"p",href:"../reference/map-reference"},"module Map"))),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=map_folding",group:"map_folding"},"type player = string\ntype abscissa = int\ntype ordinate = int\ntype move = [abscissa, ordinate]\ntype game = map<player, move>\n\nconst horizontal_offset = (g: game): int => {\n  let folded = ([acc, j]: [int, [player, move]]) => acc + j[1][0];\n  return Map.fold(folded, g, 0);\n};\n")),(0,a.kt)("p",null,"Note: See the predefined\n",(0,a.kt)("a",{parentName:"p",href:"../reference/map-reference"},"namespace Map"))))}u.isMDXComponent=!0}}]);