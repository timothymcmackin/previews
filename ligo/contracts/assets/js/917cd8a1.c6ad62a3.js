"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[25429],{3905:(e,r,n)=>{n.d(r,{Zo:()=>p,kt:()=>m});var t=n(67294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=t.createContext({}),l=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},p=function(e){var r=l(e.components);return t.createElement(s.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},u=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?t.createElement(g,i(i({ref:r},p),{},{components:n})):t.createElement(g,i({ref:r},p))}));function m(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var s in r)hasOwnProperty.call(r,s)&&(c[s]=r[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},48720:(e,r,n)=>{n.d(r,{D:()=>a.Z,Z:()=>o});var t=n(67294),a=n(75402);const o=function(e){return t.createElement(a.Z.Consumer,null,(r=>{let{syntax:n}=r;return n===e.syntax?e.children:t.createElement(t.Fragment,null)}))}},55709:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var t=n(87462),a=(n(67294),n(3905)),o=n(48720);const i={id:"declaring",title:"Declaring"},c=void 0,s={unversionedId:"records/declaring",id:"version-1.5.0/records/declaring",title:"Declaring",description:"So far, we have seen relatively simple data types. LIGO also offers",source:"@site/versioned_docs/version-1.5.0/records/declaring.md",sourceDirName:"records",slug:"/records/declaring",permalink:"/previews/ligo/contracts/docs/1.5.0/records/declaring",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"declaring",title:"Declaring"},sidebar:"docs",previous:{title:"Looping",permalink:"/previews/ligo/contracts/docs/1.5.0/lists/looping"},next:{title:"Accessing",permalink:"/previews/ligo/contracts/docs/1.5.0/records/accessing"}},l={},p=[],d={toc:p};function u(e){let{components:r,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},d,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"So far, we have seen relatively simple data types. LIGO also offers\nmore complex built-in constructs, such as ",(0,a.kt)("em",{parentName:"p"},"records"),"."),(0,a.kt)("p",null,"Records are one-way data of different types can be packed into a\nsingle type. A record is made of a set of ",(0,a.kt)("em",{parentName:"p"},"fields"),", which are made of\na ",(0,a.kt)("em",{parentName:"p"},"field name")," and a ",(0,a.kt)("em",{parentName:"p"},"field type"),'. Given a record, the value bound to\na field is accessed by giving its name to the selection operator\n"',(0,a.kt)("inlineCode",{parentName:"p"},"."),'".'),(0,a.kt)("p",null,"Let us first consider an example of record type declaration."),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=records1",group:"records1"},"type user = {\n  id       : nat;\n  is_admin : bool;\n  name     : string\n}\n"))),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=records1",group:"records1"},"type user = {\n  id       : nat,\n  is_admin : bool,\n  name     : string\n};\n"))),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"And here is how a record value is defined:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=records1",group:"records1"},'let alice : user = {\n  id       = 1n;\n  is_admin = true;\n  name     = "Alice"\n}\n'))),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"And here is how a record value is defined:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=records1",group:"records1"},'const alice : user = {\n  id       : 1n,\n  is_admin : true,\n  name     : "Alice"\n};\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: A semicolon ",(0,a.kt)("inlineCode",{parentName:"p"},";")," can also separate fields instead of a\ncomma."))))}u.isMDXComponent=!0}}]);