"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[33408],{48720:(t,e,n)=>{n.d(e,{D:()=>i.Z,Z:()=>o});var a=n(67294),i=n(75402);const o=function(t){return a.createElement(i.Z.Consumer,null,(e=>{let{syntax:n}=e;return n===t.syntax?t.children:a.createElement(a.Fragment,null)}))}},99191:(t,e,n)=>{n.d(e,{Z:()=>u});var a=n(43164),i=n(67294),o=n(52263),r=n(48720),s=n(11506);function l(){return l=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(t[a]=n[a])}return t},l.apply(this,arguments)}const{Prism:c}=n(43164);c.languages={...c.languages,cameligo:{...c.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:c.languages.typescript};const u=function(t){const{siteConfig:{themeConfig:{prism:e={}}}}=(0,o.Z)(),n=e.singleTheme||s.Z,[c,u]=(0,i.useState)(!1);return(0,i.useEffect)((()=>{u(!0)}),[]),i.createElement(r.D.Consumer,null,(e=>{let{syntax:o}=e;return o===t.syntax?i.createElement(a.default,l({},a.defaultProps,{key:c,language:t.syntax,code:t.children,theme:n}),(t=>{let{className:e,tokens:n,getLineProps:a,getTokenProps:o}=t;return i.createElement("h4",{className:e,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((t,e)=>i.createElement("div",a({line:t,key:e}),t.map(((t,e)=>i.createElement("span",o({token:t,key:e}))))))))})):i.createElement("div",null)}))}},30057:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var a=n(87462),i=(n(67294),n(3905)),o=(n(48720),n(99191));const r={id:"test.next.mutation-reference",title:"mutation",hide_table_of_contents:!0},s=void 0,l={unversionedId:"reference/test.next.mutation-reference",id:"reference/test.next.mutation-reference",title:"mutation",description:"module all",source:"@site/../docs/reference/test.next.mutation.md",sourceDirName:"reference",slug:"/reference/test.next.mutation-reference",permalink:"/previews/ligo/contracts/docs/next/reference/test.next.mutation-reference",draft:!1,tags:[],version:"current",frontMatter:{id:"test.next.mutation-reference",title:"mutation",hide_table_of_contents:!0},sidebar:"API",previous:{title:"all",permalink:"/previews/ligo/contracts/docs/next/reference/test.next.mutation.all-reference"},next:{title:"contract",permalink:"/previews/ligo/contracts/docs/next/reference/test.next.account.contract-reference"}},c={},u=[],m={toc:u};function p(t){let{components:e,...n}=t;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/previews/ligo/contracts/docs/next/reference/test.next.mutation.all-reference"},"module all")),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val func : 'a 'b.'a -> ('a -> 'b) -> ('b * mutation) option"),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let func: <a, b>(_: a) => (_: (_: a) => b) => option<[b, mutation]>"),"Given a value to mutate (first argument), it will try all the mutations available of it, passing each one to the function (second argument). On the first case of non failure when running the function on a mutation, the value and mutation involved will be returned.",(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val from_file : 'b 'p 's.string -> 's -> tez -> ((('p, 's) typed_address * ('p, 's) michelson_contract * int) -> 'b) -> ('b * mutation) option"),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let from_file: <b, p, s>(_: string) => (_: s) => (_: tez) => (_: (_: [typed_address<p, s>, michelson_contract<p, s>, int]) => b) => option< [b, mutation] >"),"Given a contract from a file (passed by filepath, entrypoint and views), an initial storage and balance, it will originate mutants of the contract and pass the result to the function (last argument). On the first case of non failure when running the function on a mutation, the value and mutation involved will be returned.",(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val contract : 'p 's 'b.('p, 's) module_contract -> 's -> tez -> (('p, 's) typed_address -> ('p, 's) michelson_contract -> int -> 'b) -> ('b * mutation) option"),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let contract: <p, s, b>(_: module_contract<p, s>) => (_: s) => (_: tez) => ( _: (_: typed_address<p, s>) => (_: michelson_contract<p, s>) => (_: int) => b ) => option<[b, mutation]>"),"Given a contract as a module/namespace, an initial storage and balance, it will originate mutants of the contract and pass the result to the function (last argument). On the first case of non failure when running the function on a mutation, the value and mutation involved will be returned.",(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val value : 'a.nat -> 'a -> ('a * mutation) option"),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let value: <a>(_: nat) => (_: a) => option<[a, mutation]>"),"Mutates a value using a natural number as an index for the available mutations, returns an option for indicating whether mutation was successful or not.",(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val save : string -> mutation -> string option"),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let save: (_: string) => (_: mutation) => option<string>"),"This function reconstructs a file from a mutation (second argument), and saves it to a file in the directory path (first argument). It returns an optional string indicating the filename where the mutation was saved, or `None` if there was an error.")}p.isMDXComponent=!0}}]);