"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[99313],{48720:(e,n,t)=>{t.d(n,{D:()=>i.Z,Z:()=>o});var a=t(67294),i=t(75402);const o=function(e){return a.createElement(i.Z.Consumer,null,(n=>{let{syntax:t}=n;return t===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},99191:(e,n,t)=>{t.d(n,{Z:()=>m});var a=t(43164),i=t(67294),o=t(52263),p=t(48720),r=t(11506);function l(){return l=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},l.apply(this,arguments)}const{Prism:s}=t(43164);s.languages={...s.languages,cameligo:{...s.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:s.languages.typescript};const m=function(e){const{siteConfig:{themeConfig:{prism:n={}}}}=(0,o.Z)(),t=n.singleTheme||r.Z,[s,m]=(0,i.useState)(!1);return(0,i.useEffect)((()=>{m(!0)}),[]),i.createElement(p.D.Consumer,null,(n=>{let{syntax:o}=n;return o===e.syntax?i.createElement(a.default,l({},a.defaultProps,{key:s,language:e.syntax,code:e.children,theme:t}),(e=>{let{className:n,tokens:t,getLineProps:a,getTokenProps:o}=e;return i.createElement("h4",{className:n,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},t.map(((e,n)=>i.createElement("div",a({line:e,key:n}),e.map(((e,n)=>i.createElement("span",o({token:e,key:n}))))))))})):i.createElement("div",null)}))}},69860:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>l,default:()=>y,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var a=t(87462),i=(t(67294),t(3905)),o=t(48720),p=t(99191);const r={id:"option-reference",title:"option",hide_table_of_contents:!0},l=void 0,s={unversionedId:"reference/option-reference",id:"version-1.6.0/reference/option-reference",title:"option",description:"The module of optional values",source:"@site/versioned_docs/version-1.6.0/reference/option.md",sourceDirName:"reference",slug:"/reference/option-reference",permalink:"/docs/1.6.0/reference/option-reference",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"option-reference",title:"option",hide_table_of_contents:!0},sidebar:"API",previous:{title:"set",permalink:"/docs/1.6.0/reference/set-reference"},next:{title:"dynamic_entrypoints",permalink:"/docs/1.6.0/reference/dynamic-entrypoints-reference"}},m={},d=[],k={toc:d};function y(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},k,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The module of optional values"),(0,i.kt)(p.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val value : 'a.'a -> 'a option -> 'a"),(0,i.kt)(p.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let value: <a>(_: a) => (_: option<a>) => a"),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"value d opt")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"v")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"opt")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"Some v"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"d"),"\notherwise.")),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"value(d, opt)")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"v")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"opt")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"Some(v)"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"d"),"\notherwise.")),(0,i.kt)(p.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val value_with_error : 'err 'a.'err -> 'a option -> 'a"),(0,i.kt)(p.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let value_with_error: <err, a>(_: err) => (_: option<a>) => a"),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"value_with_error err opt")," terminates with the error\n",(0,i.kt)("inlineCode",{parentName:"p"},"err")," if, and only if, ",(0,i.kt)("inlineCode",{parentName:"p"},"opt")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),"; otherwise it is ",(0,i.kt)("inlineCode",{parentName:"p"},"Some v"),"\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"v")," is returned.")),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"value_with_error(err, opt)")," terminates with the error\n",(0,i.kt)("inlineCode",{parentName:"p"},"err")," if, and only if, ",(0,i.kt)("inlineCode",{parentName:"p"},"opt")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"None()"),"; otherwise it is ",(0,i.kt)("inlineCode",{parentName:"p"},"Some(v)"),"\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"v")," is returned.")),(0,i.kt)(p.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val value_exn : 'err 'a.'err -> 'a option -> 'a"),(0,i.kt)(p.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let value_exn: <err, a>(_: err) => (_: option<a>) => a"),"**Deprecated:** Use `Option.value_with_error` instead.",(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"value_exn err opt")," terminates with the error ",(0,i.kt)("inlineCode",{parentName:"p"},"err")," if,\nand only if, ",(0,i.kt)("inlineCode",{parentName:"p"},"opt")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),"; otherwise it is ",(0,i.kt)("inlineCode",{parentName:"p"},"Some v")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"v")," is\nreturned.")),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"value_exn(err, opt)")," terminates with the error ",(0,i.kt)("inlineCode",{parentName:"p"},"err")," if,\nand only if, ",(0,i.kt)("inlineCode",{parentName:"p"},"opt")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"None()"),"; otherwise it is ",(0,i.kt)("inlineCode",{parentName:"p"},"Some(v)")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"v")," is\nreturned.")),(0,i.kt)(p.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val unopt_with_error : 'a.'a option -> string -> 'a"),(0,i.kt)(p.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let unopt_with_error: <a>(_: option<a>) => (_: string) => a"),"**Deprecated:** Use `Option.value_with_error` instead.",(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"unopt_with_error opt err")," terminates with the error\n",(0,i.kt)("inlineCode",{parentName:"p"},"err")," if, and only if, ",(0,i.kt)("inlineCode",{parentName:"p"},"opt")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),"; otherwise it is ",(0,i.kt)("inlineCode",{parentName:"p"},"Some v"),"\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"v")," is returned.")),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"unopt_with_error(opt, err)")," terminates with the error\n",(0,i.kt)("inlineCode",{parentName:"p"},"err")," if, and only if, ",(0,i.kt)("inlineCode",{parentName:"p"},"opt")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"None()"),"; otherwise it is\n",(0,i.kt)("inlineCode",{parentName:"p"},"Some(v)")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"v")," is returned.")),(0,i.kt)(p.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val unopt : 'a.'a option -> 'a"),(0,i.kt)(p.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let unopt: <a>(_: option<a>) => a"),"**Deprecated:** Use `Option.value_with_error` instead.",(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"unopt opt ")," terminates with the string\n",(0,i.kt)("inlineCode",{parentName:"p"},'"option is None"')," if, and only if, ",(0,i.kt)("inlineCode",{parentName:"p"},"opt")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),"; otherwise it is\n",(0,i.kt)("inlineCode",{parentName:"p"},"Some v")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"v")," is returned.")),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"unopt(opt)")," terminates with the string\n",(0,i.kt)("inlineCode",{parentName:"p"},'"option is None"')," if, and only if, ",(0,i.kt)("inlineCode",{parentName:"p"},"opt")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"None()"),"; otherwise it is\n",(0,i.kt)("inlineCode",{parentName:"p"},"Some(v)")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"v")," is returned.")),(0,i.kt)(p.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val map : 'a 'b.('a -> 'b) -> 'a option -> 'b option"),(0,i.kt)(p.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let map: <a, b>(_: (_: a) => b) => (_: option<a>) => option<b>"),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"map f opt")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"opt")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),", and\n",(0,i.kt)("inlineCode",{parentName:"p"},"Some (f v)")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"opt")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"Some v"),".")),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"map(f, opt)")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"None()")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"opt")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"None()"),", and\n",(0,i.kt)("inlineCode",{parentName:"p"},"Some(f(v))")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"opt")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"Some(v)"),".")),(0,i.kt)(p.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val is_none : 'a.'a option -> bool"),(0,i.kt)(p.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let is_none: <a>(_: option<a>) => bool"),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"is_none opt")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if, and only if, ",(0,i.kt)("inlineCode",{parentName:"p"},"opt")," is\n",(0,i.kt)("inlineCode",{parentName:"p"},"None"),".")),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"is_none(opt)")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if, and only if, ",(0,i.kt)("inlineCode",{parentName:"p"},"opt")," is\n",(0,i.kt)("inlineCode",{parentName:"p"},"None()"),".")),(0,i.kt)(p.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val is_some : 'a.'a option -> bool"),(0,i.kt)(p.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let is_some: <a>(_: option<a>) => bool"),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"is_some opt")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," if, and only if, ",(0,i.kt)("inlineCode",{parentName:"p"},"opt")," is\n",(0,i.kt)("inlineCode",{parentName:"p"},"None"),".")),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"is_some(opt)")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," if, and only if, ",(0,i.kt)("inlineCode",{parentName:"p"},"opt")," is\n",(0,i.kt)("inlineCode",{parentName:"p"},"None()"),".")))}y.isMDXComponent=!0}}]);