"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[52548],{48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>i});var r=n(67294),a=n(75402);const i=function(e){return r.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},99191:(e,t,n)=>{n.d(t,{Z:()=>m});var r=n(43164),a=n(67294),i=n(52263),o=n(48720),s=n(11506);function l(){return l=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l.apply(this,arguments)}const{Prism:p}=n(43164);p.languages={...p.languages,cameligo:{...p.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:p.languages.typescript};const m=function(e){const{siteConfig:{themeConfig:{prism:t={}}}}=(0,i.Z)(),n=t.singleTheme||s.Z,[p,m]=(0,a.useState)(!1);return(0,a.useEffect)((()=>{m(!0)}),[]),a.createElement(o.D.Consumer,null,(t=>{let{syntax:i}=t;return i===e.syntax?a.createElement(r.default,l({},r.defaultProps,{key:p,language:e.syntax,code:e.children,theme:n}),(e=>{let{className:t,tokens:n,getLineProps:r,getTokenProps:i}=e;return a.createElement("h4",{className:t,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((e,t)=>a.createElement("div",r({line:e,key:t}),e.map(((e,t)=>a.createElement("span",i({token:e,key:t}))))))))})):a.createElement("div",null)}))}},76320:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>f,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var r=n(87462),a=(n(67294),n(3905)),i=n(48720),o=n(99191);const s={id:"test.next.assert.error-reference",title:"error",hide_table_of_contents:!0},l=void 0,p={unversionedId:"reference/test.next.assert.error-reference",id:"version-1.7.0/reference/test.next.assert.error-reference",title:"error",description:"val assert : bool -&gt; string -&gt; unit",source:"@site/versioned_docs/version-1.7.0/reference/test.next.assert.error.md",sourceDirName:"reference",slug:"/reference/test.next.assert.error-reference",permalink:"/docs/reference/test.next.assert.error-reference",draft:!1,tags:[],version:"1.7.0",frontMatter:{id:"test.next.assert.error-reference",title:"error",hide_table_of_contents:!0},sidebar:"API",previous:{title:"account",permalink:"/docs/reference/test.next.account-reference"},next:{title:"assert",permalink:"/docs/reference/test.next.assert-reference"}},m={},c=[],d={toc:c};function f(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val assert : bool -> string -> unit"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let assert: (b: bool, s: string) => unit"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"assert cond error")," terminates the execution\nwith the string ",(0,a.kt)("inlineCode",{parentName:"p"},"error")," (that is, an error message) if, and only\nif, the boolean condition ",(0,a.kt)("inlineCode",{parentName:"p"},"cond")," is false. The failure is handled\nby LIGO's testing framework and not by Michelson's interpreter.")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"assert(cond, error)")," terminates the execution\nwith the string ",(0,a.kt)("inlineCode",{parentName:"p"},"error")," (that is, an error message) if, and only\nif, the boolean condition ",(0,a.kt)("inlineCode",{parentName:"p"},"cond")," is false. The failure is handled\nby LIGO's testing framework and not by Michelson's interpreter.")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val some : 'a.'a option -> string -> unit"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let some: <a>(_: option<a>) => (_: string) => unit"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"some opt err")," terminates the execution\nwith the string ",(0,a.kt)("inlineCode",{parentName:"p"},"err")," (that is, an error message) if, and only if,\n",(0,a.kt)("inlineCode",{parentName:"p"},"opt")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"None"),". The failure is handled by LIGO's testing\nframework and not by Michelson's interpreter.")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"some(opt, err)")," terminates the\nexecution with the string ",(0,a.kt)("inlineCode",{parentName:"p"},"err")," (that is, an error message) if,\nand only if, ",(0,a.kt)("inlineCode",{parentName:"p"},"opt")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"None()"),". The failure is handled by LIGO's\ntesting framework and not by Michelson's interpreter.")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val none : 'a.'a option -> string -> unit"),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let none: <a>(_: option<a>) => (_: string) => unit"),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"none opt err")," terminates the execution\nwith the string ",(0,a.kt)("inlineCode",{parentName:"p"},"err")," (that is, an error message) if, and only if,\n",(0,a.kt)("inlineCode",{parentName:"p"},"opt")," is an optional value different from ",(0,a.kt)("inlineCode",{parentName:"p"},"None"),". The failure is\nhandled by LIGO's testing framework and not by Michelson's\ninterpreter.")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"The call ",(0,a.kt)("inlineCode",{parentName:"p"},"none(opt, err)")," terminates the\nexecution with the string ",(0,a.kt)("inlineCode",{parentName:"p"},"err")," (that is, an error message) if,\nand only if, ",(0,a.kt)("inlineCode",{parentName:"p"},"opt")," is an optional value different from\n",(0,a.kt)("inlineCode",{parentName:"p"},"None()"),". The failure is handled by LIGO's testing framework and\nnot by Michelson's interpreter.")))}f.isMDXComponent=!0}}]);