"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[89223],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=o,g=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return n?a.createElement(g,r(r({ref:t},p),{},{components:n})):a.createElement(g,r({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var c=2;c<i;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},44573:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const i={id:"getting-started",title:"Getting started"},r=void 0,l={unversionedId:"tutorials/getting-started/getting-started",id:"version-1.6.0/tutorials/getting-started/getting-started",title:"Getting started",description:"This section is aimed at newcomers to Ligo and Tezos smart-contracts.",source:"@site/versioned_docs/version-1.6.0/tutorials/getting-started/getting-started.md",sourceDirName:"tutorials/getting-started",slug:"/tutorials/getting-started/",permalink:"/docs/1.6.0/tutorials/getting-started/",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"getting-started",title:"Getting started"},sidebar:"docs",previous:{title:"Editor Support",permalink:"/docs/1.6.0/intro/editor-support"},next:{title:"The Taco Shop Smart Contract",permalink:"/docs/1.6.0/tutorials/taco-shop/tezos-taco-shop-smart-contract"}},s={},c=[{value:"Before to start",id:"before-to-start",level:2},{value:"Building a smart-contract.",id:"building-a-smart-contract",level:2},{value:"What is a Module ?",id:"what-is-a-module-",level:3},{value:"What is a namespace ?",id:"what-is-a-namespace-",level:3},{value:"What is a storage ?",id:"what-is-a-storage-",level:3},{value:"What is an entry ?",id:"what-is-an-entry-",level:3},{value:"Test the code from the command line",id:"test-the-code-from-the-command-line",level:2},{value:"Test the code with LIGO test framework.",id:"test-the-code-with-ligo-test-framework",level:2},{value:"Testing the Michelson contract locally",id:"testing-the-michelson-contract-locally",level:2}],p=(u="Syntax",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var u;const m={toc:c};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This section is aimed at newcomers to Ligo and Tezos smart-contracts.\nIn this tutorial, we will go through the following steps :"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Writing a simple contract"),(0,o.kt)("li",{parentName:"ul"},"Testing the contract"),(0,o.kt)("li",{parentName:"ul"},"Deploying the contract to Tezos")),(0,o.kt)("h2",{id:"before-to-start"},"Before to start"),(0,o.kt)("p",null,"Two choices are offered, ideal if you want to work with Ligo :"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Install necessary stuff onto your machine",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://ligolang.org/docs/intro/installation"},"Ligo compiler")," to compile your code."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://ligolang.org/docs/intro/editor-support"},"IDE plugins")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://tezos.gitlab.io/introduction/howtoget.html"},"octez-client")," used to interact with tezos blockchain. Pre-built binaries are available ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/serokell/tezos-packaging"},"here")))),(0,o.kt)("li",{parentName:"ul"},"Use ",(0,o.kt)("a",{parentName:"li",href:"https://ide.ligolang.org"},"webide"),", ideal if you want a quick view of ligo. You'll be able to do, test, dry-run, and deploy the code !")),(0,o.kt)("h2",{id:"building-a-smart-contract"},"Building a smart-contract."),(0,o.kt)("p",null,"We will use a simple  smart contract in this section and the following one. A counter that is available on a homepage."),(0,o.kt)("p",null,"First, create a ",(0,o.kt)("inlineCode",{parentName:"p"},"ligo_tutorial")," folder on your computer.",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("inlineCode",{parentName:"p"},"mligo")," is the extension of cameligo file and ",(0,o.kt)("inlineCode",{parentName:"p"},"jsligo")," for the jsligo file."),(0,o.kt)(p,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("p",null,"Here you are using cameligo syntax so create a file named ",(0,o.kt)("inlineCode",{parentName:"p"},"main.mligo"),", with the following content"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"test-ligo group=a","test-ligo":!0,group:"a"},"module Counter = struct\n  type storage = int\n  type return = operation list * storage\n\n  (* Three entrypoints *)\n  [@entry] let increment (delta : int) (store : storage) : return = [], store + delta\n  [@entry] let decrement (delta : int) (store : storage) : return = [], store - delta\n  [@entry] let reset (() : unit) (_ : storage) : return = [], 0\nend\n")),(0,o.kt)("h3",{id:"what-is-a-module-"},"What is a Module ?"),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"Module")," in Ligo provide a scope to the identifiers (names of types, functions, variables, etc) to prevent collisions between them. Access to it using dot notation :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"<module>.<identifier>\n"))),(0,o.kt)(p,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("p",null,"Here you are using jsligo syntax so create a file named ",(0,o.kt)("inlineCode",{parentName:"p"},"main.jsligo"),", with the following content"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"test-ligo group=a","test-ligo":!0,group:"a"},"namespace Counter {\n  type storage = int;\n  type ret = [list<operation>, storage];\n\n  // Three entrypoints\n\n  @entry\n  const increment = (delta : int, store : storage) : ret => [[], store + delta];\n\n  @entry\n  const decrement = (delta : int, store : storage) : ret => [[], store - delta];\n\n  @entry\n  const reset = (_p : unit, _s : storage) : ret => [[], 0];\n};\n")),(0,o.kt)("h3",{id:"what-is-a-namespace-"},"What is a namespace ?"),(0,o.kt)("p",null,"A namespace is the jsligo keyword to declare a Module in Ligo it provides a scope to the identifiers (names of types, functions, variables, etc) to prevent collisions between them. Only exported identifiers can be accessed from the outside using dot notation. More details in ",(0,o.kt)("a",{parentName:"p",href:"https://ligolang.org/docs/language-basics/modules?lang=jsligo"},"Module section")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"<namespace>.<identifier>\n"))),(0,o.kt)("h3",{id:"what-is-a-storage-"},"What is a storage ?"),(0,o.kt)("p",null,"Storage is the datas stored in your smart-contract, in michelson and on-chain. When you deploy your contract you will pay for the storage, so keep it as light as possible and use it only for data which has to be in blockchain. See ",(0,o.kt)("a",{parentName:"p",href:"https://ligolang.org/docs/tutorials/optimisation/"},"Optimisation section")," for more details."),(0,o.kt)("p",null,"When you will need to deploy a contract, the storage will need an init value (flag ",(0,o.kt)("inlineCode",{parentName:"p"},"--init")," onto ",(0,o.kt)("inlineCode",{parentName:"p"},"octez-client"),") defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"Michelson"),". It's possible to express it in Ligo using ",(0,o.kt)("a",{parentName:"p",href:"https://ligolang.org/docs/manpages/compile%20storage"},"compile storage command"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"ligo compile storage <your_main_file> <ligo_expression> -m <your_module_in_main_file>\n")),(0,o.kt)("h3",{id:"what-is-an-entry-"},"What is an entry ?"),(0,o.kt)("p",null,"An ",(0,o.kt)("a",{parentName:"p",href:"https://ligolang.org/docs/advanced/entrypoints-contracts?lang=jsligo#entry-points"},"entry-point")," is a pure function marked with ",(0,o.kt)("inlineCode",{parentName:"p"},"@entry")," annotation that can be formalized as ",(0,o.kt)("inlineCode",{parentName:"p"},"[list<operation>, storage] = f(parameter, storage)")," where :"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"f is the entry-point function that is called"),(0,o.kt)("li",{parentName:"ul"},"parameter contains the inputs that are sent by the caller when the contract is called"),(0,o.kt)("li",{parentName:"ul"},"storage is the state of the storage. The input is the current state of the storage, and it outputs the next state"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"list<operation>")," is a list of commands that will be executed by the block chain (for instance transfers)")),(0,o.kt)("p",null,"It's also a function that the RPC node of the Tezos blockchain will expose. It'll be possible to interact with your smart-contract by calling them."),(0,o.kt)("h1",{id:"compile-a-contract"},"Compile a contract"),(0,o.kt)("p",null,"Now we are going to compile the contract\nIf you are using the Web-ide ensure to target the module Counter in ",(0,o.kt)("inlineCode",{parentName:"p"},"config.json")," file and click on Compile, This will allow you to see the produced Michelson."),(0,o.kt)("p",null,"On your machine we will use the ligo compiler CLI, open a terminal in the folder. (or the vs-code built-in terminal with Ctrl+shift+\xb2) and run the following command:"),(0,o.kt)(p,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"ligo compile contract main.mligo -m Counter -o counter.tz\n"))),(0,o.kt)(p,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"ligo compile contract main.jsligo -m Counter -o counter.tz\n"))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"compile contract")," takes a filename, the file you want to\ncompile. The ",(0,o.kt)("inlineCode",{parentName:"p"},"-m")," parameter indicates the namespace or module\ncorresponding to the contract to compile inside the file.  The ",(0,o.kt)("inlineCode",{parentName:"p"},"-o"),"\nparameter indicates to store the result in ",(0,o.kt)("inlineCode",{parentName:"p"},"counter.tz")," instead of\noutputting it in the terminal."),(0,o.kt)("p",null,"LIGO will aggregate all functions marked with ",(0,o.kt)("inlineCode",{parentName:"p"},"@entry")," inside the\nmodule/namespace and build a contract function from them that\ndispatches according to the parameter passed. This function is the\ndefault contract function compiled (",(0,o.kt)("inlineCode",{parentName:"p"},"$main"),")."),(0,o.kt)("p",null,"Now, you should have a Michelson contract ",(0,o.kt)("inlineCode",{parentName:"p"},"counter.tz")," in the folder\nready to be deploy. But before that, we want to test it to be sure\nthat it behaves as expected because once publish, it cannot be\nmodified."),(0,o.kt)("h1",{id:"testing-the-contract"},"Testing the contract"),(0,o.kt)("p",null,"Because we can never underline enough the importance of tests in the context of smart contract; we will now test our contract three times on different levels :"),(0,o.kt)("h2",{id:"test-the-code-from-the-command-line"},"Test the code from the command line"),(0,o.kt)("p",null,"Using the ",(0,o.kt)("inlineCode",{parentName:"p"},"interpret")," command, one can run LIGO code in the context of an init file. For instance"),(0,o.kt)(p,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},'ligo run interpret "<code>" --init-file main.mligo\n'))),(0,o.kt)(p,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},'ligo run interpret "<code>" --init-file main.jsligo\n'))),(0,o.kt)("p",null,"will run ",(0,o.kt)("inlineCode",{parentName:"p"},"<code>")," after evaluating everything in the contract file. This is useful to test arbitrary functions and variables in your code."),(0,o.kt)("p",null,"For instance, to test the ",(0,o.kt)("inlineCode",{parentName:"p"},"add")," function you can run"),(0,o.kt)(p,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},'ligo run interpret "Counter.increment 10 32" --init-file main.mligo\n'))),(0,o.kt)(p,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},'ligo run interpret "Counter.increment(10,32)" --init-file main.jsligo\n'))),(0,o.kt)("p",null,"which should return ",(0,o.kt)("inlineCode",{parentName:"p"},"42"),".\nRunning several of this command will cover the complete code."),(0,o.kt)("p",null,"To run the contract ",(0,o.kt)("strong",{parentName:"p"},"as if it was called on the blockchain"),", the command\n",(0,o.kt)("inlineCode",{parentName:"p"},"dry-run")," can be used. It takes the contract, the parameter and the\ninitial storage, and we also need to pass the namespace/module using ",(0,o.kt)("inlineCode",{parentName:"p"},"-m"),":"),(0,o.kt)(p,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},'ligo run dry-run main.mligo "Increment(32)" "10" -m Counter\n'))),(0,o.kt)(p,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},'ligo run dry-run main.jsligo "Increment(32)" "10" -m Counter\n'))),(0,o.kt)("p",null,"which will return ",(0,o.kt)("inlineCode",{parentName:"p"},"(LIST_EMPTY(), 42)"),"."),(0,o.kt)("p",null,"Combine several of those command to fully test the contract use-cases."),(0,o.kt)("h2",{id:"test-the-code-with-ligo-test-framework"},"Test the code with LIGO test framework."),(0,o.kt)("p",null,"In LIGO, you are able to write tests directly in the source file, using the ",(0,o.kt)("inlineCode",{parentName:"p"},"Test")," module. We generally encourage writing tests in a separate file, but we will use the same file for this example."),(0,o.kt)(p,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("p",null,"Add the following line at the end of ",(0,o.kt)("inlineCode",{parentName:"p"},"main.mligo")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"test-ligo group=a","test-ligo":!0,group:"a"},"let test_increment =\n  let initial_storage = 10 in\n  let orig = Test.originate (contract_of Counter) initial_storage 0tez in\n  let _ = Test.transfer_exn orig.addr (Increment (32)) 1mutez in\n  assert (Test.get_storage(orig.addr) = initial_storage + 32)\n"))),(0,o.kt)(p,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("p",null,"Add the following line at the end of ",(0,o.kt)("inlineCode",{parentName:"p"},"main.jsligo")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"test-ligo group=a","test-ligo":!0,group:"a"},"const test_increment = (() : unit => {\n  let initial_storage = 10 as int;\n  let orig = Test.originate(contract_of(Counter), initial_storage, 0tez);\n  Test.transfer_exn(orig.addr, (Increment (1)), 1mutez);\n  return assert(Test.get_storage(orig.addr) == initial_storage + 1);\n}) ()\n"))),(0,o.kt)("p",null,"This executes the same test as the previous section."),(0,o.kt)("p",null,"Now simply run the command"),(0,o.kt)(p,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"ligo run test main.mligo\n"))),(0,o.kt)(p,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"ligo run test main.jsligo\n"))),(0,o.kt)("p",null,"The command will run every function main with ",(0,o.kt)("inlineCode",{parentName:"p"},"test")," and return their values."),(0,o.kt)("p",null,"More on the syntax for the test framework\n",(0,o.kt)("a",{parentName:"p",href:"https://ligolang.org/docs/advanced/testing#testing-with-test"},"here"),"\nand more on how to write and test namespace/module contracts\n",(0,o.kt)("a",{parentName:"p",href:"https://ligolang.org/docs/next/language-basics/modules#modules-as-contracts"},"here"),"."),(0,o.kt)("h1",{id:"publishing-the-contract"},"Publishing the contract"),(0,o.kt)("p",null,"For deploying the contract on Tezos, we will use the ",(0,o.kt)("inlineCode",{parentName:"p"},"octez-client")," interface as we did on the previous section."),(0,o.kt)("p",null,"First, you will need an account address. You can get one using any wallet listed ",(0,o.kt)("a",{parentName:"p",href:"https://tezos.com/learn/store-and-use/"},"here"),".\nOnce you have your first account configured, go to a ",(0,o.kt)("a",{parentName:"p",href:"https://faucet.marigold.dev/"},"faucet"),", select the ",(0,o.kt)("inlineCode",{parentName:"p"},"ghostnet")," testnet and claim ",(0,o.kt)("inlineCode",{parentName:"p"},"XTZ")," tokens. clikc on the faucet and you will receive some tokens to play with."),(0,o.kt)("p",null,"Then we are going to point the Tezos client to a Ghostnet testnet node"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"octez-client --endpoint https://ghostnet.ecadinfra.com/ config update\n")),(0,o.kt)("p",null,"Ghostnet is a testnet, which is a separate network from the Tezos mainnet, which can be used for testing."),(0,o.kt)("p",null,"Export the mnemonic from your wallet (almost every wallet does it, look on settings or read wallet documentation to see how to do it), then import your account locally. Type on the terminal"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"octez-client import keys from mnemonic myWallet\n")),(0,o.kt)("p",null,"Paste the mnemonic when prompt appears"),(0,o.kt)("p",null,"You are now ready to originate your contract with your user. On your wallet, copy your public hash key address ",(0,o.kt)("inlineCode",{parentName:"p"},"tz1...")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"tz2...")," and replace the placeholder ",(0,o.kt)("inlineCode",{parentName:"p"},"<my_tz_address...>")," on the command you need to run :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"octez-client originate contract counter \\\n              transferring 0 from <my_tz_address...> \\\n              running counter.tz \\\n              --init 10 --burn-cap 0.1 --force\n")),(0,o.kt)("p",null,"Again, you will receive several messages from the node and you should get the confirmation that the contract has been published. Note the ",(0,o.kt)("inlineCode",{parentName:"p"},"KT1...")," address available in logs, you'll be able to find your contract onto an indexer like ",(0,o.kt)("inlineCode",{parentName:"p"},"tzkt")," through url like ",(0,o.kt)("inlineCode",{parentName:"p"},"https://ghostnet.tzkt.io/KT1.../")," don't forget to put your ",(0,o.kt)("inlineCode",{parentName:"p"},"KT1")," address"),(0,o.kt)("p",null,"You can know call your contract with"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},'octez-client call counter from <my_tz_address...> \\\n             --arg "(Left (Right 32))" \\\n             --burn-cap 0.1\n')),(0,o.kt)("p",null,"arg is obtained by compiling ligo expression onto michelson "),(0,o.kt)(p,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},'ligo compile parameter main.mligo "Increment (32)" -m Counter\n'))),(0,o.kt)(p,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},'ligo compile parameter main.jsligo "Increment (32)" -m Counter\n'))),(0,o.kt)("p",null,"If you do so, back to ",(0,o.kt)("inlineCode",{parentName:"p"},"tzkt"),", you will see several information on the operation, including the new contract storage."),(0,o.kt)("h2",{id:"testing-the-michelson-contract-locally"},"Testing the Michelson contract locally"),(0,o.kt)("p",null,"It can be annoying to deploy you contract onto a node to test it. We advise testing that ",(0,o.kt)("a",{parentName:"p",href:"https://tezos.gitlab.io/user/mockup.html"},"the Michelson code locally using mockup environment"),". It'll allow to automate end to end tests in simulated environment"),(0,o.kt)("p",null,"This conclude this part of our tutorial.\nYou should now be able to compile, test, publish and call a contract.\nNow you can go to the ",(0,o.kt)("a",{parentName:"p",href:"https://ligolang.org/docs/tutorials/taco-shop/tezos-taco-shop-smart-contract"},"tacos shop tutorial")," to know more about programming with LIGO or you can start developing your own contract using the LIGO syntax you are more familiar with."))}d.isMDXComponent=!0}}]);