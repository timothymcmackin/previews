"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[71772],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=i,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},15785:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(87462),i=(n(67294),n(3905));const a={id:"back-end",title:"Back End"},o=void 0,l={unversionedId:"contributors/big-picture/back-end",id:"contributors/big-picture/back-end",title:"Back End",description:"The Back-End is the part that compiles down to Michelson. Instead of a single compilation step, it is separated in two parts.",source:"@site/../docs/contributors/big-picture/back-end.md",sourceDirName:"contributors/big-picture",slug:"/contributors/big-picture/back-end",permalink:"/docs/next/contributors/big-picture/back-end",draft:!1,tags:[],version:"current",frontMatter:{id:"back-end",title:"Back End"}},c={},s=[{value:"Transpiler and Mini_C",id:"transpiler-and-mini_c",level:2},{value:"Compiler",id:"compiler",level:2}],p={toc:s};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The Back-End is the part that compiles down to Michelson. Instead of a single compilation step, it is separated in two parts."),(0,i.kt)("h2",{id:"transpiler-and-mini_c"},"Transpiler and Mini_C"),(0,i.kt)("p",null,"The Transpiler is a function that takes as input the Typed AST, and outputs expressions in a language that is basically a Michelson based on with named variables and first-class-environments.\nOn the one hand, there are cases in the AST like ",(0,i.kt)("inlineCode",{parentName:"p"},"E_if_bool")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"E_make_empty_list")," that would be directly translated in Michelson like ",(0,i.kt)("inlineCode",{parentName:"p"},"IF {} {}")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"NIL"),".\nOn the other hand, there are cases in the AST like ",(0,i.kt)("inlineCode",{parentName:"p"},"E_variable")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"E_environment_select")," that specifically target the compiler.\nThe files of the Transpiler are in ",(0,i.kt)("inlineCode",{parentName:"p"},"transpiler/"),", while those of Mini_c are in ",(0,i.kt)("inlineCode",{parentName:"p"},"mini_c/"),"."),(0,i.kt)("h2",{id:"compiler"},"Compiler"),(0,i.kt)("p",null,"The previous model of compilation from LIGO to Michelson model was\ncomplicated. The current one is quite straightforward, where the\nenvironment of variables ",(0,i.kt)("inlineCode",{parentName:"p"},"(x -> 12, y -> \u201cfoo\u201d)")," is compiled as\nMichelson stack ",(0,i.kt)("inlineCode",{parentName:"p"},"(12 :: foo)"),".  It has been simplified for multiple\nreasons: Having a simple model reduces its number of points of\nfailure.  Having a simple model makes optimising it easier.  We\nsubmitted a change to the Tezos\u2019 protocol that actually makes it more\nefficient."))}d.isMDXComponent=!0}}]);