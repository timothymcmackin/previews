"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[69112],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=r.createContext({}),s=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(m.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,m=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),g=s(n),u=a,f=g["".concat(m,".").concat(u)]||g[u]||l[u]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var p={};for(var m in t)hasOwnProperty.call(t,m)&&(p[m]=t[m]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>o});var r=n(67294),a=n(75402);const o=function(e){return r.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},23090:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>g,frontMatter:()=>i,metadata:()=>m,toc:()=>c});var r=n(87462),a=(n(67294),n(3905)),o=n(48720);const i={id:"removing",title:"Removing"},p=void 0,m={unversionedId:"tezos/big_maps/removing",id:"version-1.5.0/tezos/big_maps/removing",title:"Removing",description:"The function Big_map.remove creates a big map containing the",source:"@site/versioned_docs/version-1.5.0/tezos/big_maps/removing.md",sourceDirName:"tezos/big_maps",slug:"/tezos/big_maps/removing",permalink:"/previews/ligo/contracts/docs/1.5.0/tezos/big_maps/removing",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"removing",title:"Removing"},sidebar:"docs",previous:{title:"Adding",permalink:"/previews/ligo/contracts/docs/1.5.0/tezos/big_maps/adding"},next:{title:"Updating",permalink:"/previews/ligo/contracts/docs/1.5.0/tezos/big_maps/updating"}},s={},c=[],l={toc:c};function g(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The function ",(0,a.kt)("inlineCode",{parentName:"p"},"Big_map.remove")," creates a big map containing the\nelements of a given big map, without a given element. If the element\nis not already present, the new big map is the same as the old one, as\nexpected."),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=big_map_removing",group:"big_map_removing"},'let my_map : (int, string) big_map =\n  Big_map.literal [(1,"one"); (2,"two")]\nlet new_map = Big_map.remove 2 my_map\nlet contains_3 = Big_map.mem 2 new_map // = false\n'))),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=big_map_removing",group:"big_map_removing"},'const my_map: big_map<int,string> =\n  Big_map.literal(list([[1,"one"],[2,"two"]]));\nconst new_map = Big_map.remove(2, my_map);\nconst contains_3 = Big_map.mem(2, new_map); // == false\n'))))}g.isMDXComponent=!0}}]);