"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[65650],{48720:(e,t,n)=>{n.d(t,{D:()=>r.Z,Z:()=>l});var a=n(67294),r=n(75402);const l=function(e){return a.createElement(r.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},99191:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(43164),r=n(67294),l=n(52263),i=n(48720),o=n(11506);function p(){return p=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},p.apply(this,arguments)}const{Prism:d}=n(43164);d.languages={...d.languages,cameligo:{...d.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:d.languages.typescript};const s=function(e){const{siteConfig:{themeConfig:{prism:t={}}}}=(0,l.Z)(),n=t.singleTheme||o.Z,[d,s]=(0,r.useState)(!1);return(0,r.useEffect)((()=>{s(!0)}),[]),r.createElement(i.D.Consumer,null,(t=>{let{syntax:l}=t;return l===e.syntax?r.createElement(a.default,p({},a.defaultProps,{key:d,language:e.syntax,code:e.children,theme:n}),(e=>{let{className:t,tokens:n,getLineProps:a,getTokenProps:l}=e;return r.createElement("h4",{className:t,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((e,t)=>r.createElement("div",a({line:e,key:t}),e.map(((e,t)=>r.createElement("span",l({token:e,key:t}))))))))})):r.createElement("div",null)}))}},41378:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>c,frontMatter:()=>o,metadata:()=>d,toc:()=>y});var a=n(87462),r=(n(67294),n(3905)),l=n(48720),i=n(99191);const o={id:"test.next.compare-reference",title:"compare",hide_table_of_contents:!0},p=void 0,d={unversionedId:"reference/test.next.compare-reference",id:"version-1.5.0/reference/test.next.compare-reference",title:"compare",description:"val eq : &#39;a.&#39;a -&gt; &#39;a -&gt; bool",source:"@site/versioned_docs/version-1.5.0/reference/test.next.compare.md",sourceDirName:"reference",slug:"/reference/test.next.compare-reference",permalink:"/docs/1.5.0/reference/test.next.compare-reference",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"test.next.compare-reference",title:"compare",hide_table_of_contents:!0},sidebar:"API",previous:{title:"proxy_ticket",permalink:"/docs/1.5.0/reference/test.proxy-ticket-reference"},next:{title:"contract",permalink:"/docs/1.5.0/reference/test.next.contract-reference"}},s={},y=[],m={toc:y};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val eq : 'a.'a -> 'a -> bool"),(0,r.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let eq: <a>(_: a) => (_: a) => bool"),(0,r.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("p",null,"The call ",(0,r.kt)("inlineCode",{parentName:"p"},"eq x y")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if, and only if, ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"y"),"\nare considered to be equal w.r.t. the order on the underlying\ntype.")),(0,r.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("p",null,"The call ",(0,r.kt)("inlineCode",{parentName:"p"},"eq(x, y)")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if, and only if, ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"y"),"\nare considered to be equal w.r.t. the order on the underlying\ntype.")),(0,r.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val neq : 'a.'a -> 'a -> bool"),(0,r.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let neq: <a>(_: a) => (_: a) => bool"),(0,r.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("p",null,"The call ",(0,r.kt)("inlineCode",{parentName:"p"},"neq x y")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if, and only if, ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"y")," are not considered to be equal w.r.t. the order on the\nunderlying type.")),(0,r.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("p",null,"The call ",(0,r.kt)("inlineCode",{parentName:"p"},"neq(x, y)")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if, and only if, ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"y")," are not considered to be equal w.r.t. the order on the\nunderlying type.")),(0,r.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val gt : 'a.'a -> 'a -> bool"),(0,r.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let gt: <a>(_: a) => (_: a) => bool"),(0,r.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("p",null,"The call ",(0,r.kt)("inlineCode",{parentName:"p"},"gt x y")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if, and only if, ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," is\nconsidered to be greater than ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," w.r.t. the order on the\nunderlying type.")),(0,r.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("p",null,"The call ",(0,r.kt)("inlineCode",{parentName:"p"},"gt(x, y)")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if, and only if, ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," is\nconsidered to be greater than ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," w.r.t. the order on the\nunderlying type.")),(0,r.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val lt : 'a.'a -> 'a -> bool"),(0,r.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let lt: <a>(_: a) => (_: a) => bool"),(0,r.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("p",null,"The call ",(0,r.kt)("inlineCode",{parentName:"p"},"lt")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if, and only if, ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," is\nconsidered to be less than ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," w.r.t. the order on the underlying\ntype.")),(0,r.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("p",null,"The call ",(0,r.kt)("inlineCode",{parentName:"p"},"lt(x, y)")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if, and only if, ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," is\nconsidered to be less than ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," w.r.t. the order on the underlying\ntype.")),(0,r.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val ge : 'a.'a -> 'a -> bool"),(0,r.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let ge: <a>(_: a) => (_: a) => bool"),(0,r.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("p",null,"The call ",(0,r.kt)("inlineCode",{parentName:"p"},"ge x y")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if, and only if,\n",(0,r.kt)("inlineCode",{parentName:"p"},"x")," is considered to be greater or equal than ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," w.r.t. the order\non the underlying type.")),(0,r.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("p",null,"The call ",(0,r.kt)("inlineCode",{parentName:"p"},"ge(x, y)")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if, and only if,\n",(0,r.kt)("inlineCode",{parentName:"p"},"x")," is considered to be greater or equal than ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," w.r.t. the order\non the underlying type.")),(0,r.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val le : 'a.'a -> 'a -> bool"),(0,r.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let le: <a>(_: a) => (_: a) => bool"),(0,r.kt)(l.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("p",null,"The call ",(0,r.kt)("inlineCode",{parentName:"p"},"le x y")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if, and only if, ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),"\nis considered to be less or equal than ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," w.r.t. the order on the\nunderlying type.")),(0,r.kt)(l.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("p",null,"The call ",(0,r.kt)("inlineCode",{parentName:"p"},"le(x, y)")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if, and only if, ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),"\nis considered to be less or equal than ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," w.r.t. the order on the\nunderlying type.")))}c.isMDXComponent=!0}}]);