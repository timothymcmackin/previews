"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[10180],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>y});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function p(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=n.createContext({}),s=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):p(p({},r),e)),t},c=function(e){var r=s(e.components);return n.createElement(l.Provider,{value:r},e.children)},m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=s(t),y=o,f=u["".concat(l,".").concat(y)]||u[y]||m[y]||i;return t?n.createElement(f,p(p({ref:r},c),{},{components:t})):n.createElement(f,p({ref:r},c))}));function y(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,p=new Array(i);p[0]=u;var a={};for(var l in r)hasOwnProperty.call(r,l)&&(a[l]=r[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,p[1]=a;for(var s=2;s<i;s++)p[s]=t[s];return n.createElement.apply(null,p)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},48720:(e,r,t)=>{t.d(r,{D:()=>o.Z,Z:()=>i});var n=t(67294),o=t(75402);const i=function(e){return n.createElement(o.Z.Consumer,null,(r=>{let{syntax:t}=r;return t===e.syntax?e.children:n.createElement(n.Fragment,null)}))}},61817:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>p,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>s});var n=t(87462),o=(t(67294),t(3905));t(48720);const i={id:"polymorphism",title:"Polymorphism"},p=void 0,a={unversionedId:"polymorphism/polymorphism",id:"version-1.7.0/polymorphism/polymorphism",title:"Polymorphism",description:"Polymorphism is the ability for types and values to be parameterised",source:"@site/versioned_docs/version-1.7.0/polymorphism/polymorphism.md",sourceDirName:"polymorphism",slug:"/polymorphism/",permalink:"/previews/ligo/contracts/docs/polymorphism/",draft:!1,tags:[],version:"1.7.0",frontMatter:{id:"polymorphism",title:"Polymorphism"},sidebar:"docs",previous:{title:"Updating",permalink:"/previews/ligo/contracts/docs/tezos/big_maps/updating"},next:{title:"Parameteric types",permalink:"/previews/ligo/contracts/docs/polymorphism/parametric_types"}},l={},s=[],c={toc:s};function m(e){let{components:r,...t}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Polymorphism is the ability for types and values to be parameterised\nby a type."))}m.isMDXComponent=!0}}]);