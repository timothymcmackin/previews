"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[73472],{48720:(t,e,n)=>{n.d(e,{D:()=>o.Z,Z:()=>i});var a=n(67294),o=n(75402);const i=function(t){return a.createElement(o.Z.Consumer,null,(e=>{let{syntax:n}=e;return n===t.syntax?t.children:a.createElement(a.Fragment,null)}))}},99191:(t,e,n)=>{n.d(e,{Z:()=>d});var a=n(43164),o=n(67294),i=n(52263),s=n(48720),r=n(11506);function l(){return l=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(t[a]=n[a])}return t},l.apply(this,arguments)}const{Prism:m}=n(43164);m.languages={...m.languages,cameligo:{...m.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:m.languages.typescript};const d=function(t){const{siteConfig:{themeConfig:{prism:e={}}}}=(0,i.Z)(),n=e.singleTheme||r.Z,[m,d]=(0,o.useState)(!1);return(0,o.useEffect)((()=>{d(!0)}),[]),o.createElement(s.D.Consumer,null,(e=>{let{syntax:i}=e;return i===t.syntax?o.createElement(a.default,l({},a.defaultProps,{key:m,language:t.syntax,code:t.children,theme:n}),(t=>{let{className:e,tokens:n,getLineProps:a,getTokenProps:i}=t;return o.createElement("h4",{className:e,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((t,e)=>o.createElement("div",a({line:t,key:e}),t.map(((t,e)=>o.createElement("span",i({token:t,key:e}))))))))})):o.createElement("div",null)}))}},90374:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>m,toc:()=>p});var a=n(87462),o=(n(67294),n(3905)),i=n(48720),s=n(99191);const r={id:"kathmandu",title:"Kathmandu",description:"Kathmandu changes"},l=void 0,m={unversionedId:"protocol/kathmandu",id:"version-1.7.0/protocol/kathmandu",title:"Kathmandu",description:"Kathmandu changes",source:"@site/versioned_docs/version-1.7.0/protocol/kathmandu.md",sourceDirName:"protocol",slug:"/protocol/kathmandu",permalink:"/docs/protocol/kathmandu",draft:!1,tags:[],version:"1.7.0",frontMatter:{id:"kathmandu",title:"Kathmandu",description:"Kathmandu changes"},sidebar:"API",previous:{title:"Jakarta",permalink:"/docs/protocol/jakarta"},next:{title:"Lima",permalink:"/docs/protocol/lima"}},d={},p=[{value:"API",id:"api",level:2},{value:"New primitives",id:"new-primitives",level:3},{value:"Tezos",id:"tezos",level:4},{value:"Test",id:"test",level:4},{value:"Event testing",id:"event-testing",level:2}],c={toc:p};function u(t){let{components:e,...n}=t;return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: as LIGO uses Mumbai protocol to Michelson type-check your programs, the flag ",(0,o.kt)("inlineCode",{parentName:"p"},"--disable-michelson-typechecking")," is recommended to compile contracts to Kathmandu when using tickets / chest.")),(0,o.kt)("h2",{id:"api"},"API"),(0,o.kt)("h3",{id:"new-primitives"},"New primitives"),(0,o.kt)("h4",{id:"tezos"},"Tezos"),(0,o.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val emit : string -> 'a -> operation"),(0,o.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let emit: string => 'a => operation"),(0,o.kt)("p",null,"Build an event operation. To actually emit an event, this operation must be returned the same way as other operations (origination / transfer ..)"),(0,o.kt)("h4",{id:"test"},"Test"),(0,o.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val get_last_events_from : ('p,'s) typed_address -> string -> 'a list"),(0,o.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let get_last_events_from: typed_address <'p,'s> => string => list <'a>"),(0,o.kt)("p",null,"Returns the list of all the event payloads emited with a given tag by a given address. Any call to this\nfunction must be annotated with the expected payload type."),(0,o.kt)("h2",{id:"event-testing"},"Event testing"),(0,o.kt)("p",null,"Here is how you emit events and fetch them from your tests:"),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"test-ligo group=test_ex","test-ligo":!0,group:"test_ex"},'module C = struct\n  [@entry] let main (p: int*int) (_: unit) =\n    [Tezos.emit "%foo" p ; Tezos.emit "%foo" p.0],()\nend\n\nlet test_foo =\n  let orig = Test.originate (contract_of C) () 0tez in\n  let _ = Test.transfer_exn orig.addr (Main (1,2)) 0tez in\n  (Test.get_last_events_from orig.addr "foo" : (int*int) list),(Test.get_last_events_from orig.addr "foo" : int list)\n'))),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"test-ligo group=test_ex","test-ligo":!0,group:"test_ex"},'namespace C {\n  @entry\n  let main = (p: [int, int], _s : unit) => { \n    let op1 = Tezos.emit("%foo", p);\n    let op2 = Tezos.emit("%foo", p[0]);\n    return [list([op1, op2]), unit];\n  };\n}\n\nlet test = (() : [list<[int,int]>, list<int>] => {\n  let orig = Test.originate(contract_of(C), unit, 0 as tez);\n  Test.transfer_exn(orig.addr, Main([1,2]), 0 as tez);\n  return [Test.get_last_events_from(orig.addr, "foo") as list<[int, int]>, Test.get_last_events_from(orig.addr, "foo") as list<int>];\n}) ();\n'))))}u.isMDXComponent=!0}}]);