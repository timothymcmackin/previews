"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[18436],{48720:(e,t,n)=>{n.d(t,{D:()=>i.Z,Z:()=>s});var a=n(67294),i=n(75402);const s=function(e){return a.createElement(i.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},99191:(e,t,n)=>{n.d(t,{Z:()=>p});var a=n(43164),i=n(67294),s=n(52263),r=n(48720),o=n(11506);function l(){return l=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l.apply(this,arguments)}const{Prism:c}=n(43164);c.languages={...c.languages,cameligo:{...c.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:c.languages.typescript};const p=function(e){const{siteConfig:{themeConfig:{prism:t={}}}}=(0,s.Z)(),n=t.singleTheme||o.Z,[c,p]=(0,i.useState)(!1);return(0,i.useEffect)((()=>{p(!0)}),[]),i.createElement(r.D.Consumer,null,(t=>{let{syntax:s}=t;return s===e.syntax?i.createElement(a.default,l({},a.defaultProps,{key:c,language:e.syntax,code:e.children,theme:n}),(e=>{let{className:t,tokens:n,getLineProps:a,getTokenProps:s}=e;return i.createElement("h4",{className:t,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((e,t)=>i.createElement("div",a({line:e,key:t}),e.map(((e,t)=>i.createElement("span",s({token:e,key:t}))))))))})):i.createElement("div",null)}))}},83417:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>g});var a=n(87462),i=(n(67294),n(3905)),s=n(48720),r=n(99191);const o={id:"views",title:"Views"},l=void 0,c={unversionedId:"syntax/contracts/views",id:"syntax/contracts/views",title:"Views",description:"Views are a way for contracts to expose information to other contracts and to off-chain consumers.",source:"@site/../docs/syntax/contracts/views.md",sourceDirName:"syntax/contracts",slug:"/syntax/contracts/views",permalink:"/docs/next/syntax/contracts/views",draft:!1,tags:[],version:"current",frontMatter:{id:"views",title:"Views"},sidebar:"docs",previous:{title:"Events",permalink:"/docs/next/syntax/contracts/events"},next:{title:"Michelson",permalink:"/docs/next/syntax/contracts/michelson"}},p={},g=[{value:"Defining on-chain views",id:"defining-on-chain-views",level:2},{value:"Defining off-chain views",id:"defining-off-chain-views",level:2},{value:"Calling views",id:"calling-views",level:2}],d={toc:g};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Views are a way for contracts to expose information to other contracts and to off-chain consumers."),(0,i.kt)("p",null,"Contracts can store the source code of their views either on-chain or off-chain:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The code of on-chain views is stored in the smart contract code itself, like entrypoints."),(0,i.kt)("li",{parentName:"ul"},"The code of off-chain views is stored externally, usually in decentralized data storage such as IPFS.\nThe contract metadata has information about its off-chain views that consumers such as indexers and other dApps use to know what off-chain views are available and to run them.")),(0,i.kt)("p",null,"On-chain and off-chain views have the same capabilities and limitations."),(0,i.kt)("p",null,"For more information about views, see ",(0,i.kt)("a",{parentName:"p",href:"https://docs.tezos.com/smart-contracts/views"},"Views")," on docs.tezos.com."),(0,i.kt)("h2",{id:"defining-on-chain-views"},"Defining on-chain views"),(0,i.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"To define an on-chain view, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"@view")," attribute."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=onchainviews",group:"onchainviews"},'type storage = string\ntype ret = operation list * storage\n\n[@entry]\nlet main (word : string) (storage : storage) : ret\n  = [] , storage ^ " " ^ word\n\n(* This view returns the storage *)\n[@view] let view1 (() : unit) (storage : storage) : storage\n  = storage\n\n(* This view returns true if the storage has a given length *)\n[@view] let view2 (expected_length : nat) (storage : storage) : bool\n  = (String.length storage = expected_length)\n\n(* This view does not use the parameters or storage and returns a constant int *)\n[@view] let view3 (() : unit) (_ : storage) : int\n  = 42\n'))),(0,i.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"To define an on-chain view, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"@view")," decorator."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=onchainviews",group:"onchainviews"},'type storage = string\ntype ret = [list<operation>, storage];\n\n@entry\nconst main = (word : string, storage : storage) : ret\n  => [[] , storage + " " + word]\n\n// This view returns the storage\n@view\nconst view1 = (_arg : unit, storage : storage) : storage\n  => storage;\n\n// This view returns true if the storage has a given length\n@view\nconst view2 = (expected_length : nat , storage : storage) : bool\n  => (String.length (storage) == expected_length);\n\n// This view does not use the parameters or storage and returns a constant int\n@view\nconst view3 = (_arg : unit , _s : storage) : int\n  => 42;\n'))),(0,i.kt)("h2",{id:"defining-off-chain-views"},"Defining off-chain views"),(0,i.kt)("p",null,"To compile an off-chain view, create a function, compile it as an expression, and put the expression in the contract's metadata."),(0,i.kt)("p",null,"To compile an expression as a off-chain view, use the LIGO ",(0,i.kt)("inlineCode",{parentName:"p"},"compile expression")," command and pass the ",(0,i.kt)("inlineCode",{parentName:"p"},"--function-body")," flag.\nTo use an expression from a file, pass it in the ",(0,i.kt)("inlineCode",{parentName:"p"},"--init-file")," argument."),(0,i.kt)("p",null,"For example, this file has a contract named ",(0,i.kt)("inlineCode",{parentName:"p"},"C")," with a function named ",(0,i.kt)("inlineCode",{parentName:"p"},"v"),":"),(0,i.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=view_file",group:"view_file"},'module C = struct\n  type storage = string\n\n  [@entry] let append (a : string) (s : storage) : operation list * storage = [] , s ^ a\n\n  [@entry] let clear (_ : unit) (_ : storage) : operation list * storage = [] , ""\n\n  let v (expected_length: nat) (s: storage) : bool = (String.length s = expected_length)\nend\n'))),(0,i.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=view_file",group:"view_file"},'namespace C {\n  type storage = string\n\n  @entry\n  const append = (a: string, s: storage) : [list<operation> , storage] => [[], s + a];\n\n  @entry\n  const clear = (_p: unit, _s: storage) : [list<operation>, storage] => [[], ""];\n\n  export const v = (expected_length: nat, s: storage) : bool => (String.length (s) == expected_length);\n}\n'))),(0,i.kt)("p",null,"To compile the function ",(0,i.kt)("inlineCode",{parentName:"p"},"v")," as an off-chain view, pass ",(0,i.kt)("inlineCode",{parentName:"p"},"C.v")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"compile expression")," command, as in this example:"),(0,i.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'ligo compile expression cameligo "C.v" --init-file off_chain.mligo --function-body\n'))),(0,i.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'ligo compile expression jsligo "C.v" --init-file off_chain.jsligo --function-body\n'))),(0,i.kt)("p",null,"The response is the function compiled to Michelson.\nIt is up to you to store this code and link to it from the contract metadata."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-michelson"},"{ UNPAIR ; SWAP ; SIZE ; COMPARE ; EQ }\n")),(0,i.kt)("p",null,"Note that the function is not annotated as an entrypoint or on-chain view; it is just a function declared in the context of the contract."),(0,i.kt)("h2",{id:"calling-views"},"Calling views"),(0,i.kt)("p",null,"Contracts can call on-chain and off-chain views with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Tezos.call_view")," function and use the result immediately."),(0,i.kt)(r.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val call_view : string -> 'arg -> address -> 'ret option"),(0,i.kt)(r.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"const call_view : string => 'arg => address => option <'ret>"),(0,i.kt)("p",null,"The function accepts these parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The name of the view"),(0,i.kt)("li",{parentName:"ul"},"The parameter to pass to the view"),(0,i.kt)("li",{parentName:"ul"},"The address of the contract")),(0,i.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"For example, this contract has a view that multiplies the integer in storage with the integer that the caller passes and returns the result:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=callonchainview",group:"callonchainview"},"module ContractWithView = struct\n  type storage = int\n  type return_type = operation list * storage\n\n  [@entry] let main (param : int) (_storage : storage) : return_type =\n    [], param\n\n  [@view] let multiply (param : int) (storage : storage) : int =\n    param * storage\n\nend\n")),(0,i.kt)("p",null,"This contract stores the address of the first contract and calls its view:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=callonchainview",group:"callonchainview"},'module CallView = struct\n  type storage = address * int\n  type return_type = operation list * storage\n\n  [@entry] let callView (param : int) (storage : storage) : return_type =\n    let (targetAddress, _s) = storage in\n    let resultOpt : int option = Tezos.call_view "multiply" param targetAddress in\n    match resultOpt with\n      Some newValue -> [], (targetAddress, newValue)\n    | None -> failwith("Something went wrong")\nend\n')),(0,i.kt)("p",null,"This test deploys both contracts, calls the contract that calls the view, and verifies the result:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=callonchainview",group:"callonchainview"},'let test =\n\n  // Originate ContractWithView\n  let contract1 = Test.Next.Originate.contract (contract_of ContractWithView) 5 0tez in\n  let addr1 = Test.Next.Typed_address.to_address contract1.taddr in\n\n  // Originate CallView with address of ContractWithView in storage\n  let initial_storage = (addr1, 0) in\n  let contract2 = Test.Next.Originate.contract (contract_of CallView) initial_storage 0tez in\n\n  // Call callView\n  let _ : nat = Test.Next.Contract.transfer_exn (Test.Next.Typed_address.get_entrypoint "default" contract2.taddr) 12 0tez in\n  let (_address, integer) = Test.Next.Typed_address.get_storage contract2.taddr in\n  Assert.assert(integer = 60)\n'))),(0,i.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"For example, this contract has a view that multiplies the integer in storage with the integer that the caller passes and returns the result:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=callonchainview",group:"callonchainview"},"namespace ContractWithView {\n  type storage = int;\n  type return_type = [list<operation>, storage];\n\n  @entry\n  const main = (param: int, _storage: storage): return_type =>\n    [[], param];\n\n  @view\n  const multiply = (param: int, storage: storage): int =>\n    param * storage;\n}\n")),(0,i.kt)("p",null,"This contract stores the address of the first contract and calls its view:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=callonchainview",group:"callonchainview"},'namespace CallView {\n  type storage = [address, int];\n  type return_type = [list<operation>, storage];\n\n  @entry\n  const callView = (param: int, storage: storage): return_type => {\n    const [targetAddress, _s] = storage;\n    const resultOpt: option<int> = Tezos.call_view(\n      "multiply",\n      param,\n      targetAddress\n    );\n    return match(resultOpt) {\n      when (None):\n        failwith("Something went wrong");\n      when (Some(newValue)):\n        [[], [targetAddress, newValue]];\n    }\n  }\n}\n')),(0,i.kt)("p",null,"This test deploys both contracts, calls the contract that calls the view, and verifies the result:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=callonchainview",group:"callonchainview"},'const test = (() => {\n\n  // Originate ContractWithView\n  const contract1 = Test.Next.Originate.contract(contract_of(ContractWithView), 5, 0tez);\n  const addr1 = Test.Next.Typed_address.to_address(contract1.taddr);\n\n  // Originate CallView with address of ContractWithView in storage\n  const initial_storage = [addr1, 0 as int];\n  const contract2 = Test.Next.Originate.contract(contract_of(CallView), initial_storage, 0tez);\n\n  // Call callView\n  Test.Next.Contract.transfer_exn(Test.Next.Typed_address.get_entrypoint("default", contract2.taddr), 12, 0tez);\n  const [_address, integer] = Test.Next.Typed_address.get_storage(contract2.taddr);\n  Assert.assert(integer == 60);\n}) ()\n'))))}u.isMDXComponent=!0}}]);