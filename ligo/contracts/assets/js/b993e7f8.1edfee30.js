"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[51599],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),h=o,d=u["".concat(l,".").concat(h)]||u[h]||m[h]||s;return n?a.createElement(d,r(r({ref:t},c),{},{components:n})):a.createElement(d,r({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,r=new Array(s);r[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,r[1]=i;for(var p=2;p<s;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>o.Z,Z:()=>s});var a=n(67294),o=n(75402);const s=function(e){return a.createElement(o.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},27086:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=n(87462),o=(n(67294),n(3905)),s=n(48720);const r={id:"michelson_testing",title:"Testing Michelson code"},i=void 0,l={unversionedId:"testing/michelson_testing",id:"testing/michelson_testing",title:"Testing Michelson code",description:"After you test and compile your LIGO contracts, you may want to test the compiled Michelson output.",source:"@site/../docs/testing/michelson_testing.md",sourceDirName:"testing",slug:"/testing/michelson_testing",permalink:"/docs/next/testing/michelson_testing",draft:!1,tags:[],version:"current",frontMatter:{id:"michelson_testing",title:"Testing Michelson code"},sidebar:"docs",previous:{title:"Mutation testing",permalink:"/docs/next/testing/mutation-testing"},next:{title:"Package management",permalink:"/docs/next/advanced/package-management"}},p={},c=[{value:"Testing in sandboxes and testnets",id:"testing-in-sandboxes-and-testnets",level:2},{value:"Testing with the Octez client mockup mode",id:"testing-with-the-octez-client-mockup-mode",level:2}],m={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"After you test and compile your LIGO contracts, you may want to test the compiled Michelson output.\nThere are two frameworks for testing Michelson contracts:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://baking-bad.org/blog/2019/09/16/testing-michelson-tezos-contracts-with-pytezos-library/"},"PyTezos"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://gitlab.com/morley-framework/morley/-/blob/9455cd384b2ab897fb7b31822abca3730a4ad08b/code/cleveland/testingEDSL.md"},"Cleveland")))),(0,o.kt)("h2",{id:"testing-in-sandboxes-and-testnets"},"Testing in sandboxes and testnets"),(0,o.kt)("p",null,"You can also test compiled contracts in sandboxes and on test networks, which work in a way similar to Tezos Mainnet but do not have the same costs.\nSeveral options for sandboxes and testnets are available, including:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The Octez suite ",(0,o.kt)("a",{parentName:"li",href:"https://tezos.gitlab.io/user/mockup.html"},"mockup mode")," and ",(0,o.kt)("a",{parentName:"li",href:"https://tezos.gitlab.io/user/sandbox.html"},"sandbox mode")),(0,o.kt)("li",{parentName:"ul"},"Local test networks such as ",(0,o.kt)("a",{parentName:"li",href:"https://tezos.gitlab.io/flextesa/"},"Flextesa")," and ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/tez-capital/tezbox"},"Tezbox")),(0,o.kt)("li",{parentName:"ul"},"Public test networks such as Ghostnet, which are listed at ",(0,o.kt)("a",{parentName:"li",href:"https://teztnets.com"},"https://teztnets.com"))),(0,o.kt)("p",null,"For more information about the options, see ",(0,o.kt)("a",{parentName:"p",href:"https://docs.tezos.com/developing/testnets"},"Testing on sandboxes and testnets")," on docs.tezos.com."),(0,o.kt)("h2",{id:"testing-with-the-octez-client-mockup-mode"},"Testing with the Octez client mockup mode"),(0,o.kt)("p",null,"One way to test compiled Michelson contracts is to use the mockup mode of the Octez client, which runs a simulation of Tezos without using nodes."),(0,o.kt)("p",null,"The first step is to compile the LIGO contract to Michelson.\nFor example, here is a simple contract that stores a string and allows users to add to that string or reset it:"),(0,o.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=mockup_testme",group:"mockup_testme"},'(* This is mockup_testme.mligo *)\ntype storage = string\n\ntype result = operation list * storage\n\n[@entry]\nlet append (s : string) (storage : storage) : result =\n  [], storage ^ s\n\n[@entry]\nlet reset (_ : unit) (_storage : storage) : result =\n  [], ""\n'))),(0,o.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=mockup_testme",group:"mockup_testme"},'// This is mockup_testme.jsligo\ntype storage = string;\n\ntype result = [list<operation>, storage];\n\n@entry\nconst append = (s: string, storage: storage): result =>\n  [[], storage + s]\n\n@entry\nconst reset = (_: unit, _storage: storage): result =>\n  [[], ""]\n'))),(0,o.kt)("p",null,"To compile it to Michelson, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"ligo compile contract")," command:"),(0,o.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"ligo compile contract gitlab-pages/docs/testing/src/michelson_testing/mockup_testme.mligo\n"))),(0,o.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"ligo compile contract gitlab-pages/docs/testing/src/michelson_testing/mockup_testme.jsligo\n# Outputs:\n"))),(0,o.kt)("p",null,"The output is the compiled code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-michelson"},'{ parameter (or (unit %reset) (string %append)) ;\n  storage string ;\n  code { UNPAIR ;\n         IF_LEFT { DROP 2 ; PUSH string "" } { SWAP ; CONCAT } ;\n         NIL operation ;\n         PAIR } }\n')),(0,o.kt)("p",null,"To write the compiled code to a file, pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"--output-file argument"),".\nThis command writes the compiled code to a file named ",(0,o.kt)("inlineCode",{parentName:"p"},"mockup_testme.tz"),":"),(0,o.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"ligo compile contract gitlab-pages/docs/testing/src/michelson_testing/mockup_testme.mligo --output-file mockup_testme.tz\n"))),(0,o.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"ligo compile contract gitlab-pages/docs/testing/src/michelson_testing/mockup_testme.jsligo --output-file mockup_testme.tz\n"))),(0,o.kt)("p",null,"Now you can follow these steps to deploy the compiled contract to the Octez client mockup mode and verify that it works:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Install the Octez client."),(0,o.kt)("p",{parentName:"li"},"One way is to install it via opam by running ",(0,o.kt)("inlineCode",{parentName:"p"},"opam install octez-client"),".\nFor other installation methods, see ",(0,o.kt)("a",{parentName:"p",href:"https://tezos.gitlab.io/introduction/howtoget.html"},"Installing Octez")," in the Octez documentation.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Print a list of supported protocol versions by running ",(0,o.kt)("inlineCode",{parentName:"p"},"octez-client list mockup protocols"),"."),(0,o.kt)("p",{parentName:"li"},"The response starts with the Alpha protocol, which is the new version of the protocol that is under development in the ",(0,o.kt)("inlineCode",{parentName:"p"},"master")," branch of the Octez source code repository.\nThe next protocol in the list is the most recently released version of the protocol.\nIn this case the most recent version is the Paris C protocol, which has the hash ",(0,o.kt)("inlineCode",{parentName:"p"},"PsParisCZo7KAh1Z1smVd9ZMZ1HHn5gkzbM94V3PLCpknFWhUAi"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Initialize the mockup with the protocol hash and a folder to store the mockup instance in by running this command:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell",metastring:"skip",skip:!0},"tezos-client \\\n  --protocol PsParisCZo7KAh1Z1smVd9ZMZ1HHn5gkzbM94V3PLCpknFWhUAi \\\n  --base-dir /tmp/mockup \\\n  --mode mockup \\\n  create mockup\n")),(0,o.kt)("p",{parentName:"li"},"This command initializes a mockup in the specified folder and returns a list of Tezos addresses that the client can use in the mockup.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Optional: Set up an alias so future Octez client commands use this mockup instead of another Tezos network:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"alias mockup-client='octez-client --mode mockup --base-dir /tmp/mockup'\n")),(0,o.kt)("p",{parentName:"li"},"Now you can run the command ",(0,o.kt)("inlineCode",{parentName:"p"},"mockup-client")," to run Octez client transactions in the sandbox and retain the usual ",(0,o.kt)("inlineCode",{parentName:"p"},"octez-client")," command for transactions on public networks."),(0,o.kt)("p",{parentName:"li"},"For example, you can list the addresses in the mockup again by running this command:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell",metastring:"skip",skip:!0},"mockup-client list known addresses\n")),(0,o.kt)("p",{parentName:"li"},"The response is a list of accounts that have tez on the mockup network and that you can use to send transactions:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"bootstrap5: tz1ddb9NMYHZi5UzPdzTZMYQQZoMub195zgv (unencrypted sk known)\nbootstrap4: tz1b7tUupMgCNw2cCLpKTkSD1NZzB5TkP2sv (unencrypted sk known)\nbootstrap3: tz1faswCTDciRzE4oJ9jn2Vm2dvjeyA9fUzU (unencrypted sk known)\nbootstrap2: tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN (unencrypted sk known)\nbootstrap1: tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx (unencrypted sk known)\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Deploy (originate) the contract on the mockup network by running this command:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell",metastring:"skip",skip:!0},'mockup-client originate contract mockup_testme \\\n              transferring 0 from bootstrap1 \\\n              running "`cat mockup_testme.tz`" \\\n              --init \\"foo\\" --burn-cap 0.1\n')),(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"--init")," argument (",(0,o.kt)("inlineCode",{parentName:"p"},'"foo"'),") is the initial storage for the deployed contract in Michelson format.\nIf the storage is more complex, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"ligo compile storage")," command to to compile a LIGO expression to a Michelson value."))),(0,o.kt)("p",null,"   If the origination is successful, the client prints the address of the new contract to the console and stores that address with the alias ",(0,o.kt)("inlineCode",{parentName:"p"},"mockup_testme")," from the command."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Verify the current value of the contract storage by running this command:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"mockup-client get contract storage for mockup_testme\n")),(0,o.kt)("p",{parentName:"li"},"The response is ",(0,o.kt)("inlineCode",{parentName:"p"},'"foo"'),", which matches the value that you set in the origination command.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Test the contract by sending a transaction to it:"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Compile the transaction parameter to Michelson with the ",(0,o.kt)("inlineCode",{parentName:"p"},"ligo compile parameter")," command.\nFor example, this command compiles the parameter to call the the ",(0,o.kt)("inlineCode",{parentName:"p"},"Append")," entrypoint and pass the string ",(0,o.kt)("inlineCode",{parentName:"p"},"bar"),":"),(0,o.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'ligo compile parameter gitlab-pages/docs/testing/src/michelson_testing/mockup_testme.mligo "Append (\\"bar\\")"\n'))),(0,o.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'ligo compile parameter gitlab-pages/docs/testing/src/michelson_testing/mockup_testme.jsligo "Append (\\"bar\\")"\n'))),(0,o.kt)("p",{parentName:"li"},"   The compiled parameter is ",(0,o.kt)("inlineCode",{parentName:"p"},'(Right "bar")'),", including the double quotes.\nFor more information about why this parameter appears like it does, see ",(0,o.kt)("a",{parentName:"p",href:"https://docs.tezos.com/smart-contracts/entrypoints"},"Entrypoints")," on docs.tezos.com.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Call the contract by passing that parameter value to the Octez client ",(0,o.kt)("inlineCode",{parentName:"p"},"transfer")," command, as in this example:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'mockup-client transfer 0 from bootstrap2 \\\n    to mockup_testme \\\n    --arg "(Right \\"bar\\")" --burn-cap 0.01\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Verify that the storage changed by running the ",(0,o.kt)("inlineCode",{parentName:"p"},"get contract storage")," command again:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"mockup-client get contract storage for mockup_testme\n")),(0,o.kt)("p",{parentName:"li"},"The storage now contains the two strings."))))),(0,o.kt)("p",null,"In this way you can deploy contracts and test their interaction in a simulation of a Tezos network.\nTesting in sandboxes and test networks in this way can be useful to confirm that multiple contracts interact with each other correctly and to confirm that the contract works the way it does in your LIGO tests."))}u.isMDXComponent=!0}}]);