"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[81608],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},34519:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const i={},o=void 0,p={unversionedId:"manpages/print mini-c",id:"version-1.6.0/manpages/print mini-c",title:"print mini-c",description:"SYNOPSIS",source:"@site/versioned_docs/version-1.6.0/manpages/print mini-c.md",sourceDirName:"manpages",slug:"/manpages/print mini-c",permalink:"/docs/1.6.0/manpages/print mini-c",draft:!1,tags:[],version:"1.6.0",frontMatter:{},sidebar:"API",previous:{title:"print dependency-graph",permalink:"/docs/1.6.0/manpages/print dependency-graph"},next:{title:"print preprocessed",permalink:"/docs/1.6.0/manpages/print preprocessed"}},l={},s=[{value:"SYNOPSIS",id:"synopsis",level:3},{value:"DESCRIPTION",id:"description",level:3},{value:"FLAGS",id:"flags",level:3}],c={toc:s};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"synopsis"},"SYNOPSIS"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"ligo print mini-c SOURCE_FILE\n")),(0,a.kt)("h3",{id:"description"},"DESCRIPTION"),(0,a.kt)("p",null,"This sub-command prints the source file in the Mini-C stage. Internally, it uses the build system to type and compile the contract. Compilation is applied after combination in the AST typed stage."),(0,a.kt)("h3",{id:"flags"},"FLAGS"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"--display-format FORMAT"),"\nthe format that will be used by the CLI. Available formats are 'dev', 'json', and 'human-readable' (default). When human-readable lacks details (we are still tweaking it), please contact us and use another format in the meanwhile. (alias: --format)"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"--feature-infer-array-as-list"),"\nInfer array as lists."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"--library LIBS"),"\nA comma-separated list of paths to directories where to search for files to be included by the preprocessor (alias: -l)"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"--no-color"),"\ndisable coloring in CLI output"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"--optimize ENTRY_POINT"),"\nApply Mini-C optimizations as if compiling ENTRY_POINT"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"--project-root PATH"),"\nThe path to root of the project."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"--skip-analytics"),"\nAvoid ligo analytics publication. Configurable with environment variable LIGO_SKIP_ANALYTICS too"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"--syntax SYNTAX"),'\nthe syntax that will be used. Currently supported syntaxes are "cameligo" and "jsligo". By default, the syntax is guessed from the extension (.mligo and .jsligo respectively). (alias: -s)'),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"--warn-infinite-loop"),"\nwarn about infinite loop"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"--warn-unused-rec"),"\nwarn about unused recursion in a recursive function"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"-p PROTOCOL"),"\nchoose protocol's types/values pre-loaded into the LIGO environment (parisb). By default, the current protocol (parisb) will be used (alias: --protocol)"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"-help"),"\nprint this help text and exit (alias: -?)"))}u.isMDXComponent=!0}}]);