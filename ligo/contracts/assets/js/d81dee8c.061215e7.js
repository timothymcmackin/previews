"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[89838],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,f=u["".concat(i,".").concat(d)]||u[d]||m[d]||s;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<s;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>s});var r=n(67294),a=n(75402);const s=function(e){return r.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},23936:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(87462),a=(n(67294),n(3905)),s=n(48720);const o={id:"declaring",title:"Declaring"},l=void 0,i={unversionedId:"sets/declaring",id:"version-1.5.0/sets/declaring",title:"Declaring",description:"Sets are unordered collections of values of the same type, like lists",source:"@site/versioned_docs/version-1.5.0/sets/declaring.md",sourceDirName:"sets",slug:"/sets/declaring",permalink:"/previews/ligo/contracts/docs/1.5.0/sets/declaring",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"declaring",title:"Declaring"},sidebar:"docs",previous:{title:"Assigning",permalink:"/previews/ligo/contracts/docs/1.5.0/records/assigning"},next:{title:"Sizing",permalink:"/previews/ligo/contracts/docs/1.5.0/sets/sizing"}},p={},c=[],m={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Sets are unordered collections of values of the same type, like lists\nare ordered collections. Like the mathematical sets and lists, sets\ncan be empty and, if not, elements of sets in LIGO are ",(0,a.kt)("em",{parentName:"p"},"unique"),",\nwhereas they can be repeated in a ",(0,a.kt)("em",{parentName:"p"},"list"),"."),(0,a.kt)("p",null,"Like lists, the type of sets is parameterised over the type of its\nelements. Like list elements, set elements must all have the same\ntype."),(0,a.kt)("p",null,"The empty set is denoted by the predefined value ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.empty"),". A\nnon-empty set can be built by using the function ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.literal")," which\ntakes a list of ",(0,a.kt)("em",{parentName:"p"},"literal elements")," and returns a set containing them,\nand only them."),(0,a.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=sets",group:"sets"},"let empty_set : int set = Set.empty\nlet set1 : int set = Set.literal [3; 2; 2; 1]\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: The element ",(0,a.kt)("inlineCode",{parentName:"p"},"2")," is repeated in the list, but not in the set\nmade from it.")),(0,a.kt)("p",null,"Note: See the predefined\n",(0,a.kt)("a",{parentName:"p",href:"../reference/set-reference/?lang=cameligo"},"module Set"))),(0,a.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=sets",group:"sets"},"const empty_set: set<int> = Set.empty;\nconst set1: set<int> = Set.literal(list([3, 2, 2, 1]));\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: The element ",(0,a.kt)("inlineCode",{parentName:"p"},"2")," is repeated in the list, but not in the set\nmade from it.")),(0,a.kt)("p",null,"Note: See the predefined\n",(0,a.kt)("a",{parentName:"p",href:"../reference/set-reference/?lang=jsligo"},"namespace Set")),(0,a.kt)("p",null,"If you want to build a big set from an arbitrary list of arbitrary\nvalues (not just literal values), then you must use ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.of_list"),"\ninstead of ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.literal"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=sets",group:"sets"},"const two = 2;\nconst set2: set<int> = Set.of_list(list([3, two, two, 1]));\n"))),(0,a.kt)("p",null,"Set elements are internally sorted by increasing values, so the type\nof the elements must be ",(0,a.kt)("em",{parentName:"p"},"comparable"),", that is, they obey a total order\n(any two elements can be compared)."))}u.isMDXComponent=!0}}]);