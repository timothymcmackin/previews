"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[13791],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(t),d=a,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return t?r.createElement(g,s(s({ref:n},p),{},{components:t})):r.createElement(g,s({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},48720:(e,n,t)=>{t.d(n,{D:()=>a.Z,Z:()=>o});var r=t(67294),a=t(75402);const o=function(e){return r.createElement(a.Z.Consumer,null,(n=>{let{syntax:t}=n;return t===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},84100:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var r=t(87462),a=(t(67294),t(3905)),o=t(48720);const s={id:"nesting",title:"Nesting"},i=void 0,l={unversionedId:"modules/nesting",id:"modules/nesting",title:"Nesting",description:"Modules can be nested, which means that we can define a module inside",source:"@site/../docs/modules/nesting.md",sourceDirName:"modules",slug:"/modules/nesting",permalink:"/previews/ligo/contracts/docs/next/modules/nesting",draft:!1,tags:[],version:"current",frontMatter:{id:"nesting",title:"Nesting"},sidebar:"docs",previous:{title:"Accessing",permalink:"/previews/ligo/contracts/docs/next/modules/accessing"},next:{title:"Aliasing",permalink:"/previews/ligo/contracts/docs/next/modules/aliasing"}},c={},p=[],u={toc:p};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"Modules can be nested, which means that we can define a module inside\nanother module. As an illustration, let us define a variant of ",(0,a.kt)("inlineCode",{parentName:"p"},"Euro"),"\nin which the constants are all grouped inside using a sub-module."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=module_nesting",group:"module_nesting"},"module Euro =\n  struct\n    type t = nat\n\n    let add (a, b : t * t) : t = a + b\n\n    module Coin =\n      struct\n        let one : t = 1n\n        let two : t = 2n\n      end\n  end\n")),(0,a.kt)("p",null,"To access nested modules we simply apply the selection operator more\nthan once:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=module_nesting",group:"module_nesting"},"type storage = Euro.t\n\nlet increment (s : storage) : storage =\n  Euro.add (s, Euro.Coin.one)\n"))),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"Namespaces can be nested, which means that we can define a namespace\ninside another namespace. As an illustration, let us define a variant\nof ",(0,a.kt)("inlineCode",{parentName:"p"},"Euro")," in which the constants are all grouped inside using a\nsub-namespace."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=namespace_nesting",group:"namespace_nesting"},"namespace Euro {\n  export type t = nat;\n\n  export let add = (a: t, b: t): t => a + b;\n\n  export namespace Coin {\n    export let one: t = 1n;\n    export let two: t = 2n;\n  };\n};\n")),(0,a.kt)("p",null,"To access nested namespaces we simply apply the selection operator\nmore than once:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=namespace_nesting",group:"namespace_nesting"},"type storage = Euro.t;\n\nconst increment = (s: storage) : storage =>\n  Euro.add (s, Euro.Coin.one);\n")),(0,a.kt)("p",null,"Note that the sub-namespace ",(0,a.kt)("inlineCode",{parentName:"p"},"Coin")," had to be prefixed by the keyword\n",(0,a.kt)("inlineCode",{parentName:"p"},"export")," to enable access to its contents.")))}m.isMDXComponent=!0}}]);