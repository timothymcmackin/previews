"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[65825],{48720:(e,t,s)=>{s.d(t,{D:()=>a.Z,Z:()=>r});var n=s(67294),a=s(75402);const r=function(e){return n.createElement(a.Z.Consumer,null,(t=>{let{syntax:s}=t;return s===e.syntax?e.children:n.createElement(n.Fragment,null)}))}},99191:(e,t,s)=>{s.d(t,{Z:()=>c});var n=s(43164),a=s(67294),r=s(52263),o=s(48720),d=s(11506);function i(){return i=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var s=arguments[t];for(var n in s)Object.prototype.hasOwnProperty.call(s,n)&&(e[n]=s[n])}return e},i.apply(this,arguments)}const{Prism:p}=s(43164);p.languages={...p.languages,cameligo:{...p.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:p.languages.typescript};const c=function(e){const{siteConfig:{themeConfig:{prism:t={}}}}=(0,r.Z)(),s=t.singleTheme||d.Z,[p,c]=(0,a.useState)(!1);return(0,a.useEffect)((()=>{c(!0)}),[]),a.createElement(o.D.Consumer,null,(t=>{let{syntax:r}=t;return r===e.syntax?a.createElement(n.default,i({},n.defaultProps,{key:p,language:e.syntax,code:e.children,theme:s}),(e=>{let{className:t,tokens:s,getLineProps:n,getTokenProps:r}=e;return a.createElement("h4",{className:t,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},s.map(((e,t)=>a.createElement("div",n({line:e,key:t}),e.map(((e,t)=>a.createElement("span",r({token:e,key:t}))))))))})):a.createElement("div",null)}))}},96953:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>p,contentTitle:()=>d,default:()=>y,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=s(87462),a=(s(67294),s(3905)),r=(s(48720),s(99191));const o={id:"test.next.typed-address-reference",title:"typed_address",hide_table_of_contents:!0},d=void 0,i={unversionedId:"reference/test.next.typed-address-reference",id:"version-1.6.0/reference/test.next.typed-address-reference",title:"typed_address",description:"val transfer : &#39;p &#39;s.(&#39;p, &#39;s) typed&#95;address -&gt; &#39;p -&gt; tez -&gt; test&#95;exec&#95;result",source:"@site/versioned_docs/version-1.6.0/reference/test.next.typed_address.md",sourceDirName:"reference",slug:"/reference/test.next.typed-address-reference",permalink:"/previews/ligo/contracts/docs/1.6.0/reference/test.next.typed-address-reference",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"test.next.typed-address-reference",title:"typed_address",hide_table_of_contents:!0},sidebar:"API",previous:{title:"address",permalink:"/previews/ligo/contracts/docs/1.6.0/reference/test.next.address-reference"},next:{title:"next",permalink:"/previews/ligo/contracts/docs/1.6.0/reference/test.next-reference"}},p={},c=[],l={toc:c};function y(e){let{components:t,...s}=e;return(0,a.kt)("wrapper",(0,n.Z)({},l,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(r.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val transfer : 'p 's.('p, 's) typed_address -> 'p -> tez -> test_exec_result"),(0,a.kt)(r.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let transfer: <p, s>(_: typed_address<p, s>) => (_: p) => (_: tez) => test_exec_result"),"Bakes a transaction by sending an amount of tez with a parameter from the current source to another account. Returns the amount of gas consumed by the execution of the contract.",(0,a.kt)(r.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val transfer_exn : 'p 's.('p, 's) typed_address -> 'p -> tez -> nat"),(0,a.kt)(r.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let transfer_exn: <p, s>(_: typed_address<p, s>) => (_: p) => (_: tez) => nat"),"Bakes a transaction by sending an amount of tez with a parameter from the current source to another account. Returns the amount of gas consumed by the execution of the contract. Similar as `Test.transfer`, but fails when anything goes wrong.",(0,a.kt)(r.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val get_storage : 'p 's.('p, 's) typed_address -> 's"),(0,a.kt)(r.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let get_storage: <p, s>(_: typed_address<p, s>) => s"),"Gets the storage of a typed account.",(0,a.kt)(r.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val get_balance : 'p 's.('p, 's) typed_address -> tez"),(0,a.kt)(r.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let get_balance: <p, s>(_: typed_address<p, s>) => tez"),"Gets the balance of an account in tez.",(0,a.kt)(r.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val to_address : 'p 's.('p, 's) typed_address -> address"),(0,a.kt)(r.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let to_address: <p, s>(_: typed_address<p, s>) => address"),(0,a.kt)(r.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val to_contract : 'p 's.('p, 's) typed_address -> 'p contract"),(0,a.kt)(r.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let to_contract: <p, s>(_: typed_address<p, s>) => contract<p>"),"Gets the contract corresponding to the default entrypoint of a typed address: the contract parameter in the result will be the type of the default entrypoint (generally `'param`, but this might differ if `'param` includes a \"default\" entrypoint).",(0,a.kt)(r.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val get_entrypoint : 'p 's 'q.string -> ('p, 's) typed_address -> 'q contract"),(0,a.kt)(r.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let get_entrypoint: <p, s, q>(_: string) => (_: typed_address<p, s>) => contract<q>"),'Gets the contract corresponding to an entrypoint of a typed address: the contract parameter in the result will be the type of the entrypoint, it needs to be annotated, entrypoint string should omit the prefix "%", but if passed a string starting with "%", it will be removed (and a warning emitted).')}y.isMDXComponent=!0}}]);