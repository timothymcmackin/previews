"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[47284],{48720:(e,t,n)=>{n.d(t,{D:()=>i.Z,Z:()=>s});var a=n(67294),i=n(75402);const s=function(e){return a.createElement(i.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},99191:(e,t,n)=>{n.d(t,{Z:()=>p});var a=n(43164),i=n(67294),s=n(52263),r=n(48720),o=n(11506);function l(){return l=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l.apply(this,arguments)}const{Prism:c}=n(43164);c.languages={...c.languages,cameligo:{...c.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:c.languages.typescript};const p=function(e){const{siteConfig:{themeConfig:{prism:t={}}}}=(0,s.Z)(),n=t.singleTheme||o.Z,[c,p]=(0,i.useState)(!1);return(0,i.useEffect)((()=>{p(!0)}),[]),i.createElement(r.D.Consumer,null,(t=>{let{syntax:s}=t;return s===e.syntax?i.createElement(a.default,l({},a.defaultProps,{key:c,language:e.syntax,code:e.children,theme:n}),(e=>{let{className:t,tokens:n,getLineProps:a,getTokenProps:s}=e;return i.createElement("h4",{className:t,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((e,t)=>i.createElement("div",a({line:e,key:t}),e.map(((e,t)=>i.createElement("span",s({token:e,key:t}))))))))})):i.createElement("div",null)}))}},67688:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>k,frontMatter:()=>o,metadata:()=>c,toc:()=>y});var a=n(87462),i=(n(67294),n(3905)),s=n(48720),r=n(99191);const o={id:"crypto-reference",title:"crypto",hide_table_of_contents:!0},l=void 0,c={unversionedId:"reference/crypto-reference",id:"version-1.7.0/reference/crypto-reference",title:"crypto",description:"Cryptographic primitives",source:"@site/versioned_docs/version-1.7.0/reference/crypto.md",sourceDirName:"reference",slug:"/reference/crypto-reference",permalink:"/previews/ligo/contracts/docs/reference/crypto-reference",draft:!1,tags:[],version:"1.7.0",frontMatter:{id:"crypto-reference",title:"crypto",hide_table_of_contents:!0},sidebar:"API",previous:{title:"toplevel",permalink:"/previews/ligo/contracts/docs/reference/toplevel-reference"},next:{title:"big_set",permalink:"/previews/ligo/contracts/docs/reference/big-set-reference"}},p={},y=[],h={toc:y};function k(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Cryptographic primitives"),(0,i.kt)(r.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val blake2b : bytes -> bytes"),(0,i.kt)(r.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let blake2b: (_: bytes) => bytes"),"Compute the cryptographic hash of the top of the stack using the Blake2b-256 cryptographic hash function.",(0,i.kt)(r.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val sha256 : bytes -> bytes"),(0,i.kt)(r.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let sha256: (_: bytes) => bytes"),"Compute the cryptographic hash of the top of the stack using the SHA-256 cryptographic hash function.",(0,i.kt)(r.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val sha512 : bytes -> bytes"),(0,i.kt)(r.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let sha512: (_: bytes) => bytes"),"Compute the cryptographic hash of the top of the stack using the SHA-512 cryptographic hash function.",(0,i.kt)(r.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val sha3 : bytes -> bytes"),(0,i.kt)(r.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let sha3: (_: bytes) => bytes"),"Compute the cryptographic hash of the top of the stack using the SHA3-256 cryptographic hash function.",(0,i.kt)(r.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val keccak : bytes -> bytes"),(0,i.kt)(r.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let keccak: (_: bytes) => bytes"),"Compute the cryptographic hash of the top of the stack using the Keccak-256 cryptographic hash function.",(0,i.kt)(r.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val hash_key : key -> key_hash"),(0,i.kt)(r.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let hash_key: (_: key) => key_hash"),(0,i.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"hash_key k")," computes the Base58Check of the public key\n",(0,i.kt)("inlineCode",{parentName:"p"},"k"),".")),(0,i.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"hash_key(k)")," computes the Base58Check of the public key\n",(0,i.kt)("inlineCode",{parentName:"p"},"k"),".")),(0,i.kt)(r.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val check : key -> signature -> bytes -> bool"),(0,i.kt)(r.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let check: (_: key) => (_: signature) => (_: bytes) => bool"),(0,i.kt)(s.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Crypto.check k s b")," verifies that the byte sequence ",(0,i.kt)("inlineCode",{parentName:"p"},"b")," has\nbeen signed with the key ",(0,i.kt)("inlineCode",{parentName:"p"},"k"),": it is ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if, and only if, the\nsignature ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," is a valid signature of the byte sequence created\nwith ",(0,i.kt)("inlineCode",{parentName:"p"},"k"),".")),(0,i.kt)(s.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The call ",(0,i.kt)("inlineCode",{parentName:"p"},"Crypto.check(k, s, b)")," verifies that the byte sequence ",(0,i.kt)("inlineCode",{parentName:"p"},"b")," has\nbeen signed with the key ",(0,i.kt)("inlineCode",{parentName:"p"},"k"),": it is ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if, and only if, the\nsignature ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," is a valid signature of the byte sequence created\nwith ",(0,i.kt)("inlineCode",{parentName:"p"},"k"),".")))}k.isMDXComponent=!0}}]);