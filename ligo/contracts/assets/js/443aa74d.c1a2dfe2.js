"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[17937],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(t),f=o,d=u["".concat(l,".").concat(f)]||u[f]||m[f]||a;return t?r.createElement(d,i(i({ref:n},c),{},{components:t})):r.createElement(d,i({ref:n},c))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},48720:(e,n,t)=>{t.d(n,{D:()=>o.Z,Z:()=>a});var r=t(67294),o=t(75402);const a=function(e){return r.createElement(o.Z.Consumer,null,(n=>{let{syntax:t}=n;return t===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},60595:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>p,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(87462),o=(t(67294),t(3905)),a=t(48720);const i={id:"looping",title:"Looping"},p=void 0,l={unversionedId:"maps/looping",id:"version-1.5.0/maps/looping",title:"Looping",description:"There is no loop over maps in CameLIGO.",source:"@site/versioned_docs/version-1.5.0/maps/looping.md",sourceDirName:"maps",slug:"/maps/looping",permalink:"/docs/1.5.0/maps/looping",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"looping",title:"Looping"},sidebar:"docs",previous:{title:"Iterating",permalink:"/docs/1.5.0/maps/iterating"},next:{title:"Declaring",permalink:"/docs/1.5.0/modules/declaring"}},s={},c=[],m={toc:c};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)(a.Z,{syntax:"cameligo",mdxType:"Syntax"},"There is no loop over maps in CameLIGO.",(0,o.kt)("p",null,"Note: See the predefined\n",(0,o.kt)("a",{parentName:"p",href:"../reference/map-reference"},"module Map"))),(0,o.kt)(a.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("p",null,"One can iterate through all the bindings of a map, in increasing order\nof the keys, thanks to a loop of the form ",(0,o.kt)("inlineCode",{parentName:"p"},"for (const <variable> of <map>) <block>"),". It means that the ",(0,o.kt)("inlineCode",{parentName:"p"},"<block>")," of statements (or a\nsingle statement) will be computed once for each ",(0,o.kt)("inlineCode",{parentName:"p"},"<variable>")," ranging\nover the bindings (as pairs of keys and values) of the map ",(0,o.kt)("inlineCode",{parentName:"p"},"<map>")," in\nincreasing order."),(0,o.kt)("p",null,"Here is an example where the values in a map are summed up."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=map_looping",group:"map_looping"},"function sum_val (m: map<int,int>) {\n  let sum = 0;\n  // The key is discarded.\n  for (const [_key, val] of m) sum = sum + val;\n  return sum;\n};\n")),(0,o.kt)("p",null,"Note: See the predefined\n",(0,o.kt)("a",{parentName:"p",href:"../reference/map-reference"},"namespace Map"))))}u.isMDXComponent=!0}}]);