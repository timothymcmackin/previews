"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[23942],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(a),h=o,m=u["".concat(c,".").concat(h)]||u[h]||p[h]||r;return a?n.createElement(m,i(i({ref:t},d),{},{components:a})):n.createElement(m,i({ref:t},d))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},53864:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var n=a(87462),o=(a(67294),a(3905));const r={title:"Why did the default datatype layout change to @layout comb?",description:"Discover the evolution of Michelson data type layouts in LIGO and the shift to @layout comb as the default choice in version 1.0. Explore the benefits, including improved performance and code size reduction.",slug:"layout-comb-why",authors:["tomjack"],tags:["explainer"],image:"https://i.imgur.com/mErPwqL.png",hide_table_of_contents:!0},i=void 0,l={permalink:"/previews/ligo/contracts/blog/layout-comb-why",source:"@site/blog/2023-09-09-layout-comb-why.md",title:"Why did the default datatype layout change to @layout comb?",description:"Discover the evolution of Michelson data type layouts in LIGO and the shift to @layout comb as the default choice in version 1.0. Explore the benefits, including improved performance and code size reduction.",date:"2023-09-09T00:00:00.000Z",formattedDate:"September 9, 2023",tags:[{label:"explainer",permalink:"/previews/ligo/contracts/blog/tags/explainer"}],readingTime:1.5766666666666667,hasTruncateMarker:!0,authors:[{name:"Tom Jack",title:"Developer at Ligo",url:"https://gitlab.com/tomjack",email:"tom@marigold.dev",imageURL:"https://secure.gravatar.com/avatar/d62c4ef79b9ef198c43a82d555fbd5fa9510464195223b160771910eb991e6fc?s=800&d=identicon",key:"tomjack"}],frontMatter:{title:"Why did the default datatype layout change to @layout comb?",description:"Discover the evolution of Michelson data type layouts in LIGO and the shift to @layout comb as the default choice in version 1.0. Explore the benefits, including improved performance and code size reduction.",slug:"layout-comb-why",authors:["tomjack"],tags:["explainer"],image:"https://i.imgur.com/mErPwqL.png",hide_table_of_contents:!0},prevItem:{title:"How to deal with the change of the default datatype layout to @layout comb ?",permalink:"/previews/ligo/contracts/blog/layout-comb-how"}},c={authorsImageUrls:[void 0]},s=[{value:"Background",id:"background",level:2},{value:"Why change the default?",id:"why-change-the-default",level:2},{value:"What do I do?",id:"what-do-i-do",level:2}],d={toc:s};function p(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,'When compiling to Michelson, LIGO must choose a "layout" for record\nand variant data types. Unfortunately, Michelson only has binary\n',(0,o.kt)("inlineCode",{parentName:"p"},"pair"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"or")," types, for esoteric theoretical reasons."),(0,o.kt)("p",null,"This means that for each record or variant type, LIGO must pick one of\nthe many isomorphic binary tree structures which can represent it in\nMichelson. This choice needs to be consistent (else we will get type\nerrors) and ideally it should be flexible (so that users can\ninteroperate with Michelson types defined in standards or emitted by\nother compilers.)"),(0,o.kt)("h2",{id:"background"},"Background"),(0,o.kt)("p",null,"In early versions of LIGO, two layouts were supported: ",(0,o.kt)("inlineCode",{parentName:"p"},"tree")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"comb"),"."),(0,o.kt)("p",null,"Layout ",(0,o.kt)("inlineCode",{parentName:"p"},"tree")," was made the default, primarily because this layout\nsupports record field access and update with cost O(log n), where n is\nthe number of fields in the record type. This layout also sorted\nfields alphabetically by name, which made it compatible with LIGO's\nstructural handling of record and variant types at the time, where\norder doesn't matter."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"tree")," layout was also used for tuple types, and originally this\ncould not be changed."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"comb")," layout was also supported because it was expected that it\nwould show up in standards and in interop with Michelson generated by\nother compilers (and indeed it did.) At some point, LIGO was modified\nto preserve the order of comb layout record fields and variant cases,\nsince this is useful for interop. (The order now also matters for\nthese types; two comb-layout record types are equal in LIGO only if\ntheir fields are in the same order.)"),(0,o.kt)("p",null,"Originally, the comb layout had worse performance, with cost O(n) for\nrecord field access and updates."),(0,o.kt)("h2",{id:"why-change-the-default"},"Why change the default?"),(0,o.kt)("p",null,"Since then, Michelson has added native O(log n) record field accesses\nand updates with the ",(0,o.kt)("inlineCode",{parentName:"p"},"comb")," layout. Additionally, there is an n-ary\n",(0,o.kt)("inlineCode",{parentName:"p"},"pair x y z ...")," notation for comb layout, which makes large comb pair\ntypes cheaper and more readable."),(0,o.kt)("p",null,"Thus, current best practice is for LIGO developers to almost always\nmark record and tuple types as ",(0,o.kt)("inlineCode",{parentName:"p"},"@layout comb"),". This generally leads to\nsmaller code size, and so less gas and storage burn."),(0,o.kt)("p",null,"It would be more convenient if this were the default. Unfortunately,\nchanging the default is a breaking change. But with 1.0, we are taking\nthe chance to finally make this breaking change..."),(0,o.kt)("p",null,"Variant types still do not have any special comb support in Michelson\n(again, for esoteric theoretical reasons.) However, for consistency\nand simplicity, we are making comb layout the default always. We\nbelieve that in most cases, the difference will not be\nsignificant. Users can explicitly mark variants as ",(0,o.kt)("inlineCode",{parentName:"p"},"@layout tree")," if\ndesired."),(0,o.kt)("h2",{id:"what-do-i-do"},"What do I do?"),(0,o.kt)("p",null,"See the ",(0,o.kt)("a",{parentName:"p",href:"/blog/layout-comb-how"},"How to deal with the change of the default datatype layout to ",(0,o.kt)("inlineCode",{parentName:"a"},"@layout comb")," ?")," doc for advice on how to deal\nwith this breaking change."))}p.isMDXComponent=!0}}]);