"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[15372],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=l(r),d=o,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||a;return r?n.createElement(f,i(i({ref:t},c),{},{components:r})):n.createElement(f,i({ref:t},c))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},48720:(e,t,r)=>{r.d(t,{D:()=>o.Z,Z:()=>a});var n=r(67294),o=r(75402);const a=function(e){return n.createElement(o.Z.Consumer,null,(t=>{let{syntax:r}=t;return r===e.syntax?e.children:n.createElement(n.Fragment,null)}))}},49682:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var n=r(87462),o=(r(67294),r(3905));r(48720);const a={id:"preprocessor",title:"Preprocessor"},i=void 0,p={unversionedId:"preprocessor/preprocessor",id:"preprocessor/preprocessor",title:"Preprocessor",description:"A preprocessor is a tool that reads a text file and, if some special",source:"@site/../docs/preprocessor/preprocessor.md",sourceDirName:"preprocessor",slug:"/preprocessor/",permalink:"/previews/ligo/contracts/docs/next/preprocessor/",draft:!1,tags:[],version:"current",frontMatter:{id:"preprocessor",title:"Preprocessor"},sidebar:"docs",previous:{title:"Parameteric types",permalink:"/previews/ligo/contracts/docs/next/data-types/parametric_types"},next:{title:"Comments",permalink:"/previews/ligo/contracts/docs/next/preprocessor/comments"}},s={},l=[],c={toc:l};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A preprocessor is a tool that reads a text file and, if some special\ninstructions, called ",(0,o.kt)("em",{parentName:"p"},"preprocessing directives"),", are found in the\ninput, the output may not be an identical copy, for example some parts\ncan be skipped. We document here the preprocessor shipped with the\nLIGO compiler."),(0,o.kt)("p",null,"This preprocessor features different kinds of directives:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"directives found in the standard preprocessor for the language\n",(0,o.kt)("inlineCode",{parentName:"p"},"C#"),";")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"a directive from ",(0,o.kt)("inlineCode",{parentName:"p"},"cpp"),", the ",(0,o.kt)("inlineCode",{parentName:"p"},"C")," preprocessor, enabling the textual\ninclusion of files;")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"a directive specific to LIGO to support a minimal module system."))),(0,o.kt)("p",null,"Importantly, strings and comments are handled the way ",(0,o.kt)("inlineCode",{parentName:"p"},"cpp")," does ---\nnot ",(0,o.kt)("inlineCode",{parentName:"p"},"C#"),"."),(0,o.kt)("p",null,"In the following subsections, we shall briefly present those\ndirectives. Here, we state some properties which hold for all of\nthem."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"They must start with a ",(0,o.kt)("inlineCode",{parentName:"p"},"#")," symbol at the beginning of a line.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Wrongly spelled directives or unsupported ones are ignored without\nwarning, and therefore will appear in the output.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"They can have arguments in the form of free text or\nstrings. (Anything after the directive name is considered a\npotential argument.)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"String arguments must be enclosed between double quotes and\ncannot span over two or more lines.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The valid preprocessing of a directive leaves in its place an\nempty line (that is, a newline character) or another directive, to\nbe picked up by other tools, like lexers.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Newline characters are never discarded, to preserve the line\nnumbers of copied text."))))}u.isMDXComponent=!0}}]);