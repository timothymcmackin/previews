"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[36659],{48720:(t,e,a)=>{a.d(e,{D:()=>s.Z,Z:()=>i});var n=a(67294),s=a(75402);const i=function(t){return n.createElement(s.Z.Consumer,null,(e=>{let{syntax:a}=e;return a===t.syntax?t.children:n.createElement(n.Fragment,null)}))}},99191:(t,e,a)=>{a.d(e,{Z:()=>d});var n=a(43164),s=a(67294),i=a(52263),o=a(48720),r=a(11506);function l(){return l=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var a=arguments[e];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(t[n]=a[n])}return t},l.apply(this,arguments)}const{Prism:c}=a(43164);c.languages={...c.languages,cameligo:{...c.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:c.languages.typescript};const d=function(t){const{siteConfig:{themeConfig:{prism:e={}}}}=(0,i.Z)(),a=e.singleTheme||r.Z,[c,d]=(0,s.useState)(!1);return(0,s.useEffect)((()=>{d(!0)}),[]),s.createElement(o.D.Consumer,null,(e=>{let{syntax:i}=e;return i===t.syntax?s.createElement(n.default,l({},n.defaultProps,{key:c,language:t.syntax,code:t.children,theme:a}),(t=>{let{className:e,tokens:a,getLineProps:n,getTokenProps:i}=t;return s.createElement("h4",{className:e,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},a.map(((t,e)=>s.createElement("div",n({line:t,key:e}),t.map(((t,e)=>s.createElement("span",i({token:t,key:e}))))))))})):s.createElement("div",null)}))}},41951:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var n=a(87462),s=(a(67294),a(3905)),i=(a(48720),a(99191));const o={id:"test.next.state-reference",title:"state",hide_table_of_contents:!0},r=void 0,l={unversionedId:"reference/test.next.state-reference",id:"version-1.7.0/reference/test.next.state-reference",title:"state",description:"module reset",source:"@site/versioned_docs/version-1.7.0/reference/test.next.state.md",sourceDirName:"reference",slug:"/reference/test.next.state-reference",permalink:"/docs/reference/test.next.state-reference",draft:!1,tags:[],version:"1.7.0",frontMatter:{id:"test.next.state-reference",title:"state",hide_table_of_contents:!0},sidebar:"API",previous:{title:"crypto",permalink:"/docs/reference/test.next.crypto-reference"},next:{title:"reset",permalink:"/docs/reference/test.next.state.reset-reference"}},c={},d=[],y={toc:d};function g(t){let{components:e,...a}=t;return(0,s.kt)("wrapper",(0,n.Z)({},y,a,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/reference/test.next.state.reset-reference"},"module reset")),(0,s.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val restore : unit -> unit"),(0,s.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let restore: (_: unit) => unit"),"Pops a testing framework context from the stack of contexts, and sets it up as the new current context. In case the stack was empty, the current context is kept.",(0,s.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val save : unit -> unit"),(0,s.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let save: (_: unit) => unit"),"Takes current testing framework context and saves it, pushing it into a stack of contexts.",(0,s.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val drop : unit -> unit"),(0,s.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let drop: (_: unit) => unit"),"Drops a testing framework context from the stack of contexts. In case the stack was empty, nothing is done.",(0,s.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val reset : nat -> tez list -> unit"),(0,s.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let reset: (_: nat) => (_: list<tez>) => unit"),"Generates a number of random bootstrapped accounts with a default amount of `4000000` tez. The passed list can be used to overwrite the amount. By default, the state only has two bootstrapped accounts. Notice that since Ithaca, a percentage of an account's balance is frozen (5% in testing mode) in case the account can be taken to be a validator, and thus getting balance can show a different amount to the one being set with `Test.State.reset`.",(0,s.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val reset_at : timestamp -> nat -> tez list -> unit"),(0,s.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let reset_at: (_: timestamp) => (_: nat) => (_: list<tez>) => unit"),"Generates a number of random bootstrapped accounts with a default amount of `4000000` tez. The passed list can be used to overwrite the amount. By default, the state only has two bootstrapped accounts. Notice that since Ithaca, a percentage of an account's balance is frozen (5% in testing mode) in case the account can be taken to be a validator, and thus getting balance can show a different amount to the one being set with `Test.State.reset`. It also takes a starting timestamp for the genesis block.",(0,s.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val register_delegate : key_hash -> unit"),(0,s.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let register_delegate: (_: key_hash) => unit"),"Registers a `key_hash` corresponding to an account as a delegate.",(0,s.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val register_constant : michelson_program -> string"),(0,s.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let register_constant: (_: michelson_program) => string"),"Registers a global constant, returns its hash as a string. See the documentation for global constants for an example of usage.",(0,s.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val set_source : address -> unit"),(0,s.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let set_source: (_: address) => unit"),"Sets the source for `Test.transfer` and `Test.originate`.",(0,s.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val set_baker_policy : test_baker_policy -> unit"),(0,s.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let set_baker_policy: (_: test_baker_policy) => unit"),"Forces the baking policy for `Test.transfer` and `Test.originate`. By default, the first bootstrapped account.",(0,s.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val set_baker : address -> unit"),(0,s.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let set_baker: (_: address) => unit"),"Forces the baker for `Test.transfer` and `Test.originate`, implemented using `Test.set_baker_policy` with `By_account`. By default, the first bootstrapped account.",(0,s.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val bake_until : nat -> unit"),(0,s.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let bake_until: (_: nat) => unit"),"It bakes until a number of cycles pass, so that an account registered as delegate can effectively act as a baker. Note: It can be used in tests to manually advance time.",(0,s.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val set_big_map : 'k 'v.int -> ('k, 'v) big_map -> unit"),(0,s.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let set_big_map: <k, v>(_: int) => (_: big_map<k, v>) => unit"),"The testing framework keeps an internal reference to the values corresponding to big map identifiers. This function allows to override the value of a particular big map identifier. It should not be normally needed, except in particular circumstances such as using custom bootstrap contracts that initialize big maps.",(0,s.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val get_voting_power : key_hash -> nat"),(0,s.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let get_voting_power: (_: key_hash) => nat"),"Return the voting power of a given contract. This voting power coincides with the weight of the contract in the voting listings (i.e., the rolls count) which is calculated at the beginning of every voting period.",(0,s.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val get_total_voting_power : unit -> nat"),(0,s.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let get_total_voting_power: (_: unit) => nat"),"Returns the total voting power of all contracts. The total voting power coincides with the sum of the rolls count of every contract in the voting listings. The voting listings is calculated at the beginning of every voting period.",(0,s.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val last_originations : unit -> (address, address list) map"),(0,s.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let last_originations: (_: unit) => map<address, list<address>>"),"Returns addresses of orginated accounts in the last transfer. It is given in the form of a map binding the address of the source of the origination operation to the addresses of newly originated accounts.",(0,s.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val last_events : 'a 'p 's.('p, 's) typed_address -> string -> 'a list"),(0,s.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let last_events: <a, p, s>(_: typed_address<p, s>) => (_: string) => list<a>"),"Returns the list of all the event payloads emited with a given tag by a given address. Any call to this function must be annotated with the expected payload type.",(0,s.kt)(i.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val stake : key_hash -> tez -> unit"),(0,s.kt)(i.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let stake: (_: key_hash) => (_: tez) => unit"))}g.isMDXComponent=!0}}]);