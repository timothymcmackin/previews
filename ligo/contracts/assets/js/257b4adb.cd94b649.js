"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[30548],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),f=a,m=d["".concat(l,".").concat(f)]||d[f]||u[f]||o;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>o});var r=n(67294),a=n(75402);const o=function(e){return r.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},35197:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905)),o=n(48720);const i={id:"folding",title:"Folding"},s=void 0,l={unversionedId:"sets/folding",id:"version-1.6.0/sets/folding",title:"Folding",description:"A functional iterator is a function that traverses a data structure",source:"@site/versioned_docs/version-1.6.0/sets/folding.md",sourceDirName:"sets",slug:"/sets/folding",permalink:"/previews/ligo/contracts/docs/1.6.0/sets/folding",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"folding",title:"Folding"},sidebar:"docs",previous:{title:"Updating",permalink:"/previews/ligo/contracts/docs/1.6.0/sets/updating"},next:{title:"Mapping",permalink:"/previews/ligo/contracts/docs/1.6.0/sets/mapping"}},c={},p=[],u={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A ",(0,a.kt)("em",{parentName:"p"},"functional iterator")," is a function that traverses a data structure\nand calls in turn a given function over the elements of that structure\nto compute some value. Another approach is sometimes possible:\n",(0,a.kt)("em",{parentName:"p"},"loops"),"."),(0,a.kt)("p",null,"There are three kinds of functional iterations over sets: the ",(0,a.kt)("em",{parentName:"p"},"fold"),",\nthe ",(0,a.kt)("em",{parentName:"p"},"map")," (not to be confused with the ",(0,a.kt)("em",{parentName:"p"},"map data structure"),") and the\n",(0,a.kt)("em",{parentName:"p"},"iteration"),"."),(0,a.kt)("p",null,"Let us consider first here the fold, which is the most general form of\nfunctional iteration. The folded function takes two arguments: an\n",(0,a.kt)("em",{parentName:"p"},"accumulator")," and the structure ",(0,a.kt)("em",{parentName:"p"},"element")," at hand, with which it then\nproduces a new accumulator. This enables having a partial result that\nbecomes complete when the traversal of the data structure is over."),(0,a.kt)("p",null,"The function ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.fold")," performs a fold over a set, in increasing\norder of its elements. The function ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.fold_desc")," folds in\ndecreasing order. The different in their types is the type of the\nfolded operation: with ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.fold"),", that function takes the accumulator\nfirst, whereas with ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.fold_desc"),", the accumulator comes second."),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=set_folding",group:"set_folding"},"let s : int set = Set.literal [1; 2; 3]\n// incr = [3; 2; 1]\nlet incr : int list = Set.fold (fun (a,i) -> i::a) s []\n// decr = [1; 2; 3]\nlet decr : int list = Set.fold_desc (fun (i,a) -> i::a) s []\n")),(0,a.kt)("p",null,"Note: See the predefined\n",(0,a.kt)("a",{parentName:"p",href:"../reference/set-reference/?lang=cameligo"},"module Set"))),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=set_folding",group:"set_folding"},"const s : set<int> = Set.literal([1, 2, 3]);\n// incr == [3, 2, 1]\nconst incr : list<int> = Set.fold (([a,i]) => ([i,...a] as list<int>), s, []);\n// decr == [1, 2, 3]\nconst decr : list<int> = Set.fold_desc (([i,a]) => ([i,...a] as list<int>), s, []);\n")),(0,a.kt)("p",null,"Note: See the predefined\n",(0,a.kt)("a",{parentName:"p",href:"../reference/set-reference/?lang=jsligo"},"namespace Set"))))}d.isMDXComponent=!0}}]);