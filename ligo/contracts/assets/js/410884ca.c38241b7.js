"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[17736],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),f=p(n),m=a,g=f["".concat(l,".").concat(m)]||f[m]||u[m]||i;return n?r.createElement(g,o(o({ref:t},c),{},{components:n})):r.createElement(g,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>i});var r=n(67294),a=n(75402);const i=function(e){return r.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},82488:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(87462),a=(n(67294),n(3905)),i=n(48720);const o={id:"iterating",title:"Iterating"},s=void 0,l={unversionedId:"sets/iterating",id:"version-1.6.0/sets/iterating",title:"Iterating",description:"An iterated operation is a fold over a set that returns the value of",source:"@site/versioned_docs/version-1.6.0/sets/iterating.md",sourceDirName:"sets",slug:"/sets/iterating",permalink:"/docs/1.6.0/sets/iterating",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"iterating",title:"Iterating"},sidebar:"docs",previous:{title:"Mapping",permalink:"/docs/1.6.0/sets/mapping"},next:{title:"Looping",permalink:"/docs/1.6.0/sets/looping"}},p={},c=[],u={toc:c};function f(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"An ",(0,a.kt)("em",{parentName:"p"},"iterated operation")," is a fold over a set that returns the value of\ntype ",(0,a.kt)("inlineCode",{parentName:"p"},"unit"),", that is, its only use is to produce side-effects. This\ncan be useful if, for example, you would like to check that each\nelement of a set is within a certain range, and fail with an error\notherwise."),(0,a.kt)("p",null,"The predefined functional iterator implementing the iterated operation\nover sets is called ",(0,a.kt)("inlineCode",{parentName:"p"},"Set.iter"),". In the following example, a set is\niterated to check that all its elements (integers) are greater than\n",(0,a.kt)("inlineCode",{parentName:"p"},"3"),"."),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=set_iterating",group:"set_iterating"},"let assert_all_greater_than_3 (s : int set) : unit =\n  Set.iter (fun i -> assert (i > 3)) s\n")),(0,a.kt)("p",null,"Note: See the predefined\n",(0,a.kt)("a",{parentName:"p",href:"../reference/set-reference/?lang=cameligo"},"module Set"))),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=set_iterating",group:"set_iterating"},"const assert_all_greater_than_3 =\n  (s: set<int>) : unit => Set.iter(i => assert(i > 3), s);\n")),(0,a.kt)("p",null,"Note: See the predefined\n",(0,a.kt)("a",{parentName:"p",href:"../reference/set-reference/?lang=jsligo"},"namespace Set"))))}f.isMDXComponent=!0}}]);