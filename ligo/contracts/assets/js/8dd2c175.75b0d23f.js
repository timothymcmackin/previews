"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[29001],{48720:(t,e,n)=>{n.d(e,{D:()=>i.Z,Z:()=>o});var a=n(67294),i=n(75402);const o=function(t){return a.createElement(i.Z.Consumer,null,(e=>{let{syntax:n}=e;return n===t.syntax?t.children:a.createElement(a.Fragment,null)}))}},99191:(t,e,n)=>{n.d(e,{Z:()=>k});var a=n(43164),i=n(67294),o=n(52263),s=n(48720),c=n(11506);function l(){return l=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(t[a]=n[a])}return t},l.apply(this,arguments)}const{Prism:r}=n(43164);r.languages={...r.languages,cameligo:{...r.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:r.languages.typescript};const k=function(t){const{siteConfig:{themeConfig:{prism:e={}}}}=(0,o.Z)(),n=e.singleTheme||c.Z,[r,k]=(0,i.useState)(!1);return(0,i.useEffect)((()=>{k(!0)}),[]),i.createElement(s.D.Consumer,null,(e=>{let{syntax:o}=e;return o===t.syntax?i.createElement(a.default,l({},a.defaultProps,{key:r,language:t.syntax,code:t.children,theme:n}),(t=>{let{className:e,tokens:n,getLineProps:a,getTokenProps:o}=t;return i.createElement("h4",{className:e,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((t,e)=>i.createElement("div",a({line:t,key:e}),t.map(((t,e)=>i.createElement("span",o({token:t,key:e}))))))))})):i.createElement("div",null)}))}},70742:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>k,contentTitle:()=>l,default:()=>m,frontMatter:()=>c,metadata:()=>r,toc:()=>p});var a=n(87462),i=(n(67294),n(3905)),o=n(48720),s=n(99191);const c={id:"tickets",title:"Tickets"},l=void 0,r={unversionedId:"data-types/tickets",id:"data-types/tickets",title:"Tickets",description:"Tezos tickets are authenticated quantities issued by contracts.",source:"@site/../docs/data-types/tickets.md",sourceDirName:"data-types",slug:"/data-types/tickets",permalink:"/previews/ligo/contracts/docs/next/data-types/tickets",draft:!1,tags:[],version:"current",frontMatter:{id:"tickets",title:"Tickets"},sidebar:"docs",previous:{title:"Big maps",permalink:"/previews/ligo/contracts/docs/next/data-types/big_maps"},next:{title:"Parameteric types",permalink:"/previews/ligo/contracts/docs/next/data-types/parametric_types"}},k={},p=[{value:"Creating tickets",id:"creating-tickets",level:2},{value:"Reading tickets",id:"reading-tickets",level:2},{value:"Splitting tickets",id:"splitting-tickets",level:2},{value:"Joining tickets",id:"joining-tickets",level:2},{value:"Transferring tickets",id:"transferring-tickets",level:2}],u={toc:p};function m(t){let{components:e,...n}=t;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Tezos tickets are authenticated quantities issued by contracts.\nA ticket of type ",(0,i.kt)("inlineCode",{parentName:"p"},"ticket")," has three elements:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Its ",(0,i.kt)("em",{parentName:"p"},"ticketer"),", which is the contract that issued the ticket")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Its ",(0,i.kt)("em",{parentName:"p"},"contents"),", also knowns as the wrapped value or payload, which can be any data type")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Its ",(0,i.kt)("em",{parentName:"p"},"amount")," of type ",(0,i.kt)("inlineCode",{parentName:"p"},"nat"),", which is an arbitrary number that represents a quantity or value for the ticket"))),(0,i.kt)("p",null,"A ticket's ticketer and contents cannot be changed."),(0,i.kt)("p",null,"Tickets themselves cannot be duplicated, but you can split one ticket into multiple tickets by creating duplicate tickets each with a portion of the original ticket's amount.\nThe new tickets have the same ticketer and contents, and the sum of their amounts is always the amount of the original ticket.\nSimilarly, you can join tickets with matching ticketers and contents into a single ticket with the sum of the joined tickets' amounts."),(0,i.kt)("h2",{id:"creating-tickets"},"Creating tickets"),(0,i.kt)("p",null,"To create a ticket, pass the contents and the amount to ",(0,i.kt)("inlineCode",{parentName:"p"},"Tezos.create_ticket")," function.\nThe function returns an option that contains the ticket or ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," if the amount of the ticket is zero.\nThe contract's address automatically becomes the ticketer value."),(0,i.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val Tezos.create_ticket : 'value -> nat -> ('value ticket) option"),(0,i.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let Tezos.create_ticket: 'value => nat => option<ticket<'value>>"),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=manip_ticket",group:"manip_ticket"},'let my_ticket1 = Option.unopt (Tezos.create_ticket 1 10n)\nlet my_ticket2 = Option.unopt (Tezos.create_ticket "one" 10n)\n'))),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=manip_ticket",group:"manip_ticket"},'const my_ticket1 = Option.unopt(Tezos.create_ticket(1, 10n));\nconst my_ticket2 = Option.unopt(Tezos.create_ticket("one", 10n));\n'))),(0,i.kt)("h2",{id:"reading-tickets"},"Reading tickets"),(0,i.kt)("p",null,"You cannot read the contents of a ticket directly; you must use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Tezos.read_ticket")," function to access it.\nThis function destroys the ticket and returns the ticketer, contents, amount, and a copy of the original ticket."),(0,i.kt)("p",null,"Note that reading a ticket with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Tezos.read_ticket")," function consumes it, destroying the original ticket.\nTo preserve the ticket, you must use the copy that the function returns, or else the ticket is destroyed."),(0,i.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val Tezos.read_ticket : 'value ticket -> (address * ('value * nat)) * 'value ticket"),(0,i.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let Tezos.read_ticket: ticket<'value> => <<address, <'value , nat>> , ticket<'value>>"),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"To read the content of a ticket, you can either use tuple\ndestructuring or pattern matching:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=manip_ticket",group:"manip_ticket"},"let v =\n  let (_addr, (payload, _amt)), _ticket = Tezos.read_ticket my_ticket1\n  in payload\n"))),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"To read the content of a ticket, you need to use tuple destructuring:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=manip_ticket",group:"manip_ticket"},"const v2 = do {\n  let [[_addr, [payload, _amt]], _ticket] = Tezos.read_ticket (my_ticket2);\n  return payload;\n}\n"))),(0,i.kt)("h2",{id:"splitting-tickets"},"Splitting tickets"),(0,i.kt)("p",null,"Splitting a ticket creates two tickets that have the same ticketer and contents as the original and have amounts that add up to the amount of the original\nTo split a ticket, pass the ticket and two nats to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Tezos.split_ticket")," function.\nIt returns an option that is ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," if the sum of the two nats does not equal the amount of the original ticket.\nIf the sum is equal, it returns ",(0,i.kt)("inlineCode",{parentName:"p"},"Some")," with two tickets with the two nats as their amounts."),(0,i.kt)("p",null,"You can split tickets to divide a ticket to send to multiple sources or to consume only part of a ticket's amount."),(0,i.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val Tezos.split_ticket : 'value ticket -> nat * nat -> ('value ticket * 'value ticket) option"),(0,i.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let Tezos.split_ticket: ticket<'value> => <nat , nat> => option <<ticket<'value>, ticket<'value>>>"),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=manip_ticket",group:"manip_ticket"},'let ta, tb =\n  match Tezos.split_ticket my_ticket1 (6n, 4n) with\n    None -> failwith "amt_a + amt_v <> amt"\n  | Some split_tickets -> split_tickets\n'))),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=manip_ticket",group:"manip_ticket"},'const [ta, tb] =\n  match(Tezos.split_ticket(my_ticket1, [6n, 4n])) {\n    when(None()): failwith("amt_a + amt_v != amt");\n    when(Some(split_tickets)): split_tickets\n  };\n'))),(0,i.kt)("h2",{id:"joining-tickets"},"Joining tickets"),(0,i.kt)("p",null,"You can join tickets that have identical ticketers and contents.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"Tezos.join_tickets")," function joins tickets and returns an option with ",(0,i.kt)("inlineCode",{parentName:"p"},"Some")," with a single ticket that has an amount that equals the sum of the amounts of the original tickets.\nIf the ticketer or contents don't match, it returns ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),"."),(0,i.kt)(s.Z,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val Tezos.join_tickets : 'value ticket * 'value ticket -> ('value ticket) option"),(0,i.kt)(s.Z,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let Tezos.join_tickets = <ticket<'value>, ticket<'value>> => option <ticket<'value>>"),(0,i.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=manip_ticket",group:"manip_ticket"},"let tc : int ticket option =\n  let ta = Option.unopt (Tezos.create_ticket 1 10n) in\n  let tb = Option.unopt (Tezos.create_ticket 1 5n) in\n  Tezos.join_tickets (ta, tb)\n"))),(0,i.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=manip_ticket2",group:"manip_ticket2"},"const ta = Option.unopt(Tezos.create_ticket(1, 10n));\nconst tb = Option.unopt(Tezos.create_ticket(1, 5n));\nconst tc = Tezos.join_tickets([ta, tb]);\n"))),(0,i.kt)("h2",{id:"transferring-tickets"},"Transferring tickets"),(0,i.kt)("p",null,"You can send tickets to other contracts by passing them with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Tezos.transaction")," function, just like passing any other value to a contract."))}m.isMDXComponent=!0}}]);