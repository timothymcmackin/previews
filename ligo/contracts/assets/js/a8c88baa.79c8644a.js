"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[18120],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),u=o,f=d["".concat(c,".").concat(u)]||d[u]||m[u]||i;return n?r.createElement(f,a(a({ref:t},l),{},{components:n})):r.createElement(f,a({ref:t},l))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>o.Z,Z:()=>i});var r=n(67294),o=n(75402);const i=function(e){return r.createElement(o.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},66314:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var r=n(87462),o=(n(67294),n(3905)),i=n(48720);const a={id:"comments",title:"Comments"},s=void 0,c={unversionedId:"preprocessor/comments",id:"preprocessor/comments",title:"Comments",description:"Comments are recognised by the preprocessor, even in pieces of the",source:"@site/../docs/preprocessor/comments.md",sourceDirName:"preprocessor",slug:"/preprocessor/comments",permalink:"/previews/ligo/contracts/docs/next/preprocessor/comments",draft:!1,tags:[],version:"current",frontMatter:{id:"comments",title:"Comments"},sidebar:"docs",previous:{title:"Preprocessor",permalink:"/previews/ligo/contracts/docs/next/preprocessor/"},next:{title:"Strings",permalink:"/previews/ligo/contracts/docs/next/preprocessor/strings"}},p={},l=[],m={toc:l};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Comments are recognised by the preprocessor, even in pieces of the\ninput that are not copied. (This last point is a difference between\n",(0,o.kt)("inlineCode",{parentName:"p"},"cpp")," and the ",(0,o.kt)("inlineCode",{parentName:"p"},"C#")," preprocessor.) The rationale for doing so when\ncopying the input is that we do not want the preprocessor to interpret\na directive that is actually in a comment. This can happen when\ncommenting out a piece of the source code that contains a\npreprocessing directive: we do not want that directive to be\ninterpreted."),(0,o.kt)("p",null,"When the processor is in skip mode, that is, the input is not copied,\ncomments are also recognised. This ensures that a comment containing a\nconditional directive, for example ",(0,o.kt)("inlineCode",{parentName:"p"},"#endif"),", does not start to\ninteract with previous directives, like ",(0,o.kt)("inlineCode",{parentName:"p"},"#if"),", or raises an error when\nswitching from copy mode to skip mode. In other words, the\ninterpretation of comments should always be the same. For\nexample, we want the following input to be valid:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"#if true\n // #endif\n#endif\n")),(0,o.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,o.kt)("p",null,"Comments are blocks enclosed between ",(0,o.kt)("inlineCode",{parentName:"p"},"(*")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"*)"),", and start with\n",(0,o.kt)("inlineCode",{parentName:"p"},"//")," for line comments.")),(0,o.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,o.kt)("p",null,"Comments are blocks enclosed between ",(0,o.kt)("inlineCode",{parentName:"p"},"/*")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"*/"),", and start with\n",(0,o.kt)("inlineCode",{parentName:"p"},"//")," for line comments.")))}d.isMDXComponent=!0}}]);