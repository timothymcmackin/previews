"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[45357],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>m});var n=o(67294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function c(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var l=n.createContext({}),s=function(e){var t=n.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},p=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(o),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return o?n.createElement(h,i(i({ref:t},p),{},{components:o})):n.createElement(h,i({ref:t},p))}));function m(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,i=new Array(a);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<a;s++)i[s]=o[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}d.displayName="MDXCreateElement"},81391:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var n=o(87462),r=(o(67294),o(3905));const a={title:"Why did the default datatype layout change to @layout comb?",description:"Discover the evolution of Michelson data type layouts in LIGO and the shift to @layout comb as the default choice in version 1.0. Explore the benefits, including improved performance and code size reduction.",slug:"layout-comb-why",authors:["tomjack"],tags:["explainer"],image:"https://i.imgur.com/mErPwqL.png",hide_table_of_contents:!0},i=void 0,c={permalink:"/blog/layout-comb-why",source:"@site/blog/2023-09-09-layout-comb-why.md",title:"Why did the default datatype layout change to @layout comb?",description:"Discover the evolution of Michelson data type layouts in LIGO and the shift to @layout comb as the default choice in version 1.0. Explore the benefits, including improved performance and code size reduction.",date:"2023-09-09T00:00:00.000Z",formattedDate:"September 9, 2023",tags:[{label:"explainer",permalink:"/blog/tags/explainer"}],readingTime:1.5766666666666667,hasTruncateMarker:!0,authors:[{name:"Tom Jack",title:"Developer at Ligo",url:"https://gitlab.com/tomjack",email:"tom@marigold.dev",imageURL:"https://secure.gravatar.com/avatar/d62c4ef79b9ef198c43a82d555fbd5fa9510464195223b160771910eb991e6fc?s=800&d=identicon",key:"tomjack"}],frontMatter:{title:"Why did the default datatype layout change to @layout comb?",description:"Discover the evolution of Michelson data type layouts in LIGO and the shift to @layout comb as the default choice in version 1.0. Explore the benefits, including improved performance and code size reduction.",slug:"layout-comb-why",authors:["tomjack"],tags:["explainer"],image:"https://i.imgur.com/mErPwqL.png",hide_table_of_contents:!0},prevItem:{title:"How to deal with the change of the default datatype layout to @layout comb ?",permalink:"/blog/layout-comb-how"}},l={authorsImageUrls:[void 0]},s=[],p={toc:s};function u(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,'When compiling to Michelson, LIGO must choose a "layout" for record\nand variant data types. Unfortunately, Michelson only has binary\n',(0,r.kt)("inlineCode",{parentName:"p"},"pair"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"or")," types, for esoteric theoretical reasons."),(0,r.kt)("p",null,"This means that for each record or variant type, LIGO must pick one of\nthe many isomorphic binary tree structures which can represent it in\nMichelson. This choice needs to be consistent (else we will get type\nerrors) and ideally it should be flexible (so that users can\ninteroperate with Michelson types defined in standards or emitted by\nother compilers.)"))}u.isMDXComponent=!0}}]);