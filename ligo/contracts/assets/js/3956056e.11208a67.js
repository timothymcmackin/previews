"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[78697],{48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>o});var i=n(67294),a=n(75402);const o=function(e){return i.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:i.createElement(i.Fragment,null)}))}},99191:(e,t,n)=>{n.d(t,{Z:()=>m});var i=n(43164),a=n(67294),o=n(52263),s=n(48720),r=n(11506);function l(){return l=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},l.apply(this,arguments)}const{Prism:p}=n(43164);p.languages={...p.languages,cameligo:{...p.languages.ocaml,comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]},jsligo:p.languages.typescript};const m=function(e){const{siteConfig:{themeConfig:{prism:t={}}}}=(0,o.Z)(),n=t.singleTheme||r.Z,[p,m]=(0,a.useState)(!1);return(0,a.useEffect)((()=>{m(!0)}),[]),a.createElement(s.D.Consumer,null,(t=>{let{syntax:o}=t;return o===e.syntax?a.createElement(i.default,l({},i.defaultProps,{key:p,language:e.syntax,code:e.children,theme:n}),(e=>{let{className:t,tokens:n,getLineProps:i,getTokenProps:o}=e;return a.createElement("h4",{className:t,style:{backgroundColor:"var(--ifm-background-color)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:"var(--ifm-pre-line-height)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},n.map(((e,t)=>a.createElement("div",i({line:e,key:t}),e.map(((e,t)=>a.createElement("span",o({token:e,key:t}))))))))})):a.createElement("div",null)}))}},98965:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>b,frontMatter:()=>s,metadata:()=>l,toc:()=>m});var i=n(87462),a=(n(67294),n(3905)),o=n(48720);n(99191);const s={id:"mumbai",title:"Mumbai",description:"Mumbai changes"},r=void 0,l={unversionedId:"protocol/mumbai",id:"version-1.6.0/protocol/mumbai",title:"Mumbai",description:"Mumbai changes",source:"@site/versioned_docs/version-1.6.0/protocol/mumbai.md",sourceDirName:"protocol",slug:"/protocol/mumbai",permalink:"/docs/1.6.0/protocol/mumbai",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"mumbai",title:"Mumbai",description:"Mumbai changes"},sidebar:"API",previous:{title:"Lima",permalink:"/docs/1.6.0/protocol/lima"},next:{title:"Nairobi",permalink:"/docs/1.6.0/protocol/nairobi"}},p={},m=[{value:"API",id:"api",level:2},{value:"Deprecation",id:"deprecation",level:3},{value:"New operators",id:"new-operators",level:3},{value:"Bitwise operators of <code>bytes</code>",id:"bitwise-operators-of-bytes",level:4},{value:"Conversion between <code>bytes</code>-<code>int</code> &amp; <code>bytes</code>-<code>nat</code>",id:"conversion-between-bytes-int--bytes-nat",level:4}],c={toc:m};function b(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"api"},"API"),(0,a.kt)("h3",{id:"deprecation"},"Deprecation"),(0,a.kt)("p",null,"The type ",(0,a.kt)("inlineCode",{parentName:"p"},"tx_rollup_l2_address")," has been disabled (see the ",(0,a.kt)("a",{parentName:"p",href:"https://tezos.gitlab.io/protocols/016_mumbai.html#breaking-changes"},"changelog")," for the Mumbai protocol)."),(0,a.kt)("h3",{id:"new-operators"},"New operators"),(0,a.kt)("h4",{id:"bitwise-operators-of-bytes"},"Bitwise operators of ",(0,a.kt)("inlineCode",{parentName:"h4"},"bytes")),(0,a.kt)("p",null,"Bitwise operations are now supported on ",(0,a.kt)("inlineCode",{parentName:"p"},"bytes")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"test-ligo group=test_bitwise","test-ligo":!0,group:"test_bitwise"},"let test_bytes_bitwise_ops  =\n  let b_and         = 0x0005 land 0x0106 in\n  let b_or          = 0x0005 lor  0x0106 in\n  let b_xor         = 0x0005 lxor 0x0106 in\n  let b_shift_left  = 0x06   lsl  8n     in\n  let b_shift_right = 0x0006 lsr  1n     in\n\n  assert (b_and         = 0x0004 &&\n          b_or          = 0x0107 &&\n          b_xor         = 0x0103 &&\n          b_shift_left  = 0x0600 &&\n          b_shift_right = 0x0003  )\n"))),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"test-ligo group=test_bitwise","test-ligo":!0,group:"test_bitwise"},"const test_bytes_bitwise_module = (() => {\n  const b_and           = Bitwise.and         (0x0005, 0x0106  );\n  const b_or            = Bitwise.or          (0x0005, 0x0106  );\n  const b_xor           = Bitwise.xor         (0x0005, 0x0106  );\n  const b_shift_left    = Bitwise.shift_left  (0x06  , 8 as nat);\n  const b_shift_right   = Bitwise.shift_right (0x0006, 1 as nat);\n\n  assert (b_and         == 0x0004 &&\n          b_or          == 0x0107 &&\n          b_xor         == 0x0103 &&\n          b_shift_left  == 0x0600 &&\n          b_shift_right == 0x0003  )})()\n"))),(0,a.kt)("h4",{id:"conversion-between-bytes-int--bytes-nat"},"Conversion between ",(0,a.kt)("inlineCode",{parentName:"h4"},"bytes"),"-",(0,a.kt)("inlineCode",{parentName:"h4"},"int")," & ",(0,a.kt)("inlineCode",{parentName:"h4"},"bytes"),"-",(0,a.kt)("inlineCode",{parentName:"h4"},"nat")),(0,a.kt)("p",null,"We can now convert between ",(0,a.kt)("inlineCode",{parentName:"p"},"bytes"),"-",(0,a.kt)("inlineCode",{parentName:"p"},"int")," & ",(0,a.kt)("inlineCode",{parentName:"p"},"bytes"),"-",(0,a.kt)("inlineCode",{parentName:"p"},"nat")," using the functions"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int"),"   (Convert ",(0,a.kt)("inlineCode",{parentName:"li"},"bytes")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"int"),")"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"nat"),"   (Convert ",(0,a.kt)("inlineCode",{parentName:"li"},"bytes")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"nat"),")"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bytes")," (Convert ",(0,a.kt)("inlineCode",{parentName:"li"},"bytes")," to either ",(0,a.kt)("inlineCode",{parentName:"li"},"int")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"nat"),")")),(0,a.kt)(o.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"test-ligo group=test_bytes_conv","test-ligo":!0,group:"test_bytes_conv"},"(* bytes -> nat *)\nlet test_bytes_nat = nat 0x1234 (* 1234n *)\n\n(* nat -> bytes *)\nlet test_nat_bytes = bytes 4660n (* 0x1234 *)\n\n(* bytes -> int *)\nlet test_bytes_int = int 0x1234 (* 4660 *)\n\n(* int -> bytes *)\nlet test_int_bytes = bytes 4660 (* 0x1234 *)\n"))),(0,a.kt)(o.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"test-ligo group=test_bytes_conv","test-ligo":!0,group:"test_bytes_conv"},"/* bytes -> nat */\nconst test_bytes_nat = nat(0x1234) // (1234 as nat)\n\n/* nat -> bytes */\nconst test_nat_bytes = bytes(4660 as nat) // 0x1234\n\n/* bytes -> int */\nconst test_bytes_int = int(0x1234) // 4660\n\n/* int -> bytes */\nconst test_int_bytes = bytes(4660) // 0x1234\n"))))}b.isMDXComponent=!0}}]);