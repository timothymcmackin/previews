"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[12030],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},l=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),u=c(n),g=r,d=u["".concat(s,".").concat(g)]||u[g]||m[g]||i;return n?a.createElement(d,p(p({ref:t},l),{},{components:n})):a.createElement(d,p({ref:t},l))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,p=new Array(i);p[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,p[1]=o;for(var c=2;c<i;c++)p[c]=n[c];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>r.Z,Z:()=>i});var a=n(67294),r=n(75402);const i=function(e){return a.createElement(r.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:a.createElement(a.Fragment,null)}))}},17914:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>p,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905)),i=n(48720);const p={id:"searching",title:"Searching"},o=void 0,s={unversionedId:"maps/searching",id:"version-1.5.0/maps/searching",title:"Searching",description:"The predicate Map.mem tests for membership in a given map, given a",source:"@site/versioned_docs/version-1.5.0/maps/searching.md",sourceDirName:"maps",slug:"/maps/searching",permalink:"/docs/1.5.0/maps/searching",draft:!1,tags:[],version:"1.5.0",frontMatter:{id:"searching",title:"Searching"},sidebar:"docs",previous:{title:"Sizing",permalink:"/docs/1.5.0/maps/sizing"},next:{title:"Adding",permalink:"/docs/1.5.0/maps/adding"}},c={},l=[],m={toc:l};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The predicate ",(0,r.kt)("inlineCode",{parentName:"p"},"Map.mem")," tests for membership in a given map, given a\npurported key."),(0,r.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=map_searching",group:"map_searching"},'let my_map : (int, string) map =\n  Map.literal [(1,"one"); (2,"two")]\nlet contains_2 : bool = Map.mem 2 my_map // = true\n'))),(0,r.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=map_searching",group:"map_searching"},'const my_map: map<int,string> =\n  Map.literal(list([[1,"one"],[2,"two"]]));\nconst contains_2: bool = Map.mem(2, my_map); // == true\n'))),(0,r.kt)("p",null,"In practice, however, we would like to get the value associated to the\nkey we searched. This is achieved by means of ",(0,r.kt)("inlineCode",{parentName:"p"},"Map.find_opt"),"."),(0,r.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=map_searching",group:"map_searching"},"let v : string option = Map.find_opt 2 my_map\n"))),(0,r.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=map_searching",group:"map_searching"},"const v : option<string> = Map.find_opt(2, my_map);\n"))),(0,r.kt)("p",null,"Notice how the value we read is an optional value: this is to force\nthe reader to account for a missing key in the map. This requires\n",(0,r.kt)("em",{parentName:"p"},"pattern matching"),"."),(0,r.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=map_searching",group:"map_searching"},'let force_access key map =\n  match Map.find_opt key map with\n    Some value -> value\n  | None -> failwith "No value."\n'))),(0,r.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=map_searching",group:"map_searching"},'let force_access = (key, map) => {\n  return match(Map.find_opt (key, map)) {\n    when(Some(value)): value;\n    when(None): failwith("No value.")\n  };\n};\n'))),(0,r.kt)("p",null,"In fact, the predefined function ",(0,r.kt)("inlineCode",{parentName:"p"},"Map.find")," does exactly that, except\nthat the exception raised by ",(0,r.kt)("inlineCode",{parentName:"p"},"failwith")," carries the default string\n",(0,r.kt)("inlineCode",{parentName:"p"},'"MAP FIND"'),"."),(0,r.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,r.kt)("p",null,"Note: See the predefined\n",(0,r.kt)("a",{parentName:"p",href:"../reference/map-reference"},"module Map"))),(0,r.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,r.kt)("p",null,"Note: See the predefined\n",(0,r.kt)("a",{parentName:"p",href:"../reference/map-reference"},"namespace Map"))))}u.isMDXComponent=!0}}]);