"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[19248],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=u(n),d=i,y=m["".concat(p,".").concat(d)]||m[d]||c[d]||a;return n?r.createElement(y,o(o({ref:t},s),{},{components:n})):r.createElement(y,o({ref:t},s))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>i.Z,Z:()=>a});var r=n(67294),i=n(75402);const a=function(e){return r.createElement(i.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},86648:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var r=n(87462),i=(n(67294),n(3905)),a=n(48720);const o={id:"unit",title:"Unit"},l=void 0,p={unversionedId:"variants/unit",id:"version-1.6.0/variants/unit",title:"Unit",description:"The type unit is a predefined type that contains only one value that",source:"@site/versioned_docs/version-1.6.0/variants/unit.md",sourceDirName:"variants",slug:"/variants/unit",permalink:"/previews/ligo/contracts/docs/1.6.0/variants/unit",draft:!1,tags:[],version:"1.6.0",frontMatter:{id:"unit",title:"Unit"},sidebar:"docs",previous:{title:"Functions",permalink:"/previews/ligo/contracts/docs/1.6.0/polymorphism/functions"},next:{title:"Variants",permalink:"/previews/ligo/contracts/docs/1.6.0/variants/"}},u={},s=[],c={toc:s};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The type ",(0,i.kt)("inlineCode",{parentName:"p"},"unit")," is a predefined type that contains only one value that\ncarries no information. It is used when no relevant information is\nrequired or produced."),(0,i.kt)(a.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The unique value of type ",(0,i.kt)("inlineCode",{parentName:"p"},"unit")," is written ",(0,i.kt)("inlineCode",{parentName:"p"},"()"),", like an empty tuple,\nfollowing the OCaml convention."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=unit",group:"unit"},"let x : unit = ()\n")),(0,i.kt)("p",null,"Imperative statements, like statements and loops, will have type\n",(0,i.kt)("inlineCode",{parentName:"p"},"unit"),", and that is why it is documented here.")),(0,i.kt)(a.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,i.kt)("p",null,"The unique value of type ",(0,i.kt)("inlineCode",{parentName:"p"},"unit")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"[]"),", like an empty tuple."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=unit",group:"unit"},"const x : unit = [];\n"))))}m.isMDXComponent=!0}}]);