"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[43183],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},48720:(e,t,n)=>{n.d(t,{D:()=>a.Z,Z:()=>i});var r=n(67294),a=n(75402);const i=function(e){return r.createElement(a.Z.Consumer,null,(t=>{let{syntax:n}=t;return n===e.syntax?e.children:r.createElement(r.Fragment,null)}))}},4778:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905)),i=n(48720);const o={id:"declaring",title:"Declaring"},s=void 0,l={unversionedId:"signatures/declaring",id:"version-1.7.0/signatures/declaring",title:"Declaring",description:"Until now, we dealt with implicit module types, also know as",source:"@site/versioned_docs/version-1.7.0/signatures/declaring.md",sourceDirName:"signatures",slug:"/signatures/declaring",permalink:"/docs/signatures/declaring",draft:!1,tags:[],version:"1.7.0",frontMatter:{id:"declaring",title:"Declaring"},sidebar:"docs",previous:{title:"Events",permalink:"/docs/contract/events"},next:{title:"Extending",permalink:"/docs/signatures/extending"}},c={},p=[],u={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(i.Z,{syntax:"cameligo",mdxType:"Syntax"},(0,a.kt)("p",null,"Until now, we dealt with implicit module types, also know as\n",(0,a.kt)("em",{parentName:"p"},"signatures"),". Having explicitly declared module types enables\nabstraction and reusability by inclusion of signatures. Signatures are\ndefined like in OCaml, that is, they are introduced by the keywords\n",(0,a.kt)("inlineCode",{parentName:"p"},"module type")," and the signature expression is in between ",(0,a.kt)("inlineCode",{parentName:"p"},"sig")," and\n",(0,a.kt)("inlineCode",{parentName:"p"},"end"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=sig_declaring",group:"sig_declaring"},"module type Euro_SIG =\n  sig\n    type t\n    val add : t * t -> t\n    val one : t\n    val two : t\n  end\n")),(0,a.kt)("p",null,"The rationale for using module types is the same as using explicit\ntype annotation for values: to make sure our values comply with their\nintended use. (We will see other reasons in the next sections.) When\nthe declaration of a module is explicitly constrained by a signature,\nits contents must match ",(0,a.kt)("em",{parentName:"p"},"exactly")," that of the signature (that is,\nnothing less, nothing more), also known as ",(0,a.kt)("em",{parentName:"p"},"filtering semantics"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cameligo",metastring:"group=sig_declaring",group:"sig_declaring"},"module Euro : Euro_SIG =\n  struct\n    type t = nat // No more abstract\n    let add (a, b : t * t) = a + b\n    let one : t = 1n\n    let two : t = 2n\n  end\n")),(0,a.kt)("p",null,"Note how module definitions ",(0,a.kt)("em",{parentName:"p"},"must")," instantiate any abstract type in\ntheir signature: here ",(0,a.kt)("inlineCode",{parentName:"p"},"Euro.t"),".")),(0,a.kt)(i.Z,{syntax:"jsligo",mdxType:"Syntax"},(0,a.kt)("p",null,"Until now, we dealt with implicit namespace types, also know as\n",(0,a.kt)("em",{parentName:"p"},"interfaces"),". Having explicitly declared interfaces enables\nabstraction and reusability by inclusion of interfaces. Interfaces are\nintroduced by the keyword ",(0,a.kt)("inlineCode",{parentName:"p"},"interface"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=intf_declaring",group:"intf_declaring"},"interface Euro_INTF {\n  type t;\n  const add: (a: t, b: t) => t;\n  const one: t;\n  const two: t;\n};\n")),(0,a.kt)("p",null,"An interface can then be used to constrain a namespace definition,\nensuring that said namespace contains ",(0,a.kt)("em",{parentName:"p"},"at least")," the types and values\nlisted in the given interface. An interface constraint is introduced\nby the keyword ",(0,a.kt)("inlineCode",{parentName:"p"},"implements"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsligo",metastring:"group=intf_declaring",group:"intf_declaring"},"namespace Euro implements Euro_INTF {\n  export type t = nat; // No more abstract\n  export const add = (a: t, b: t) : t => a + b;\n  export const one: t = 1n;\n  export const two: t = 2n;\n};\n")),(0,a.kt)("p",null,"Note how namespace definitions ",(0,a.kt)("em",{parentName:"p"},"must")," instantiate any abstract type in\ntheir interface: here ",(0,a.kt)("inlineCode",{parentName:"p"},"Euro.t"),".")))}d.isMDXComponent=!0}}]);