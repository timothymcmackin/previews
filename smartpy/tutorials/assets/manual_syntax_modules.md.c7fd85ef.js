import{_ as a,o as n,c as e,Q as l}from"./chunks/framework.741828c6.js";const y=JSON.parse('{"title":"Modules","description":"","frontmatter":{},"headers":[],"relativePath":"manual/syntax/modules.md","filePath":"manual/syntax/modules.md"}'),p={name:"manual/syntax/modules.md"};function o(t,s,i,c,r,d){return n(),e("div",null,s[0]||(s[0]=[l(`<h1 id="modules" tabindex="-1">Modules <a class="header-anchor" href="#modules" aria-label="Permalink to &quot;Modules&quot;">​</a></h1><p>SmartPy code is structured as one or more modules.</p><p>You can create modules in two different ways:</p><ul><li>In a SmartPy <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#F07178;">spy</span></span></code></span> file</li><li>Inlined in a Python <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#F07178;">py</span></span></code></span> file with the annotation <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">module</span></span></code></span></li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>All code within a module is processed as SmartPy syntax, not as Python. Code outside a module, including code in <a href="./../scenarios/test_scenarios">Test scenarios</a>, is processed as standard Python.</p></div><p>The top-level functions in inlined SmartPy modules are not executed directly as normal Python functions. These functions are merely a way of structuring the code.</p><p>To run the code inside them, you must add them to a <a href="./../scenarios/test_scenarios">test scenario</a>.</p><p>To use a module in another module it must be <a href="#module-imports">imported first</a>.</p><h2 id="module-imports" tabindex="-1">Module imports <a class="header-anchor" href="#module-imports" aria-label="Permalink to &quot;Module imports&quot;">​</a></h2><p>SmartPy modules can import other SmartPy modules to use the functions or classes defined within.</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">import smartpy as sp</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"># an inlined SmartPy module</span></span>
<span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def example():</span></span>
<span class="line"><span style="color:#babed8;">    def foo():</span></span>
<span class="line"><span style="color:#babed8;">        pass</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"># another inlined SmartPy module that uses the previous module</span></span>
<span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def my_module():</span></span>
<span class="line"><span style="color:#babed8;">    # Since v0.20.0: to use the \`example\` module you must import it</span></span>
<span class="line"><span style="color:#babed8;">    import example</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    def bar():</span></span>
<span class="line"><span style="color:#babed8;">        example.foo()</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"># Since v0.20.0: you only need to use the top level \`my_module\` here</span></span>
<span class="line"><span style="color:#babed8;">sp.test_scenario(&quot;Test&quot;, my_module)</span></span></code></pre></div><h3 id="inlined-modules" tabindex="-1">Inlined modules <a class="header-anchor" href="#inlined-modules" aria-label="Permalink to &quot;Inlined modules&quot;">​</a></h3><p>You can put SmartPy code in Python <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#F07178;">py</span></span></code></span> files by using the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">module</span></span></code></span> annotation.</p><p>For example, this code defines a SmartPy module named <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">calc</span></span></code></span> with a single smart contract named <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">Calculator</span></span></code></span>. You can name modules whatever you want and a Python file can define multiple modules. As with <a href="#smartpy-files">SmartPy files</a> multiple classes / type definitions / functions can be defined in each module.</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def calc():</span></span>
<span class="line"><span style="color:#babed8;">    class Calculator(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.result = 0</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        @sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">        def multiply(self, x, y):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.result = x * y</span></span></code></pre></div><p>To use this module in another inline module in the same Python file you can import it directly:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def main():</span></span>
<span class="line"><span style="color:#babed8;">    import calc</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    class NewCalculator(calc.Calculator):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self):</span></span>
<span class="line"><span style="color:#babed8;">            calc.Calculator.__init__(self)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        @sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">        def add(self, x, y):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.result = x + y</span></span></code></pre></div><p>To use this module in another inline module in a different Python file you can use Python importing first and then import it directly:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;"># NOTE this is a normal Python import</span></span>
<span class="line"><span style="color:#babed8;"># we assume that \`calc\` is defined in a file \`my_lib.py\`</span></span>
<span class="line"><span style="color:#babed8;">from my_lib import calc</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def main():</span></span>
<span class="line"><span style="color:#babed8;">    # NOTE this is a SmartPy import</span></span>
<span class="line"><span style="color:#babed8;">    import calc</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    class NewCalculator(calc.Calculator):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self):</span></span>
<span class="line"><span style="color:#babed8;">            calc.Calculator.__init__(self)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        @sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">        def add(self, x, y):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.result = x + y</span></span></code></pre></div><p>For inlined SmartPy code blocks and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#F07178;">spy</span></span></code></span> files, importing modules replaces the need to add modules to the modules list in the <a href="./../scenarios/test_scenarios">test scenario</a>.</p><p>The importing mechanism also figures out which other dependent modules to import, so you only have to import the modules that you need in SmartPy code.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>To use a module in a <a href="./../scenarios/test_scenarios">test scenario</a> you will still have to <a href="./../scenarios/test_scenarios#importing-modules">add</a> it to your scenario.</p></div><p>You can also write pure SmartPy code in a file with the extension <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#F07178;">spy</span></span></code></span> and import that file.</p><h3 id="smartpy-files" tabindex="-1">SmartPy files <a class="header-anchor" href="#smartpy-files" aria-label="Permalink to &quot;SmartPy files&quot;">​</a></h3><p>SmartPy files are files that have the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#F07178;">spy</span></span></code></span> file extension. These files contain only SmartPy code and can import other <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#F07178;">spy</span></span></code></span> files. The code in the SmartPy file represents only one SmartPy module but multiple classes / type definitions / functions can be defined in that module.</p><p>For example, this SmartPy file creates a simple smart contract named <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">Calculator</span></span></code></span> in a file named <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">calculator_main</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">spy</span></span></code></span>. This contract uses three imported libraries: the standard SmartPy library and its <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">math</span></span></code></span> module and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">utils</span></span></code></span> module.</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">import smartpy as sp</span></span>
<span class="line"><span style="color:#babed8;">import smartpy.math as m</span></span>
<span class="line"><span style="color:#babed8;">import smartpy.utils as utils</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">class Calculator(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">    def __init__(self):</span></span>
<span class="line"><span style="color:#babed8;">        self.data.result = m.pow((10, 0)) - 1</span></span>
<span class="line"><span style="color:#babed8;">        self.data.i = utils.mutez_to_nat(sp.mutez(10))</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    @sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">    def multiply(self, x, y):</span></span>
<span class="line"><span style="color:#babed8;">        self.data.result = x * y</span></span></code></pre></div><p>Other SmartPy files can import this module with a standard <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span></span></code></span> statement:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">import calculator_main as cm</span></span></code></pre></div><p>Test scenarios can import and use this module with the <a href="./../scenarios/test_scenarios#adding-modules">add_module</a> statement:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add_test</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#BABED8;">    sc </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test_scenario</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">A Test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    m </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> sc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add_module</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">calculator_main.spy</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    c </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> m</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Calculator</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#BABED8;">    sc </span><span style="color:#89DDFF;">+=</span><span style="color:#BABED8;"> c</span></span></code></pre></div><h4 id="filepath-resolution" tabindex="-1">Filepath resolution <a class="header-anchor" href="#filepath-resolution" aria-label="Permalink to &quot;Filepath resolution&quot;">​</a></h4><p>SmartPy searches for files based on the file path in the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span></span></code></span> statement. For example, the statement <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> calculator_main </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#BABED8;"> cm</span></span></code></span> checks for modules in this order:</p><ol><li>A local <a href="#inlined-modules">inline module</a> called <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">calculator_main</span></span></code></span></li><li>The module in a SmartPy file <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">calculator_main</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">spy</span></span></code></span> relative to the current working directory</li><li>The module in a SmartPy file <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">calculator_main</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">spy</span></span></code></span> relative to the directories in the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">PYTHONPATH</span></span></code></span> environment variable</li><li>The module in a SmartPy file <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">calculator_main</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">spy</span></span></code></span> relative to the user site-packages and standard site-packages directories</li></ol><p>To import a SmartPy file located in a sub-directory use the standard Python dotted syntax for the import.</p><p>For example if <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">calculator_main</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">spy</span></span></code></span> was in the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">utils</span></span></code></span> directory then use</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">import utils.calculator_main as cm</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>SmartPy <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span></span></code></span> statements that are more than one level deep must include the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">as</span></span></code></span> statement to give the imported module a single, local name. They must follow the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> a</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">c</span> <span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#BABED8;"> d</span></span></code></span> format, not <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> a</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">b</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">c </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> d</span></span></code></span>.</p></div><p>The filepath resolution process then proceeds with the file <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">utils</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">calculator_main</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">spy</span></span></code></span>.</p><p>The same filepath resolution approach is used for resolving the filepath when adding modules to a test scenario <a href="./../scenarios/test_scenarios#adding-modules">add_module</a> statement.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Try adjusting the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">PYTHONPATH</span></span></code></span> environment variable if importing is not resolving your SmartPy files.</p></div>`,41)]))}const h=a(p,[["render",o]]);export{y as __pageData,h as default};
