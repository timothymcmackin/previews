import{_ as s,o as t,c as a,Q as n}from"./chunks/framework.741828c6.js";const y=JSON.parse('{"title":"Deploying contracts","description":"","frontmatter":{},"headers":[],"relativePath":"manual/compilation/deploying.md","filePath":"manual/compilation/deploying.md"}'),o={name:"manual/compilation/deploying.md"};function l(p,e,c,i,r,h){return t(),a("div",null,e[0]||(e[0]=[n('<h1 id="deploying-contracts" tabindex="-1">Deploying contracts <a class="header-anchor" href="#deploying-contracts" aria-label="Permalink to &quot;Deploying contracts&quot;">â€‹</a></h1><p>SmartPy doesn&#39;t include a built-in way to deploy (originate) contracts to Tezos. You can deploy contracts in the <a href="https://smartpy.io/ide" target="_blank" rel="noreferrer">SmartPy IDE</a> or use other tools that can deploy Tezos contracts.</p><p>One popular tool is the <a href="https://octez.tezos.com/docs/user/setup-client.html" target="_blank" rel="noreferrer">Octez client</a>, which is a command-line client that runs many different kinds of Tezos operations. For installation instructions, see <a href="https://docs.tezos.com/developing/octez-client/installing" target="_blank" rel="noreferrer">Installing the Octez client</a> on docs.tezos.com.</p><p>Here are general steps for deploying a SmartPy contract with the Octez client:</p><ol><li><p>Install SmartPy locally as described in <a href="/previews/smartpy/tutorials/manual/introduction/installation">Installation</a>.</p></li><li><p>Compile the contract with the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">python</span></span></code></span> command. SmartPy writes the output to a folder with the same name as the test scenario.</p></li><li><p>Install the Octez client and configure it for the target Tezos network. For example, to configure the client for the Ghostnet test network, get the URL of a Ghostnet node from <a href="https://teztnets.com" target="_blank" rel="noreferrer">https://teztnets.com</a> and use it in the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">octez</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">client config update</span></span></code></span> command, as in this example:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">octez-client</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--endpoint</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">https://rpc.ghostnet.teztnets.com</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">config</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">update</span></span></code></pre></div><p>If you are using a testnet, Octez shows a warning that you are not using Mainnet. You can hide this message by setting the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">TEZOS_CLIENT_UNSAFE_DISABLE_DISCLAIMER</span></span></code></span> environment variable to &quot;YES&quot;.</p></li><li><p>In the Octez client, create or import a wallet as described in <a href="https://docs.tezos.com/developing/octez-client/accounts" target="_blank" rel="noreferrer">Creating accounts</a> on docs.tezos.com.</p></li><li><p>Fund the wallet with tez tokens. If you are using a testnet, you can use the network&#39;s faucet to get free tez. Testnet faucets are listed on <a href="https://teztnets.com" target="_blank" rel="noreferrer">https://teztnets.com</a>.</p></li><li><p>In the output folder, find the compiled contract file, which ends in <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">contract</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">tz</span></span></code></span>. For example, if you downloaded and compiled the Welcome contract described in <a href="/previews/smartpy/tutorials/manual/introduction/installation">Installation</a>, the compiled contract is in the file <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">Welcome</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">step_002_cont_0_contract</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">tz</span></span></code></span>.</p></li><li><p>Optional: In the output folder, find the compiled initial storage value, which ends in <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">storage</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">tz</span></span></code></span>. For example, if you downloaded and compiled the Welcome contract described in <a href="/previews/smartpy/tutorials/manual/introduction/installation">Installation</a>, the compiled contract storage value is in the file <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">Welcome</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">step_002_cont_0_storage</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">tz</span></span></code></span>.</p></li><li><p>Use the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">octez</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">client originate contract</span></span></code></span> command to deploy the contract. For example, this command deploys the Welcome contract and sets its initial storage:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">octez-client</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">originate</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">contract</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">welcome</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">transferring</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">from</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">my_account</span><span style="color:#BABED8;"> \\</span></span>\n<span class="line"><span style="color:#BABED8;">  </span><span style="color:#C3E88D;">running</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Welcome/step_002_cont_0_contract.tz</span><span style="color:#BABED8;"> \\</span></span>\n<span class="line"><span style="color:#BABED8;">  </span><span style="color:#C3E88D;">--init</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;`</span><span style="color:#FFCB6B;">cat</span><span style="color:#C3E88D;"> Welcome/step_002_cont_0_storage.tz</span><span style="color:#89DDFF;">`&quot;</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--burn-cap</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span></span></code></pre></div><p>The response includes the address of the deployed contract, which starts with <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">KT1</span></span></code></span>. You can look up the contract in a block explorer using this address.</p></li></ol><p>Now you can call the contract from a block explorer, a dApp, or the Octez client.</p>',6)]))}const m=s(o,[["render",l]]);export{y as __pageData,m as default};
