import{o as i,c as l,Q as s,v as a,a as t,b as n,m as o}from"./chunks/framework.741828c6.js";import{s as r}from"./chunks/variables.b0c7d2f2.js";const c=["href"],h=["href"],p=["href"],w=JSON.parse('{"title":"FAQ","description":"","frontmatter":{},"headers":[],"relativePath":"manual/introduction/faq.md","filePath":"manual/introduction/faq.md"}'),m={name:"manual/introduction/faq.md"},g=Object.assign(m,{setup(d){return(u,e)=>(i(),l("div",null,[e[12]||(e[12]=s('<h1 id="faq" tabindex="-1">FAQ <a class="header-anchor" href="#faq" aria-label="Permalink to &quot;FAQ&quot;">​</a></h1><h2 id="discovering-smartpy" tabindex="-1">Discovering SmartPy <a class="header-anchor" href="#discovering-smartpy" aria-label="Permalink to &quot;Discovering SmartPy&quot;">​</a></h2><h3 id="what-is-smartpy" tabindex="-1">What is SmartPy? <a class="header-anchor" href="#what-is-smartpy" aria-label="Permalink to &quot;What is SmartPy?&quot;">​</a></h3><p>SmartPy is a comprehensive solution for developing and testing smart contracts on the Tezos blockchain. It includes the Python-like SmartPy language, a compiler that converts SmartPy code to Michelson code, tools for testing contracts in test scenarios, and utility libraries.</p><h3 id="how-do-i-get-started" tabindex="-1">How do I get started? <a class="header-anchor" href="#how-do-i-get-started" aria-label="Permalink to &quot;How do I get started?&quot;">​</a></h3>',5)),a("p",null,[e[0]||(e[0]=t("Begin with our ")),e[1]||(e[1]=a("a",{href:"/previews/smartpy/tutorials/tutorials"},"tutorials",-1)),e[2]||(e[2]=t(". For practical examples, navigate to the ")),a("a",{href:`https://${n(r)}${n(o)("ide")}`,target:"\\_blank"},"web IDE",8,c),e[3]||(e[3]=t(" and explore the variety of templates provided."))]),e[13]||(e[13]=s('<p>You can also install SmartPy locally with <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">pip</span></span></code></span>; see <a href="/previews/smartpy/tutorials/manual/introduction/installation">Installation</a>.</p><h3 id="what-is-the-relationship-between-smartpy-and-python" tabindex="-1">What is the relationship between SmartPy and Python? <a class="header-anchor" href="#what-is-the-relationship-between-smartpy-and-python" aria-label="Permalink to &quot;What is the relationship between SmartPy and Python?&quot;">​</a></h3><p>SmartPy code looks and behaves much like Python but is not actually Python. It is a domain-specific language that has types, structures, and limitations specific to the Tezos blockchain.</p><p>A single file can contain both SmartPy and Python code:</p><ul><li>The SmartPy code is in SmartPy modules, which are designated with the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">module</span></span></code></span> decorator</li><li>The Python code is outside of the SmartPy modules and defines <a href="/previews/smartpy/tutorials/manual/scenarios/test_scenarios">test scenarios</a></li></ul><p>You can also put SmartPy code (without standard Python) in <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#F07178;">spy</span></span></code></span> files. For more information, see <a href="/previews/smartpy/tutorials/manual/syntax/modules">Modules</a>.</p><h3 id="how-is-smartpy-similar-to-and-different-from-python" tabindex="-1">How is SmartPy similar to and different from Python? <a class="header-anchor" href="#how-is-smartpy-similar-to-and-different-from-python" aria-label="Permalink to &quot;How is SmartPy similar to and different from Python?&quot;">​</a></h3><p>See <a href="./differences">Differences between SmartPy and Python</a>.</p><h3 id="what-is-a-smart-contract" tabindex="-1">What is a smart contract? <a class="header-anchor" href="#what-is-a-smart-contract" aria-label="Permalink to &quot;What is a smart contract?&quot;">​</a></h3><p>A smart contract is essentially a program executed within the blockchain environment. Once deployed, contracts are immutable and public. This ensures transparency, audibility, and reproducibility.</p><h3 id="what-is-a-blockchain" tabindex="-1">What is a blockchain? <a class="header-anchor" href="#what-is-a-blockchain" aria-label="Permalink to &quot;What is a blockchain?&quot;">​</a></h3><p>A blockchain is a decentralized ledger system. You can delve deeper into its intricacies on <a href="https://opentezos.com/blockchain-basics" target="_blank" rel="noreferrer">opentezos.com/blockchain-basics</a>.</p><h3 id="what-is-tezos" tabindex="-1">What is Tezos? <a class="header-anchor" href="#what-is-tezos" aria-label="Permalink to &quot;What is Tezos?&quot;">​</a></h3><p>Tezos is a dynamically evolving blockchain, distinguished by its unique on-chain governance. From inception, it has employed <a href="https://en.wikipedia.org/wiki/Proof_of_stake" target="_blank" rel="noreferrer">proof-of-stake</a> and continues to provide a multitude of security-enhancing features.</p><p>Learn more at <a href="https://tezos.com" target="_blank" rel="noreferrer">tezos.com</a> or <a href="https://opentezos.com/tezos-basics" target="_blank" rel="noreferrer">opentezos.com/tezos-basics</a>.</p><h3 id="can-i-use-vscode-pycharm-emacs-etc" tabindex="-1">Can I use VSCode, Pycharm, emacs, etc.? <a class="header-anchor" href="#can-i-use-vscode-pycharm-emacs-etc" aria-label="Permalink to &quot;Can I use VSCode, Pycharm, emacs, etc.?&quot;">​</a></h3><p>Absolutely! SmartPy provides an offline <a href="/previews/smartpy/tutorials/manual/introduction/installation">command line interface</a> compatible with your favourite IDE.</p><h3 id="do-you-recommend-using-the-smartpy-web-ide-instead" tabindex="-1">Do you recommend using the SmartPy web IDE instead? <a class="header-anchor" href="#do-you-recommend-using-the-smartpy-web-ide-instead" aria-label="Permalink to &quot;Do you recommend using the SmartPy web IDE instead?&quot;">​</a></h3><p>While the SmartPy web-based IDE is ideal for beginners due to its simplicity, we suggest using your preferred IDE for more intense development. It&#39;s recommended to manage your files on your own system and not depend solely on your browser&#39;s local storage.</p><h3 id="can-i-write-smart-contracts-for-other-blockchains-using-smartpy" tabindex="-1">Can I write smart contracts for other blockchains using SmartPy? <a class="header-anchor" href="#can-i-write-smart-contracts-for-other-blockchains-using-smartpy" aria-label="Permalink to &quot;Can I write smart contracts for other blockchains using SmartPy?&quot;">​</a></h3><p>Currently, SmartPy concentrates exclusively on developing smart contracts for the Tezos blockchain.</p><h3 id="what-is-michelson" tabindex="-1">What is Michelson? <a class="header-anchor" href="#what-is-michelson" aria-label="Permalink to &quot;What is Michelson?&quot;">​</a></h3><p>Michelson is a specialized programming language created specifically for Tezos. It offers an elevated level of security and avoids certain issues prevalent in the Ethereum Virtual Machine (EVM). You can learn more about it <a href="https://octez.tezos.com/docs/active/michelson.html" target="_blank" rel="noreferrer">here</a>.</p><h3 id="can-i-deploy-a-smart-contract-on-tezos-using-smartpy" tabindex="-1">Can I deploy a smart contract on Tezos using SmartPy? <a class="header-anchor" href="#can-i-deploy-a-smart-contract-on-tezos-using-smartpy" aria-label="Permalink to &quot;Can I deploy a smart contract on Tezos using SmartPy?&quot;">​</a></h3><p>Yes, the SmartPy website offers an origination tool. You can also employ any other deployment tools available within the Tezos ecosystem. SmartPy does not provide a built-in way to deploy smart contracts from the command line. To deploy from the command line, use a Tezos tool such as the <a href="https://octez.tezos.com/docs/" target="_blank" rel="noreferrer">Octez client</a> as described in <a href="/previews/smartpy/tutorials/manual/syntax/contracts#deploying-contracts">Deploying contracts</a>.</p><h3 id="what-are-the-resources-or-community-forums-where-i-can-learn-more-and-get-help-with-smartpy" tabindex="-1">What are the resources or community forums where I can learn more and get help with SmartPy? <a class="header-anchor" href="#what-are-the-resources-or-community-forums-where-i-can-learn-more-and-get-help-with-smartpy" aria-label="Permalink to &quot;What are the resources or community forums where I can learn more and get help with SmartPy?&quot;">​</a></h3><ul><li><a href="https://t.me/SmartPy_io" target="_blank" rel="noreferrer">Telegram</a></li><li><a href="https://forum.smartpy.io/" target="_blank" rel="noreferrer">Forum</a></li><li><a href="https://tezos.stackexchange.com/questions/tagged/smartpy" target="_blank" rel="noreferrer">StackExchange</a></li><li><a href="https://opentezos.com" target="_blank" rel="noreferrer">opentezos</a></li><li><a href="https://tezos.com" target="_blank" rel="noreferrer">tezos.com</a></li></ul><h2 id="diving-into-the-language" tabindex="-1">Diving into the language <a class="header-anchor" href="#diving-into-the-language" aria-label="Permalink to &quot;Diving into the language&quot;">​</a></h2><h3 id="what-is-the-equivalent-to-struct-in-smartpy" tabindex="-1">What is the equivalent to <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">struct</span></span></code></span> in SmartPy? <a class="header-anchor" href="#what-is-the-equivalent-to-struct-in-smartpy" aria-label="Permalink to &quot;What is the equivalent to `struct` in SmartPy?&quot;">​</a></h3><p>In SmartPy, the equivalent to a <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">struct</span></span></code></span> is a <a href="/previews/smartpy/tutorials/manual/data-types/records">record</a>.</p><h3 id="how-do-i-accept-tez-in-an-entrypoint" tabindex="-1">How do I accept tez in an entrypoint? <a class="header-anchor" href="#how-do-i-accept-tez-in-an-entrypoint" aria-label="Permalink to &quot;How do I accept tez in an entrypoint?&quot;">​</a></h3><p>There&#39;s no specific step required. In Tezos, received tez are automatically added to the contract&#39;s balance.</p><p>To control the received amount or enforce a payment, use the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">assert</span></span></code></span> instruction with the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">amount</span></span></code></span> instruction, which reflects the amount received. For instance, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#BABED8;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">amount</span> <span style="color:#89DDFF;">&gt;</span> <span style="color:#F78C6C;">10</span></span></code></span> ensures that an amount greater than ten tez is received, otherwise, the entrypoint will fail.</p><h3 id="can-i-use-python-libraries-in-my-smart-contracts" tabindex="-1">Can I use Python libraries in my smart contracts? <a class="header-anchor" href="#can-i-use-python-libraries-in-my-smart-contracts" aria-label="Permalink to &quot;Can I use Python libraries in my smart contracts?&quot;">​</a></h3><p>Although other Python libraries cannot be directly used in the smart contract code itself, they can be used in the code that tests your contracts.</p><h3 id="can-i-use-python-f-strings" tabindex="-1">Can I use Python f-strings? <a class="header-anchor" href="#can-i-use-python-f-strings" aria-label="Permalink to &quot;Can I use Python f-strings?&quot;">​</a></h3><p>While <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" target="_blank" rel="noreferrer">Formatted string literals</a> (known as &quot;f-strings&quot;) are not supported within the contract&#39;s code due to the absence of this feature in Michelson, they can be used for testing contracts.</p><h3 id="why-don-t-my-old-contracts-work-in-the-simulator-anymore" tabindex="-1">Why don&#39;t my old contracts work in the simulator anymore? <a class="header-anchor" href="#why-don-t-my-old-contracts-work-in-the-simulator-anymore" aria-label="Permalink to &quot;Why don&#39;t my old contracts work in the simulator anymore?&quot;">​</a></h3><p>With version 0.18 SmartPy has migrated to a new syntax. If your contracts are written in the old syntax, you can still access them using the legacy version available at <a href="https://legacy.smartpy.io" target="_blank" rel="noreferrer">legacy.smartpy.io</a>.</p><h3 id="i-m-getting-the-error-module-smartpy-has-no-attribute-contract" tabindex="-1">I&#39;m getting the error <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">module </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">smartpy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> has no attribute </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Contract</span><span style="color:#89DDFF;">&#39;</span></span></code></span>. <a class="header-anchor" href="#i-m-getting-the-error-module-smartpy-has-no-attribute-contract" aria-label="Permalink to &quot;I&#39;m getting the error `module &#39;smartpy&#39; has no attribute &#39;Contract&#39;`.&quot;">​</a></h3><p>The code of a smart contract should reside inside a module (<span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">module</span></span></code></span>). If you need assistance with this, please refer to the <a href="/previews/smartpy/tutorials/tutorials">tutorials</a>. If your contract is outdated, refer to the solution for the previous question.</p><h3 id="can-i-run-test-scenarios-with-contracts-from-the-old-syntax-together-with-contracts-in-the-new-syntax" tabindex="-1">Can I run test scenarios with contracts from the old syntax together with contracts in the new syntax? <a class="header-anchor" href="#can-i-run-test-scenarios-with-contracts-from-the-old-syntax-together-with-contracts-in-the-new-syntax" aria-label="Permalink to &quot;Can I run test scenarios with contracts from the old syntax together with contracts in the new syntax?&quot;">​</a></h3><p>Unfortunately this isn&#39;t possible. However, migrating contracts to the new syntax is generally a relatively straightforward process.</p><h3 id="is-there-a-way-to-generate-random-numbers" tabindex="-1">Is there a way to generate random numbers? <a class="header-anchor" href="#is-there-a-way-to-generate-random-numbers" aria-label="Permalink to &quot;Is there a way to generate random numbers?&quot;">​</a></h3><p>Tezos doesn&#39;t offer an in-built instruction to generate random numbers on-chain. If this is a requirement for your project, you might find this resource helpful: <a href="https://opentezos.com/smart-contracts/avoiding-flaws/#7-using-unreliable-sources-of-randomness" target="_blank" rel="noreferrer">opentezos.com/smart-contracts/avoiding-flaws/#7-using-unreliable-sources-of-randomness</a>.</p><p>With that in mind there is an example template <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">rng</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">spy</span></span></code></span> and test <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">test_rng</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">py</span></span></code></span> in the templates pack that comes with the offline <a href="/previews/smartpy/tutorials/manual/introduction/installation">installation</a>. This example smart contract implements a counter-based pseudo-random number generator and uses tickets for the input seed values and output random values. The 64 bit, 4-digit Threefry algorithm used is described <a href="http://www.thesalmons.org/john/random123/releases/latest/docs/index.html" target="_blank" rel="noreferrer">here</a>.</p><p>This smart contract could be embellished with other Tezos features like <a href="https://docs.tezos.com/smart-contracts/sapling" target="_blank" rel="noreferrer">sapling transactions</a> or <a href="https://docs.tezos.com/smart-contracts/timelocks" target="_blank" rel="noreferrer">timelocks</a> to hide or encrypt the ticket transfers for the seed input or random output.</p><h3 id="what-is-the-difference-between-on-chain-and-off-chain-views" tabindex="-1">What is the difference between on-chain and off-chain views? <a class="header-anchor" href="#what-is-the-difference-between-on-chain-and-off-chain-views" aria-label="Permalink to &quot;What is the difference between on-chain and off-chain views?&quot;">​</a></h3><p>On-chain views are part of the contract&#39;s deployed code and can be invoked both on-chain and off-chain and have the ability to call other on-chain views. If a contract calls them, the gas cost is part of the transaction. Off-chain views, on the other hand, are only callable off-chain and are exempt from gas costs. Their code is stored off-chain but referenced in the contract.</p><h3 id="how-can-i-optimize-my-code" tabindex="-1">How can I optimize my code? <a class="header-anchor" href="#how-can-i-optimize-my-code" aria-label="Permalink to &quot;How can I optimize my code?&quot;">​</a></h3><p>In SmartPy, as in most of computing, optimization largely stems from your application&#39;s overall design. Common ways to reduce costs include avoiding lengthy error messages, conducting most of the computations off-chain, and minimizing the complexity of your tasks.</p><h2 id="compilation" tabindex="-1">Compilation <a class="header-anchor" href="#compilation" aria-label="Permalink to &quot;Compilation&quot;">​</a></h2><h3 id="how-do-i-compile-a-smartpy-contract" tabindex="-1">How do I compile a SmartPy contract? <a class="header-anchor" href="#how-do-i-compile-a-smartpy-contract" aria-label="Permalink to &quot;How do I compile a SmartPy contract?&quot;">​</a></h3><p>To compile a SmartPy contract, make sure that SmartPy is installed as described in <a href="/previews/smartpy/tutorials/manual/introduction/installation">Installation</a>. Then, run the command <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">python path</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">to</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">contract</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">py</span></span></code></span>, where <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">path</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">to</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">contract</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">py</span></span></code></span> is the path to your contract. For more information, see <a href="/previews/smartpy/tutorials/manual/compilation/compiling">Compiling contracts</a>.</p><h3 id="where-are-smartpy-s-output-files" tabindex="-1">Where are SmartPy&#39;s output files? <a class="header-anchor" href="#where-are-smartpy-s-output-files" aria-label="Permalink to &quot;Where are SmartPy&#39;s output files?&quot;">​</a></h3><p>When you compile a SmartPy contract locally with the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">python</span></span></code></span> command, SmartPy writes output files to the folder that you specify when you create the test scenario. For example, if you create the test scenario with the code <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">scenario </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test_scenario</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">My test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> main</span><span style="color:#89DDFF;">)</span></span></code></span>, SmartPy writes output files to the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">My_test</span></span></code></span> folder, relative to the location of the test scenario file. For more information, see <a href="/previews/smartpy/tutorials/manual/compilation/compiling">Compiling contracts</a>.</p><h2 id="tokens" tabindex="-1">Tokens <a class="header-anchor" href="#tokens" aria-label="Permalink to &quot;Tokens&quot;">​</a></h2><h3 id="how-do-tokens-work" tabindex="-1">How do tokens work? <a class="header-anchor" href="#how-do-tokens-work" aria-label="Permalink to &quot;How do tokens work?&quot;">​</a></h3><p>A smart contract (a program that runs independently on the blockchain) maintains a ledger. The ledger indicates who owns which token. It also maintains a list of metadata associated with each token type. The metadata for a token can specify the token&#39;s name, symbol, number of decimals, and other details.</p><p>A token is identified by two values: the address of the smart contract and an ID number.</p><h3 id="what-can-i-do-with-tokens" tabindex="-1">What can I do with tokens? <a class="header-anchor" href="#what-can-i-do-with-tokens" aria-label="Permalink to &quot;What can I do with tokens?&quot;">​</a></h3><p>Tokens can be minted (created from scratch), burned (definitively destroyed) and transferred depending on rules written in the smart contract that maintains them.</p><h3 id="what-do-they-represent" tabindex="-1">What do they represent? <a class="header-anchor" href="#what-do-they-represent" aria-label="Permalink to &quot;What do they represent?&quot;">​</a></h3><p>Tokens can represent anything. The metadata associated with the tokens give you the endless possibilities. Tokens can represent money, piece of art, permissions, real world assets like houses or contracts.</p><h3 id="what-are-fungible-tokens" tabindex="-1">What are fungible tokens? <a class="header-anchor" href="#what-are-fungible-tokens" aria-label="Permalink to &quot;What are fungible tokens?&quot;">​</a></h3><p>Fungible tokens are interchangeable values. A fungible token is identical to another fungible token of the same type. For example, you wouldn&#39;t mind if someone replaces a $20 bill in your pocket with another $20 bill because you don&#39;t distinguish two bills of the same value.</p><h3 id="what-are-nfts-or-non-fungible-tokens" tabindex="-1">What are NFTs or non-fungible tokens? <a class="header-anchor" href="#what-are-nfts-or-non-fungible-tokens" aria-label="Permalink to &quot;What are NFTs or non-fungible tokens?&quot;">​</a></h3><p>NFTs represent a unique value that is not interchangeable with any other token. NFTs are useful to represent real world assets that are unique like a painting or a house. They can also represent ownership of a digital asset that is considered unique like a digital picture or a piece of music.</p><h3 id="how-can-i-create-tokens" tabindex="-1">How can I create tokens? <a class="header-anchor" href="#how-can-i-create-tokens" aria-label="Permalink to &quot;How can I create tokens?&quot;">​</a></h3><p>Create a smart contract that maintains a ledger that indicates who owns the tokens. We recommend creating tokens according to the Tezos FA2 token standard. To simplify the process, you can use the SmartPy <a href="/previews/smartpy/tutorials/manual/libraries/FA2-lib/overview">FA2 library</a>.</p><h2 id="what-are-some-common-pitfalls-to-avoid-when-programming-with-smartpy" tabindex="-1">What are some common pitfalls to avoid when programming with SmartPy? <a class="header-anchor" href="#what-are-some-common-pitfalls-to-avoid-when-programming-with-smartpy" aria-label="Permalink to &quot;What are some common pitfalls to avoid when programming with SmartPy?&quot;">​</a></h2><p>Common errors to avoid include:</p><ul><li><p>Using <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">source</span></span></code></span> instead of <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">sender</span></span></code></span>.</p><p>Tezos provides two ways to determine what account called a contract:</p><ul><li><p>The <em>source</em> (which you can access as <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">source</span></span></code></span>) is the account that initiated the original transaction that led to calling the current smart contract. The source is always a user account, also known as an implicit account, and it stays the same even if the transaction results in a chain of calls to multiple smart contracts.</p></li><li><p>The <em>sender</em> (which you can access as <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">sender</span></span></code></span>) is the account that sent the call to the current smart contract.</p></li></ul><p>In most cases, contracts should use the sender to determine who called them. If they use the source, it&#39;s possible for a contract to act as a proxy and impersonate the sender.</p><p>For example, assume that account A calls smart contract B and contract B calls contract C. When contract C runs, the source is account A and the sender is contract B. If contract C wants to verify who called it, it should use the sender in most cases. If it uses the source, contract B may be able to impersonate account A in a call to contract C.</p></li><li><p>Executing multiple token transfers within a single transaction. If one transaction fails, all token transfers fail in that transaction also fail. To distribute tokens, instead of sending them in a single transaction, allow users to claim tokens in individual transactions.</p></li><li><p>Introducing computations that may lead to gas overflows, such as loops that can run many times.</p></li><li><p>Performing intensive computations or storing large volumes of data on-chain. Keep private data off-chain. Use on-chain computations solely for tasks that require high trust and public verification. If the data exceeds a few bytes, consider storing references (like hashes) instead of the actual data.</p></li></ul><p>A helpful resource for common pitfalls is <a href="https://opentezos.com/smart-contracts/avoiding-flaws/" target="_blank" rel="noreferrer">opentezos.com/smart-contracts/avoiding-flaws/</a>.</p><h3 id="how-do-i-test-my-smartpy-contracts" tabindex="-1">How do I test my SmartPy contracts? <a class="header-anchor" href="#how-do-i-test-my-smartpy-contracts" aria-label="Permalink to &quot;How do I test my SmartPy contracts?&quot;">​</a></h3><p>SmartPy provides a robust testing system that allows you to swiftly test code without deploying anything to the blockchain.</p><p>Visit the <a href="/previews/smartpy/tutorials/manual/scenarios/test_scenarios">manual</a> to learn more.</p><h3 id="how-do-i-return-a-value-from-an-entrypoint" tabindex="-1">How do I return a value from an entrypoint? <a class="header-anchor" href="#how-do-i-return-a-value-from-an-entrypoint" aria-label="Permalink to &quot;How do I return a value from an entrypoint?&quot;">​</a></h3><p>Entrypoints cannot return values directly. To return a value from a transaction, you can use a callback, a view, or an event.For more information, see <a href="https://forum.smartpy.io/t/returning-a-value-from-an-entrypoint/110/2" target="_blank" rel="noreferrer">this forum post</a>.</p><h2 id="standards" tabindex="-1">Standards <a class="header-anchor" href="#standards" aria-label="Permalink to &quot;Standards&quot;">​</a></h2><h3 id="in-there-an-erc-20-equivalent" tabindex="-1">In there an ERC-20 equivalent? <a class="header-anchor" href="#in-there-an-erc-20-equivalent" aria-label="Permalink to &quot;In there an ERC-20 equivalent?&quot;">​</a></h3><p>Indeed, it is called FA2. See the <a href="/previews/smartpy/tutorials/manual/libraries/FA2-lib/overview">FA2 library</a>.</p><h3 id="how-do-i-react-to-an-fa2-transfer" tabindex="-1">How do I react to an FA2 transfer? <a class="header-anchor" href="#how-do-i-react-to-an-fa2-transfer" aria-label="Permalink to &quot;How do I react to an FA2 transfer?&quot;">​</a></h3><p>There is no way to react to a FA2 transfer. The solution is to invert the logic: the receiver now claims its tokens. This way they know the transfer has been done. More information on <a href="https://forum.smartpy.io/t/react-to-fa2-receiving/36/2" target="_blank" rel="noreferrer">the forum</a>.</p><h3 id="how-can-i-create-nfts-with-multiple-owners" tabindex="-1">How can I create NFTs with multiple owners? <a class="header-anchor" href="#how-can-i-create-nfts-with-multiple-owners" aria-label="Permalink to &quot;How can I create NFTs with multiple owners?&quot;">​</a></h3><p>Technically, a token that multiple people can independently hold and transfer isn&#39;t an NFT, because NFTs are unique and have only one owner. You might be referring to a fungible or &quot;semi-fungible&quot; token with a limited quantity. More information can be found here: <a href="/previews/smartpy/tutorials/manual/libraries/FA2-lib/base_classes">FA2 library - base classes</a></p><h3 id="is-there-an-allowance-system-in-the-token-standard" tabindex="-1">Is there an allowance system in the token standard? <a class="header-anchor" href="#is-there-an-allowance-system-in-the-token-standard" aria-label="Permalink to &quot;Is there an allowance system in the token standard?&quot;">​</a></h3><p><strong>FA1.2 standard</strong></p>',88)),a("p",null,[e[4]||(e[4]=t("The FA1.2 standard has an allowance system. See ")),e[5]||(e[5]=a("a",{href:"https://gitlab.com/tezos/tzip/-/blob/master/proposals/tzip-7/tzip-7.md",target:"_blank",rel:"noreferrer"},"TZIP-7",-1)),e[6]||(e[6]=t(" and ")),a("a",{href:`https://${n(r)}${n(o)("ide?template=fa1_2.py")}`,target:"_blank"},"fa1_2.py",8,h),e[7]||(e[7]=t("."))]),e[14]||(e[14]=a("p",null,[a("strong",null,"FA2 standard")],-1)),a("p",null,[e[8]||(e[8]=t("Instead of an allowance system, the FA2 standard uses an operator system. However, you can implement your own allowance system using the ")),e[9]||(e[9]=a("a",{href:"/previews/smartpy/tutorials/manual/libraries/FA2-lib/overview"},"FA2 library",-1)),e[10]||(e[10]=t(". Here is an ")),a("a",{href:`https://${n(r)}${n(o)("ide?code=eJzlV1Fv2zgMfs@vIHwP52CpkXZ3LwUMzM05a4EsKZIMwxAUguooqTHbMiSlaTHsvx8lx7EVJ2m73t2wmx9aRyIp8uNHUo7TnAsFMqVC5Y9AJci8tRA8BcXSPKGKSYgLmQU9I0l8q2XwtdVKaZyBr989_dpqtd7J3Ev5fJWw1pwtIHXb5y3ARxGaJHxNs4idg3rMGaqh6G28JCnNZ0ZGP7gmWMTF3JU5y@ZM@LhC53PBpOwAX2c7K4p_YRmJ53oxo6rdgeLFGLxpmX9RQqWEnqtd9CZxtkxYICVTG9f0o30lJM5iRYgrWbLoQMoUnVNFO5Cw@ZKJ8qxyvaatn13j3kvNWda0jqeXvS1sskAsolK5FXIuRlzDtt3amtGZyEV8j_lz17G6I1JxQZfMdwSj85O1iBVz2hYCStBMLpgg6qF0O6eCpnIn1t@gN7r@DJfhOITpZWjpQX88@gD94AwGVxcoNx6Hk@vR8K@r4XsjexFMQugNgslkx@QlEwzWDFaSgbpjwDMGhoUTVB2EgBrh9ABIBaSzwllPa5GbAi4qCbLBtfT26XpLpty6fkcjQleJ8rttONng4KkHj6Z8lalOwyITggvfwcjJ1XDysd@_6l2Fwym5CAbBsBc6tsahdNuR4HGKm1BeFkGhZ4XwphHCjj876QgGg9En7ThMPk@m4Qdre8u3AuRNxTZcLMrVRrVW1tK81Wq47n2x9CzMqhKZbV@fnf5K2QC4_fmd@XcNAYajKRldh@NgOho7HdiskS2mTnuXDVbZskyJx5zHtRzp8lzl6DGriv1YiS64qGUJu3Qhdd5w2_3CHjtwT5MVayNmW52GIPZQhiMAxT2TV_ANwmUSq7g_DcOx01CPVkJgXMSizqEsGJ8q_A_5ssemD13A0E085lfnGEGrvBn3Pw4nQT@s0kR6l8Hw_W7plk8u2H3MV7I63m841NRsBrOXyIiAprCJA8dqvABnO40dyLjSOSVI7pQRcl7Q510xGAmKKFfv@E5QWtx0etPl9XaNLjSJy0LWW4RGkWa465iN2oi45bf7xHDZqRFYRjUhGbGMipi7M31HUB0zJvHvTbsm792dupan1t6Z64xEvIyxjmOe1dyJTvGg1OvtTMOvxu3yhnAOp91vuPitfiC88VG7ccwFxhfRTINbTjQItLHfZdGjJOhBylcKbhlOeuA5ExSnqmd55ZXKNt9mzcQfJ6ZpmL4VzX4iqgfpzypj2Pl9zMmeOxIWQ9G9_Lftm6eoebP91fbEKnOLQteWTbtAc32aSOyT7CFiuc6N3@x9zVwaQAF9k4ZPeJM8gOKm25W78hlo3iPVaLan3evH0aVRWjtQ0hWIxeiywd96egje9ndiao5pQvUCPm47xy9BxZ17wJO8fO5Qro45lgsMBu7iVLftp@lbDWs7A@4TVCuvSQeZBojbayrUTOmny_MAr_716P44FN3ra4VlfLW8@5lL5s@fqWSO5uN_kIyz14zSXxa1038WtaJtbRpA0Zxqnz@K4405O@kCXqNrH0XS3KO7P75x7ytOY9aGqF6q1kZVtkcy@pzvnH3fNKf2l2rnSMUXWSgAlDb@_znK3RcOkCO@v_3xDLF9_xtpQgeg")}`,target:"_blank"},"example",8,p),e[11]||(e[11]=t("."))]),e[15]||(e[15]=s('<p>Here is the desired flow of transactions:</p><ol><li>The user calls <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">update_operators</span></span></code></span> and then <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">update_allowance</span></span></code></span> to set an account as an operator and give that account an allowance.</li><li>The operator account calls the contract&#39;s <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">transfer</span></span></code></span> entrypoint as usual.</li><li>The contract uses the operator privilege limited by the allowance system to transfer the tokens.</li></ol><p>Note that changing the allowance value from a non-zero value to a non-zero value is forbidden to prevent the <a href="https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM" target="_blank" rel="noreferrer">corresponding attack vector</a>, however this is not enough on its own to guarantee a safe allowance change. See <a href="https://gitlab.com/tezos/tzip/-/blob/master/proposals/tzip-7/tzip-7.md#approve" target="_blank" rel="noreferrer">How to safely change the allowance</a>.</p>',3))]))}});export{w as __pageData,g as default};
