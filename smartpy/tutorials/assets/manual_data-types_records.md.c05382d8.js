import{o as t,c as r,Q as l,v as a,a as n,b as e,m as p}from"./chunks/framework.741828c6.js";import{s as o}from"./chunks/variables.b0c7d2f2.js";const c=["href"],i=["href"],b=JSON.parse('{"title":"Records","description":"","frontmatter":{},"headers":[],"relativePath":"manual/data-types/records.md","filePath":"manual/data-types/records.md"}'),y={name:"manual/data-types/records.md"},m=Object.assign(y,{setup(d){return(F,s)=>(t(),r("div",null,[s[5]||(s[5]=l(`<h1 id="records" tabindex="-1">Records <a class="header-anchor" href="#records" aria-label="Permalink to &quot;Records&quot;">​</a></h1><p>Records in SmartPy are of type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">record</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">field1</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">...</span><span style="color:#89DDFF;">,</span> <span style="color:#BABED8;font-style:italic;">field2</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">...</span><span style="color:#89DDFF;">)</span></span></code></span>, for example <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">record</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">field1</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span> <span style="color:#BABED8;font-style:italic;">field2</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">A string</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></span>, which is of type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">record</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">int</span><span style="color:#89DDFF;">,</span> <span style="color:#BABED8;font-style:italic;">b</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">string</span></span></code></span>.</p><h2 id="accessing-records" tabindex="-1">Accessing records <a class="header-anchor" href="#accessing-records" aria-label="Permalink to &quot;Accessing records&quot;">​</a></h2><p>You can access a record&#39;s components with dot-notation, as in this example:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">x = sp.record(a=42, b=&quot;abc&quot;, c=True)</span></span>
<span class="line"><span style="color:#babed8;">assert x.a == 42</span></span>
<span class="line"><span style="color:#babed8;">assert x.b == &quot;abc&quot;</span></span>
<span class="line"><span style="color:#babed8;">assert x.c == True</span></span>
<span class="line"><span style="color:#babed8;">x.a = 12</span></span>
<span class="line"><span style="color:#babed8;">assert x.a == 12</span></span></code></pre></div><p>However, you cannot add components to a record or change the type of components after you create it.</p><h2 id="destructuring-records" tabindex="-1">Destructuring records <a class="header-anchor" href="#destructuring-records" aria-label="Permalink to &quot;Destructuring records&quot;">​</a></h2><p>You can destructure a record into individual variables with the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">record</span><span style="color:#89DDFF;">()</span></span></code></span> function. For example, if <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">x</span></span></code></span> is a SmartPy record of type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">record</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">=</span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">,</span> <span style="color:#BABED8;font-style:italic;">b</span><span style="color:#89DDFF;">=</span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">)</span></span></code></span>, this code assigns <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">x</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">a</span></span></code></span> to a new variable <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">a</span></span></code></span> and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">x</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">b</span></span></code></span> to a new variable <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">b</span></span></code></span>:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">x = sp.record(a=sp.int(42), b=sp.int(12))</span></span>
<span class="line"><span style="color:#babed8;">record(a, b).match = x</span></span>
<span class="line"><span style="color:#babed8;">assert a == 42</span></span>
<span class="line"><span style="color:#babed8;">assert b == 12</span></span></code></pre></div><p>If the variable name differs from the component name, the parameters must be named, as in this example:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">x = sp.record(a=sp.int(42), b=sp.int(12))</span></span>
<span class="line"><span style="color:#babed8;">record(a=y, b=z).match = x</span></span>
<span class="line"><span style="color:#babed8;">assert y == 42</span></span>
<span class="line"><span style="color:#babed8;">assert z == 12</span></span></code></pre></div><h2 id="updating-records" tabindex="-1">Updating records <a class="header-anchor" href="#updating-records" aria-label="Permalink to &quot;Updating records&quot;">​</a></h2><p>To change components of a record, use the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">modify_record</span><span style="color:#89DDFF;">()</span> <span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#BABED8;"> x</span></span></code></span> function, as in this example:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;"># Create a record</span></span>
<span class="line"><span style="color:#babed8;">x = sp.record(a=sp.int(42), b=sp.int(12))</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"># Update the record</span></span>
<span class="line"><span style="color:#babed8;">with sp.modify_record(x) as r:</span></span>
<span class="line"><span style="color:#babed8;">    r.a = 1</span></span>
<span class="line"><span style="color:#babed8;">    r.b = 5</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"># Verify the changes</span></span>
<span class="line"><span style="color:#babed8;">assert x.a == 1</span></span>
<span class="line"><span style="color:#babed8;">assert x.b == 5</span></span></code></pre></div><p>This function can be convenient to edit the contract storage fields in place, as in this example:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">with sp.modify_record(self.data) as data:</span></span>
<span class="line"><span style="color:#babed8;">    data.x = 12</span></span>
<span class="line"><span style="color:#babed8;">    data.y += 1</span></span>
<span class="line"><span style="color:#babed8;">    # ...</span></span></code></pre></div><p>The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">modify_record</span><span style="color:#89DDFF;">()</span> <span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#BABED8;"> x</span></span></code></span> function tells the SmartPy compiler to open the record, handle its fields independently and recreate the record afterwards in a <em>linear</em> way. It can be useful when dealing with <a href="./../data-types/tickets">tickets</a>.</p>`,17)),a("p",null,[s[0]||(s[0]=n("See ")),s[1]||(s[1]=a("span",{class:"inline shiki material-theme-palenight"},[a("code",null,[a("span",{class:"line"},[a("span",{style:{color:"#babed8"}},"test_ticket.py")])])],-1)),s[2]||(s[2]=n(" (")),a("a",{href:`https://${e(o)}${e(p)("ide?template=test_ticket.py")}`,target:"_blank"},"ide",8,c),s[3]||(s[3]=n(", ")),a("a",{href:`https://${e(o)}${e(p)("templates/test_ticket.py")}`,target:"_blank"},"download",8,i),s[4]||(s[4]=n(") for examples."))]),s[6]||(s[6]=l(`<p>You cannot add fields to a record after creating it.</p><h2 id="layouts" tabindex="-1">Layouts <a class="header-anchor" href="#layouts" aria-label="Permalink to &quot;Layouts&quot;">​</a></h2><p>By default, records are compiled to Michelson tuples as right combs. Different layouts can be specified in the type as follows:</p><p><strong><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">layout</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">layout</span><span style="color:#89DDFF;">)</span></span></code></span></strong> <br> A record type, i.e. something of the form <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">record</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">...</span><span style="color:#89DDFF;">)</span></span></code></span>, can be used to define a record type with a layout by doing:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">t</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">type</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">record</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">owner</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">address</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">operator</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">address</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">token_id</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">string</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">layout</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">owner</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">operator</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">token_id</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Changing the layout does not affect how the fields are accessed in SmartPy, only how they are stored in Michelson.</p>`,6))]))}});export{b as __pageData,m as default};
