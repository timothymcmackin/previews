import{D as l}from"./chunks/DocFunction.e9a30d9e.js";import{D as p}from"./chunks/DocInPlace.04c2ab1e.js";import{o as i,c as r,Q as o,C as n,y as t,v as s,a}from"./chunks/framework.741828c6.js";import"./chunks/DocFunction.vue_vue_type_style_index_0_scoped_21214205_lang.4ed993c7.js";import"./chunks/DocInPlace.vue_vue_type_style_index_0_scoped_8490fbaf_lang.4ed993c7.js";const f=JSON.parse('{"title":"Operations","description":"","frontmatter":{},"headers":[],"relativePath":"manual/data-types/operations.md","filePath":"manual/data-types/operations.md"}'),c={name:"manual/data-types/operations.md"},D=Object.assign(c,{setup(d){return(y,e)=>(i(),r("div",null,[e[9]||(e[9]=o('<h1 id="operations" tabindex="-1">Operations <a class="header-anchor" href="#operations" aria-label="Permalink to &quot;Operations&quot;">​</a></h1><p>To interact with other contracts and accounts, such as calling a contract or transferring tez, contracts emit operations. In SmartPy each such operation is of the type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">operation</span></span></code></span>.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Operations do not run synchronously; see <a href="#order-of-operations">Order of operations</a>.</p></div><h2 id="creating-operations" tabindex="-1">Creating operations <a class="header-anchor" href="#creating-operations" aria-label="Permalink to &quot;Creating operations&quot;">​</a></h2><p>SmartPy includes commands that create common types of operations, such as calling other contracts, transferring tez, changing a contract&#39;s delegate, and emitting events.</p>',5)),n(l,{name:"sp.transfer",arg:"argument: t, amount: sp.mutez, destination: sp.contract[t]"},{default:t(()=>e[0]||(e[0]=[s("p",null,[a("Calls the contract at "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"destination")])])]),a(" with "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"argument")])])]),a(" while transferring "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"amount")])])]),a(" to it.")],-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"sp.transfer(100, sp.mutez(0), c)")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},'sp.transfer(42, sp.mutez(0), sp.self_entrypoint("abc"))')])])])],-1)])),_:1}),n(l,{name:"sp.send",arg:"destination: sp.address, amount: sp.mutez"},{default:t(()=>e[1]||(e[1]=[s("p",null,[a("Sends the specified amount to "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"destination")])])]),a(". Fails if "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"destination")])])]),a(' is not an implicit account or a contract with an entrypoint named "default" that takes a '),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"unit")])])]),a(" argument.")],-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"sp.send(dest, sp.tez(42))")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}})]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"# equivalent to")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"sp.transfer((), sp.tez(42), sp.contract(sp.unit, dest).unwrap_some())")])])])],-1)])),_:1}),n(l,{name:"sp.set_delegate",arg:"d: sp.option[sp.key_hash]"},{default:t(()=>e[2]||(e[2]=[s("p",null,"Sets or removes the contract's delegate.",-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"sp.set_delegate(sp.Some(d))  # set the delegate to d")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"sp.set_delegate(None)  # remove the delegate")])])])],-1)])),_:1}),n(l,{name:"sp.emit",arg:'event: t, tag="...", with_type=[True|False]'},{default:t(()=>e[3]||(e[3]=[s("p",null,[a("Emits "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"event")])])]),a(" as an event, optionally tagged with "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"tag")])])]),a(". If "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"with_type"),s("span",{style:{color:"#89DDFF"}},"=True")])])]),a(" is given, the type of "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"event")])])]),a(" is explicitly given in the compiled Michelson code.")],-1),s("p",null,"Examples:",-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},'sp.emit("Hello")')]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},'sp.emit("World", tag="mytag")')]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},'sp.emit(sp.record(a="ABC", b="XYZ"), tag="mytag2", with_type=True)')])])])],-1)])),_:1}),e[10]||(e[10]=o('<p>For more information about events, see <a href="https://docs.tezos.com/smart-contracts/events" target="_blank" rel="noreferrer">Events</a> on docs.tezos.com.</p><h2 id="originating-contracts" tabindex="-1">Originating contracts <a class="header-anchor" href="#originating-contracts" aria-label="Permalink to &quot;Originating contracts&quot;">​</a></h2><p>SmartPy contracts can originate other contracts with the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create_contract</span><span style="color:#89DDFF;">()</span></span></code></span> function:</p>',3)),n(l,{name:"sp.create_contract",arg:"sp.Contract, delegate: sp.option[sp.public_key_hash], amount: sp.mutez, storage: t, private_: t1 | None",rType:"sp.address"},{default:t(()=>e[4]||(e[4]=[s("p",null,[a("Originates a contract with the given storage, private data (if necessary) and delegate while transferring "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"amount")])])]),a(" to it. Returns the new contract's address.")],-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"sp.create_contract(MyContract, None, sp.tez(0), ())")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"sp.create_contract(")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"    MyContract,")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"    sp.Some(key_hash),")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"    sp.tez(10),")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},'    sp.record(x=42, y="abc"),')]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},'    private_=sp.record(a=1, b="xyz"),')]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},")")])])])],-1),s("p",null,[a("Omit the "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"private_")])])]),a(" argument if private data is not used in the contract, otherwise it can be stated as a positional argument or keyword argument "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"private_"),s("span",{style:{color:"#89DDFF"}},"="),s("span",{style:{color:"#BABED8"}},"...")])])]),a(".")],-1),s("p",null,[a("The data specified in "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"private_")])])]),a(" has to be compile-time constant. For example, the contract can't use "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"now")])])]),a(".")],-1),s("p",null,"Here is a more detailed example that originates a contract:",-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"class MyContract(sp.Contract):")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"    def __init__(self):")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"        self.private.px = 10")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"        self.private.py = 0")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"        self.data.a = sp.int(0)")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"        self.data.b = sp.nat(0)")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}})]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"    @sp.entrypoint")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"    def ep(self, params):")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"        self.data.a += params.x + self.private.px")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"        self.data.b += params.y + self.private.py")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}})]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}})]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"class Originator(sp.Contract):")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"    @sp.entrypoint")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"    def ep(self):")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"        sp.create_contract(")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"            MyContract,")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"            None,")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"            sp.tez(0),")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"            sp.record(a=1, b=2),")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"            private_=sp.record(px=10, py=20),")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"        )")])])])],-1),s("p",null,[a("Note that the values specified for the "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"storage")])])]),a(" and "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"private_")])])]),a(" data in "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"create_contract")])])]),a(" are set directly on the resulting dynamic contract. The "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#82AAFF"}},"__init__")])])]),a(" function is not invoked when contracts are created dynamically.")],-1)])),_:1}),e[11]||(e[11]=o(`<h2 id="order-of-operations" tabindex="-1">Order of operations <a class="header-anchor" href="#order-of-operations" aria-label="Permalink to &quot;Order of operations&quot;">​</a></h2><p>When an entrypoint creates an operation, it does not run immediately. Instead, operations are collected in a list and run only <em>after</em> the entrypoint has completed.</p><p>This means that the effects of operations, such as changes in the contract&#39;s balance, are not reflected immediately. The following example transfers tez to a different contract, but within the entrypoint, the contract&#39;s balance is the same because the transfer operation has not run yet:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">def ep(self, destination):</span></span>
<span class="line"><span style="color:#babed8;">    b = sp.balance</span></span>
<span class="line"><span style="color:#babed8;">    sp.transfer(sp.unit, sp.tez(5), destination)</span></span>
<span class="line"><span style="color:#babed8;">    assert b == sp.balance  # sp.balance is unchanged at this point</span></span></code></pre></div><p>Operations are executed in FIFO (First In, First Out) order, which results in a DFS (depth first search) tree execution.</p><p>For example, suppose contract A&#39;s entrypoint first calls contract B&#39;s and then contract C&#39;s entrypoint. In turn, B&#39;s entrypoint calls one of D&#39;s entrypoints. Then the operations are executed in the following order: A, B, D, C</p><p>If an entrypoint creates an error, all operations are canceled and all completed operations that led to the current operation are rolled back.</p><p>For more information about how operations run, see <a href="https://docs.tezos.com/smart-contracts/logic/operations" target="_blank" rel="noreferrer">Operations</a> on docs.tezos.com.</p><h2 id="ordering-operations-manually" tabindex="-1">Ordering operations manually <a class="header-anchor" href="#ordering-operations-manually" aria-label="Permalink to &quot;Ordering operations manually&quot;">​</a></h2><p>SmartPy keeps a running list of operations in <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">operations</span></span></code></span>. In most cases you don&#39;t need to deal with it directly -- the statements described in the previous sections add new elements to the beginning of this list automatically. At the end of the entrypoint, the operations in <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">operations</span></span></code></span> are executed <em>in reverse order</em>.</p><p>To control the order of operations, you can create operations manually and add them to the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">operations</span></span></code></span> list.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>If you create an <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">operation</span></span></code></span> type manually, without using functions such as <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">transfer</span><span style="color:#89DDFF;">()</span></span></code></span>and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#89DDFF;">()</span></span></code></span>, you must add the operation to the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">operations</span></span></code></span> list, or else it does not run. Operations that you create with <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">transfer</span><span style="color:#89DDFF;">()</span></span></code></span>, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#89DDFF;">()</span></span></code></span>, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set_delegate</span><span style="color:#89DDFF;">()</span></span></code></span>, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">emit</span><span style="color:#89DDFF;">()</span></span></code></span>, and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create_contract</span><span style="color:#89DDFF;">()</span></span></code></span> are added to the list automatically.</p></div>`,12)),n(p,{name:"operations",symbol:"sp.operations"},{default:t(()=>e[5]||(e[5]=[s("p",null,[a("The operation list can be accessed as "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"operations")])])]),a(". For example, this code clears the list of operations, creates two calls to contracts, and adds them to the list of operations:")],-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"sp.operations = []  # remove any previously added operations")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}})]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"# Add new operations:")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"op1 = sp.transfer_operation(100, sp.mutez(0), contract)")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"op2 = sp.transfer_operation(100, sp.mutez(0), contract)")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"sp.operations.push(op1)")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"sp.operations.push(op2)")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}})]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"# `sp.operations` is now `[op2, op1]`. When the entrypoint finishes,")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"# it is executed in reverse order: first `op1`, then `op2`")])])])],-1),s("div",{class:"tip custom-block"},[s("p",{class:"custom-block-title"},"Reversing the list of operations"),s("p",null,[a("The operations in "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"operations")])])]),a(" run in reverse order. Therefore, when adding a list of operations to "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"operations")])])]),a(", you way want to reverse it first:")]),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"ops = []")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"ops.push(sp.transfer_operation(100, sp.mutez(0), contract))")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"ops.push(sp.transfer_operation(200, sp.mutez(0), contract))")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"for op in reversed(ops):")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"    sp.operations.push(op)")])])])])],-1)])),_:1}),n(l,{name:"sp.transfer_operation",arg:"argument: t, amount: sp.mutez, destination: sp.contract[t]",rType:"sp.operation"},{default:t(()=>e[6]||(e[6]=[s("p",null,"Returns an operation that calls a contract, as in this example:",-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"# Call another contract")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"op1 = sp.transfer_operation(100, sp.mutez(0), contract)")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"# Call an entrypoint in the same contract")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},'op2 = sp.transfer_operation(42, sp.mutez(0), sp.self_entrypoint("abc"))')]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"# Add the operations to the list")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"sp.operations.push(op1)")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"sp.operations.push(op2)")])])])],-1)])),_:1}),n(l,{name:"sp.create_contract_operation",arg:"sp.Contract, delegate: sp.option[sp.public_key_hash], amount: sp.mutez, storage: t, private_: t1 | None",rType:"sp.record(address=sp.address, operation=sp.operation)"},{default:t(()=>e[7]||(e[7]=[s("p",null,"Returns a contract origination operation and the corresponding address.",-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"r = sp.create_contract_operation(")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"    MyContract, None, sp.tez(0), sp.record(a=1, b=2), private_=sp.record(px=10, py=20)")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"sp.operations.push(r.operation)")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"# r.address contains the address of the contract.")])])])],-1)])),_:1}),n(l,{name:"sp.set_delegate_operation",arg:"d: sp.option[sp.key_hash]"},{default:t(()=>e[8]||(e[8]=[s("p",null,"Returns an operation that sets the delegate.",-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"op = sp.set_delegate_operation(sp.Some(d))")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"sp.operations.push(op)")])])])],-1)])),_:1})]))}});export{f as __pageData,D as default};
