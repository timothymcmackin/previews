import{_ as a,o as e,c as n,Q as t}from"./chunks/framework.741828c6.js";const f=JSON.parse('{"title":"Effects","description":"","frontmatter":{},"headers":[],"relativePath":"manual/data-types/effects.md","filePath":"manual/data-types/effects.md"}'),l={name:"manual/data-types/effects.md"};function o(p,s,i,r,c,d){return e(),n("div",null,s[0]||(s[0]=[t(`<h1 id="effects" tabindex="-1">Effects <a class="header-anchor" href="#effects" aria-label="Permalink to &quot;Effects&quot;">​</a></h1><p>You can control the effects of the different method kinds <a href="/previews/smartpy/tutorials/manual/syntax/contracts#entrypoints">entrypoints</a>, <a href="/previews/smartpy/tutorials/manual/syntax/contracts#views">views</a>, <a href="/previews/smartpy/tutorials/manual/syntax/contracts#private-functions">private functions</a> and <a href="/previews/smartpy/tutorials/manual/syntax/contracts#auxiliary-functions">auxiliary functions</a> by overwriting the default effect values in the method decorator.</p><p>For example, here is a declaration of an entrypoint that cannot raise an exception, assert anything or call any method that does either of those things:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.entrypoint(with_exceptions=False)</span></span>
<span class="line"><span style="color:#babed8;">def my_entrypoint(self):</span></span>
<span class="line"><span style="color:#babed8;">    pass</span></span></code></pre></div><h2 id="changing-the-default-effects" tabindex="-1">Changing the default effects <a class="header-anchor" href="#changing-the-default-effects" aria-label="Permalink to &quot;Changing the default effects&quot;">​</a></h2><p>Possible effects are:</p><ul><li><p><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">with_storage=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">no-access</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></span>: Prevents a method from reading or modifying a contract&#39;s storage.</p></li><li><p><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">with_storage=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">read-only</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></span>: Allows a method to read but not modify a contract&#39;s storage. This is the default value for view methods.</p></li><li><p><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">with_storage=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">read-write</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></span>: Allows a method to both read and modify a contract&#39;s storage. This is the default value for entrypoint methods. This effect is not allowed for view methods.</p></li><li><p><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">with_operations=</span><span style="color:#89DDFF;">True)</span></span></code></span>: Allows a method to emit operations, such as calls to other smart contracts or transfers of tez. The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">with_operations</span></span></code></span> parameter can be either True or False and has the default value of True for entrypoint methods. The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">with_operations</span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;">true</span></span></code></span> effect is not allowed for view methods.</p></li><li><p><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">with_exceptions=</span><span style="color:#89DDFF;">True)</span></span></code></span>: Allows a method to state assertions or raise exceptions. The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">with_exceptions</span></span></code></span> parameter can be either True or False and defaults to True for all method kinds.</p></li><li><p><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">with_mutez_overflow=</span><span style="color:#89DDFF;">True)</span></span></code></span>: Allows a method to perform calculations with mutez values that may overflow. The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">with_mutez_overflow</span></span></code></span> parameter can be either True or False and defaults to True for all method kinds.</p></li><li><p><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">with_mutez_underflow=</span><span style="color:#89DDFF;">True)</span></span></code></span>: Allows a method to perform calculations with mutez values that may underflow. The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">with_mutez_underflow</span></span></code></span> parameter can be either True or False and defaults to True for all method kinds.</p></li></ul><p>Effects can also be combined, as in this example: <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">private</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">with_storage</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">read-write</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span> <span style="color:#BABED8;font-style:italic;">with_operations</span><span style="color:#89DDFF;">=True)</span></span></code></span>.</p><div class="info custom-block"><p class="custom-block-title">Example: Modifying storage</p><p>Here is a function that increments a counter every time it is called. It returns the updated value of the counter. Because the counter is kept in storage and modified, the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">read</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">write</span></span></code></span> storage effect needs to be declared.</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.effects(with_storage=&quot;read-write&quot;)</span></span>
<span class="line"><span style="color:#babed8;">def fresh_id():</span></span>
<span class="line"><span style="color:#babed8;">    self.data.counter += 1</span></span>
<span class="line"><span style="color:#babed8;">    return self.data.counter</span></span></code></pre></div></div><div class="info custom-block"><p class="custom-block-title">Example: Transfers from inside a lambda</p><p>Here is a private function that sends one mutez to each contract in a given list. It returns the number of contracts called. Because sending (<span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">transfer</span></span></code></span>) is an <a href="./operations">operation</a>, the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">with_operations</span></span></code></span> effect needs to be set to True.</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.private(with_operations=True)</span></span>
<span class="line"><span style="color:#babed8;">def send_one_mutez_to_each(self, winners):</span></span>
<span class="line"><span style="color:#babed8;">    count = 0</span></span>
<span class="line"><span style="color:#babed8;">    for w in winners:</span></span>
<span class="line"><span style="color:#babed8;">        count += 1</span></span>
<span class="line"><span style="color:#babed8;">        sp.transfer((), sp.mutez(1), w)</span></span>
<span class="line"><span style="color:#babed8;">    return count</span></span></code></pre></div></div>`,10)]))}const m=a(l,[["render",o]]);export{f as __pageData,m as default};
