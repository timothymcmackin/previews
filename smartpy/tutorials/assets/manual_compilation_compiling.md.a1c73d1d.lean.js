import{_ as a,o as e,c as n,Q as t}from"./chunks/framework.741828c6.js";const y=JSON.parse('{"title":"Compiling contracts","description":"","frontmatter":{},"headers":[],"relativePath":"manual/compilation/compiling.md","filePath":"manual/compilation/compiling.md"}'),l={name:"manual/compilation/compiling.md"};function o(p,s,i,c,r,h){return e(),n("div",null,s[0]||(s[0]=[t(`<h1 id="compiling-contracts" tabindex="-1">Compiling contracts <a class="header-anchor" href="#compiling-contracts" aria-label="Permalink to &quot;Compiling contracts&quot;">​</a></h1><p>To compile a SmartPy contract, make sure that SmartPy is installed as described in <a href="/previews/smartpy/tutorials/manual/introduction/installation">Installation</a>. Then, run the command <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">python path</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">to</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">contract</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">py</span></span></code></span>, where <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">path</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">to</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">contract</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">py</span></span></code></span> is the path to your contract.</p><p>When you compile the contract, SmartPy automatically runs the tests in the contract and generates output files. If the contract compiles successfully and the tests pass, no messages appear in the terminal output.</p><h2 id="output-files" tabindex="-1">Output files <a class="header-anchor" href="#output-files" aria-label="Permalink to &quot;Output files&quot;">​</a></h2><p>When you compile a SmartPy contract locally with the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">python</span></span></code></span> command, SmartPy writes output files to the folder that you specify when you create the test scenario. For example, if you create the test scenario with the code <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">scenario </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test_scenario</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">My test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> main</span><span style="color:#89DDFF;">)</span></span></code></span>, SmartPy writes output files to the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">My_test</span></span></code></span> folder, relative to the location of the test scenario file.</p><p>SmartPy compiles each contract, each contract&#39;s initial storage, and the parameters for each smart contract call to multiple output files. The compiled file names start with <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">step_</span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">nnn</span><span style="color:#89DDFF;">]</span></span></code></span>, where <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">nnn</span><span style="color:#89DDFF;">]</span></span></code></span> is the number of the step in the test scenario that instantiated the contract. The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">log</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">txt</span></span></code></span> file lists when each file is created so you can match files to commands in your test scenario.</p><ul><li><p>Output log: The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">log</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">txt</span></span></code></span> file includes messages from the compiler, the names of other compiled files as they are created, and messages that you add as described in <a href="/previews/smartpy/tutorials/manual/syntax/debugging#logging">Logging</a>.</p></li><li><p>Compiled contract files: SmartPy compiles each contract that you instantiate and add to the test scenario to a Michelson in files that end in <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">_contract</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">tz</span></span></code></span> and Micheline JSON in files that end in <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">_contract</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">json</span></span></code></span>.</p><p>SmartPy gives each contract in the test scenario an ID number in the order that they are instantiated in the code, starting with 0. The first contract is compiled to a file that ends in <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">_cont_0_contract</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">tz</span></span></code></span>. Other output files that are associated with this contract have the same ID number, such as <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">step_001_cont_0_storage</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">tz</span></span></code></span> for its initial storage value and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">step_007_cont_0_params</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">tz</span></span></code></span> for the parameters sent to that contract in a call.</p></li><li><p>Compiled initial storage files: SmartPy compiles the initial storage value of each contract to Python, Micheline JSON, and Michelson files that end in <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">_storage</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">py</span></span></code></span>, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">_storage</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">json</span></span></code></span>, and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">_storage</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">tz</span></span></code></span>. You can use the contents of these files to set the initial storage of the contract when you deploy it.</p></li><li><p>Parameter files: SmartPy compiles the parameters from each smart contract call in the test scenario to Python, Micheline JSON, and Michelson files that end in <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">_params</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">py</span></span></code></span>, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">_params</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">json</span></span></code></span>, and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">_params</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">tz</span></span></code></span>. You can use the contents of these files as examples of how to format parameters for smart contract calls after you deploy the contract.</p></li><li><p>Module imports (Internal use): If you set the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">SMARTPY_DEPENDENCIES_FILE</span></span></code></span> environment variable to a file name, the compiler outputs the tree of module imports that occur during simulation. It writes the information in <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">Makefile</span></span></code></span> format, as in this example:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">SMARTPY_DEPENDENCIES_FILE=imports.mk</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">python</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">templates/calculator_new.py</span></span></code></pre></div><p>In this case, the compiler creates a file named <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">imports</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mk</span></span></code></span> with the following contents:</p><div class="language-make"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">templates/example_import.spy</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">  wheels/tezos-smartpy/smartpy/math.spy</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">templates/calculator_main.spy</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">  wheels/tezos-smartpy/smartpy/math.spy</span></span>
<span class="line"><span style="color:#BABED8;">  templates/example_import.spy</span></span>
<span class="line"><span style="color:#BABED8;">  wheels/tezos-smartpy/smartpy/utils.spy</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">templates/calculator_new.py</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">  templates/calculator_main.spy</span></span></code></pre></div></li></ul>`,7)]))}const d=a(l,[["render",o]]);export{y as __pageData,d as default};
