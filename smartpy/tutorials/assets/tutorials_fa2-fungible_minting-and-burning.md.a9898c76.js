import{_ as a,o as n,c as e,Q as t}from"./chunks/framework.741828c6.js";const b=JSON.parse('{"title":"Part 2: Adding minting and burning entrypoints","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/fa2-fungible/minting-and-burning.md","filePath":"tutorials/fa2-fungible/minting-and-burning.md"}'),l={name:"tutorials/fa2-fungible/minting-and-burning.md"};function o(p,s,i,c,r,d){return n(),e("div",null,s[0]||(s[0]=[t(`<h1 id="part-2-adding-minting-and-burning-entrypoints" tabindex="-1">Part 2: Adding minting and burning entrypoints <a class="header-anchor" href="#part-2-adding-minting-and-burning-entrypoints" aria-label="Permalink to &quot;Part 2: Adding minting and burning entrypoints&quot;">​</a></h1><p>In this part, you add entrypoints that allow an administrator account to create tokens and allow users to burn their own tokens.</p><p>The SmartPy FA2 library provides <em>mixins</em> that add these entrypoints so you don&#39;t have to code them yourself. Mixins are modular classes that add specific pieces of functionality.</p><h2 id="tutorial-contract" tabindex="-1">Tutorial contract <a class="header-anchor" href="#tutorial-contract" aria-label="Permalink to &quot;Tutorial contract&quot;">​</a></h2><p>The completed contract that you create in this part is at <a href="https://github.com/trilitech/tutorial-applications/blob/main/smartpy_fa2_fungible/part_2_complete.py" target="_blank" rel="noreferrer">part_2_complete.py</a>.</p><h2 id="adding-the-admin-mint-and-burn-entrypoints" tabindex="-1">Adding the admin, mint, and burn entrypoints <a class="header-anchor" href="#adding-the-admin-mint-and-burn-entrypoints" aria-label="Permalink to &quot;Adding the admin, mint, and burn entrypoints&quot;">​</a></h2><p>To add mint and burn entrypoints to the contract, you need three mixins: the mixins for those two entrypoints and a mixin that enables administrator functionality. Only the admin account can mint tokens, but anyone can burn their own tokens.</p><ol><li><p>In the contract, update the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span></span></code></span> statement to include the new mixins:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;"># Order of inheritance: [Admin], [&lt;policy&gt;], &lt;base class&gt;, [&lt;other mixins&gt;].</span></span>
<span class="line"><span style="color:#babed8;">class MyFungibleContract(</span></span>
<span class="line"><span style="color:#babed8;">    main.Admin,</span></span>
<span class="line"><span style="color:#babed8;">    main.Fungible,</span></span>
<span class="line"><span style="color:#babed8;">    main.MintFungible,</span></span>
<span class="line"><span style="color:#babed8;">    main.BurnFungible,</span></span>
<span class="line"><span style="color:#babed8;">    main.OnchainviewBalanceOf,</span></span>
<span class="line"><span style="color:#babed8;">):</span></span></code></pre></div></li><li><p>Update the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">()</span></span></code></span> function to accept the admin address and initialize the mixins:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">def __init__(self, admin_address, contract_metadata, ledger, token_metadata):</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    # Initialize on-chain balance view</span></span>
<span class="line"><span style="color:#babed8;">    main.OnchainviewBalanceOf.__init__(self)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    # Initialize the fungible token-specific entrypoints</span></span>
<span class="line"><span style="color:#babed8;">    main.BurnFungible.__init__(self)</span></span>
<span class="line"><span style="color:#babed8;">    main.MintFungible.__init__(self)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    # Initialize fungible token base class</span></span>
<span class="line"><span style="color:#babed8;">    main.Fungible.__init__(self, contract_metadata, ledger, token_metadata)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    # Initialize administrative permissions</span></span>
<span class="line"><span style="color:#babed8;">    main.Admin.__init__(self, admin_address)</span></span></code></pre></div><p>The order that you import and initialize the mixins is significant, so make sure your updates match the code above.</p></li><li><p>In the test scenario, add an administrator test account to the existing Alice and Bob test accounts:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;"># Define test accounts</span></span>
<span class="line"><span style="color:#babed8;">admin = sp.test_account(&quot;Admin&quot;)</span></span>
<span class="line"><span style="color:#babed8;">alice = sp.test_account(&quot;Alice&quot;)</span></span>
<span class="line"><span style="color:#babed8;">bob = sp.test_account(&quot;Bob&quot;)</span></span></code></pre></div></li><li><p>Update the command to deploy the contract to include the administrator address:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;"># Instantiate the FA2 fungible token contract</span></span>
<span class="line"><span style="color:#babed8;">contract = my_module.MyFungibleContract(admin.address, sp.big_map(), initial_ledger, [tok0_md, tok1_md])</span></span></code></pre></div></li><li><p>At the end of the test scenario, add a test to verify that the admin account can mint more of an existing token:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">scenario.h2(&quot;Mint tokens&quot;)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"># Mint more of an existing token</span></span>
<span class="line"><span style="color:#babed8;">contract.mint(</span></span>
<span class="line"><span style="color:#babed8;">    [</span></span>
<span class="line"><span style="color:#babed8;">        sp.record(to_=alice.address, amount=4, token=sp.variant(&quot;existing&quot;, 0)),</span></span>
<span class="line"><span style="color:#babed8;">        sp.record(to_=bob.address, amount=4, token=sp.variant(&quot;existing&quot;, 1)),</span></span>
<span class="line"><span style="color:#babed8;">    ],</span></span>
<span class="line"><span style="color:#babed8;">    _sender=admin,</span></span>
<span class="line"><span style="color:#babed8;">)</span></span>
<span class="line"><span style="color:#babed8;">scenario.verify(</span></span>
<span class="line"><span style="color:#babed8;">    _get_balance(contract, sp.record(owner=alice.address, token_id=0)) == 10</span></span>
<span class="line"><span style="color:#babed8;">)</span></span>
<span class="line"><span style="color:#babed8;">scenario.verify(</span></span>
<span class="line"><span style="color:#babed8;">    _get_balance(contract, sp.record(owner=bob.address, token_id=0)) == 4</span></span>
<span class="line"><span style="color:#babed8;">)</span></span>
<span class="line"><span style="color:#babed8;">scenario.verify(</span></span>
<span class="line"><span style="color:#babed8;">    _get_balance(contract, sp.record(owner=alice.address, token_id=1)) == 3</span></span>
<span class="line"><span style="color:#babed8;">)</span></span>
<span class="line"><span style="color:#babed8;">scenario.verify(</span></span>
<span class="line"><span style="color:#babed8;">    _get_balance(contract, sp.record(owner=bob.address, token_id=1)) == 11</span></span>
<span class="line"><span style="color:#babed8;">)</span></span>
<span class="line"><span style="color:#babed8;">scenario.verify(_total_supply(contract, sp.record(token_id=0)) == 14)</span></span>
<span class="line"><span style="color:#babed8;">scenario.verify(_total_supply(contract, sp.record(token_id=1)) == 14)</span></span></code></pre></div></li><li><p>Add a test to verify that other users can&#39;t mint tokens:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;"># Other users can&#39;t mint tokens</span></span>
<span class="line"><span style="color:#babed8;">contract.mint(</span></span>
<span class="line"><span style="color:#babed8;">    [</span></span>
<span class="line"><span style="color:#babed8;">        sp.record(to_=alice.address, amount=4, token=sp.variant(&quot;existing&quot;, 0)),</span></span>
<span class="line"><span style="color:#babed8;">    ],</span></span>
<span class="line"><span style="color:#babed8;">    _sender=alice,</span></span>
<span class="line"><span style="color:#babed8;">    _valid=False</span></span>
<span class="line"><span style="color:#babed8;">)</span></span></code></pre></div></li><li><p>Add a test to verify that the admin account can create a new token type:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;"># Create a token type</span></span>
<span class="line"><span style="color:#babed8;">tok2_md = fa2.make_metadata(name=&quot;Token Two&quot;, decimals=0, symbol=&quot;Tok2&quot;)</span></span>
<span class="line"><span style="color:#babed8;">contract.mint(</span></span>
<span class="line"><span style="color:#babed8;">    [</span></span>
<span class="line"><span style="color:#babed8;">        sp.record(to_=alice.address, amount=5, token=sp.variant(&quot;new&quot;, tok2_md)),</span></span>
<span class="line"><span style="color:#babed8;">    ],</span></span>
<span class="line"><span style="color:#babed8;">    _sender=admin,</span></span>
<span class="line"><span style="color:#babed8;">)</span></span>
<span class="line"><span style="color:#babed8;">scenario.verify(</span></span>
<span class="line"><span style="color:#babed8;">    _get_balance(contract, sp.record(owner=alice.address, token_id=2)) == 5</span></span>
<span class="line"><span style="color:#babed8;">)</span></span></code></pre></div></li><li><p>Add a test to verify that users can burn their tokens but not other accounts&#39; tokens:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">scenario.h2(&quot;Burn tokens&quot;)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"># Verify that you can burn your own token</span></span>
<span class="line"><span style="color:#babed8;">contract.burn([sp.record(token_id=2, from_=alice.address, amount=1)], _sender=alice)</span></span>
<span class="line"><span style="color:#babed8;">scenario.verify(</span></span>
<span class="line"><span style="color:#babed8;">    _get_balance(contract, sp.record(owner=alice.address, token_id=2)) == 4</span></span>
<span class="line"><span style="color:#babed8;">)</span></span>
<span class="line"><span style="color:#babed8;"># Verify that you can&#39;t burn someone else&#39;s token</span></span>
<span class="line"><span style="color:#babed8;">contract.burn(</span></span>
<span class="line"><span style="color:#babed8;">    [sp.record(token_id=2, from_=alice.address, amount=1)],</span></span>
<span class="line"><span style="color:#babed8;">    _sender=bob,</span></span>
<span class="line"><span style="color:#babed8;">    _valid=False,</span></span>
<span class="line"><span style="color:#babed8;">)</span></span>
<span class="line"><span style="color:#babed8;">scenario.verify(</span></span>
<span class="line"><span style="color:#babed8;">    _get_balance(contract, sp.record(owner=alice.address, token_id=2)) == 4</span></span>
<span class="line"><span style="color:#babed8;">)</span></span>
<span class="line"><span style="color:#babed8;">scenario.verify(</span></span>
<span class="line"><span style="color:#babed8;">    _total_supply(contract, sp.record(token_id=2)) == 4</span></span>
<span class="line"><span style="color:#babed8;">)</span></span></code></pre></div></li><li><p>Run the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">python fa2_fungible</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">py</span></span></code></span> command to compile and test your contract. If you see any errors, make sure that your code matches the code above or compare with the completed contract here: <a href="https://github.com/trilitech/tutorial-applications/blob/main/smartpy_fa2_fungible/part_2_complete.py" target="_blank" rel="noreferrer">part_2_complete.py</a>.</p></li></ol><p>Note that there are many more output files in the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">fa2_lib_fungible</span></span></code></span> folder. The SmartPy compiler creates output files for each call to an entrypoint in the test scenario. You can use these files to verify that the scenario is testing the contract properly.</p><p>You can also use these files as precompiled parameters for contract calls, as shown in the next section.</p><h2 id="optional-test-the-contract-in-the-octez-client-mockup-mode" tabindex="-1">(Optional) Test the contract in the Octez client mockup mode <a class="header-anchor" href="#optional-test-the-contract-in-the-octez-client-mockup-mode" aria-label="Permalink to &quot;(Optional) Test the contract in the Octez client mockup mode&quot;">​</a></h2><p>You can test the mint and burn entrypoints in mockup mode, but you must be sure to deploy the contract with an address that you can use as the administrator, as described in these steps:</p><ol><li><p>Get the address of one of the existing bootstrap accounts in the mockup by running this command:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">mockup-client</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">list</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">known</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">addresses</span></span></code></pre></div></li><li><p>Replace the first address in the initial storage value in the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">step_003_cont_0_storage</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">tz</span></span></code></span> file with the bootstrap account address. For example, the file might look like this, with <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx</span></span></code></span> as the bootstrap account:</p><div class="language-michelson"><button title="Copy Code" class="copy"></button><span class="lang">michelson</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">(Pair &quot;tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx&quot; (Pair {Elt (Pair &quot;tz1Rp4Bv8iUhYnNoCryHQgNzN2D7i3L1LF9C&quot; 1) 10; Elt (Pair &quot;tz1WxrQuZ4CK1MBUa2GqUWK1yJ4J6EtG1Gwi&quot; 0) 10} (Pair {} (Pair 2 (Pair {} (Pair {Elt 0 10; Elt 1 10} {Elt 0 (Pair 0 {Elt &quot;decimals&quot; 0x30; Elt &quot;name&quot; 0x546f6b656e205a65726f; Elt &quot;symbol&quot; 0x546f6b30}); Elt 1 (Pair 1 {Elt &quot;decimals&quot; 0x30; Elt &quot;name&quot; 0x546f6b656e204f6e65; Elt &quot;symbol&quot; 0x546f6b31})}))))))</span></span></code></pre></div></li><li><p>Deploy the contract by running this command:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">mockup-client</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">originate</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">contract</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">smartpy_fa2_fungible</span><span style="color:#BABED8;"> \\</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#C3E88D;">transferring</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">from</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">bootstrap1</span><span style="color:#BABED8;"> \\</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#C3E88D;">running</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">fa2_lib_fungible/step_003_cont_0_contract.tz</span><span style="color:#BABED8;"> \\</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#C3E88D;">--init</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#FFCB6B;">cat</span><span style="color:#C3E88D;"> fa2_lib_fungible/step_003_cont_0_storage.tz</span><span style="color:#89DDFF;">)&quot;</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--burn-cap</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--force</span></span></code></pre></div></li><li><p>Mint more of an existing token by following these steps:</p><ol><li><p>Open the file <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">fa2_lib_fungible</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">log</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">txt</span></span></code></span>.</p></li><li><p>Find the output file that shows the parameters for the call to the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">mint</span></span></code></span> entrypoint. For example, this logging information shows that the parameters are in the file <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">fa2_lib_fungible</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">step_028_cont_0_params</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">tz</span></span></code></span>:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">h2: Mint tokens</span></span>
<span class="line"><span style="color:#babed8;">file fa2_lib_fungible/step_028_cont_0_params.py</span></span>
<span class="line"><span style="color:#babed8;">file fa2_lib_fungible/step_028_cont_0_params.tz</span></span>
<span class="line"><span style="color:#babed8;">file fa2_lib_fungible/step_028_cont_0_params.json</span></span>
<span class="line"><span style="color:#babed8;">Executing mint([sp.record(to_ = sp.address(&#39;tz1WxrQuZ4CK1MBUa2GqUWK1yJ4J6EtG1Gwi&#39;), token = existing(0), amount = 4), sp.record(to_ = sp.address(&#39;tz1Rp4Bv8iUhYnNoCryHQgNzN2D7i3L1LF9C&#39;), token = existing(1), amount = 4)])...</span></span></code></pre></div></li><li><p>Use that output file as the parameter for a call to the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">mint</span></span></code></span> entrypoint. For example, this command uses the file <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">fa2_lib_fungible</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">step_028_cont_0_params</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">tz</span></span></code></span>:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">mockup-client</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--wait</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">none</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">transfer</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;"> \\</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#C3E88D;">from</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">bootstrap1</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">to</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">smartpy_fa2_fungible</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--entrypoint</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mint</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> \\</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#C3E88D;">--arg</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#FFCB6B;">cat</span><span style="color:#C3E88D;"> fa2_lib_fungible/step_028_cont_0_params.tz</span><span style="color:#89DDFF;">)&quot;</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--burn-cap</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span></span></code></pre></div></li><li><p>Run this command to use the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">get_balance_of</span></span></code></span> view to see that the tokens have been minted and added to the account:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">mockup-client</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">run</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">view</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">get_balance_of</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">on</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">contract</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">smartpy_fa2_fungible</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">with</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">input</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">{Pair &quot;tz1WxrQuZ4CK1MBUa2GqUWK1yJ4J6EtG1Gwi&quot; 0}</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>The response shows that the account now has 14 of token type 0:</p><div class="language-michelson"><button title="Copy Code" class="copy"></button><span class="lang">michelson</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">{ Pair (Pair &quot;tz1WxrQuZ4CK1MBUa2GqUWK1yJ4J6EtG1Gwi&quot; 0) 14 }</span></span></code></pre></div></li></ol></li></ol><p>Now you have an FA2 token contract with minting and burning functionality. In the next part, you add metadata to provide information about the contract and its tokens to apps such as wallets. Continue to <a href="/previews/smartpy/tutorials/tutorials/fa2-fungible/adding-metadata">Part 3: Adding metadata</a>.</p>`,14)]))}const u=a(l,[["render",o]]);export{b as __pageData,u as default};
