import{D as p}from"./chunks/DocFunction.e9a30d9e.js";import{D as o}from"./chunks/DocInPlace.04c2ab1e.js";import{o as i,c,Q as t,C as e,y as n,v as s,a}from"./chunks/framework.741828c6.js";import"./chunks/DocFunction.vue_vue_type_style_index_0_scoped_21214205_lang.4ed993c7.js";import"./chunks/DocInPlace.vue_vue_type_style_index_0_scoped_8490fbaf_lang.4ed993c7.js";const b=JSON.parse('{"title":"Lists, sets, and maps","description":"","frontmatter":{},"headers":[],"relativePath":"manual/data-types/lists-sets-and-maps.md","filePath":"manual/data-types/lists-sets-and-maps.md"}'),r={name:"manual/data-types/lists-sets-and-maps.md"},g=Object.assign(r,{setup(y){return(F,l)=>(i(),c("div",null,[l[20]||(l[20]=t(`<h1 id="lists-sets-and-maps" tabindex="-1">Lists, sets, and maps <a class="header-anchor" href="#lists-sets-and-maps" aria-label="Permalink to &quot;Lists, sets, and maps&quot;">​</a></h1><h2 id="lists" tabindex="-1">Lists <a class="header-anchor" href="#lists" aria-label="Permalink to &quot;Lists&quot;">​</a></h2><p>A list of elements of type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">t</span></span></code></span> has type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">list</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">t</span><span style="color:#89DDFF;">]</span></span></code></span>. For example, the list <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span> <span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span> <span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">]</span></span></code></span> has type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">list</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">int</span><span style="color:#89DDFF;">]</span></span></code></span>.</p><p>SmartPy lists have different methods than Python lists. For example, to add an element to a SmartPy list, use its <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">push</span><span style="color:#89DDFF;">()</span></span></code></span> method, not the standard Python <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">()</span></span></code></span> method.</p><p>Here is an example of creating and using a SmartPy list:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">import smartpy as sp</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def main():</span></span>
<span class="line"><span style="color:#babed8;">    class ListTest(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.myList = []</span></span>
<span class="line"><span style="color:#babed8;">            sp.cast(self.data.myList, sp.list[sp.int])</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        @sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">        def add(self, newValue):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.myList.push(newValue)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">@sp.add_test()</span></span>
<span class="line"><span style="color:#babed8;">def test():</span></span>
<span class="line"><span style="color:#babed8;">    scenario = sp.test_scenario(&quot;ListTest&quot;, main)</span></span>
<span class="line"><span style="color:#babed8;">    contract = main.ListTest()</span></span>
<span class="line"><span style="color:#babed8;">    scenario += contract</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    contract.add(4)</span></span>
<span class="line"><span style="color:#babed8;">    contract.add(6)</span></span>
<span class="line"><span style="color:#babed8;">    scenario.verify(sp.sum(contract.data.myList) == 10)</span></span></code></pre></div>`,6)),e(p,{name:"sp.len",arg:"x: sp.list[t]",rType:"sp.nat"},{default:n(()=>l[0]||(l[0]=[s("p",null,[a("Returns the length of a list, for example "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"len"),s("span",{style:{color:"#89DDFF"}},"(["),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#C3E88D"}},"a"),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#C3E88D"}},"b"),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#C3E88D"}},"c"),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#89DDFF"}},"])"),a(" "),s("span",{style:{color:"#89DDFF"}},"=="),a(" "),s("span",{style:{color:"#F78C6C"}},"3")])])]),a(".")],-1)])),_:1}),e(p,{name:"sp.sum",args:["xs: sp.list[sp.int]","xs: sp.list[sp.nat]"],rTypes:["sp.int","sp.nat"]},{default:n(()=>l[1]||(l[1]=[s("p",null,[a("Returns the sum of all the elements in a list, for example "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"sum"),s("span",{style:{color:"#89DDFF"}},"(["),s("span",{style:{color:"#F78C6C"}},"1"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#F78C6C"}},"2"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#F78C6C"}},"3"),s("span",{style:{color:"#89DDFF"}},"])"),a(" "),s("span",{style:{color:"#89DDFF"}},"=="),a(" "),s("span",{style:{color:"#F78C6C"}},"6")])])]),a(". Works on lists of both "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"nat")])])]),a(" and "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"int")])])]),a(".")],-1)])),_:1}),e(p,{name:"l.push",arg:"x: t"},{default:n(()=>l[2]||(l[2]=[s("p",null,"Adds an element to the start of a list. For example:",-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"s = [1, 2, 3]")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"s.push(4)")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"# evaluates to `[4, 1, 2, 3]`")])])])],-1)])),_:1}),e(p,{name:"sp.cons",arg:"x: t, x: sp.list[t]",rType:"sp.list[t]"},{default:n(()=>l[3]||(l[3]=[s("p",null,[a("Returns a new list with an element added to the front. For example "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"cons"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#F78C6C"}},"1"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#89DDFF"}},"["),s("span",{style:{color:"#F78C6C"}},"2"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#F78C6C"}},"3"),s("span",{style:{color:"#89DDFF"}},"])")])])]),a(" evaluates to "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"["),s("span",{style:{color:"#F78C6C"}},"1"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#F78C6C"}},"2"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#F78C6C"}},"3"),s("span",{style:{color:"#89DDFF"}},"]")])])]),a(".")],-1)])),_:1}),e(p,{name:"sp.range",args:["to: sp.nat","to: sp.int","from_: sp.nat, to: sp.nat","from_: sp.int, to: sp.int","from_: sp.nat, to: sp.nat, step: sp.nat","from_: sp.int, to: sp.int, step: sp.int"],rTypes:["sp.list[sp.nat]","sp.list[sp.int]","sp.list[sp.nat]","sp.list[sp.int]","sp.list[sp.nat]","sp.list[sp.int]"]},{default:n(()=>l[4]||(l[4]=[s("p",null,"Get a series of numbers with the specified parameters.",-1),s("p",null,[s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"range"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#F78C6C"}},"3"),s("span",{style:{color:"#89DDFF"}},")")])])]),a(" evaluates to "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"["),s("span",{style:{color:"#F78C6C"}},"0"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#F78C6C"}},"1"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#F78C6C"}},"2"),s("span",{style:{color:"#89DDFF"}},"]")])])]),a(".")],-1),s("p",null,[s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"range"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#F78C6C"}},"3"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#F78C6C"}},"7"),s("span",{style:{color:"#89DDFF"}},")")])])]),a(" evaluates to "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"["),s("span",{style:{color:"#F78C6C"}},"3"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#F78C6C"}},"4"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#F78C6C"}},"5"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#F78C6C"}},"6"),s("span",{style:{color:"#89DDFF"}},"]")])])]),a(".")],-1),s("p",null,[s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"range"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#F78C6C"}},"3"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#F78C6C"}},"7"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#F78C6C"}},"2"),s("span",{style:{color:"#89DDFF"}},")")])])]),a(" evaluates to "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"["),s("span",{style:{color:"#F78C6C"}},"3"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#F78C6C"}},"5"),s("span",{style:{color:"#89DDFF"}},"]")])])]),a(".")],-1)])),_:1}),e(p,{name:"reversed",arg:"x: sp.list[t]",rType:"sp.list[t]"},{default:n(()=>l[5]||(l[5]=[s("p",null,[a("Reverse and return a new list from the provided list. For example, "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#82AAFF"}},"reversed"),s("span",{style:{color:"#89DDFF"}},"(["),s("span",{style:{color:"#F78C6C"}},"1"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#F78C6C"}},"2"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#F78C6C"}},"3"),s("span",{style:{color:"#89DDFF"}},"])")])])]),a(" evaluates to "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"["),s("span",{style:{color:"#F78C6C"}},"3"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#F78C6C"}},"2"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#F78C6C"}},"1"),s("span",{style:{color:"#89DDFF"}},"]")])])]),a(".")],-1)])),_:1}),e(o,{name:"list iteration",symbol:"for x in",right:"l"},{default:n(()=>l[6]||(l[6]=[s("p",null,"Iterate over a list. For example:",-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"for x in [1, 2, 3]:")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"    self.data.result += x")])])])],-1)])),_:1}),l[21]||(l[21]=t(`<h2 id="sets" tabindex="-1">Sets <a class="header-anchor" href="#sets" aria-label="Permalink to &quot;Sets&quot;">​</a></h2><p>A set containing elements of type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">t</span></span></code></span> is represented as <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">...</span><span style="color:#89DDFF;">}</span></span></code></span> and has the type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">set</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">t</span><span style="color:#89DDFF;">]</span></span></code></span>. For instance, the set <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span> <span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span> <span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">}</span></span></code></span> is of type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">set</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">int</span><span style="color:#89DDFF;">]</span></span></code></span>. To create an empty set, use <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">set</span><span style="color:#89DDFF;">()</span></span></code></span>.</p><p>SmartPy sets have different methods than Python sets. For example, to check if an element is in a SmartPy set, use its <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">contains</span><span style="color:#89DDFF;">()</span></span></code></span> method, not the standard Python <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">in</span></span></code></span> operator.</p><p>Here is an example of creating and using a SmartPy set:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">import smartpy as sp</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def main():</span></span>
<span class="line"><span style="color:#babed8;">    class SetTest(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.mySet = set()</span></span>
<span class="line"><span style="color:#babed8;">            sp.cast(self.data.mySet, sp.set[sp.string])</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        @sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">        def add(self, newValue):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.mySet.add(newValue)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">@sp.add_test()</span></span>
<span class="line"><span style="color:#babed8;">def test():</span></span>
<span class="line"><span style="color:#babed8;">    scenario = sp.test_scenario(&quot;setTest&quot;, main)</span></span>
<span class="line"><span style="color:#babed8;">    contract = main.SetTest()</span></span>
<span class="line"><span style="color:#babed8;">    scenario += contract</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    contract.add(&quot;C&quot;)</span></span>
<span class="line"><span style="color:#babed8;">    contract.add(&quot;D&quot;)</span></span>
<span class="line"><span style="color:#babed8;">    scenario.verify(contract.data.mySet.contains(&quot;D&quot;))</span></span></code></pre></div>`,5)),e(p,{name:"sp.len",arg:"x: sp.set[t]",rType:"sp.nat"},{default:n(()=>l[7]||(l[7]=[s("p",null,"Returns the number of elements in a set.",-1)])),_:1}),e(p,{name:"s.contains",arg:"x: t",rType:"sp.bool"},{default:n(()=>l[8]||(l[8]=[s("p",null,[a("Returns a boolean value indicating whether "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"x")])])]),a(" is an element of the set.")],-1)])),_:1}),e(p,{name:"s.elements",rType:"sp.list[t]"},{default:n(()=>l[9]||(l[9]=[s("p",null,"Returns the elements of a set as a list.",-1)])),_:1}),e(p,{name:"s.add",arg:"x: t"},{default:n(()=>l[10]||(l[10]=[s("p",null,"Adds an element to a set. For example:",-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"s = {1, 2, 3}")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"s.add(4)")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"assert s.contains(4)")])])])],-1)])),_:1}),l[22]||(l[22]=t(`<h2 id="maps" tabindex="-1">Maps <a class="header-anchor" href="#maps" aria-label="Permalink to &quot;Maps&quot;">​</a></h2><p>A map that takes elements of type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">k</span></span></code></span> to elements of type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">v</span></span></code></span> has type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">map</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">k</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> v</span><span style="color:#89DDFF;">]</span></span></code></span>. SmartPy maps are similar to Python&#39;s dictionaries.</p><p>You can access entries in a map with the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">m</span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">...</span><span style="color:#89DDFF;">]</span></span></code></span> notation, as in this example:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">m = {&quot;a&quot;: 65, &quot;b&quot;: 66}</span></span>
<span class="line"><span style="color:#babed8;">assert m[&quot;a&quot;] == 65</span></span>
<span class="line"><span style="color:#babed8;">m[&quot;c&quot;] = 67</span></span>
<span class="line"><span style="color:#babed8;">assert m[&quot;c&quot;] == 67</span></span></code></pre></div>`,4)),e(o,{name:"del",symbol:"del",right:"m[key: t]"},{default:n(()=>l[11]||(l[11]=[s("p",null,[a("An entry can be deleted from a map using the statement "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF","font-style":"italic"}},"del"),s("span",{style:{color:"#BABED8"}}," m"),s("span",{style:{color:"#89DDFF"}},"["),s("span",{style:{color:"#BABED8"}},"key"),s("span",{style:{color:"#89DDFF"}},"]")])])]),a(". For example:")],-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},'m = {"a": 65, "b": 66}')]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},'del m["a"]')]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},'assert not m.contains("a")')])])])],-1)])),_:1}),e(p,{name:"m.get",args:["key: k, default=...: v","key: t, error=...: t"],rTypes:["v","v"]},{default:n(()=>l[12]||(l[12]=[s("p",null,[a("Looks up "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"key")])])]),a(" in the map "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"m")])])]),a(". If "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"key")])])]),a(" does not have an entry in the map, "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"default")])])]),a(" is returned or "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"error")])])]),a(" is raised, according to which keyword argument is given. You must provide either "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"default")])])]),a(" or "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"error")])])]),a(" but not both.")],-1)])),_:1}),e(p,{name:"m.get_opt",arg:"'key: k'",rType:"sp.option[t]"},{default:n(()=>l[13]||(l[13]=[s("p",null,[a("Returns "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"Some"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#82AAFF"}},"value"),s("span",{style:{color:"#89DDFF"}},")")])])]),a(" if the value is found in the map "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"m")])])]),a(", "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"None")])])]),a(" otherwise.")],-1)])),_:1}),e(p,{name:"sp.len",arg:"x: sp.map[k, v]",rType:"sp.nat"},{default:n(()=>l[14]||(l[14]=[s("p",null,"Returns the size of a map, which is the number of its entries.",-1)])),_:1}),e(p,{name:"m.items",rType:"sp.list[sp.record(key=k, value=v)]"},{default:n(()=>l[15]||(l[15]=[s("p",null,[s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"{"),s("span",{style:{color:"#89DDFF"}},"'"),s("span",{style:{color:"#C3E88D"}},"a"),s("span",{style:{color:"#89DDFF"}},"'"),s("span",{style:{color:"#89DDFF"}},":"),a(" "),s("span",{style:{color:"#F78C6C"}},"97"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#89DDFF"}},"'"),s("span",{style:{color:"#C3E88D"}},"b"),s("span",{style:{color:"#89DDFF"}},"'"),s("span",{style:{color:"#89DDFF"}},":"),a(" "),s("span",{style:{color:"#F78C6C"}},"98"),s("span",{style:{color:"#89DDFF"}},"}."),s("span",{style:{color:"#82AAFF"}},"items"),s("span",{style:{color:"#89DDFF"}},"()")])])]),a(" evaluates to "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"["),s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"record"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#BABED8","font-style":"italic"}},"key"),s("span",{style:{color:"#89DDFF"}},"="),s("span",{style:{color:"#89DDFF"}},"'"),s("span",{style:{color:"#C3E88D"}},"a"),s("span",{style:{color:"#89DDFF"}},"'"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#BABED8","font-style":"italic"}},"value"),s("span",{style:{color:"#89DDFF"}},"="),s("span",{style:{color:"#F78C6C"}},"97"),s("span",{style:{color:"#89DDFF"}},"),"),s("span",{style:{color:"#BABED8"}}," sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"record"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#BABED8","font-style":"italic"}},"key"),s("span",{style:{color:"#89DDFF"}},"="),s("span",{style:{color:"#89DDFF"}},"'"),s("span",{style:{color:"#C3E88D"}},"b"),s("span",{style:{color:"#89DDFF"}},"'"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#BABED8","font-style":"italic"}},"value"),s("span",{style:{color:"#89DDFF"}},"="),s("span",{style:{color:"#F78C6C"}},"98"),s("span",{style:{color:"#89DDFF"}},")]")])])]),a(".")],-1)])),_:1}),e(p,{name:"m.keys",rType:"sp.list[k]"},{default:n(()=>l[16]||(l[16]=[s("p",null,[s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"{"),s("span",{style:{color:"#89DDFF"}},"'"),s("span",{style:{color:"#C3E88D"}},"a"),s("span",{style:{color:"#89DDFF"}},"'"),s("span",{style:{color:"#89DDFF"}},":"),a(" "),s("span",{style:{color:"#F78C6C"}},"97"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#89DDFF"}},"'"),s("span",{style:{color:"#C3E88D"}},"b"),s("span",{style:{color:"#89DDFF"}},"'"),s("span",{style:{color:"#89DDFF"}},":"),a(" "),s("span",{style:{color:"#F78C6C"}},"98"),s("span",{style:{color:"#89DDFF"}},"}."),s("span",{style:{color:"#82AAFF"}},"keys"),s("span",{style:{color:"#89DDFF"}},"()")])])]),a(" evaluates to "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"["),s("span",{style:{color:"#89DDFF"}},"'"),s("span",{style:{color:"#C3E88D"}},"a"),s("span",{style:{color:"#89DDFF"}},"'"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#89DDFF"}},"'"),s("span",{style:{color:"#C3E88D"}},"b"),s("span",{style:{color:"#89DDFF"}},"'"),s("span",{style:{color:"#89DDFF"}},"]")])])]),a(".")],-1)])),_:1}),e(p,{name:"m.values",rType:"sp.list[k]"},{default:n(()=>l[17]||(l[17]=[s("p",null,[s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"{"),s("span",{style:{color:"#89DDFF"}},"'"),s("span",{style:{color:"#C3E88D"}},"a"),s("span",{style:{color:"#89DDFF"}},"'"),s("span",{style:{color:"#89DDFF"}},":"),a(" "),s("span",{style:{color:"#F78C6C"}},"97"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#89DDFF"}},"'"),s("span",{style:{color:"#C3E88D"}},"b"),s("span",{style:{color:"#89DDFF"}},"'"),s("span",{style:{color:"#89DDFF"}},":"),a(" "),s("span",{style:{color:"#F78C6C"}},"98"),s("span",{style:{color:"#89DDFF"}},"}."),s("span",{style:{color:"#82AAFF"}},"values"),s("span",{style:{color:"#89DDFF"}},"()")])])]),a(" evaluates to "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"["),s("span",{style:{color:"#F78C6C"}},"97"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#F78C6C"}},"98"),s("span",{style:{color:"#89DDFF"}},"]")])])]),a(".")],-1)])),_:1}),e(p,{name:"sp.update_map",arg:"key: k, value: sp.option[v], m: map[k, v]",rType:"map[k, v]"},{default:n(()=>l[18]||(l[18]=[s("p",null,[a("Returns a copy of "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"m")])])]),a(" with a modified entry at "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"key")])])]),a(": if "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"value "),s("span",{style:{color:"#89DDFF"}},"=="),a(" "),s("span",{style:{color:"#89DDFF"}},"None")])])]),a(", it is removed; if "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"value "),s("span",{style:{color:"#89DDFF"}},"=="),s("span",{style:{color:"#BABED8"}}," sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"Some"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#82AAFF"}},"v"),s("span",{style:{color:"#89DDFF"}},")")])])]),a(", it is "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"v")])])]),a(".")],-1),s("p",null,"Example:",-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},'assert sp.update_map("a", sp.Some(3), {})["a"] == 3')]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},'assert sp.update_map("a", None, {"a": 2}).get("a", default=-1) == -1')])])])],-1)])),_:1}),e(p,{name:"sp.get_and_update",arg:"key: k, value: sp.option[v], m: map[k, v]",rType:"sp.pair[sp.option[v], map[k, v]]"},{default:n(()=>l[19]||(l[19]=[s("p",null,[a("Like "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"update_map")])])]),a(", but also returns the old value of the map (or "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"None")])])]),a(" if "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"k")])])]),a(" had no entry).")],-1)])),_:1}),l[23]||(l[23]=t(`<h2 id="big-maps" tabindex="-1">Big maps <a class="header-anchor" href="#big-maps" aria-label="Permalink to &quot;Big maps&quot;">​</a></h2><p>The big map type (<span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">big_map</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">k</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> v</span><span style="color:#89DDFF;">]</span></span></code></span>) is a key-value store similar to <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">map</span></span></code></span>, but it is optimized so it can contain large amounts of data while requiring low gas fees to read and update. Big maps are lazily deserialized, which means that only the entries manipulated by a contract are deserialized and reserialized, not the entire big map. Individual operations on a big map may have higher gas costs than on a map when the maps are small, but as the maps get larger, big maps are often cheaper overall to use. Also, unlike maps, big maps store keys as hashes, which can save space.</p><p>Here is an example of creating and working with a big map:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">m = sp.big_map()</span></span>
<span class="line"><span style="color:#babed8;">m[&quot;a&quot;] = 65</span></span>
<span class="line"><span style="color:#babed8;">m[&quot;b&quot;] = 66</span></span>
<span class="line"><span style="color:#babed8;">assert m[&quot;a&quot;] == 65</span></span>
<span class="line"><span style="color:#babed8;">m[&quot;c&quot;] = 67</span></span>
<span class="line"><span style="color:#babed8;">assert m[&quot;c&quot;] == 67</span></span></code></pre></div><p>Contracts read big maps not as a single piece of data but as a collection of entries. Therefore, contracts cannot read an entire big map at one time, which prevents them from passing big maps as parameters, iterating through entries, or counting the number of entries.</p><p>Otherwise, in SmartPy, big maps behave much like maps:</p><ul><li>You can get, add, or update an element in a big map with the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">m</span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">...</span><span style="color:#89DDFF;">]</span></span></code></span> notation just lke maps.</li><li>You can use <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">del</span></span></code></span> to remove an element from a big map.</li><li>Big maps have some of the same methods as maps, including <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">()</span></span></code></span> and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">get_opt</span><span style="color:#89DDFF;">()</span></span></code></span>.</li><li>You can use <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">update_map</span></span></code></span> and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">get_and_update</span></span></code></span> to update big maps.</li></ul><p>However, they have these differences:</p><ul><li>To create a big map, you must use the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">big_map</span></span></code></span> function instead of using a literal value.</li><li>Big maps do not have these methods that maps have: <ul><li><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">items</span><span style="color:#89DDFF;">()</span></span></code></span></li><li><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">keys</span><span style="color:#89DDFF;">()</span></span></code></span></li><li><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">values</span><span style="color:#89DDFF;">()</span></span></code></span></li></ul></li><li>You cannot iterate over a big map or put one inside another big map.</li><li>You cannot get the length of a big map with <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">()</span></span></code></span>.</li></ul>`,9))]))}});export{b as __pageData,g as default};
