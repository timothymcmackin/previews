import{D as t}from"./chunks/DocFunction.e9a30d9e.js";import"./chunks/DocInPlace.vue_vue_type_style_index_0_scoped_8490fbaf_lang.4ed993c7.js";import{o as l,c as p,Q as e,C as o,y as i,v as a,a as s}from"./chunks/framework.741828c6.js";import"./chunks/DocFunction.vue_vue_type_style_index_0_scoped_21214205_lang.4ed993c7.js";const u=JSON.parse('{"title":"Contracts","description":"","frontmatter":{},"headers":[],"relativePath":"manual/syntax/contracts.md","filePath":"manual/syntax/contracts.md"}'),c={name:"manual/syntax/contracts.md"},f=Object.assign(c,{setup(r){return(d,n)=>(l(),p("div",null,[n[1]||(n[1]=e(`<h1 id="contracts" tabindex="-1">Contracts <a class="header-anchor" href="#contracts" aria-label="Permalink to &quot;Contracts&quot;">​</a></h1><p>A SmartPy contract is a Python class that inherits from <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">Contract</span></span></code></span>. They can contain any number of entrypoints, views, and auxiliary functions.</p><h2 id="example-contract" tabindex="-1">Example contract <a class="header-anchor" href="#example-contract" aria-label="Permalink to &quot;Example contract&quot;">​</a></h2><p>This example contract stores an integer and provides two entrypoints that allow users to add to or subtract from that integer. It also includes a test for the contract:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">import smartpy as sp</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def main():</span></span>
<span class="line"><span style="color:#babed8;">    class Counter(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self, initial_value: sp.int):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.value = initial_value</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        @sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">        def add(self, delta):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.value += delta</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        @sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">        def sub(self, delta):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.value -= delta</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">@sp.add_test()</span></span>
<span class="line"><span style="color:#babed8;">def test():</span></span>
<span class="line"><span style="color:#babed8;">    scenario = sp.test_scenario(&quot;counter_test&quot;, main)</span></span>
<span class="line"><span style="color:#babed8;">    contract = main.Counter(4)</span></span>
<span class="line"><span style="color:#babed8;">    scenario += contract</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    contract.add(5)</span></span>
<span class="line"><span style="color:#babed8;">    contract.sub(3)</span></span>
<span class="line"><span style="color:#babed8;">    scenario.verify(contract.data.value == 6)</span></span></code></pre></div><h2 id="storage" tabindex="-1">Storage <a class="header-anchor" href="#storage" aria-label="Permalink to &quot;Storage&quot;">​</a></h2><p>Smart contracts can have any number of storage fields. Only the execution of the contract&#39;s entrypoints and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">()</span></span></code></span> method can change the value of these fields.</p><p>Most contracts use an <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">()</span></span></code></span> method to initialise the contract storage. All storage fields must be initialised in this function; entrypoints can modify the storage but cannot add storage fields that were not initialised.</p><p>To initalise the contract storage, assign fields to the variable <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span></span></code></span>, as in this example:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">class A(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">    def __init__(self):</span></span>
<span class="line"><span style="color:#babed8;">        self.data.x = 0</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    @sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">    def set_x(self, x):</span></span>
<span class="line"><span style="color:#babed8;">        self.data.x = x</span></span></code></pre></div><p>To make the contents of the contract storage clear, you can cast the storage parameters to a type, as in this example:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def main():</span></span>
<span class="line"><span style="color:#babed8;">    storage: type = sp.record(</span></span>
<span class="line"><span style="color:#babed8;">        nat_value=sp.nat,</span></span>
<span class="line"><span style="color:#babed8;">        int_value=sp.int,</span></span>
<span class="line"><span style="color:#babed8;">        string_value=sp.string,</span></span>
<span class="line"><span style="color:#babed8;">    )</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    class B(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self, param):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.nat_value = 0</span></span>
<span class="line"><span style="color:#babed8;">            self.data.int_value = param.int_value</span></span>
<span class="line"><span style="color:#babed8;">            self.data.string_value = param.string_value</span></span>
<span class="line"><span style="color:#babed8;">            sp.cast(self.data, storage)</span></span></code></pre></div><p>This <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">()</span></span></code></span> method becomes the constructor to create an instance of the contract. In this way, you can use the method to pass storage values when you create an instance of the contract or deploy the contract, as in this example:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def main():</span></span>
<span class="line"><span style="color:#babed8;">    class A(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self, int_value: sp.int, string_value: sp.string):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.int_value = int_value</span></span>
<span class="line"><span style="color:#babed8;">            self.data.string_value = string_value</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">@sp.add_test()</span></span>
<span class="line"><span style="color:#babed8;">def test():</span></span>
<span class="line"><span style="color:#babed8;">    scenario = sp.test_scenario(&quot;A&quot;, main)</span></span>
<span class="line"><span style="color:#babed8;">    contract = main.A(12, &quot;Hello!&quot;)</span></span>
<span class="line"><span style="color:#babed8;">    scenario += contract</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    scenario.verify(contract.data.int_value == 12)</span></span>
<span class="line"><span style="color:#babed8;">    scenario.verify(contract.data.string_value == &quot;Hello!&quot;)</span></span></code></pre></div><p>The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">()</span></span></code></span> method can be declared with an <a href="/previews/smartpy/tutorials/manual/data-types/effects">effects</a> specification using the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">init_effects</span></span></code></span> decorator.</p><p>Entrypoints and views can access values from storage with the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">self</span></span></code></span> object, which is their first parameter. This object has two fields:</p><ul><li><p><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span></span></code></span>: A variable that provides access to the values in the contract storage. You can set initial values in the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">()</span></span></code></span> method and access and change them in entrypoints, as in this example:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">import smartpy as sp</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def main():</span></span>
<span class="line"><span style="color:#babed8;">    class MyContract(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self, int_value: sp.int, string_value: sp.string):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.int_value = int_value</span></span>
<span class="line"><span style="color:#babed8;">            self.data.string_value = string_value</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        @sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">        def changeValues(self, newInt, newString):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.int_value = newInt</span></span>
<span class="line"><span style="color:#babed8;">            self.data.string_value = newString</span></span></code></pre></div></li><li><p><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">private</span></span></code></span>: A variable that provides access to constants and private lambdas.</p><p>Constants behave like the storage values in <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span></span></code></span> but only the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">()</span></span></code></span> method can set them. They are read-only to all other code.</p></li></ul><h3 id="metadata" tabindex="-1">Metadata <a class="header-anchor" href="#metadata" aria-label="Permalink to &quot;Metadata&quot;">​</a></h3><p>Contracts can have metadata that provides descriptive information about them to wallets, explorers, dApps, and other off-chain applications. Contract metadata is stored off-chain and therefore on-chain applications including smart contracts cannot access it. To store data off-chain in a decentralized way, many Tezos developers use <a href="https://ipfs.tech/" target="_blank" rel="noreferrer">IPFS</a>.</p><p>The primary Tezos standard for metadata is <a href="https://gitlab.com/tezos/tzip/-/blob/master/proposals/tzip-16/tzip-16.md" target="_blank" rel="noreferrer">TZIP-016 (Tezos Metadata Standard)</a>.</p><p>Contracts store a link to their metadata in a <a href="/previews/smartpy/tutorials/manual/data-types/lists-sets-and-maps#big-maps">big map</a> of type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">big_map</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">string</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">bytes</span><span style="color:#89DDFF;">]</span></span></code></span>. This big map is stored in a variable named <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">metadata</span></span></code></span> in the contract storage. This big map always contains the empty key <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">&quot;&quot;</span></span></code></span> and its value is an encoded URI that points to a JSON document.</p><p>SmartPy includes tools to help you create standard-compliant metadata and store it in IPFS. You create and publish contract metadata in a test scenario; see <a href="/previews/smartpy/tutorials/manual/scenarios/metadata">Creating and publishing metadata</a>.</p><h2 id="inheritance" tabindex="-1">Inheritance <a class="header-anchor" href="#inheritance" aria-label="Permalink to &quot;Inheritance&quot;">​</a></h2><p>Contracts can inherit from each other as a superclass using the ordinary Python syntax:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">class A(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">    def __init__(self, x):</span></span>
<span class="line"><span style="color:#babed8;">        self.data.x = x</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">class B(A):</span></span>
<span class="line"><span style="color:#babed8;">    def __init__(self, x, y):</span></span>
<span class="line"><span style="color:#babed8;">        A.__init__(self, x)</span></span>
<span class="line"><span style="color:#babed8;">        self.data.y = y</span></span></code></pre></div><h3 id="inheritance-order" tabindex="-1">Inheritance order <a class="header-anchor" href="#inheritance-order" aria-label="Permalink to &quot;Inheritance order&quot;">​</a></h3><p>Attributes are first searched for in the current class. If not found, the search moves to parent classes. This is left-to-right, depth-first.</p><h3 id="initialization-order" tabindex="-1">Initialization order <a class="header-anchor" href="#initialization-order" aria-label="Permalink to &quot;Initialization order&quot;">​</a></h3><p>In SmartPy you must call the superclass&#39;s <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">()</span></span></code></span> method explicitly.</p><p>The order of initialization in SmartPy follows the order in which the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">()</span></span></code></span> methods are called and the sequence in which fields are set. If a field is assigned multiple times during initialization, the last assignment is what determines the field&#39;s final value.</p><h2 id="passing-parameters" tabindex="-1">Passing parameters <a class="header-anchor" href="#passing-parameters" aria-label="Permalink to &quot;Passing parameters&quot;">​</a></h2><p>Just like ordinary Python functions, you can define any number of parameters on SmartPy functions. However, the way callers pass those parameters is different depending on the number of parameters.</p><p>If a function accepts a single parameter, you can pass a literal value. For example, this contract has an entrypoint that accepts a single number as a parameter and sets its storage to the square of that number:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def main():</span></span>
<span class="line"><span style="color:#babed8;">    class Calculator(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.value = 0</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        @sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">        def setSquare(self, a):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.value = a * a</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">@sp.add_test()</span></span>
<span class="line"><span style="color:#babed8;">def test():</span></span>
<span class="line"><span style="color:#babed8;">    scenario = sp.test_scenario(&quot;Calculator&quot;, main)</span></span>
<span class="line"><span style="color:#babed8;">    contract = main.Calculator()</span></span>
<span class="line"><span style="color:#babed8;">    scenario += contract</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    # There is one parameter, so pass a single value</span></span>
<span class="line"><span style="color:#babed8;">    contract.square(4)</span></span>
<span class="line"><span style="color:#babed8;">    scenario.verify(contract.data.value == 16)</span></span></code></pre></div><p>If a function accepts multiple parameters, you pass them as a record. For example, this contract has an entrypoint that has two named parameters. To call it, the test code passes a record with two fields, one for each named parameter:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def main():</span></span>
<span class="line"><span style="color:#babed8;">    class Calculator(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.value = 0</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        @sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">        def multiply(self, a, b):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.value = a * b</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">@sp.add_test()</span></span>
<span class="line"><span style="color:#babed8;">def test():</span></span>
<span class="line"><span style="color:#babed8;">    scenario = sp.test_scenario(&quot;Calculator&quot;, main)</span></span>
<span class="line"><span style="color:#babed8;">    contract = main.Calculator()</span></span>
<span class="line"><span style="color:#babed8;">    scenario += contract</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    # There are multiple parameters, so pass a record</span></span>
<span class="line"><span style="color:#babed8;">    contract.multiply(a=5, b=6)</span></span>
<span class="line"><span style="color:#babed8;">    scenario.verify(contract.data.value == 30)</span></span></code></pre></div><p>If the function is within a SmartPy module, such as an auxiliary function, you must explicitly pass a record, as in this example:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def main():</span></span>
<span class="line"><span style="color:#babed8;">    def addInts(a, b):</span></span>
<span class="line"><span style="color:#babed8;">        sp.cast(a, sp.int)</span></span>
<span class="line"><span style="color:#babed8;">        return a + b</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    class Calculator(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.value = 0</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        @sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">        def add(self, a, b):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.value = addInts(sp.record(a=a, b=b))</span></span></code></pre></div><p>These rules apply to all functions in a SmartPy module, including auxiliary functions, entrypoints, and views.</p><h2 id="auxiliary-functions" tabindex="-1">Auxiliary functions <a class="header-anchor" href="#auxiliary-functions" aria-label="Permalink to &quot;Auxiliary functions&quot;">​</a></h2><p>Modules can contain auxiliary functions that you can use in contracts, as in this example:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def main():</span></span>
<span class="line"><span style="color:#babed8;">    def multiply(a, b):</span></span>
<span class="line"><span style="color:#babed8;">        return a * b</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    class C(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">        @sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">        def ep(self):</span></span>
<span class="line"><span style="color:#babed8;">            assert multiply(a=4, b=5) == 20</span></span></code></pre></div><p>Auxiliary functions can be declared with an <a href="/previews/smartpy/tutorials/manual/data-types/effects">effects</a> specification using the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">effects</span></span></code></span> decorator.</p><h2 id="entrypoints" tabindex="-1">Entrypoints <a class="header-anchor" href="#entrypoints" aria-label="Permalink to &quot;Entrypoints&quot;">​</a></h2><p>Contracts can have any number of entrypoints, each decorated as <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">entrypoint</span></span></code></span>. Each entrypoint receives the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">self</span></span></code></span> variable as the first parameter, which provides access to the storage in the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span></span></code></span> and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">private</span></span></code></span> records. Just like ordinary Python functions, you can define any number of other parameters on entrypoints.</p><p>Entrypoints can change values in the contract&#39;s storage but they cannot return a value.</p><p>An entrypoint may run logic based on:</p><ul><li>The contract storage</li><li>The parameters that senders pass</li><li>Transaction context values such as <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">balance</span></span></code></span> and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">sender</span></span></code></span></li><li>The table of constants</li></ul><p>Entrypoints cannot access information outside of Tezos, such as calling external APIs. If an entrypoint needs information from outside Tezos it must use oracles; see <a href="https://docs.tezos.com/smart-contracts/oracles" target="_blank" rel="noreferrer">Oracles</a> on docs.tezos.com and <a href="https://opentezos.com/smart-contracts/oracles/" target="_blank" rel="noreferrer">Using and trusting Oracles</a> on opentezos.com.</p><p>Entrypoints have default <a href="/previews/smartpy/tutorials/manual/data-types/effects">effects</a> for allowing changes to the contract storage, raising exceptions, permitting mutez calculations that may overflow or underflow and emitting new operations that are run after the entrypoint completes.</p><p>The default effect values can be changed by <a href="/previews/smartpy/tutorials/manual/data-types/effects#changing-the-default-effects">changing the appropriate fields</a> in the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">entrypoint</span></span></code></span> decorator.</p><p>An entrypoint can call other entrypoints in its contract or entrypoints in other contracts.</p><p>For example, this contract has a single entrypoint that sets the value of a field in the contract storage:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">class A(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">    def __init__(self):</span></span>
<span class="line"><span style="color:#babed8;">        self.data.x = 0</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    @sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">    def set_x(self, x):</span></span>
<span class="line"><span style="color:#babed8;">        self.data.x = x</span></span></code></pre></div><h2 id="views" tabindex="-1">Views <a class="header-anchor" href="#views" aria-label="Permalink to &quot;Views&quot;">​</a></h2><p>Views are a way for contracts to expose information to other contracts and to off-chain consumers.</p><p>A view is similar to an entrypoint, with a few differences:</p><ul><li>Views return a value.</li><li>Calls to views are synchronous, which means that contracts can call views and use the returned values immediately. In other words, calling a view doesn&#39;t produce a new operation. The call to the view runs immediately and the return value can be used in the next instruction.</li><li>Calling a view doesn&#39;t have any effect other than returning that value or raising an exception. In particular, it doesn&#39;t modify the storage of its contract and doesn&#39;t generate any operations.</li><li>Views do not include the transfer of any tez and calling them does not require any fees.</li></ul><p>There are two kinds of views:</p><ul><li>On-chain views have code in the smart contract itself</li><li>Off-chain views have code in an off-chain metadata file</li></ul><p>Views have default <a href="/previews/smartpy/tutorials/manual/data-types/effects">effects</a> for reading the contract storage, raising exceptions, permitting mutez calculations that may overflow or underflow. Views are not allowed to write to storage or emit operations.</p><p>The default effect values can be changed by <a href="/previews/smartpy/tutorials/manual/data-types/effects#changing-the-default-effects">changing the appropriate fields</a> in the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onchain_view</span></span></code></span> or <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">offchain_view</span></span></code></span> decorators.</p><h3 id="creating-views" tabindex="-1">Creating views <a class="header-anchor" href="#creating-views" aria-label="Permalink to &quot;Creating views&quot;">​</a></h3><p>The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onchain_view</span></span></code></span> annotation creates an on-chain view. For example, this contract has a view that returns a value from a big map in storage:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def main():</span></span>
<span class="line"><span style="color:#babed8;">    storage_type: type = sp.big_map[sp.address, sp.nat]</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    class MyContract(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self):</span></span>
<span class="line"><span style="color:#babed8;">            # Start with an empty big map</span></span>
<span class="line"><span style="color:#babed8;">            self.data = sp.big_map()</span></span>
<span class="line"><span style="color:#babed8;">            sp.cast(self.data, storage_type)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        @sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">        def add(self, addr, value):</span></span>
<span class="line"><span style="color:#babed8;">            # Add or update an element in the big map</span></span>
<span class="line"><span style="color:#babed8;">            currentVal = self.data.get(addr, default=0)</span></span>
<span class="line"><span style="color:#babed8;">            self.data[addr] = currentVal + value</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        @sp.onchain_view</span></span>
<span class="line"><span style="color:#babed8;">        def getValue(self, addr):</span></span>
<span class="line"><span style="color:#babed8;">            # Get a value from the big map</span></span>
<span class="line"><span style="color:#babed8;">            return self.data.get(addr, default=0)</span></span></code></pre></div><p>The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">offchain_view</span></span></code></span> annotation creates an off-chain view. The code of an off-chain view can be the same as an on-chain view, but to enable it you must publish its code to an external source such as IPFS. See <a href="/previews/smartpy/tutorials/manual/scenarios/metadata">Creating and publishing metadata</a>.</p><p>Views can&#39;t return values before the end of their code; they must return values as their last command. For example, this code is not valid because it could return from more than one place in the code, even though the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">return</span></span></code></span> statements are close to each other:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">if a &gt; b:</span></span>
<span class="line"><span style="color:#babed8;">    return a  # Error: &#39;return&#39; in non-terminal position.</span></span>
<span class="line"><span style="color:#babed8;">return b</span></span></code></pre></div><p>Instead, the compiler needs a single end block that returns a value, as in the previous example.</p><h3 id="calling-views" tabindex="-1">Calling views <a class="header-anchor" href="#calling-views" aria-label="Permalink to &quot;Calling views&quot;">​</a></h3>`,70)),o(t,{name:"sp.view",arg:"view_name, address: sp.address, arg: t, return_type: type",rType:"sp.option[return_type]"},{default:i(()=>n[0]||(n[0]=[a("p",null,[s("Calls the view "),a("span",{class:"inline shiki material-theme-palenight"},[a("code",null,[a("span",{class:"line"},[a("span",{style:{color:"#BABED8"}},"view_name")])])]),s(" on "),a("span",{class:"inline shiki material-theme-palenight"},[a("code",null,[a("span",{class:"line"},[a("span",{style:{color:"#BABED8"}},"address")])])]),s(" giving the argument "),a("span",{class:"inline shiki material-theme-palenight"},[a("code",null,[a("span",{class:"line"},[a("span",{style:{color:"#BABED8"}},"arg")])])]),s(" and expected return type "),a("span",{class:"inline shiki material-theme-palenight"},[a("code",null,[a("span",{class:"line"},[a("span",{style:{color:"#BABED8"}},"return_type")])])]),s(". Returns "),a("span",{class:"inline shiki material-theme-palenight"},[a("code",null,[a("span",{class:"line"},[a("span",{style:{color:"#89DDFF"}},"None")])])]),s(" if no view exists for the given elements and "),a("span",{class:"inline shiki material-theme-palenight"},[a("code",null,[a("span",{class:"line"},[a("span",{style:{color:"#BABED8"}},"sp"),a("span",{style:{color:"#89DDFF"}},"."),a("span",{style:{color:"#82AAFF"}},"Some"),a("span",{style:{color:"#89DDFF"}},"("),a("span",{style:{color:"#82AAFF"}},"return_type"),a("span",{style:{color:"#89DDFF"}},")")])])]),s(" value.")],-1),a("p",null,[s("The "),a("span",{class:"inline shiki material-theme-palenight"},[a("code",null,[a("span",{class:"line"},[a("span",{style:{color:"#BABED8"}},"view_name")])])]),s(" parameter must be a constant string.")],-1),a("p",null,"For example:",-1),a("div",{class:"language-smartpy"},[a("button",{title:"Copy Code",class:"copy"}),a("span",{class:"lang"},"smartpy"),a("pre",{class:"shiki material-theme-palenight"},[a("code",null,[a("span",{class:"line"},[a("span",{style:{color:"#babed8"}},'x = sp.view("get_larger", sp.self_address, sp.record(a=a, b=b), sp.int).unwrap_some()')])])])],-1)])),_:1}),n[2]||(n[2]=e(`<div class="info custom-block"><p class="custom-block-title">The method that calls a view will be required to have</p><p><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">with_exceptions=</span><span style="color:#89DDFF;">True,</span><span style="color:#BABED8;"> with_mutez_overflow=</span><span style="color:#89DDFF;">True,</span><span style="color:#BABED8;"> with_mutez_underflow=</span><span style="color:#89DDFF;">True)</span></span></code></span>.</p></div><h2 id="private-functions" tabindex="-1">Private functions <a class="header-anchor" href="#private-functions" aria-label="Permalink to &quot;Private functions&quot;">​</a></h2><p>Contracts can contain private functions that can be used in entrypoints and views of the same contract, as in this example:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def main():</span></span>
<span class="line"><span style="color:#babed8;">    class C(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">        @sp.private</span></span>
<span class="line"><span style="color:#babed8;">        def multiply(self, a, b):</span></span>
<span class="line"><span style="color:#babed8;">            return a * b</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        @sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">        def ep(self):</span></span>
<span class="line"><span style="color:#babed8;">            assert self.multiply(a=4, b=5) == 20</span></span></code></pre></div><p>Each private method has access to the <a href="#the-self-object">self</a> object and can be declared with an <a href="/previews/smartpy/tutorials/manual/data-types/effects">effects</a> specification using the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">effects</span></span></code></span> decorator.</p><h2 id="order-of-operations" tabindex="-1">Order of operations <a class="header-anchor" href="#order-of-operations" aria-label="Permalink to &quot;Order of operations&quot;">​</a></h2><p>When entrypoints call auxiliary functions or views, those calls run synchronously; the code of the entrypoint pauses, waits for the response, and continues.</p><p>However, if an entrypoint creates operations, such as a transfer of tez or a call to another entrypoint, even an entrypoint in the same contract, those operations run only after the entrypoint code completes.</p><p>For more information, see <a href="/previews/smartpy/tutorials/manual/data-types/operations">Operations</a> and <a href="https://docs.tezos.com/smart-contracts/logic/operations" target="_blank" rel="noreferrer">Operations</a> on docs.tezos.com.</p><h2 id="the-self-object" tabindex="-1">The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">self</span></span></code></span> object <a class="header-anchor" href="#the-self-object" aria-label="Permalink to &quot;The \`self\` object&quot;">​</a></h2><p>Each method inside a contract receives the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">self</span></span></code></span> object as its first parameter. This object has two fields:</p><ul><li><p><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span></span></code></span>: A record that provides access to the contract storage. You can set initial values in the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">()</span></span></code></span> method and access and change them in entrypoints, as in this example:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">import smartpy as sp</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def main():</span></span>
<span class="line"><span style="color:#babed8;">    class MyContract(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self, intValue: sp.int, stringValue: sp.string):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.intValue = intValue</span></span>
<span class="line"><span style="color:#babed8;">            self.data.stringValue = stringValue</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        @sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">        def changeValues(self, newInt, newString):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.intValue = newInt</span></span>
<span class="line"><span style="color:#babed8;">            self.data.stringValue = newString</span></span></code></pre></div></li><li><p><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">private</span></span></code></span>: A record that provides access to constants and private lambdas.</p><p>Constants behave like the storage fields in <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span></span></code></span> but only the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">()</span></span></code></span> method can set them. They are read-only to all other methods.</p></li></ul><h2 id="transaction-variables" tabindex="-1">Transaction variables <a class="header-anchor" href="#transaction-variables" aria-label="Permalink to &quot;Transaction variables&quot;">​</a></h2><p>Entrypoints, views, and utility functions in contracts have access to variables that provide information about the current transaction and current state of the network. The contract&#39;s <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">()</span></span></code></span> function does not have access to these variables.</p><p>For example, to require that calls to an entrypoint include a certain amount of tez, check the value of <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">amount</span></span></code></span>, as in this entrypoint:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">def ep_receive(self):</span></span>
<span class="line"><span style="color:#babed8;">    assert sp.amount == 5</span></span>
<span class="line"><span style="color:#babed8;">    # ...</span></span></code></pre></div><p>As described in <a href="/previews/smartpy/tutorials/manual/scenarios/testing_contracts">Testing contracts</a>, you can set the value of these variables for each contract call.</p><table><thead><tr><th>Variable</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">amount</span></span></code></span></td><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mutez</span></span></code></span></td><td>The amount of tez that was sent with the transaction</td></tr><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">balance</span></span></code></span></td><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mutez</span></span></code></span></td><td>The amount of tez in the contract&#39;s balance</td></tr><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">chain_id</span></span></code></span></td><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">chain_id</span></span></code></span></td><td>The chain ID</td></tr><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">level</span></span></code></span></td><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">int</span></span></code></span></td><td>The current level, which is the number of the block that contains this transaction</td></tr><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">now</span></span></code></span></td><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">timestamp</span></span></code></span></td><td>The time that the current block was created, based on the clock of the baker that created the block</td></tr><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">sender</span></span></code></span></td><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">address</span></span></code></span></td><td>The immediate account that sent the current operation to the contract</td></tr><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">source</span></span></code></span></td><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">address</span></span></code></span></td><td>The account that initiated the chain of operations that led to the contract</td></tr><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">self_address</span></span></code></span></td><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">address</span></span></code></span></td><td>The address of the current contract</td></tr><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">total_voting_power</span></span></code></span></td><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">int</span></span></code></span></td><td>The total amount of tez that is staked by bakers</td></tr></tbody></table><h2 id="compiling-contracts" tabindex="-1">Compiling contracts <a class="header-anchor" href="#compiling-contracts" aria-label="Permalink to &quot;Compiling contracts&quot;">​</a></h2><p>To compile a SmartPy contract, make sure that SmartPy is installed as described in <a href="/previews/smartpy/tutorials/manual/introduction/installation">Installation</a>. Then, run the command <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">python path</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">to</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">contract</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">py</span></span></code></span>, where <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">path</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">to</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">contract</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">py</span></span></code></span> is the path to your contract. For more information, see <a href="/previews/smartpy/tutorials/manual/compilation/compiling">Compiling contracts</a>.</p>`,20))]))}});export{u as __pageData,f as default};
