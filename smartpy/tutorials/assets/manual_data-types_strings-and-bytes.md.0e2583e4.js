import{D as l}from"./chunks/DocFunction.e9a30d9e.js";import{o,c as i,Q as p,C as n,y as t,v as s,a}from"./chunks/framework.741828c6.js";import"./chunks/DocFunction.vue_vue_type_style_index_0_scoped_21214205_lang.4ed993c7.js";const m=JSON.parse('{"title":"Strings and bytes","description":"","frontmatter":{},"headers":[],"relativePath":"manual/data-types/strings-and-bytes.md","filePath":"manual/data-types/strings-and-bytes.md"}'),r={name:"manual/data-types/strings-and-bytes.md"},d=Object.assign(r,{setup(c){return(y,e)=>(o(),i("div",null,[e[10]||(e[10]=p('<h1 id="strings-and-bytes" tabindex="-1">Strings and bytes <a class="header-anchor" href="#strings-and-bytes" aria-label="Permalink to &quot;Strings and bytes&quot;">​</a></h1><h2 id="strings" tabindex="-1">Strings <a class="header-anchor" href="#strings" aria-label="Permalink to &quot;Strings&quot;">​</a></h2><p>The SmartPy type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">string</span></span></code></span> represents strings. Characters are restricted to the printable subset of 7-bit ASCII.</p><p>String literals are written in quotes; for example, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">&quot;</span><span style="color:#676E95;font-style:italic;">abc</span><span style="color:#89DDFF;font-style:italic;">&quot;</span></span></code></span> is a literal of type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">string</span></span></code></span>.</p><p>Both strings and bytes can be concatenated with <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">+</span></span></code></span>, as in <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">&quot;</span><span style="color:#676E95;font-style:italic;">ab</span><span style="color:#89DDFF;font-style:italic;">&quot;</span> <span style="color:#89DDFF;">+</span> <span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&quot;</span> <span style="color:#89DDFF;">==</span> <span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&quot;</span></span></code></span>.</p>',5)),n(l,{name:"sp.slice",arg:"offset: sp.nat, length: sp.nat, s: sp.string",rType:"sp.option[sp.string]"},{default:t(()=>e[0]||(e[0]=[s("p",null,[a("Extracts a substring from "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"s")])])]),a(", starting at "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"offset")])])]),a(" (0 referring to the first character) and of length "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"length")])])]),a(" and returns an option type. If the result is in bounds, the result is wrapped in "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"Some")])])]),a(", otherwise "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"None")])])]),a(" is returned.")],-1),s("p",null,[a("For example, "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"slice"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#F78C6C"}},"3"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#F78C6C"}},"5"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#C3E88D"}},"0123456789"),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#89DDFF"}},")"),a(" "),s("span",{style:{color:"#89DDFF"}},"=="),s("span",{style:{color:"#BABED8"}}," sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"Some"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#C3E88D"}},"34567"),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#89DDFF"}},")")])])]),a(" and "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"slice"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#F78C6C"}},"3"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#F78C6C"}},"5"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#C3E88D"}},"01234"),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#89DDFF"}},")"),a(" "),s("span",{style:{color:"#89DDFF"}},"=="),a(" "),s("span",{style:{color:"#89DDFF"}},"None")])])]),a(".")],-1)])),_:1}),n(l,{name:"sp.concat",arg:"xs: sp.list[sp.string]",rType:"sp.string"},{default:t(()=>e[1]||(e[1]=[s("p",null,[s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"concat")])])]),a(" concatenates a list of strings, for example:")],-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},'assert sp.concat(["ab", "cd", "ef"]) == "abcdef"')])])])],-1)])),_:1}),e[11]||(e[11]=p('<h2 id="bytes" tabindex="-1">Bytes <a class="header-anchor" href="#bytes" aria-label="Permalink to &quot;Bytes&quot;">​</a></h2><p>The type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">bytes</span></span></code></span> represents sequences of bytes.</p><p>Byte literals are written in hexadecimal notation; for example, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bytes</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0x100a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></span> refers to a two-byte sequence.</p>',3)),n(l,{name:"sp.slice",arg:"offset: sp.nat, length: sp.nat, s: sp.bytes",rType:"sp.option[sp.bytes]"},{default:t(()=>e[2]||(e[2]=[s("p",null,[a("Extracts a subsequence of bytes from "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"s")])])]),a(", starting at "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"offset")])])]),a(" ("),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F78C6C"}},"0")])])]),a(" referring to the first character) and of length "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"length")])])]),a(". If the result is in bounds, the result is wrapped in "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"Some")])])]),a(", otherwise "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"None")])])]),a(" is returned.")],-1),s("p",null,[a("For example "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"slice"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#F78C6C"}},"3"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#F78C6C"}},"5"),s("span",{style:{color:"#89DDFF"}},","),s("span",{style:{color:"#82AAFF"}}," sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"bytes"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#C3E88D"}},"0x00010203040506070809"),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#89DDFF"}},"))"),a(" "),s("span",{style:{color:"#89DDFF"}},"=="),s("span",{style:{color:"#BABED8"}}," sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"Some"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#82AAFF"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"bytes"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#C3E88D"}},"0x0304050607"),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#89DDFF"}},"))")])])]),a(" and "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"slice"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#F78C6C"}},"3"),s("span",{style:{color:"#89DDFF"}},","),a(" "),s("span",{style:{color:"#F78C6C"}},"5"),s("span",{style:{color:"#89DDFF"}},","),s("span",{style:{color:"#82AAFF"}}," sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"bytes"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#C3E88D"}},"0x0001020304"),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#89DDFF"}},"))"),a(" "),s("span",{style:{color:"#89DDFF"}},"=="),a(" "),s("span",{style:{color:"#89DDFF"}},"None")])])]),a(".")],-1)])),_:1}),n(l,{name:"sp.concat",arg:"xs: sp.list[sp.bytes]",rType:"sp.bytes"},{default:t(()=>e[3]||(e[3]=[s("p",null,[s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"concat")])])]),a(" concatenates a list of "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"bytes")])])]),a(", for example:")],-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},'assert sp.concat([sp.bytes("0xab"), sp.bytes("0xcd")]) == sp.bytes("0xabcd")')])])])],-1)])),_:1}),e[12]||(e[12]=p('<h3 id="bitwise-logic" tabindex="-1">Bitwise logic <a class="header-anchor" href="#bitwise-logic" aria-label="Permalink to &quot;Bitwise logic&quot;">​</a></h3><p>As of the Mumbai protocol upgrade, bitwise <em>and</em>, <em>or</em>, and <em>xor</em> operations are available as <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">and_bytes</span></span></code></span>, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">or_bytes</span></span></code></span>, and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">xor_bytes</span></span></code></span> on <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">bytes</span></span></code></span>:</p>',2)),n(l,{name:"sp.and_bytes",arg:"x: sp.bytes, y: sp.bytes",rType:"sp.bytes"}),n(l,{name:"sp.or_bytes",arg:"x: sp.bytes, y: sp.bytes",rType:"sp.bytes"}),n(l,{name:"sp.xor_bytes",arg:"x: sp.bytes, y: sp.bytes",rType:"sp.bytes"},{default:t(()=>e[4]||(e[4]=[s("p",null,[a('Performs the bitwise logical operations "and", "or", and "xor", respectively, on the arguments '),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"x")])])]),a(" and "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"y")])])]),a(", for example:")],-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},'assert sp.and_bytes(sp.bytes("0x2a"), sp.bytes("0x01")) == sp.bytes("0x00")')]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},'assert sp.or_bytes(sp.bytes("0x2a"), sp.bytes("0x01")) == sp.bytes("0x2b")')]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},'assert sp.xor_bytes(sp.bytes("0x2a"), sp.bytes("0x01")) == sp.bytes("0x2b")')])])])],-1)])),_:1}),n(l,{name:"sp.invert_bytes",arg:"x: sp.bytes",rType:"sp.bytes"},{default:t(()=>e[5]||(e[5]=[s("p",null,[a("Computes the "),s("a",{href:"https://en.wikipedia.org/wiki/Two%27s_complement",target:"_blank",rel:"noreferrer"},"two's complement"),a(" of "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"x")])])]),a(".")],-1)])),_:1}),e[13]||(e[13]=p('<h3 id="shifting" tabindex="-1">Shifting <a class="header-anchor" href="#shifting" aria-label="Permalink to &quot;Shifting&quot;">​</a></h3><p>Left and right shifts are also available as <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">lshift_bytes</span></span></code></span> and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">rshift_bytes</span></span></code></span> on <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">bytes</span></span></code></span>:</p>',2)),n(l,{name:"sp.lshift_bytes",arg:"x: sp.bytes, n: sp.nat",rType:"sp.bytes"},{default:t(()=>e[6]||(e[6]=[s("p",null,[s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"lshift_bytes")])])]),a(" shifts "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"x")])])]),a(" to the left by a given amount "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"n")])])]),a(", for example:")],-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},'assert sp.lshift_bytes(sp.bytes("0x2a"), sp.bytes("0x01")) == sp.bytes("0x54")')])])])],-1)])),_:1}),n(l,{name:"sp.rshift_bytes",arg:"x: sp.bytes, n: sp.nat",rType:"sp.bytes"},{default:t(()=>e[7]||(e[7]=[s("p",null,[s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"rshift_bytes")])])]),a(" shifts "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"x")])])]),a(" to the right by a given amount "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"n")])])]),a(", for example:")],-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},'assert sp.rshift_bytes(sp.bytes("0x2a"), sp.bytes("0x01")) == sp.bytes("0x15")')])])])],-1)])),_:1}),e[14]||(e[14]=p('<h2 id="packing-and-unpacking" tabindex="-1">Packing and unpacking <a class="header-anchor" href="#packing-and-unpacking" aria-label="Permalink to &quot;Packing and unpacking&quot;">​</a></h2><p>Packing is how Tezos serializes values and code to a sequence of bytes in an <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">bytes</span></span></code></span> value. For example, contract code is serialized when not in use to save space.</p><p>Packing and unpacking is also used to run operations on data, such as computing the hash of a Michelson value by packing it and then running a hash function.</p>',3)),n(l,{name:"sp.pack",arg:"t",rType:"sp.bytes"},{default:t(()=>e[8]||(e[8]=[s("p",null,[a("Packs a value, which obtains its "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"bytes")])])]),a(" representation.")],-1),s("p",null,[a("The type "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"t")])])]),a(" must be "),s("em",null,"packable"),a(", which means that it doesn't involve big maps, operations, sapling states, or tickets.")],-1)])),_:1}),n(l,{name:"sp.unpack",arg:"x: sp.bytes, t",rType:"sp.option[t]"},{default:t(()=>e[9]||(e[9]=[s("p",null,[a("Unpacks the "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"bytes")])])]),a(" representation "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"x")])])]),a(", assuming it represents a value of type "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"t")])])]),a(". Returns "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"None")])])]),a(" if "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"x")])])]),a(" does not represent a value of type "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"t")])])]),a(".")],-1)])),_:1}),e[15]||(e[15]=s("p",null,[a("For more information about packing and unpacking data, see "),s("a",{href:"https://docs.tezos.com/smart-contracts/serialization",target:"_blank",rel:"noreferrer"},"Serialization"),a(" on docs.tezos.com.")],-1))]))}});export{m as __pageData,d as default};
