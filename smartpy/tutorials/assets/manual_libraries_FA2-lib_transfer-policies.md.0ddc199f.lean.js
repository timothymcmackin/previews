import{_ as a,o as n,c as e,Q as l}from"./chunks/framework.741828c6.js";const h=JSON.parse('{"title":"Transfer policies","description":"","frontmatter":{},"headers":[],"relativePath":"manual/libraries/FA2-lib/transfer-policies.md","filePath":"manual/libraries/FA2-lib/transfer-policies.md"}'),t={name:"manual/libraries/FA2-lib/transfer-policies.md"};function p(o,s,i,r,c,d){return n(),e("div",null,s[0]||(s[0]=[l(`<h1 id="transfer-policies" tabindex="-1">Transfer policies <a class="header-anchor" href="#transfer-policies" aria-label="Permalink to &quot;Transfer policies&quot;">​</a></h1><p>By default, only the owner of a token and their designated operators can transfer tokens. The administrator account, if it is used, has no different transfer permissions than any other account.</p><p>You can change who can transfer tokens by setting a transfer policy. See <a href="https://gitlab.com/tezos/tzip/-/blob/master/proposals/tzip-12/permissions-policy.md" target="_blank" rel="noreferrer">tzip-12/permissions-policy.md</a> for detailed info about transfer policies in the FA2 standard.</p><p>The FA2 library provides the three standard policies and a non-standard one:</p><table><thead><tr><th>Policy</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">NoTransfer</span></span></code></span></td><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">&quot;</span><span style="color:#676E95;font-style:italic;">no-transfer</span><span style="color:#89DDFF;font-style:italic;">&quot;</span></span></code></span></td><td>Tokens cannot be transferred; any attempt to transfer tokens raises an <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">FA2_TX_DENIED</span></span></code></span> exception.</td></tr><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">OwnerTransfer</span></span></code></span></td><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">&quot;</span><span style="color:#676E95;font-style:italic;">owner-transfer</span><span style="color:#89DDFF;font-style:italic;">&quot;</span></span></code></span></td><td>Only owners can transfer their tokens; operators cannot transfer tokens.</td></tr><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">OwnerOrOperatorTransfer</span></span></code></span> (default)</td><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">&quot;</span><span style="color:#676E95;font-style:italic;">owner-or-operator-transfer</span><span style="color:#89DDFF;font-style:italic;">&quot;</span></span></code></span></td><td>Owner or operators of the owner can transfer tokens. Only owner can change their operators.</td></tr><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">PauseOwnerOrOperatorTransfer</span></span></code></span></td><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">&quot;</span><span style="color:#676E95;font-style:italic;">pauseable-owner-or-operator-transfer</span><span style="color:#89DDFF;font-style:italic;">&quot;</span></span></code></span></td><td>Equivalent to <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">OwnerOrOperatorTransfer</span></span></code></span> on which it adds the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">set_pause</span></span></code></span> entrypoint. The administrator can use this entrypoint to pause any use of the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">transfer</span></span></code></span> and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">update_operator</span></span></code></span> entrypoints. This policy requires the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">admin</span></span></code></span> mixin.</td></tr></tbody></table><h2 id="setting-the-transfer-policy" tabindex="-1">Setting the transfer policy <a class="header-anchor" href="#setting-the-transfer-policy" aria-label="Permalink to &quot;Setting the transfer policy&quot;">​</a></h2><p>In SmartPy the order in which superclasses are listed is important. Therefore you must list the transfer policy in the correct place.</p><p>You must inherit the transfer policy after the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">Admin</span></span></code></span> mixin (if it is used) and before the the <a href="./base_classes">base classes</a>. Then you must call the policy&#39;s <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">()</span></span></code></span> method before the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">Admin</span></span></code></span> mixin&#39;s <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">()</span></span></code></span> method and after the base classes, as in this example:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def main():</span></span>
<span class="line"><span style="color:#babed8;">    class MyNftContract(</span></span>
<span class="line"><span style="color:#babed8;">        main.Admin,</span></span>
<span class="line"><span style="color:#babed8;">        main.PauseOwnerOrOperatorTransfer,</span></span>
<span class="line"><span style="color:#babed8;">        main.Nft,</span></span>
<span class="line"><span style="color:#babed8;">        main.BurnNft,</span></span>
<span class="line"><span style="color:#babed8;">        main.MintNft,</span></span>
<span class="line"><span style="color:#babed8;">    ):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self, admin_address, contract_metadata, ledger, token_metadata):</span></span>
<span class="line"><span style="color:#babed8;">            main.MintNft.__init__(self)</span></span>
<span class="line"><span style="color:#babed8;">            main.BurnNft.__init__(self)</span></span>
<span class="line"><span style="color:#babed8;">            main.Nft.__init__(self, contract_metadata, ledger, token_metadata)</span></span>
<span class="line"><span style="color:#babed8;">            main.PauseOwnerOrOperatorTransfer.__init__(self)</span></span>
<span class="line"><span style="color:#babed8;">            main.Admin.__init__(self, admin_address)</span></span></code></pre></div><p>For more information about ordering, see <a href="./mixins">Mixins</a>.</p><h2 id="writing-a-custom-policy" tabindex="-1">Writing a custom policy <a class="header-anchor" href="#writing-a-custom-policy" aria-label="Permalink to &quot;Writing a custom policy&quot;">​</a></h2><p>You can write your own policy by creating a class that respects the following interface.</p><ul><li><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">private</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">policy</span></span></code></span>: A record with general information about the security policy, containing these fields: <ul><li><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">name</span></span></code></span>: A name for the policy, which is added to the contract metadata</li><li><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">supports_operator</span></span></code></span>: Set to <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">True</span></span></code></span> if operators can transfer tokens</li><li><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">supports_transfer</span></span></code></span>: Set to <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">True</span></span></code></span> if anyone can transfer tokens</li></ul></li><li><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">check_tx_transfer_permissions_</span></span></code></span>: A method that runs for each batch in a transfer request and raises an exception to block the transfer</li><li><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">check_operator_update_permissions_</span></span></code></span>: A method that runs each time operators are changed and raises an exception to block the change</li><li><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">is_operator</span></span></code></span>: A method that runs each time operator permissions are checked and returns <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">False</span></span></code></span> to block the transfer or <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">True</span></span></code></span> to allow it</li></ul><p>For example, this security policy allows only certain tokens to be transferred:</p><ul><li>The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">()</span></span></code></span> method sets data about transfers and operators in the contract storage: <ul><li>It creates a set of token IDs that can be transferred</li><li>It creates a set of token IDs that can be transferred by operators</li><li>It sets a global operator that can transfer any token</li></ul></li><li>The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">check_tx_transfer_permissions_</span><span style="color:#89DDFF;">()</span></span></code></span> method raises an exception if an operation tries to transfer a token that is not in the set of tokens that can be transferred</li><li>The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">check_operator_update_permissions_</span><span style="color:#89DDFF;">()</span></span></code></span> method raises an exception if an operation tries to set an operator for a token that is not in the set of tokens that can be transferred by operators</li><li>The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">is_operator_</span><span style="color:#89DDFF;">()</span></span></code></span> method returns true if the account that submitted the operation is an operator or the global operator</li></ul><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">import smartpy as sp</span></span>
<span class="line"><span style="color:#babed8;">from smartpy.templates import fa2_lib as fa2</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">t = fa2.t</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def myPolicies():</span></span>
<span class="line"><span style="color:#babed8;">    import t</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    class MyPolicy(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self, global_operator):</span></span>
<span class="line"><span style="color:#babed8;">            # Use this method to set the fields in the self.private.policy</span></span>
<span class="line"><span style="color:#babed8;">            # and to set any other values that the class needs to refer to in its methods</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">            self.private.policy = sp.record(</span></span>
<span class="line"><span style="color:#babed8;">                # Name of your policy, added to the contract metadata.</span></span>
<span class="line"><span style="color:#babed8;">                name=&quot;your-policy-name&quot;,</span></span>
<span class="line"><span style="color:#babed8;">                # Set to True if operators can transfer tokens</span></span>
<span class="line"><span style="color:#babed8;">                supports_operator=True,</span></span>
<span class="line"><span style="color:#babed8;">                # Set to False to prevent all token transfers</span></span>
<span class="line"><span style="color:#babed8;">                supports_transfer=True,</span></span>
<span class="line"><span style="color:#babed8;">            )</span></span>
<span class="line"><span style="color:#babed8;">            # Set any other initial storage values here, as in this example:</span></span>
<span class="line"><span style="color:#babed8;">            self.data.transferrable_tokens = {0, 2, 3, 7}</span></span>
<span class="line"><span style="color:#babed8;">            self.data.operator_transferrable_tokens = {0}</span></span>
<span class="line"><span style="color:#babed8;">            self.data.global_operator = global_operator</span></span>
<span class="line"><span style="color:#babed8;">            self.data.operators = sp.cast(</span></span>
<span class="line"><span style="color:#babed8;">                sp.big_map(), sp.big_map[t.operator_permission, sp.unit]</span></span>
<span class="line"><span style="color:#babed8;">            )</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        @sp.private(with_storage=&quot;read-only&quot;)</span></span>
<span class="line"><span style="color:#babed8;">        def check_tx_transfer_permissions_(self, params):</span></span>
<span class="line"><span style="color:#babed8;">            &quot;&quot;&quot;Called each time a transfer transaction is being looked at.&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#babed8;">            sp.cast(</span></span>
<span class="line"><span style="color:#babed8;">                params,</span></span>
<span class="line"><span style="color:#babed8;">                sp.record(</span></span>
<span class="line"><span style="color:#babed8;">                    from_=sp.address,</span></span>
<span class="line"><span style="color:#babed8;">                    to_=sp.address,</span></span>
<span class="line"><span style="color:#babed8;">                    token_id=sp.nat,</span></span>
<span class="line"><span style="color:#babed8;">                ),</span></span>
<span class="line"><span style="color:#babed8;">            )</span></span>
<span class="line"><span style="color:#babed8;">            # Check if the token is transferrable</span></span>
<span class="line"><span style="color:#babed8;">            if not self.data.transferrable_tokens.contains(params.token_id):</span></span>
<span class="line"><span style="color:#babed8;">                raise &quot;FA2_TX_DENIED&quot;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        @sp.private(with_storage=&quot;read-only&quot;)</span></span>
<span class="line"><span style="color:#babed8;">        def check_operator_update_permissions_(self, operator_permission):</span></span>
<span class="line"><span style="color:#babed8;">            &quot;&quot;&quot;Called each time an update_operator action is being looked at.&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#babed8;">            sp.cast(operator_permission, t.operator_permission)</span></span>
<span class="line"><span style="color:#babed8;">            # Check if operators are permitted for this token ID</span></span>
<span class="line"><span style="color:#babed8;">            if not self.data.operator_transferrable_tokens.contains(</span></span>
<span class="line"><span style="color:#babed8;">                operator_permission.token_id</span></span>
<span class="line"><span style="color:#babed8;">            ):</span></span>
<span class="line"><span style="color:#babed8;">                raise &quot;FA2_OPERATORS_UNSUPPORTED&quot;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        @sp.private(with_storage=&quot;read-only&quot;)</span></span>
<span class="line"><span style="color:#babed8;">        def is_operator_(self, operator_permission) -&gt; sp.bool:</span></span>
<span class="line"><span style="color:#babed8;">            &quot;&quot;&quot;Return True if \`operator_permission\` describes a registered operator, False otherwise.&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#babed8;">            sp.cast(operator_permission, t.operator_permission)</span></span>
<span class="line"><span style="color:#babed8;">            # Return true if there is an operator defined or if the account is the global operator</span></span>
<span class="line"><span style="color:#babed8;">            is_global_operator = (</span></span>
<span class="line"><span style="color:#babed8;">                operator_permission.operator == self.data.global_operator</span></span>
<span class="line"><span style="color:#babed8;">            )</span></span>
<span class="line"><span style="color:#babed8;">            sp.cast(self.data.operators, sp.big_map[t.operator_permission, sp.unit])</span></span>
<span class="line"><span style="color:#babed8;">            is_operator = self.data.operators.contains(operator_permission)</span></span>
<span class="line"><span style="color:#babed8;">            if not is_global_operator and not is_operator:</span></span>
<span class="line"><span style="color:#babed8;">                raise &quot;FA2_TX_DENIED&quot;</span></span></code></pre></div><p>To use a custom policy, import and initialize it just like one of the policies in the library, as in this example continued from above:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">main = fa2.main</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def myModule():</span></span>
<span class="line"><span style="color:#babed8;">    import main</span></span>
<span class="line"><span style="color:#babed8;">    import myPolicies</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    class myNFTContract(</span></span>
<span class="line"><span style="color:#babed8;">        main.Admin, myPolicies.MyPolicy, main.Nft, main.BurnNft, main.MintNft</span></span>
<span class="line"><span style="color:#babed8;">    ):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self, admin_address, contract_metadata, ledger, token_metadata):</span></span>
<span class="line"><span style="color:#babed8;">            main.MintNft.__init__(self)</span></span>
<span class="line"><span style="color:#babed8;">            main.BurnNft.__init__(self)</span></span>
<span class="line"><span style="color:#babed8;">            main.Nft.__init__(self, contract_metadata, ledger, token_metadata)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">            myPolicies.MyPolicy.__init__(self, admin_address)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">            main.Admin.__init__(self, admin_address)</span></span></code></pre></div><h3 id="using-policies-in-custom-entrypoints" tabindex="-1">Using policies in custom entrypoints <a class="header-anchor" href="#using-policies-in-custom-entrypoints" aria-label="Permalink to &quot;Using policies in custom entrypoints&quot;">​</a></h3><p>You can access policies&#39; methods and attributes in your custom entrypoints via <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">private</span></span></code></span>, as in this example:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">class ExampleFa2Nft(main.Nft):</span></span>
<span class="line"><span style="color:#babed8;">    @sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">    def customBurn(self, batch):</span></span>
<span class="line"><span style="color:#babed8;">        # Check that transfer is allowed</span></span>
<span class="line"><span style="color:#babed8;">        assert self.private.policy.supports_transfer, &quot;FA2_TX_DENIED&quot;</span></span>
<span class="line"><span style="color:#babed8;">        for action in batch:</span></span>
<span class="line"><span style="color:#babed8;">            self.check_tx_transfer_permissions_(</span></span>
<span class="line"><span style="color:#babed8;">                sp.record(</span></span>
<span class="line"><span style="color:#babed8;">                    from_=action.from_, to_=action.from_, token_id=action.token_id</span></span>
<span class="line"><span style="color:#babed8;">                )</span></span>
<span class="line"><span style="color:#babed8;">            )</span></span>
<span class="line"><span style="color:#babed8;">            # ...</span></span></code></pre></div>`,21)]))}const y=a(t,[["render",p]]);export{h as __pageData,y as default};
