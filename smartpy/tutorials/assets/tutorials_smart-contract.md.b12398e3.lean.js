import{_ as a,o as e,c as n,Q as s}from"./chunks/framework.741828c6.js";const o="/previews/smartpy/tutorials/img/tutorials/temple-switch-network.png",i="/previews/smartpy/tutorials/img/tutorials/wallet-funding.png",r="/previews/smartpy/tutorials/img/tutorials/smartpy-ide-contract.png",l="/previews/smartpy/tutorials/img/tutorials/smartpy-ide-run.png",p="/previews/smartpy/tutorials/img/tutorials/smartpy-ide-origination.png",c="/previews/smartpy/tutorials/img/tutorials/smartpy-ide-test-entrypoints.png",h="/previews/smartpy/tutorials/img/tutorials/smartpy-ide-origination-annotated.png",d="/previews/smartpy/tutorials/img/tutorials/smartpy-ide-network.png",u="/previews/smartpy/tutorials/img/tutorials/smartpy-ide-connected-wallet.png",m="/previews/smartpy/tutorials/img/tutorials/smartpy-ide-originated-contract.png",g="/previews/smartpy/tutorials/img/tutorials/bcd-originated-contract.png",y="/previews/smartpy/tutorials/img/tutorials/bcd-interact-parameters.png",b="/previews/smartpy/tutorials/img/tutorials/bcd-updated-storage.png",S=JSON.parse('{"title":"Deploy a smart contract with SmartPy","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/smart-contract.md","filePath":"tutorials/smart-contract.md"}'),w={name:"tutorials/smart-contract.md"};function f(k,t,v,T,_,q){return e(),n("div",null,t[0]||(t[0]=[s('<h1 id="deploy-a-smart-contract-with-smartpy" tabindex="-1">Deploy a smart contract with SmartPy <a class="header-anchor" href="#deploy-a-smart-contract-with-smartpy" aria-label="Permalink to &quot;Deploy a smart contract with SmartPy&quot;">​</a></h1><p>This tutorial covers writing and deploying a simple smart contract with the SmartPy programming language. SmartPy has syntax similar to Python, but you don&#39;t need any experience with Python or SmartPy to do this tutorial.</p><p>SmartPy is a high-level programming language that you can use to write smart contracts for the Tezos blockchain. It abstracts away the complexity of using Michelson (the smart contract language directly available on-chain) to make it easier to write smart contracts on Tezos.</p><p>In this tutorial, you will learn how to:</p><ul><li>Create a wallet to store cryptocurrency tokens</li><li>Get free tez tokens (the native cryptocurrency token on Tezos) from a faucet</li><li>Code a contract in SmartPy, including: <ul><li>Creating a contract in the online IDE</li><li>Defining the storage for the contract</li><li>Defining entrypoints in the contract</li><li>Writing code to run when the entrypoints are called</li></ul></li><li>Deploy (or originate) the contract to Tezos and set its starting storage value</li><li>Look up the current state of the contract</li><li>Call the contract</li></ul><h2 id="what-is-a-smart-contract" tabindex="-1">What is a smart contract? <a class="header-anchor" href="#what-is-a-smart-contract" aria-label="Permalink to &quot;What is a smart contract?&quot;">​</a></h2><p>A smart contract is a computer program that is stored on a blockchain and runs on a blockchain. Because the blockchain is spread across many computer nodes, you don&#39;t have to think about where to host the program or worry whether a computer will run it or not. Responsibility for running the contract is distributed across all of the nodes in the Tezos system, so when you deploy a smart contract, you can be confident that it will be available and unmodified when someone wants to run it.</p><p>A smart contract has these parts:</p><ul><li>Persistent storage, data that the contract can read and write</li><li>One or more entrypoints, which are a kind of function that clients can call, like endpoints in an API or functions or methods in many programming languages</li><li>A Tezos account that can store tokens (technically, the contract is itself a type of Tezos account, but you can think of it as a program with a Tezos account)</li></ul><h2 id="tutorial-contract" tabindex="-1">Tutorial contract <a class="header-anchor" href="#tutorial-contract" aria-label="Permalink to &quot;Tutorial contract&quot;">​</a></h2><p>The contract that you deploy in this tutorial stores a string value. It provides entrypoints that clients can call to change the value of that string:</p><ul><li>The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">replace</span></span></code></span> entrypoint accepts a new string as a parameter and stores that string, replacing the existing string.</li><li>The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">append</span></span></code></span> entrypoint accepts a new string as a parameter and appends it to the existing string.</li></ul><p>After you deploy the contract, you or any other user can call it from various sources, including web applications, other contracts, and the Octez command-line client. However, no one can prevent it from running or tamper with its code or its storage.</p><h2 id="creating-and-funding-a-wallet" tabindex="-1">Creating and funding a wallet <a class="header-anchor" href="#creating-and-funding-a-wallet" aria-label="Permalink to &quot;Creating and funding a wallet&quot;">​</a></h2><p>To deploy and work with the contract, you need a wallet and some tez tokens.</p><ol><li><p>Install a Tezos-compatible wallet. Which wallet you install is up to you and whether you want to install a wallet on your computer, in a browser extension, or as a mobile app.</p><p>If you don&#39;t know which one to choose, try the <a href="https://templewallet.com/" target="_blank" rel="noreferrer">Temple</a> browser extension.</p><p>Desktop wallets for Tezos include the <a href="https://templewallet.com/" target="_blank" rel="noreferrer">Temple</a> browser extension, <a href="https://wallet.kukai.app/" target="_blank" rel="noreferrer">Kukai</a>, and <a href="https://umamiwallet.com/" target="_blank" rel="noreferrer">Umami</a>.</p><p>Mobile apps include <a href="https://templewallet.com/" target="_blank" rel="noreferrer">Temple</a>, <a href="https://wallet.kukai.app/" target="_blank" rel="noreferrer">Kukai</a>, and <a href="https://umamiwallet.com/" target="_blank" rel="noreferrer">Umami</a>.</p></li><li><p>Switch the wallet to use the Ghostnet testnet instead of Tezos Mainnet. Ghostnet is a network for testing Tezos applications where tokens are free so you don&#39;t have to spend real currency to work with your applications.</p><p>For example, for the Temple browser wallet, click <strong>Tezos Mainnet</strong> at the top and then click <strong>Ghostnet Testnet</strong>, as in this picture:</p><p><img src="'+o+'" alt="Selecting the Ghostnet testnet in the Temple wallet"></p></li><li><p>From your wallet, get the address of your account, which starts with <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">tz1</span></span></code></span>. This is the address that applications use to work with your wallet.</p></li><li><p>Go to the Ghostnet faucet page at <a href="https://faucet.ghostnet.teztnets.com" target="_blank" rel="noreferrer">https://faucet.ghostnet.teztnets.com</a>.</p></li><li><p>On the faucet page, paste your wallet address into the input field labeled &quot;Or fund any address&quot; and click the button for the amount of tez to add to your wallet. 20 tez is enough to work with the tutorial contract, and you can return to the faucet later if you need more tez.</p><p>It may take a few minutes for the faucet to send the tokens and for those tokens to appear in your wallet.</p><p>You can use the faucet as much as you need to get tokens on the testnet, but those tokens are worthless and cannot be used on Mainnet.</p><p><img src="'+i+`" alt="Fund your wallet using the Ghostnet Faucet"></p></li></ol><p>Now you have an account and funds that you can use to work with Tezos.</p><h2 id="creating-the-contract" tabindex="-1">Creating the contract <a class="header-anchor" href="#creating-the-contract" aria-label="Permalink to &quot;Creating the contract&quot;">​</a></h2><p>The contract that you will create has these basic parts:</p><ul><li><p>A function that initializes the contract and sets the starting value for its storage.</p></li><li><p>Internal functions called entrypoints that run code when clients call the contract.</p></li><li><p>Automated tests that verify that the contract works as expected.</p></li></ul><p>Follow these steps to create the code for the contract:</p><ol><li><p>Open the SmartPy online IDE at <a href="https://smartpy.io/ide" target="_blank" rel="noreferrer">https://smartpy.io/ide</a>. You can work with SmartPy code in any IDE, but this online IDE keeps you from having to install software on your computer, and it also simplifies the process of deploying contracts.</p></li><li><p>In the code editor, add this line of code to import SmartPy:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">import smartpy as sp</span></span></code></pre></div></li><li><p>Add this code that creates the entrypoints:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def main():</span></span>
<span class="line"><span style="color:#babed8;">    class StoreGreeting(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self, greeting):  # Note the indentation</span></span>
<span class="line"><span style="color:#babed8;">            # Initialize the storage with a string passed at deployment time</span></span>
<span class="line"><span style="color:#babed8;">            # Cast the greeting parameter to a string</span></span>
<span class="line"><span style="color:#babed8;">            sp.cast(greeting, sp.string)</span></span>
<span class="line"><span style="color:#babed8;">            self.data.greeting = greeting</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        @sp.entrypoint  # Note the indentation</span></span>
<span class="line"><span style="color:#babed8;">        def replace(self, params):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.greeting = params.text</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        @sp.entrypoint  # Note the indentation</span></span>
<span class="line"><span style="color:#babed8;">        def append(self, params):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.greeting += params.text</span></span></code></pre></div><p>Indentation is significant in Python, so make sure that your indentation matches this code.</p><p>The first two lines create a SmartPy module, which indicates that the code is SmartPy instead of ordinary Python.</p><p>Then the code creates a class named StoreGreeting, which represents the smart contract. The contract has an <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">__init__</span></span></code></span> function, which runs when the contract is deployed. In this case, the function sets the initial value of the storage to a parameter that you pass when you deploy the contract. This storage value is a string, but the storage can be another primitive type such as an integer or timestamp, or a complex data type that contains multiple values. For more information on contract data types, see the Data types section of the manual.</p></li><li><p>Add this code, which creates automated tests:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;"># Automated tests that run on simulation</span></span>
<span class="line"><span style="color:#babed8;">@sp.add_test()</span></span>
<span class="line"><span style="color:#babed8;">def test():</span></span>
<span class="line"><span style="color:#babed8;">    # Initialize the test scenario</span></span>
<span class="line"><span style="color:#babed8;">    scenario = sp.test_scenario(&quot;StoreGreeting&quot;, main)</span></span>
<span class="line"><span style="color:#babed8;">    scenario.h1(&quot;StoreGreeting&quot;)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    # Initialize the contract and pass the starting value</span></span>
<span class="line"><span style="color:#babed8;">    contract = main.StoreGreeting(&quot;Hello&quot;)</span></span>
<span class="line"><span style="color:#babed8;">    scenario += contract</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    # Verify that the value in storage was set correctly</span></span>
<span class="line"><span style="color:#babed8;">    scenario.verify(contract.data.greeting == &quot;Hello&quot;)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    # Test the entrypoints and check the new storage value</span></span>
<span class="line"><span style="color:#babed8;">    contract.replace(text = &quot;Hi&quot;)</span></span>
<span class="line"><span style="color:#babed8;">    contract.append(text = &quot;, there!&quot;)</span></span>
<span class="line"><span style="color:#babed8;">    scenario.verify(contract.data.greeting == &quot;Hi, there!&quot;)</span></span></code></pre></div><p>When you run the SmartPy file, SmartPy runs a simulation in which it tests and compiles the contract. In this case, the tests verify that the replace and append endpoints work. For more information about tests, see <a href="/previews/smartpy/tutorials/manual/scenarios/test_scenarios">Test scenarios</a>.</p></li></ol><p>The SmartPy online IDE looks like this:</p><p><img src="`+r+`" alt="The SmartPy online IDE, including the code for the contract"></p><p>The complete contract looks like this:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">import smartpy as sp</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def main():</span></span>
<span class="line"><span style="color:#babed8;">    class StoreGreeting(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self, greeting):  # Note the indentation</span></span>
<span class="line"><span style="color:#babed8;">            # Initialize the storage with a string passed at deployment time</span></span>
<span class="line"><span style="color:#babed8;">            # Cast the greeting parameter to a string</span></span>
<span class="line"><span style="color:#babed8;">            sp.cast(greeting, sp.string)</span></span>
<span class="line"><span style="color:#babed8;">            self.data.greeting = greeting</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        @sp.entrypoint  # Note the indentation</span></span>
<span class="line"><span style="color:#babed8;">        def replace(self, params):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.greeting = params.text</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        @sp.entrypoint  # Note the indentation</span></span>
<span class="line"><span style="color:#babed8;">        def append(self, params):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.greeting += params.text</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"># Automated tests that run on simulation</span></span>
<span class="line"><span style="color:#babed8;">@sp.add_test()</span></span>
<span class="line"><span style="color:#babed8;">def test():</span></span>
<span class="line"><span style="color:#babed8;">    # Initialize the test scenario</span></span>
<span class="line"><span style="color:#babed8;">    scenario = sp.test_scenario(&quot;Test scenario&quot;, main)</span></span>
<span class="line"><span style="color:#babed8;">    scenario.h1(&quot;StoreGreeting&quot;)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    # Initialize the contract and pass the starting value</span></span>
<span class="line"><span style="color:#babed8;">    contract = main.StoreGreeting(&quot;Hello&quot;)</span></span>
<span class="line"><span style="color:#babed8;">    scenario += contract</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    # Verify that the value in storage was set correctly</span></span>
<span class="line"><span style="color:#babed8;">    scenario.verify(contract.data.greeting == &quot;Hello&quot;)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    # Test the entrypoints and check the new storage value</span></span>
<span class="line"><span style="color:#babed8;">    contract.replace(text = &quot;Hi&quot;)</span></span>
<span class="line"><span style="color:#babed8;">    contract.append(text = &quot;, there!&quot;)</span></span>
<span class="line"><span style="color:#babed8;">    scenario.verify(contract.data.greeting == &quot;Hi, there!&quot;)</span></span></code></pre></div><h2 id="testing-and-compiling-the-contract" tabindex="-1">Testing and compiling the contract <a class="header-anchor" href="#testing-and-compiling-the-contract" aria-label="Permalink to &quot;Testing and compiling the contract&quot;">​</a></h2><p>Before you can deploy the contract to Tezos, you must compile it to Michelson, the base language of Tezos contracts. The compilation process automatically runs the tests.</p><ol><li><p>Compile the contract and run the tests by clicking the <strong>Run Code</strong> button:</p><p><img src="`+l+'" alt=""></p><p>The right-hand pane of the online IDE shows the results of the simulation, compilation, and testing process. The first step is simulating the deployment (origination) of the contract. The simulation assigns the contract a temporary address and shows the initial state of its storage:</p><p><img src="'+p+'" alt="The originated contract and the initial storage in the SmartPy IDE" width="300px"></p><p>Then, the simulation runs the test cases and shows the results of each call to an entrypoint:</p><p><img src="'+c+'" alt="The results of the entrypoint calls" width="300px"></p></li></ol><h2 id="deploying-originating-to-the-testnet" tabindex="-1">Deploying (originating) to the testnet <a class="header-anchor" href="#deploying-originating-to-the-testnet" aria-label="Permalink to &quot;Deploying (originating) to the testnet&quot;">​</a></h2><p>Deploying a contract to the network is called &quot;originating.&quot; Originating the contract requires a small amount of Tezos tokens as a fee.</p><ol><li><p>Under the origination step, click <strong>Show Michelson</strong>.</p><p><img src="'+h+'" alt="The originated contract, with the Show Michelson button highlighted" width="300px"></p><p>The IDE shows the compiled Michelson code of the contract, which is the language that smart contracts use on Tezos.</p></li><li><p>Below the Michelson code, click <strong>Deploy Contract</strong>.</p></li><li><p>In the new window, under &quot;Node and Network,&quot; select the Ghostnet testnet and accept the default RPC node, as in this picture:</p><p><img src="'+d+'" alt="Selecting the Ghostnet network and default RPC node" width="600px"></p></li><li><p>Under &quot;Wallet,&quot; click <strong>Select Account</strong>.</p></li><li><p>In the pop-up window, connect your wallet. For Temple wallets, use the Temple tab, and for most other wallets, use the Beacon tab.</p></li><li><p>When your wallet is connected, click <strong>Validate</strong>.</p><p>The Origination page shows your wallet information:</p><p><img src="'+u+'" alt="The successful connection to your wallet on the origination page" width="500px"></p></li><li><p>At the bottom of the page, click <strong>Deploy Contract</strong>.</p></li><li><p>In the pop-up window, click <strong>Accept</strong>.</p></li><li><p>Approve the transaction in your wallet app.</p><p>The &quot;Origination Result&quot; section shows information about the deployed contract, including its address:</p><p><img src="'+m+'" alt="Information about the originated contract" width="500px"></p></li><li><p>Under the contract address, click <strong>Save Contract</strong>.</p></li><li><p>In the popup window, give the contract a name and click <strong>Add Contract</strong>. Saving the contract address like this is important because the address is not shown again.</p></li><li><p>Open the contract in the block explorer Better Call Dev:</p><ol><li><p>In a new browser tab, go to <a href="https://better-call.dev/" target="_blank" rel="noreferrer">https://better-call.dev/</a>.</p></li><li><p>Paste the contract address in the search box and press Enter.</p></li></ol><p>The block explorer shows information about the contract, including recent transactions and the current state of its storage.</p><p><img src="'+g+'" alt="The block explorer, showing information about the contract" width="500px"></p></li><li><p>Try calling one of the entrypoints:</p><ol><li><p>Go to the <strong>Storage</strong> tab and check the current state of the storage. If you just originated the contract, the storage is &quot;Hello&quot; because that&#39;s the value set in the smart contract code.</p></li><li><p>Go to the <strong>Interact</strong> tab. This tab shows the entrypoints in the contract and lets you use them.</p></li><li><p>For the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">append</span></span></code></span> entrypoint, in the <strong>Parameters</strong> section, put some text in the field, as shown in this image:</p><p><img src="'+y+'" alt="Putting in a value for an entrypoint parameter" width="500px"></p></li><li><p>Click <strong>Execute</strong> and then click <strong>Wallet</strong>.</p></li><li><p>Select your wallet and connect it to the application.</p></li><li><p>Confirm the transaction in your wallet.</p></li><li><p>Wait for a success message that says &quot;The transaction has successfully been broadcasted to the network.&quot;</p></li><li><p>Go back to the <strong>Storage</strong> tab and see that the text that you put in the parameter has been added to the contract storage, as in this picture:</p><p><img src="'+b+'" alt="Updated storage value" width="500px"></p></li></ol></li></ol><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><p>Now the contract is running on the Tezos blockchain. You or any other user can call it from any source that can send transactions to Tezos, including Octez, dApps, and other contracts.</p><p>If you want to continue working with this contract, here are some ideas:</p><ul><li>Change permissions for the contract so only your account can call its entrypoints</li><li>Add your own entrypoints and originate a new contract; note that you cannot update the existing contract after it is deployed</li><li>Create a dApp to call the contract from a web application, similar to the dApp that you create in the tutorial <a href="https://docs.tezos.com/tutorials/build-your-first-app" target="_blank" rel="noreferrer">Build a simple web application</a> on docs.tezos.com</li></ul>',36)]))}const z=a(w,[["render",f]]);export{S as __pageData,z as default};
