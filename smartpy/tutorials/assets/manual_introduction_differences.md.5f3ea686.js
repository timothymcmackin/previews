import{_ as s,o as e,c as n,Q as t}from"./chunks/framework.741828c6.js";const y=JSON.parse('{"title":"Differences between SmartPy and Python","description":"","frontmatter":{},"headers":[],"relativePath":"manual/introduction/differences.md","filePath":"manual/introduction/differences.md"}'),l={name:"manual/introduction/differences.md"};function o(p,a,i,r,c,h){return e(),n("div",null,a[0]||(a[0]=[t(`<h1 id="differences-between-smartpy-and-python" tabindex="-1">Differences between SmartPy and Python <a class="header-anchor" href="#differences-between-smartpy-and-python" aria-label="Permalink to &quot;Differences between SmartPy and Python&quot;">​</a></h1><p>Although SmartPy is similar to Python in many ways, it has some significant differences. These differences apply to code within SmartPy modules. On the contrary, the test scenario is pure Python. Many of these differences exist because SmartPy is compiled to the Michelson stack-based language, which is very different from Python. Other differences exist because SmartPy is made for writing Tezos smart contracts instead of being a general-purpose programming language.</p><p>Code within a test scenario is ordinary Python. Therefore, within a test scenario, you can do things that you can&#39;t do in a smart contract, such as import and use Python libraries, call external APIs, and work with private keys and test accounts. For more information about tests, see <a href="./../scenarios/test_scenarios">Test scenarios</a>.</p><p>Code within a SmartPy module is subject to these limitations:</p><h2 id="module" tabindex="-1">Module <a class="header-anchor" href="#module" aria-label="Permalink to &quot;Module&quot;">​</a></h2><p>You cannot use imported Python modules in SmartPy code. You can import SmartPy code from other <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#F07178;">spy</span></span></code></span> files or import SmartPy modules defined within <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">module</span></span></code></span> blocks.</p><p>Please see <a href="./../syntax/modules">modules</a>.</p><h2 id="control-structures" tabindex="-1">Control structures <a class="header-anchor" href="#control-structures" aria-label="Permalink to &quot;Control structures&quot;">​</a></h2><p>Functions, loops, and conditionals have limitations in SmartPy that are not in Python:</p><h3 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h3><p>Functions (including entrypoints, views, and auxiliary functions) must end at a single block of code. For example, this code is not valid because it could return from more than one place in the code, even though the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">return</span></span></code></span> statements are close to each other:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">if a &gt; b:</span></span>
<span class="line"><span style="color:#babed8;">    return a  # Error: &#39;return&#39; in non-terminal position.</span></span>
<span class="line"><span style="color:#babed8;">return b</span></span></code></pre></div><p>Instead, functions must return from a single block of code, as in this example:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">if a &gt; b:</span></span>
<span class="line"><span style="color:#babed8;">    return a</span></span>
<span class="line"><span style="color:#babed8;">else:</span></span>
<span class="line"><span style="color:#babed8;">    return b</span></span></code></pre></div><h3 id="loops" tabindex="-1">Loops <a class="header-anchor" href="#loops" aria-label="Permalink to &quot;Loops&quot;">​</a></h3><p>Similarly, you can&#39;t use the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">break</span></span></code></span> command to end a loop early, as in this example:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">x = 3</span></span>
<span class="line"><span style="color:#babed8;">i = 0</span></span>
<span class="line"><span style="color:#babed8;">while i &lt; 5:</span></span>
<span class="line"><span style="color:#babed8;">    if i == x:</span></span>
<span class="line"><span style="color:#babed8;">        break  # SyntaxError: Not a statement: break</span></span>
<span class="line"><span style="color:#babed8;">    i += 1</span></span></code></pre></div><h3 id="pattern-matching" tabindex="-1">Pattern matching <a class="header-anchor" href="#pattern-matching" aria-label="Permalink to &quot;Pattern matching&quot;">​</a></h3><p>The pattern-matching syntax (using the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">match</span></span></code></span> statement) is only valid for SmartPy options and variants. Therefore, the following example is not syntactically correct, because it attempts to pattern-match on integer values:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">def ep10(self, params):</span></span>
<span class="line"><span style="color:#babed8;">    sp.cast(params.other, int)</span></span>
<span class="line"><span style="color:#babed8;">    match params.other:</span></span>
<span class="line"><span style="color:#babed8;">        case 0:  # ParseError: unexpected token 0</span></span>
<span class="line"><span style="color:#babed8;">            ...</span></span>
<span class="line"><span style="color:#babed8;">        case 1:  # ParseError: unexpected token 1</span></span>
<span class="line"><span style="color:#babed8;">            ...</span></span></code></pre></div><h3 id="logic" tabindex="-1">Logic <a class="header-anchor" href="#logic" aria-label="Permalink to &quot;Logic&quot;">​</a></h3><ul><li>SmartPy supports the Python <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span></span></code></span> and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">else</span></span></code></span> statements, but not the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">elif</span></span></code></span> statement.</li><li>SmartPy does not support Python exception handling with statements such as <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">try</span></span></code></span> and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">except</span></span></code></span>.</li><li>SmartPy does not support some built-in Python functions, such as <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">type</span></span></code></span> and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">bool</span></span></code></span>.</li></ul><h2 id="logging" tabindex="-1">Logging <a class="header-anchor" href="#logging" aria-label="Permalink to &quot;Logging&quot;">​</a></h2><p>To write to STDOUT from SmartPy, use the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">trace</span></span></code></span> function.</p><h2 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-label="Permalink to &quot;Variables&quot;">​</a></h2><p>SmartPy is limited by the types of variables that Michelson supports and how it uses variables:</p><h3 id="types" tabindex="-1">Types <a class="header-anchor" href="#types" aria-label="Permalink to &quot;Types&quot;">​</a></h3><p>SmartPy does not support every data type that Python does. Also, SmartPy data types may not have the same methods that the equivalent Python data types have. See the Data types section for the types that SmartPy supports.</p><p>Some SmartPy types behave differently from the equivalent Python types. For example, SmartPy numerical types behave differently when they are divided; see <a href="./../data-types/integers-and-mutez#division">Division</a>.</p><p>You must be aware of the types that you use in SmartPy modules versus the types that you use in the Python code of test scenarios. For example, within a SmartPy module, lists that you create have the type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">list</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">t</span><span style="color:#89DDFF;">]</span></span></code></span>, where <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">t</span></span></code></span> is the type of the list elements; see <a href="/previews/smartpy/tutorials/manual/data-types/lists-sets-and-maps">Lists, sets, and maps</a>. Therefore, to add elements to a list, you use the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">push</span><span style="color:#89DDFF;">()</span></span></code></span> method of the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">list</span></span></code></span> type, as in this example:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">def lists(self):</span></span>
<span class="line"><span style="color:#babed8;">    my_list = [1, 2, 3]</span></span>
<span class="line"><span style="color:#babed8;">    my_list.push(sp.int(4))</span></span></code></pre></div><p>However, lists that you create in Python code, including test scenarios, are ordinary Python lists. Therefore, to add elements to a list, you use the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">()</span></span></code></span> method, as in this example:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add_test</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;"># Create a test scenario</span></span>
<span class="line"><span style="color:#BABED8;">    scenario </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test_scenario</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">A Test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> main</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;"># ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    my_list </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#BABED8;">    my_list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Similarly, to check if an element is in a SmartPy set of type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">set</span></span></code></span>, use its <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">contains</span><span style="color:#89DDFF;">()</span></span></code></span> method, not the standard Python <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">in</span></span></code></span> operator.</p><h3 id="casting" tabindex="-1">Casting <a class="header-anchor" href="#casting" aria-label="Permalink to &quot;Casting&quot;">​</a></h3><p>In most cases, you cannot change the type of a variable after you define it. The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">cast</span></span></code></span> function does not change the type of a variable; it clarifies the type of a variable for the compiler.</p><p>The <a href="./../stdlib/library">STDLIB</a> modules provide some traditional casting functions, such as converting between different numerical types.</p><p>For more information about casting, see <a href="/previews/smartpy/tutorials/manual/data-types/casting">Casting</a>.</p><h3 id="enumerations" tabindex="-1">Enumerations <a class="header-anchor" href="#enumerations" aria-label="Permalink to &quot;Enumerations&quot;">​</a></h3><p>To set up an enumeration with SmartPy, use a <a href="/previews/smartpy/tutorials/manual/data-types/options-and-variants#variants">variant</a> type to create a group of cases. Each value has <a href="/previews/smartpy/tutorials/manual/data-types/unit">unit</a> as a value, as in this example:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def main():</span></span>
<span class="line"><span style="color:#babed8;">    status: type = sp.variant(Active=sp.unit, Inactive=sp.unit)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    class C(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.status = sp.cast(sp.variant.Active(), status)</span></span>
<span class="line"><span style="color:#babed8;">            self.data.statusMessage = &quot;&quot;</span></span>
<span class="line"><span style="color:#babed8;">            match self.data.status:</span></span>
<span class="line"><span style="color:#babed8;">                case Active(_):</span></span>
<span class="line"><span style="color:#babed8;">                    self.data.statusMessage = &quot;Running&quot;</span></span>
<span class="line"><span style="color:#babed8;">                case Inactive(_):</span></span>
<span class="line"><span style="color:#babed8;">                    self.data.statusMessage = &quot;Not running&quot;</span></span></code></pre></div><h3 id="access-and-iteration" tabindex="-1">Access and iteration <a class="header-anchor" href="#access-and-iteration" aria-label="Permalink to &quot;Access and iteration&quot;">​</a></h3><p>Michelson variables are stored in a stack, which introduces limitations on accessing and iterating over variables. Here are some of those limitations:</p><ul><li><p>You cannot retrieve or change an arbitrary element in a list or set with brackets, as in the code <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">myList</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">]</span></span></code></span>.</p></li><li><p>You can add items to lists but you cannot remove them without iterating over the list.</p></li></ul>`,44)]))}const m=s(l,[["render",o]]);export{y as __pageData,m as default};
