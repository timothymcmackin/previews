import{_ as a,o as e,c as n,Q as l}from"./chunks/framework.741828c6.js";const D=JSON.parse('{"title":"Lambdas","description":"","frontmatter":{},"headers":[],"relativePath":"manual/data-types/lambdas.md","filePath":"manual/data-types/lambdas.md"}'),p={name:"manual/data-types/lambdas.md"};function t(o,s,c,r,i,y){return e(),n("div",null,s[0]||(s[0]=[l(`<h1 id="lambdas" tabindex="-1">Lambdas <a class="header-anchor" href="#lambdas" aria-label="Permalink to &quot;Lambdas&quot;">​</a></h1><p>The type of functions in SmartPy is <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">lambda_</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">t1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> t2</span><span style="color:#89DDFF;">,</span> <span style="color:#BABED8;font-style:italic;">with_storage</span><span style="color:#89DDFF;">=</span> <span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">read-write</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">|</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">read-only</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">|</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">no-access</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span> <span style="color:#BABED8;font-style:italic;">with_operations</span><span style="color:#89DDFF;">=True|False,</span> <span style="color:#BABED8;font-style:italic;">with_exceptions</span><span style="color:#89DDFF;">=True|False,</span> <span style="color:#BABED8;font-style:italic;">with_mutez_overflow</span><span style="color:#89DDFF;">=True|False,</span> <span style="color:#BABED8;font-style:italic;">with_mutez_underflow</span><span style="color:#89DDFF;">=True|False)</span></span></code></span> where <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">t1</span></span></code></span> is the argument type and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">t2</span></span></code></span> the result type. It corresponds to the <a href="https://tezos.gitlab.io/michelson-reference/#type-lambda" target="_blank" rel="noreferrer"><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">lambda</span></span></code></span> type in Michelson</a>.</p><p>Lambdas can be defined either using Python&#39;s <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">lambda</span> <span style="color:#BABED8;font-style:italic;">x</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> ...</span></span></code></span> syntax or, when they have a name, using <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span> <span style="color:#82AAFF;">f</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">x</span><span style="color:#89DDFF;">):</span><span style="color:#BABED8;"> ...</span></span></code></span>.</p><p>For example, the definition</p><p><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">f </span><span style="color:#89DDFF;">=</span> <span style="color:#C792EA;">lambda</span> <span style="color:#BABED8;font-style:italic;">x</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> x </span><span style="color:#89DDFF;">+</span> <span style="color:#F78C6C;">1</span></span></code></span></p><p>is equivalent to:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">def f(x):</span></span>
<span class="line"><span style="color:#babed8;">    return x + 1</span></span></code></pre></div><p>Here <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">f</span></span></code></span> has type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">lambda_</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">int</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">int</span><span style="color:#89DDFF;">]</span></span></code></span>.</p><p>To call a lambda, pass it its argument in parentheses. This example calls the lambda in the previous example:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">assert f(1) == 2</span></span></code></pre></div><h2 id="effects" tabindex="-1">Effects <a class="header-anchor" href="#effects" aria-label="Permalink to &quot;Effects&quot;">​</a></h2><p>You can control the <a href="./effects">effects</a> a lambda can have on a contract&#39;s storage by adding the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">effects</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">...</span><span style="color:#89DDFF;">)</span></span></code></span> decorator to a function definition.</p>`,12)]))}const d=a(p,[["render",t]]);export{D as __pageData,d as default};
