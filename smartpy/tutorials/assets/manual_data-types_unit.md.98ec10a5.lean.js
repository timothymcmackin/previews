import{_ as s,o as n,c as e,Q as t}from"./chunks/framework.741828c6.js";const m=JSON.parse('{"title":"Unit","description":"","frontmatter":{},"headers":[],"relativePath":"manual/data-types/unit.md","filePath":"manual/data-types/unit.md"}'),p={name:"manual/data-types/unit.md"};function l(o,a,i,r,c,h){return n(),e("div",null,a[0]||(a[0]=[t(`<h1 id="unit" tabindex="-1">Unit <a class="header-anchor" href="#unit" aria-label="Permalink to &quot;Unit&quot;">​</a></h1><p>The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">unit</span></span></code></span> type in SmartPy represents the absence of a meaningful result or value. It corresponds to the <a href="https://tezos.gitlab.io/michelson-reference/#type-unit" target="_blank" rel="noreferrer"><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">unit</span></span></code></span> type in Michelson</a>.</p><p>The unit type is commonly used in contracts and in variants.</p><h2 id="using-unit-in-contract-parameters" tabindex="-1">Using unit in contract parameters <a class="header-anchor" href="#using-unit-in-contract-parameters" aria-label="Permalink to &quot;Using unit in contract parameters&quot;">​</a></h2><p>On Tezos every contract has a parameter type. For example, you can call a contract of type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">contract</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">int</span><span style="color:#89DDFF;">]</span></span></code></span> with an argument of type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">int</span></span></code></span>. This example calls a contract with this type:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">sp.transfer(42, sp.mutez(0), contract)</span></span></code></pre></div><p>But what if a contract doesn&#39;t require any arguments? In this case it can specify a parameter of type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">unit</span></span></code></span>, giving the contract the type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">contract</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">unit</span><span style="color:#89DDFF;">]</span></span></code></span>.</p><p>To call such a contract from SmartPy, pass the unit value, represented in SmartPy as <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">()</span></span></code></span>. For example, this code calls a contract that has the type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">contract</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">unit</span><span style="color:#89DDFF;">]</span></span></code></span>:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">sp.transfer((), sp.mutez(0), contract)</span></span></code></pre></div><p>For more information about contracts and calling them, see <a href="./contracts">Contracts</a> and <a href="operations#sp.transfer"><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">transfer</span></span></code></span></a>.</p><h2 id="using-unit-in-variants" tabindex="-1">Using unit in variants <a class="header-anchor" href="#using-unit-in-variants" aria-label="Permalink to &quot;Using unit in variants&quot;">​</a></h2><p>SmartPy variants can be used to represent alternative cases with extra information. For example this variant represents a shape that can be either a circle or a rectangle:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">shape: type = sp.variant(Circle=sp.int, Rectangle=sp.pair[sp.int, sp.int])</span></span></code></pre></div><p>In the previous example, a circle comes with only one number (its radius) and a rectangle carries two numbers (its length and width).</p><p>But what about cases that don&#39;t require any extra info? <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">unit</span></span></code></span> to the rescue! Here is a type that models events coming from a physical sensor:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">sensor_event: type = sp.variant(</span></span>
<span class="line"><span style="color:#babed8;">    TemperatureChange=sp.int, HumidityChange=sp.int, MotionDetected=sp.unit</span></span>
<span class="line"><span style="color:#babed8;">)</span></span></code></pre></div><p>Temperature and humidity changes each come with a number, whereas for detected motion there is no extra information, hence <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">unit</span></span></code></span>.</p>`,17)]))}const d=s(p,[["render",l]]);export{m as __pageData,d as default};
