import{_ as s,o as n,c as t,Q as o}from"./chunks/framework.741828c6.js";const D=JSON.parse('{"title":"Contract metadata","description":"","frontmatter":{},"headers":[],"relativePath":"manual/libraries/FA2-lib/contract_metadata.md","filePath":"manual/libraries/FA2-lib/contract_metadata.md"}'),e={name:"manual/libraries/FA2-lib/contract_metadata.md"};function l(p,a,c,r,i,y){return n(),t("div",null,a[0]||(a[0]=[o(`<h1 id="contract-metadata" tabindex="-1">Contract metadata <a class="header-anchor" href="#contract-metadata" aria-label="Permalink to &quot;Contract metadata&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Contract metadata should not be confused with <a href="./token_metadata">token metadata</a>.</p></div><p>Contract metadata provides details about the contract itself and its off-chain views, like the back cover of a book describing its content and author. A range of tools such as wallets, block explorers, and dApps use contract metadata to display useful information to users, such as a name, description, and version number.</p><h2 id="creating-metadata" tabindex="-1">Creating metadata <a class="header-anchor" href="#creating-metadata" aria-label="Permalink to &quot;Creating metadata&quot;">​</a></h2><p>Contract metadata is structured in key-value pairs that follow the <a href="https://gitlab.com/tezos/tzip/-/blob/master/proposals/tzip-16/tzip-16.md" target="_blank" rel="noreferrer">TZIP-16</a> standard. When you create FA2 contracts, be sure to read the standard to know the information that should be in the metadata.</p><p>Here is an example of contract metadata:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MyContract</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">version</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.0.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">description</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">This implements FA2 (TZIP-012) using SmartPy.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">interfaces</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">TZIP-012</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">TZIP-016</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">authors</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SmartPy &lt;https://smartpy.io&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">homepage</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://smartpy.io/ide?template=fa2_lib.py</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">source</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">tools</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SmartPy</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">location</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://gitlab.com/SmartPy/smartpy/-/raw/master/python/templates/fa2_lib.py</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">permissions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">receiver</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">owner-no-hook</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">sender</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">owner-no-hook</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">operator</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">owner-or-operator-transfer</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="uploading-metadata" tabindex="-1">Uploading metadata <a class="header-anchor" href="#uploading-metadata" aria-label="Permalink to &quot;Uploading metadata&quot;">​</a></h2><p>In most cases, contract metadata is stored as a separate JSON file on the <a href="https://ipfs.tech/" target="_blank" rel="noreferrer">InterPlanetary File System</a> (IPFS) or any HTTPS-accessible URI and linked into the contract&#39;s <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">metadata</span></span></code></span> big-map. Many contract creators use IPFS to store metadata in a decentralized way. This decentralization ensures that the file content cannot be altered without changing its hash and thus the URL, providing a form of content integrity. Moreover, anyone can host an IPFS node to re-upload the content if necessary, ensuring resilience against single points of failure.</p><p>SmartPy provides tools to upload metadata to IPFS automatically; see <a href="/previews/smartpy/tutorials/manual/scenarios/metadata">Creating and publishing metadata</a>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you upload your metadata file on IPFS, remember to &#39;pin&#39; it. Pinning is the process of marking a particular file or data block to prevent it from being garbage collected and removed from your IPFS storage. You should also keep a backup version of your file elsewhere, because you may need to re-upload it again later.</p></div><h2 id="linking-the-contract-to-the-metadata" tabindex="-1">Linking the contract to the metadata <a class="header-anchor" href="#linking-the-contract-to-the-metadata" aria-label="Permalink to &quot;Linking the contract to the metadata&quot;">​</a></h2><p>Contracts store a link to their metadata in a big-map named <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">metadata</span></span></code></span> that has a single key: the empty string <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">&quot;&quot;</span></span></code></span>. The value is a link to the metadata JSON file. For example, if the file is on IPFS, the URI is in the form <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">&quot;</span><span style="color:#676E95;font-style:italic;">ipfs://&lt;hash&gt;</span><span style="color:#89DDFF;font-style:italic;">&quot;</span></span></code></span>, where <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#82AAFF;">hash</span><span style="color:#89DDFF;">&gt;</span></span></code></span> is the IPFS hash of the file.</p><p>The example below shows how to upload contract metadata to IPFS and put the URI in the contract storage. For more information, see <a href="/previews/smartpy/tutorials/manual/scenarios/metadata">Creating and publishing metadata</a>.</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;"># Build contract metadata content</span></span>
<span class="line"><span style="color:#babed8;">contract_metadata = sp.create_tzip16_metadata(</span></span>
<span class="line"><span style="color:#babed8;">    name=&quot;My contract&quot;,</span></span>
<span class="line"><span style="color:#babed8;">    description=&quot;This is a contract using SmartPy.&quot;,</span></span>
<span class="line"><span style="color:#babed8;">    version=&quot;1.0.0&quot;,</span></span>
<span class="line"><span style="color:#babed8;">    license_name=&quot;CC-BY-SA&quot;,</span></span>
<span class="line"><span style="color:#babed8;">    license_details=&quot;Creative Commons Attribution Share Alike license 4.0 https://creativecommons.org/licenses/by/4.0/&quot;,</span></span>
<span class="line"><span style="color:#babed8;">    interfaces=[&quot;TZIP-012&quot;, &quot;TZIP-016&quot;],</span></span>
<span class="line"><span style="color:#babed8;">    authors=[&quot;SmartPy &lt;https://smartpy.io/#contact&gt;&quot;],</span></span>
<span class="line"><span style="color:#babed8;">    homepage=&quot;https://smartpy.io/ide?template=fa2_lib_fungible.py&quot;,</span></span>
<span class="line"><span style="color:#babed8;">    # Optionally, upload the source code to IPFS and add the URI here</span></span>
<span class="line"><span style="color:#babed8;">    source_uri=None,</span></span>
<span class="line"><span style="color:#babed8;">    offchain_views=contract.get_offchain_views(),</span></span>
<span class="line"><span style="color:#babed8;">)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"># Upload the contract metadata to IPFS and get the URI</span></span>
<span class="line"><span style="color:#babed8;">metadata_uri = sp.pin_on_ipfs(contract_metadata)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"># Create the metadata big map based on the IPFS URI</span></span>
<span class="line"><span style="color:#babed8;">contract_metadata = sp.scenario_utils.metadata_of_url(metadata_uri)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"># Update the scenario instance with the new metadata</span></span>
<span class="line"><span style="color:#babed8;">contract.data.metadata = contract_metadata</span></span></code></pre></div><p>You can also upload the contract metadata yourself and manually provide a URI with IPFS, HTTPS, or some other protocol, as in this example:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">import smartpy as sp</span></span>
<span class="line"><span style="color:#babed8;">from smartpy.templates import fa2_lib as fa2</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">def bytes_of_string(s):</span></span>
<span class="line"><span style="color:#babed8;">    return sp.bytes(&quot;0x&quot; + s.encode(&quot;utf-8&quot;).hex())</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">@sp.add_test()</span></span>
<span class="line"><span style="color:#babed8;">def test():</span></span>
<span class="line"><span style="color:#babed8;">    sc = sp.test_scenario(&quot;NFT&quot;, fa2.main)</span></span>
<span class="line"><span style="color:#babed8;">    contract_metadata_IPFS = sp.big_map(</span></span>
<span class="line"><span style="color:#babed8;">        {&quot;&quot;: bytes_of_string(&quot;ipfs://QmPChd2hVbrJ6bfo3WBcTW4iZnpHm8TEzWkLHmLpXhF68A&quot;)}</span></span>
<span class="line"><span style="color:#babed8;">    )</span></span>
<span class="line"><span style="color:#babed8;">    c1 = fa2.main.Nft(contract_metadata_IPFS, {}, [])</span></span>
<span class="line"><span style="color:#babed8;">    sc += c1</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    contract_metadata_HTTPS = sp.big_map(</span></span>
<span class="line"><span style="color:#babed8;">        {&quot;&quot;: bytes_of_string(&quot;https://example.com/contract_metadata.json&quot;)}</span></span>
<span class="line"><span style="color:#babed8;">    )</span></span>
<span class="line"><span style="color:#babed8;">    c2 = fa2.main.Nft(contract_metadata_HTTPS, {}, [])</span></span>
<span class="line"><span style="color:#babed8;">    sc += c2</span></span></code></pre></div>`,17)]))}const F=s(e,[["render",l]]);export{D as __pageData,F as default};
