import{D as e}from"./chunks/DocFunction.e9a30d9e.js";import{o as p,c,Q as i,C as n,y as l,v as t,a as s}from"./chunks/framework.741828c6.js";import"./chunks/DocFunction.vue_vue_type_style_index_0_scoped_21214205_lang.4ed993c7.js";const u=JSON.parse('{"title":"Tickets","description":"","frontmatter":{},"headers":[],"relativePath":"manual/data-types/tickets.md","filePath":"manual/data-types/tickets.md"}'),o={name:"manual/data-types/tickets.md"},h=Object.assign(o,{setup(r){return(d,a)=>(p(),c("div",null,[a[4]||(a[4]=i('<h1 id="tickets" tabindex="-1">Tickets <a class="header-anchor" href="#tickets" aria-label="Permalink to &quot;Tickets&quot;">​</a></h1><p>Tezos tickets are authenticated quantities issued by contracts. A ticket of type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">ticket</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">t</span><span style="color:#89DDFF;">]</span></span></code></span> has three elements:</p><ul><li><p>Its <em>ticketer</em>, which is the contract that issued the ticket</p></li><li><p>Its <em>contents</em> of type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">t</span></span></code></span>, also knowns as the wrapped value or payload, which can be any data type</p></li><li><p>Its <em>amount</em> of type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">nat</span></span></code></span>, which is an arbitrary number that represents a quantity or value for the ticket</p></li></ul><p>A ticket&#39;s ticketer and contents cannot be changed.</p><p>Tickets themselves cannot be duplicated, but you can split one ticket into multiple tickets by creating duplicate tickets each with a portion of the original ticket&#39;s amount. The new tickets have the same ticketer and contents, and the sum of their amounts is always the amount of the original ticket. Similarly, you can join tickets with matching ticketers and contents into a single ticket with the sum of the joined tickets&#39; amounts.</p><p>You cannot read the contents of a ticket directly; you must use <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">read_ticket</span></span></code></span> to access it.</p>',6)),n(e,{name:"sp.ticket",arg:"contents: t, amount: sp.nat",rType:"sp.ticket[t]"},{default:l(()=>a[0]||(a[0]=[t("p",null,[s("Create a ticket with the given contents and amount. The ticketer is always the contract's address via "),t("span",{class:"inline shiki material-theme-palenight"},[t("code",null,[t("span",{class:"line"},[t("span",{style:{color:"#BABED8"}},"sp"),t("span",{style:{color:"#89DDFF"}},"."),t("span",{style:{color:"#F07178"}},"self_address")])])]),s(".")],-1)])),_:1}),n(e,{name:"sp.read_ticket",arg:"ticket: sp.ticket[t]",rType:"sp.pair[sp.record(ticketer=sp.address, contents=t, amount=sp.nat), sp.ticket[t]]"},{default:l(()=>a[1]||(a[1]=[t("p",null,"Reads the contents of a ticket and returns a pair of:",-1),t("ul",null,[t("li",null,[t("p",null,"The ticket data, itself a record of the ticket's ticketer, contents, and amount.")]),t("li",null,[t("p",null,"A copy of the original ticket that can still be used.")])],-1),t("p",null,[s("Note that using "),t("span",{class:"inline shiki material-theme-palenight"},[t("code",null,[t("span",{class:"line"},[t("span",{style:{color:"#BABED8"}},"sp"),t("span",{style:{color:"#89DDFF"}},"."),t("span",{style:{color:"#F07178"}},"read_ticket")])])]),s(" on a ticket "),t("em",null,"consumes"),s(" it, destroying the original "),t("span",{class:"inline shiki material-theme-palenight"},[t("code",null,[t("span",{class:"line"},[t("span",{style:{color:"#BABED8"}},"sp"),t("span",{style:{color:"#89DDFF"}},"."),t("span",{style:{color:"#F07178"}},"ticket")])])]),s(" type. To access the ticket again, you muse use the copy that the function returns.")],-1),t("p",null,"This example creates a ticket and then reads it:",-1),t("div",{class:"language-smartpy"},[t("button",{title:"Copy Code",class:"copy"}),t("span",{class:"lang"},"smartpy"),t("pre",{class:"shiki material-theme-palenight"},[t("code",null,[t("span",{class:"line"},[t("span",{style:{color:"#babed8"}},"# Create ticket")]),s(`
`),t("span",{class:"line"},[t("span",{style:{color:"#babed8"}},'ticket_contents = (sp.int(5), "hello")')]),s(`
`),t("span",{class:"line"},[t("span",{style:{color:"#babed8"}},"ticket = sp.ticket(ticket_contents, 2)")]),s(`
`),t("span",{class:"line"},[t("span",{style:{color:"#babed8"}})]),s(`
`),t("span",{class:"line"},[t("span",{style:{color:"#babed8"}},"# Read ticket")]),s(`
`),t("span",{class:"line"},[t("span",{style:{color:"#babed8"}},"(ticket_data, new_ticket) = sp.read_ticket(ticket)")]),s(`
`),t("span",{class:"line"},[t("span",{style:{color:"#babed8"}},"assert ticket_data.contents == ticket_contents")]),s(`
`),t("span",{class:"line"},[t("span",{style:{color:"#babed8"}},"assert ticket_data.amount == 2")]),s(`
`),t("span",{class:"line"},[t("span",{style:{color:"#babed8"}},"assert ticket_data.ticketer == sp.self_address")])])])],-1),t("h2",{id:"joining-and-splitting-tickets",tabindex:"-1"},[s("Joining and splitting tickets "),t("a",{class:"header-anchor",href:"#joining-and-splitting-tickets","aria-label":'Permalink to "Joining and splitting tickets"'},"​")],-1)])),_:1}),n(e,{name:"sp.join_tickets",arg:"t1: sp.ticket[t], t2: sp.ticket[t]",rType:"sp.ticket[t]"},{default:l(()=>a[2]||(a[2]=[t("p",null,"Merges two tickets into one by adding their amounts. Fails if the tickets differ in their ticketer or contents.",-1)])),_:1}),n(e,{name:"sp.split_ticket",arg:"ticket: sp.ticket[t], amount1: sp.nat, amount2: sp.nat",rType:"sp.pair[sp.ticket[t], sp.ticket[t]]"},{default:l(()=>a[3]||(a[3]=[t("p",null,[s("Splits a ticket into two parts with the specified amounts. Fails if "),t("span",{class:"inline shiki material-theme-palenight"},[t("code",null,[t("span",{class:"line"},[t("span",{style:{color:"#BABED8"}},"amount1 "),t("span",{style:{color:"#89DDFF"}},"+"),t("span",{style:{color:"#BABED8"}}," amount2")])])]),s(" is not equal to the original ticket's amount.")],-1)])),_:1}),a[5]||(a[5]=i(`<p>For example, this code creates a ticket, splits it, and joins the split tickets:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;"># Create ticket</span></span>
<span class="line"><span style="color:#babed8;">ticket_contents = (sp.int(5), &quot;hello&quot;)</span></span>
<span class="line"><span style="color:#babed8;">big_ticket = sp.ticket(ticket_contents, 100)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"># Split ticket</span></span>
<span class="line"><span style="color:#babed8;">(small_ticket_1, small_ticket_2) = sp.split_ticket(big_ticket, 70, 30)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"># Verify ticket amounts</span></span>
<span class="line"><span style="color:#babed8;">(data_1, small_ticket_1_new) = sp.read_ticket(small_ticket_1)</span></span>
<span class="line"><span style="color:#babed8;">assert data_1.contents == ticket_contents</span></span>
<span class="line"><span style="color:#babed8;">assert data_1.amount == 70</span></span>
<span class="line"><span style="color:#babed8;">(data_2, small_ticket_2_new) = sp.read_ticket(small_ticket_2)</span></span>
<span class="line"><span style="color:#babed8;">assert data_2.contents == ticket_contents</span></span>
<span class="line"><span style="color:#babed8;">assert data_2.amount == 30</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">## Join tickets</span></span>
<span class="line"><span style="color:#babed8;">joined_ticket = sp.join_tickets(small_ticket_1_new, small_ticket_2_new)</span></span>
<span class="line"><span style="color:#babed8;">(data_joined, joined_ticket_new) = sp.read_ticket(joined_ticket)</span></span>
<span class="line"><span style="color:#babed8;">assert data_joined.amount == 100</span></span></code></pre></div><h2 id="transferring-tickets" tabindex="-1">Transferring tickets <a class="header-anchor" href="#transferring-tickets" aria-label="Permalink to &quot;Transferring tickets&quot;">​</a></h2><p>To transfer a ticket, send it as a parameter to an entrypoint with <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">transfer</span></span></code></span> as usual:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">contract_opt = sp.contract(</span></span>
<span class="line"><span style="color:#babed8;">    sp.ticket[sp.pair[sp.int, sp.string]], contract_address, entrypoint=&quot;accept_ticket&quot;</span></span>
<span class="line"><span style="color:#babed8;">)</span></span>
<span class="line"><span style="color:#babed8;">match contract_opt:</span></span>
<span class="line"><span style="color:#babed8;">    case Some(contract):</span></span>
<span class="line"><span style="color:#babed8;">        sp.transfer(ticket, sp.mutez(0), contract)</span></span>
<span class="line"><span style="color:#babed8;">    case None:</span></span>
<span class="line"><span style="color:#babed8;">        sp.trace(&quot;Failed to find contract&quot;)</span></span></code></pre></div>`,5))]))}});export{u as __pageData,h as default};
