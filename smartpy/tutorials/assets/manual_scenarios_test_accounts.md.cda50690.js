import{D as n}from"./chunks/DocFunction.e9a30d9e.js";import{o,c,Q as l,C as t,y as p,v as s,a}from"./chunks/framework.741828c6.js";import"./chunks/DocFunction.vue_vue_type_style_index_0_scoped_21214205_lang.4ed993c7.js";const m=JSON.parse('{"title":"Test accounts","description":"","frontmatter":{},"headers":[],"relativePath":"manual/scenarios/test_accounts.md","filePath":"manual/scenarios/test_accounts.md"}'),i={name:"manual/scenarios/test_accounts.md"},b=Object.assign(i,{setup(r){return(d,e)=>(o(),c("div",null,[e[2]||(e[2]=l(`<h1 id="test-accounts" tabindex="-1">Test accounts <a class="header-anchor" href="#test-accounts" aria-label="Permalink to &quot;Test accounts&quot;">â€‹</a></h1><p>In tests, you can create and use accounts in two ways:</p><ul><li>Generate test accounts by passing a seed string to <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">test_account</span></span></code></span>. This function returns an object with the address of the test account in its <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">address</span></span></code></span> property.</li><li>Create objects of type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">address</span></span></code></span>.</li></ul><p>To simulate calling a smart contract from a certain account, pass the address of the account (either the test account&#39;s <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">address</span></span></code></span> property or the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">address</span></span></code></span> object) as the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">_sender</span></span></code></span> or <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">_source</span></span></code></span> property in the call to the entrypoint, as in this example:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def main():</span></span>
<span class="line"><span style="color:#babed8;">    class MyContract(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self, admin):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.adminAccount = admin</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        @sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">        def setAdmin(self, newAdmin):</span></span>
<span class="line"><span style="color:#babed8;">            assert sp.sender == self.data.adminAccount, &quot;Must be admin&quot;</span></span>
<span class="line"><span style="color:#babed8;">            self.data.adminAccount = newAdmin</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">@sp.add_test()</span></span>
<span class="line"><span style="color:#babed8;">def test():</span></span>
<span class="line"><span style="color:#babed8;">    # Create test accounts</span></span>
<span class="line"><span style="color:#babed8;">    alice = sp.test_account(&quot;Alice&quot;)</span></span>
<span class="line"><span style="color:#babed8;">    bob = sp.address(&quot;tz1QCVQinE8iVj1H2fckqx6oiM85CNJSK9Sx&quot;)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    scenario = sp.test_scenario(&quot;Admin test&quot;, main)</span></span>
<span class="line"><span style="color:#babed8;">    contract = main.MyContract(alice.address)</span></span>
<span class="line"><span style="color:#babed8;">    scenario += contract</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    # Verify that non-admin account can&#39;t change the admin</span></span>
<span class="line"><span style="color:#babed8;">    contract.setAdmin(bob, _sender=bob, _valid=False)</span></span>
<span class="line"><span style="color:#babed8;">    # Verify that the admin can change the admin</span></span>
<span class="line"><span style="color:#babed8;">    contract.setAdmin(</span></span>
<span class="line"><span style="color:#babed8;">        bob,</span></span>
<span class="line"><span style="color:#babed8;">        _sender=alice,</span></span>
<span class="line"><span style="color:#babed8;">    )</span></span>
<span class="line"><span style="color:#babed8;">    scenario.verify(contract.data.adminAccount == bob)</span></span></code></pre></div><p>For more information about calling entrypoints in tests, see <a href="./testing_contracts">Testing contracts</a>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Using real addresses in test scenarios can simplify deploying contracts. For example, if you use your real account address as the administrator of a contract and compile the contract, the output storage file has your address in it. You can then use that compiled storage file as the initial storage value for the contract.</p><p>However, if you want to create or verify <a href="./../data-types/keys-and-signatures">cryptographic signatures</a> with <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">make_signature</span></span></code></span> and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">check_signature</span></span></code></span> in tests, you must use test accounts and not <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">address</span></span></code></span> types.</p></div>`,7)),t(n,{name:"sp.test_account",arg:"seed",rType:"test_account"},{default:p(()=>e[0]||(e[0]=[s("p",null,[a("Create a "),s("em",null,"deterministic"),a(" keypair from a seed string. This function always creates the same keypair for the same seed.")],-1),s("div",{class:"language-python"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"python"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#676E95","font-style":"italic"}},"# seed is `Alice`")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"alice "),s("span",{style:{color:"#89DDFF"}},"="),s("span",{style:{color:"#BABED8"}}," sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"test_account"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#C3E88D"}},"Alice"),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#89DDFF"}},")")])])])],-1),s("p",null,"This command produces an object with the following properties:",-1),s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"Property"),s("th",null,"Type"),s("th",null,"Description")])]),s("tbody",null,[s("tr",null,[s("td",null,"alice.address"),s("td",null,[s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"address")])])])]),s("td",null,"Gives the public-key-hash")]),s("tr",null,[s("td",null,"alice.public_key_hash"),s("td",null,[s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"key_hash")])])])]),s("td",null,"Gives the public-key-hash")]),s("tr",null,[s("td",null,"alice.public_key"),s("td",null,[s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"key")])])])]),s("td",null,"Gives the public-key")]),s("tr",null,[s("td",null,"alice.secret_key"),s("td",null,[s("a",{href:"./../data-types/strings-and-bytes#strings"},[s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"string")])])])])]),s("td",null,"Gives the secret-key")])])],-1)])),_:1}),t(n,{name:"sp.make_signature",arg:"secret_key, message, message_format = 'Raw'",rType:"sp.signature"},{default:p(()=>e[1]||(e[1]=[s("p",null,[a("Creates a signature compatible with the "),s("a",{href:"./../data-types/keys-and-signatures"},"sp.check_signature(...)"),a(" function.")],-1),s("p",null,[a("The "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"message_format")])])]),a(" parameter accepts two values:")],-1),s("ul",null,[s("li",null,[s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"Hex")])])]),a(", in which case the message is interpreted as a hexadecimal string")]),s("li",null,[s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"Raw")])])]),a(" (the default) in which case the message is a "),s("a",{href:"./../data-types/strings-and-bytes#bytes"},[s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"bytes")])])])]),a(" value, usually the result of an "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"pack")])])]),a(" call.")])],-1)])),_:1}),e[3]||(e[3]=l('<p>For an example of creating and checking signatures with <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">make_signature</span></span></code></span>, see the &quot;Signatures&quot; template in the SmartPy online IDE.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>You can&#39;t use <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">test_account</span></span></code></span> or <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">make_signature</span></span></code></span> in smart contracts because Michelson can&#39;t manipulate secret keys.</p></div>',2))]))}});export{m as __pageData,b as default};
