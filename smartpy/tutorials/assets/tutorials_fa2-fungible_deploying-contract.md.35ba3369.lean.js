import{_ as e,o as a,c as n,Q as s}from"./chunks/framework.741828c6.js";const o="/previews/smartpy/tutorials/img/tutorials/fa2-fungible-mint-bcd.png",l="/previews/smartpy/tutorials/img/tutorials/fa2-fungible-temple-assets-list.png",i="/previews/smartpy/tutorials/img/tutorials/fa2-fungible-temple-manage-assets.png",p="/previews/smartpy/tutorials/img/tutorials/fa2-fungible-temple-add-asset.png",r="/previews/smartpy/tutorials/img/tutorials/fa2-fungible-temple-adding-token.png",c="/previews/smartpy/tutorials/img/tutorials/fa2-fungible-in-temple.png",k=JSON.parse('{"title":"Part 5: Deploying the contract","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/fa2-fungible/deploying-contract.md","filePath":"tutorials/fa2-fungible/deploying-contract.md"}'),h={name:"tutorials/fa2-fungible/deploying-contract.md"};function d(m,t,u,g,y,f){return a(),n("div",null,t[0]||(t[0]=[s(`<h1 id="part-5-deploying-the-contract" tabindex="-1">Part 5: Deploying the contract <a class="header-anchor" href="#part-5-deploying-the-contract" aria-label="Permalink to &quot;Part 5: Deploying the contract&quot;">​</a></h1><p>So far you have used the token in the SmartPy test scenario and in the Octez client local sandbox. To test it on a live network, you can use the Ghostnet test network.</p><p>For more information about testnets, see <a href="https://docs.tezos.com/developing/testnets" target="_blank" rel="noreferrer">Testing on testnets</a> on docs.tezos.com.</p><h2 id="configuring-the-octez-client-for-ghostnet" tabindex="-1">Configuring the Octez client for Ghostnet <a class="header-anchor" href="#configuring-the-octez-client-for-ghostnet" aria-label="Permalink to &quot;Configuring the Octez client for Ghostnet&quot;">​</a></h2><p>Follow these steps to set up your installation of the Octez client to work with Ghostnet:</p><ol><li><p>Go to <a href="https://teztnets.com/ghostnet-about" target="_blank" rel="noreferrer">https://teztnets.com/ghostnet-about</a> and copy the URL of a public RPC node for Ghostnet, such as <a href="https://rpc.ghostnet.teztnets.com" target="_blank" rel="noreferrer">https://rpc.ghostnet.teztnets.com</a>.</p></li><li><p>Use that URL to configure the Octez client in this command:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">octez-client</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-E</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">https://rpc.ghostnet.teztnets.com</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">config</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">update</span></span></code></pre></div></li><li><p>If you don&#39;t have an account on Ghostnet, create or import one with the instructions in <a href="https://docs.tezos.com/developing/octez-client/accounts" target="_blank" rel="noreferrer">Creating accounts</a> on docs.tezos.com.</p></li><li><p>Use the <a href="https://faucet.ghostnet.teztnets.com/" target="_blank" rel="noreferrer">Ghostnet faucet</a> to get some tez for the account.</p></li></ol><h2 id="setting-the-admin-account-in-the-contract" tabindex="-1">Setting the admin account in the contract <a class="header-anchor" href="#setting-the-admin-account-in-the-contract" aria-label="Permalink to &quot;Setting the admin account in the contract&quot;">​</a></h2><p>Currently, the admin account in the contract is an automatically-generated account. Follow these steps to use your account as the admin account instead:</p><ol><li><p>Compile the contract with the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">python</span></span></code></span> command as you did in previous steps.</p></li><li><p>Get the address of your account by running this command:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">octez-client</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">list</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">known</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">addresses</span></span></code></pre></div></li><li><p>Update the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">step_003_cont_0_storage</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">tz</span></span></code></span> file and replace the first address listed with your account. This is the field that stores the admin account in the contract storage.</p></li><li><p>Deploy the contract to Ghostnet by passing your account alias, the compiled contract, and initial storage value to the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">originate contract</span></span></code></span> command. For example, if your account is named <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">my_account</span></span></code></span> and the compiled files are in the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">fa2_lib_fungible</span></span></code></span> folder, the command looks like this:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">octez-client</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">originate</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">contract</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">smartpy_fa2_fungible</span><span style="color:#BABED8;"> \\</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C3E88D;">transferring</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">from</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">my_account</span><span style="color:#BABED8;"> \\</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C3E88D;">running</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">fa2_lib_fungible/step_003_cont_0_contract.tz</span><span style="color:#BABED8;"> \\</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C3E88D;">--init</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#FFCB6B;">cat</span><span style="color:#C3E88D;"> fa2_lib_fungible/step_003_cont_0_storage.tz</span><span style="color:#89DDFF;">)&quot;</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--burn-cap</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--force</span></span></code></pre></div></li><li><p>Copy the address of the contract from the output of the command. The contract address starts with <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">KT1</span></span></code></span>.</p></li><li><p>Look up the contract on the block explorer <a href="https://better-call.dev/" target="_blank" rel="noreferrer">Better Call Dev</a></p><p>Note that the block explorer recognizes that the contract is FA2-compliant and shows an FA2 icon at the top of the page. The block explorer also shows information about the tokens on the Tokens tab.</p></li><li><p>Mint some tokens and send them to your account from the Interact tab. For example, to mint tokens of an existing token type, click <strong>Add</strong>, select <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">existing</span></span></code></span> for the transaction, and specify your address and the number of tokens to create, as in this picture:</p><p><img src="`+o+'" alt="Specifying parameters for the mint transaction" width="300px"></p></li></ol><h2 id="interact-with-the-token-in-a-wallet" tabindex="-1">Interact with the token in a wallet <a class="header-anchor" href="#interact-with-the-token-in-a-wallet" aria-label="Permalink to &quot;Interact with the token in a wallet&quot;">​</a></h2><p>Because the token is FA2-compliant, wallet applications can work with it directly. However, you must add the token contract to your wallet for it to recognize the token.</p><p>The process for adding a token contract to a wallet depends on the wallet application. Here are steps for the Temple wallet:</p><ol><li><p>Copy the address of the contract. You can use the command <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">octez</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">client </span><span style="color:#FFCB6B;">list</span><span style="color:#BABED8;"> known contracts</span></span></code></span> to print the addresses of contracts that the Octez client knows about.</p></li><li><p>Open the Temple wallet and sign in.</p></li><li><p>Under the list of tokens, click <strong>Manage assets list</strong>:</p><p><img src="'+l+'" alt="The new token in the Temple wallet" width="300px"></p></li><li><p>From the popup window, click <strong>Manage</strong>:</p><p><img src="'+i+'" alt="The Manage button in the popup window" width="300px"></p></li><li><p>Click <strong>Add Asset</strong>:</p><p><img src="'+p+'" alt="Adding an asset to the tokens list" width="300px"></p></li><li><p>In the window that opens add information about the token, including the contract address, the token ID (such as 0 or 1), and the the symbol for the token, such as <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">TOK0</span></span></code></span>:</p><p><img src="'+r+'" alt="Adding information about the token" width="300px"></p></li><li><p>Click <strong>Add Asset</strong>.</p></li></ol><p>Now the token appears in your wallet just like any other token:</p><p><img src="'+c+'" alt="Opening the asset list filter" width="300px"></p><p>From here, you can run transactions on the token, such as sending it to a different account.</p><h2 id="next-steps" tabindex="-1">Next steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next steps&quot;">​</a></h2><p>Now that you have an FA2-compliant token, you can use it with all kinds of Tezos dApps. If you want to continue working with the token, here are some ideas:</p><ul><li>Implement an exchange rate for the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">convert</span></span></code></span> entrypoint</li><li>Implement other custom behaviors for your token while keeping it FA2-compliant</li><li>Build a front-end application to make it easier to interact with it</li><li>Add other token types and metadata for them</li><li>Try creating a single asset contract or an NFT contract with the SmartPy FA2 library</li></ul><p>You can also explore other tutorials at <a href="https://docs.tezos.com/tutorials" target="_blank" rel="noreferrer">https://docs.tezos.com/tutorials</a>.</p>',20)]))}const D=e(h,[["render",d]]);export{k as __pageData,D as default};
