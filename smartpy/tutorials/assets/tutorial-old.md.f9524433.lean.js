import{o as c,c as r,Q as e,v as a,a as n,b as l,m as o}from"./chunks/framework.741828c6.js";import{s as p}from"./chunks/variables.b0c7d2f2.js";const t="/previews/smartpy/tutorials/img/play.png",i="/previews/smartpy/tutorials/img/ide3.png",y="/previews/smartpy/tutorials/img/orig1.png",F="/previews/smartpy/tutorials/img/call1.png",D="/previews/smartpy/tutorials/img/call2.png",d="/previews/smartpy/tutorials/img/michelson.png",h={class:"tip custom-block"},A=["href"],m={class:"tip custom-block"},B=["href"],w=JSON.parse('{"title":"SmartPy Tutorial","description":"","frontmatter":{},"headers":[],"relativePath":"tutorial-old.md","filePath":"tutorial-old.md"}'),u={name:"tutorial-old.md"},C=Object.assign(u,{setup(f){return(b,s)=>(c(),r("div",null,[s[12]||(s[12]=e(`<h1 id="smartpy-tutorial" tabindex="-1">SmartPy Tutorial <a class="header-anchor" href="#smartpy-tutorial" aria-label="Permalink to &quot;SmartPy Tutorial&quot;">​</a></h1><p>SmartPy is a language designed for writing smart contracts on the Tezos blockchain. If you&#39;re not entirely sure what a smart contract is, don&#39;t worry. This tutorial is the ideal place to learn about them. It will guide you through the development of smart contracts using SmartPy&#39;s intuitive Python-like syntax. You&#39;ll be quickly on your way to testing and deploying your first smart contract on the Tezos blockchain!</p><p>There are no strict prerequisites for this tutorial, because it begins from the very basics. However, basic familiarity with programming, preferably in Python, would be beneficial.</p><h2 id="first-steps" tabindex="-1">First steps <a class="header-anchor" href="#first-steps" aria-label="Permalink to &quot;First steps&quot;">​</a></h2><h3 id="the-anatomy-of-a-smart-contract" tabindex="-1">The anatomy of a smart contract <a class="header-anchor" href="#the-anatomy-of-a-smart-contract" aria-label="Permalink to &quot;The anatomy of a smart contract&quot;">​</a></h3><p>Let&#39;s start by examining a simple example of a SmartPy contract that stores a number and allows users to add to it:</p><div class="language-SmartPy"><button title="Copy Code" class="copy"></button><span class="lang">SmartPy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">class Adder(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">    def __init__(self):</span></span>
<span class="line"><span style="color:#babed8;">        self.data.sum = 0</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    @sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">    def add(self, x):</span></span>
<span class="line"><span style="color:#babed8;">        self.data.sum += x</span></span></code></pre></div><p>To start with, we can see that a smart contract is implemented in SmartPy as a Python class inheriting from <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">Contract</span></span></code></span>. Furthermore, the class has an <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">__init__</span></span></code></span> method, and another method called <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">add</span></span></code></span>.</p><p>The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">__init__</span></span></code></span> method initialises the field <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">sum</span></span></code></span> to <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">0</span></span></code></span>. This is the initial value that the field will hold when the contract is deployed to the Tezos blockchain. A smart contract can store any number of values, but they must all be initialised in the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">__init__</span></span></code></span> method.</p><p>The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">add</span></span></code></span> method, marked as an entrypoint using the decorator <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">entrypoint</span></span></code></span>, can be invoked from outside the contract. This interaction is typically initiated by a human interacting with the blockchain (e.g. through a &quot;wallet&quot;) or by another contract. In our example, the entry point merely adds its parameter <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">x</span></span></code></span> to the sum maintained in <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">sum</span></span></code></span>.</p><p>Only the smart contract itself can change its storage; users and other contracts cannot access our contract&#39;s storage directly. Therefore, after deployment, the only way to change the number in the storage is to call the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">add</span></span></code></span> entrypoint.</p><h3 id="simulating-contracts-in-smartpy" tabindex="-1">Simulating contracts in SmartPy <a class="header-anchor" href="#simulating-contracts-in-smartpy" aria-label="Permalink to &quot;Simulating contracts in SmartPy&quot;">​</a></h3><p>Before deploying our contract to the Tezos blockchain, let&#39;s test it. This step is crucial in smart contract development because the code of a contract becomes unchangeable when it&#39;s deployed.</p><p>Here is the previous example included in a SmartPy <em>module</em>, along with a test:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> smartpy </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#BABED8;"> sp</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">module</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Adder</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Contract</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">            self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">sum</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">entrypoint</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">x</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">            self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">sum</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#BABED8;"> x</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add_test</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#BABED8;">    s </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test_scenario</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my first test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> main</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    a </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> main</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Adder</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#BABED8;">    s </span><span style="color:#89DDFF;">+=</span><span style="color:#BABED8;"> a</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    a</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    a</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">verify</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">a</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">sum</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">==</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Let&#39;s dissect this example step by step:</p><ul><li><p>Firstly, we import the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">smartpy</span></span></code></span> library, which is conventionally abbreviated as sp.</p></li><li><p>A SmartPy <em>module</em>, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">main</span></span></code></span>, is then defined using the decorator <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">module</span></span></code></span>. This indicates that the following code is written in SmartPy, as opposed to ordinary Python. Among other things, this means that the code contained in this block will be type-checked. More on this later.</p></li><li><p>A module can contain one or several definitions. In this instance, the sole definition is that of the contract class <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">Adder</span></span></code></span>, which we&#39;ve already discussed in the previous section.</p></li><li><p>Next, we add a test, designated as such by the decorator <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">add_test</span></span></code></span>. Inside this test, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">s </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test_scenario</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">)</span></span></code></span> creates a <em>test scenario</em>, which simulates the Tezos environment for testing purposes. Then <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">a </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> main</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Adder</span><span style="color:#89DDFF;">()</span></span></code></span> instantiates the contract, and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">s </span><span style="color:#89DDFF;">+=</span><span style="color:#BABED8;"> a</span></span></code></span> adds it to the scenario. Note that we write <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">main</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">Adder</span></span></code></span> because <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">Adder</span></span></code></span> has been defined inside the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">main</span></span></code></span> module. We also have to give main as an argument to sp.test_scenario.</p></li><li><p>Then, we interact with the adder contract: firstly, we call the entrypoint add with the argument 2, then a second time with the argument 3.</p></li><li><p>Finally, we test the state of the contract&#39;s storage by verifying that it is 5.</p></li></ul><h3 id="simulation-results" tabindex="-1">Simulation results <a class="header-anchor" href="#simulation-results" aria-label="Permalink to &quot;Simulation results&quot;">​</a></h3><p>SmartPy provides a convenient online IDE (integrated development environment) that enables you to write smart contracts and test them directly in your browser. It presents the simulation results in a user-friendly manner.</p>`,19)),a("div",h,[s[5]||(s[5]=a("p",{class:"custom-block-title"},"🚀 Try it out!",-1)),a("p",null,[s[0]||(s[0]=n("Head over to ")),a("a",{href:`https://${l(p)}${l(o)("ide")}`,target:"\\_blank"}," smartpy.io/ide",8,A),s[1]||(s[1]=n(" and paste the above code snippet into the code editor. Then click the ")),s[2]||(s[2]=a("img",{src:t,style:{display:"inline",width:"30px"}},null,-1)),s[3]||(s[3]=n(" button. The result should resemble something like this: ")),s[4]||(s[4]=a("img",{src:i,style:{width:"530px"}},null,-1))])]),s[13]||(s[13]=e('<p>The simulation results show the following elements:</p><ul><li><p>The first one corresponds to the line <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">s </span><span style="color:#89DDFF;">+=</span><span style="color:#BABED8;"> a</span></span></code></span> and looks like this: <img src="'+y+'" style="margin:10px 30px;width:530px;"> This simply records the instantiation of a contract.</p></li><li><p>Next, the first entrypoint call <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">a</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span></span></code></span> yields: <img src="'+F+'" style="margin:10px 30px;width:530px;"> It shows that the argument was <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">2</span></span></code></span> and that the new contract storage now contains a new value for <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">sum</span></span></code></span> (this corresponds to <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">sum</span></span></code></span> in the source code), namely <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">2</span></span></code></span>.</p></li><li><p>The second call <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">a</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">)</span></span></code></span> then results in: <img src="'+D+'" style="margin:10px 30px;width:530px;"> As expected, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">sum</span></span></code></span> now is <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">5</span></span></code></span>.</p></li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>SmartPy compiles to Michelson, the native, low-level language of Tezos. To view the compiled code, click on <em>Deploy Michelson Contract</em> and then <em>Code</em> on the right-hand side of the browser window. You should see something like this:</p><img src="'+d+`" style="width:430px;"><p>Knowledge of Michelson is not necessary to work with SmartPy, but be aware that SmartPy does not always behave the same as Python because of the limitations of Michelson. For more information about Michelson, see <a href="https://octez.tezos.com/docs/active/michelson.html" target="_blank" rel="noreferrer">Michelson: the language of Smart Contracts in Tezos</a> in the Octez documentation and the <a href="https://tezos.gitlab.io/michelson-reference/" target="_blank" rel="noreferrer">Michelson language reference</a>.</p></div><h3 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h3><p>Before moving on to the next part, let&#39;s summarise what we&#39;ve learned so far:</p><ul><li><p>In SmartPy, a contract is represented as a Python class inheriting from <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">Contract</span></span></code></span>.</p></li><li><p>A contract can have one or several entrypoints, each marked as <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">entrypoint</span></span></code></span>. After a contract has been deployed, its entrypoints cannot be altered. The blockchain ensures that the contract evolves only according to the rules specified in its code.</p></li><li><p>A smart contract&#39;s storage is contained in fields of <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span></span></code></span>, such as <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">sum</span></span></code></span>. Contracts can have any amount of data in their storage, consisting of many different primitive or complex data types. After a contract has been deployed, only its own code can change its storage.</p></li></ul><h2 id="a-simple-token" tabindex="-1">A simple token <a class="header-anchor" href="#a-simple-token" aria-label="Permalink to &quot;A simple token&quot;">​</a></h2><p>Now that you are familiar with the basics, let&#39;s write a slightly more interesting contract. In this part, we&#39;re going to make a new currency, which we&#39;ll call the &quot;Ducat&quot;.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The smart contracts presented in this section are meant to illustrate basic concepts and we do not recommend using them in production. For real-world applications, please have a look at <a href="/previews/smartpy/tutorials/manual/libraries/FA2-lib/overview">FA2 lib</a>.</p></div><h3 id="the-contract" tabindex="-1">The contract <a class="header-anchor" href="#the-contract" aria-label="Permalink to &quot;The contract&quot;">​</a></h3><p>A common way to implement a new currency is by using a smart contract that remembers the number of tokens (here Ducats) owned by each participant. This is akin to a bank maintaining balances (number of Ducats) for current accounts.</p><p>To start, we&#39;ll create a module with a contract and its constructor:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> smartpy </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#BABED8;"> sp</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">module</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Ducat</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Contract</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">admin</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">            self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">balances</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#BABED8;">            self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">admin</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> admin</span></span></code></pre></div><p>Here <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">balances</span></span></code></span> is a <a href="/previews/smartpy/tutorials/manual/data-types/lists-sets-and-maps#maps">map</a>, which associates a balance to each address. Initially it is empty, indicating that nobody owns any Ducats. Then there is an <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">admin</span></span></code></span> address that has special powers, namely it is allowed to make new Ducats, i.e. <em>mint</em> them.</p><p>Before we write the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">transfer</span></span></code></span> and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">mint</span></span></code></span> entrypoints, we need two auxiliary methods. The first one increases the balance in a given account by a specified amount:</p><div class="language-SmartPy"><button title="Copy Code" class="copy"></button><span class="lang">SmartPy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.private(with_storage=&quot;read-write&quot;)</span></span>
<span class="line"><span style="color:#babed8;">def increase_balance(self, account, amount):</span></span>
<span class="line"><span style="color:#babed8;">    if self.data.balances.contains(account):</span></span>
<span class="line"><span style="color:#babed8;">        self.data.balances[account] += amount</span></span>
<span class="line"><span style="color:#babed8;">    else:</span></span>
<span class="line"><span style="color:#babed8;">        self.data.balances[account] = amount</span></span></code></pre></div><p>The code first checks whether the account has an entry in the ledger. If so, the amount is added to the balance in the entry. If no entry exists yet, a new one is added and initialised to the amount.</p><p>The method has the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">with_storage</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">read-write</span><span style="color:#89DDFF;">&quot;</span></span></code></span> decorator, which enables it to read and write data in the contract&#39;s storage.</p><p>The second auxiliary method decreases the balance by the specified amount:</p><div class="language-SmartPy"><button title="Copy Code" class="copy"></button><span class="lang">SmartPy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.private(with_storage=&quot;read-write&quot;)</span></span>
<span class="line"><span style="color:#babed8;">def decrease_balance(self, account, amount):</span></span>
<span class="line"><span style="color:#babed8;">    b = self.data.balances[account] - amount</span></span>
<span class="line"><span style="color:#babed8;">    assert b &gt;= 0</span></span>
<span class="line"><span style="color:#babed8;">    if b == 0:</span></span>
<span class="line"><span style="color:#babed8;">        del self.data.balances[account]</span></span>
<span class="line"><span style="color:#babed8;">    else:</span></span>
<span class="line"><span style="color:#babed8;">        self.data.balances[account] = b</span></span></code></pre></div><p>Here two points are noteworthy:</p><ul><li><p>If the balance in the account is insufficient the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#BABED8;"> b </span><span style="color:#89DDFF;">&gt;=</span> <span style="color:#F78C6C;">0</span></span></code></span> statement throws an error and cancels the transaction.</p></li><li><p>To save storage space, the method removes the account from the ledger if its balance reaches 0.</p></li></ul><p>We can now write the entrypoints of our Ducat contract. First, there is a <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">transfer</span></span></code></span> entrypoint, which transfers Ducats from one account to another:</p><div class="language-SmartPy"><button title="Copy Code" class="copy"></button><span class="lang">SmartPy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">def transfer(self, params):</span></span>
<span class="line"><span style="color:#babed8;">    assert params.amount &gt;= 0</span></span>
<span class="line"><span style="color:#babed8;">    self.decrease_balance(sp.record(account=sp.sender, amount=params.amount))</span></span>
<span class="line"><span style="color:#babed8;">    self.increase_balance(sp.record(account=params.dest, amount=params.amount))</span></span></code></pre></div><p>This entrypoint uses the two previously defined auxiliary methods. A few things are noteworthy here:</p><ul><li><p>To get the address of the sender, it uses the built-in variable <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">sender</span></span></code></span>, which is the account that called the entrypoint.</p></li><li><p>If the sending account has an insufficient balance, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">decreaseBalance</span></span></code></span> fails. On Tezos if any part of an operation fails, the entire transaction is aborted and the contract is rolled back to its state before the transaction started. This means that even calling <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">increase_balance</span></span></code></span> before <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">decrease_balance</span></span></code></span> would not yield inconsistent results in this case.</p></li><li><p>We use record syntax to pass multiple parameters to the auxiliary functions.</p></li></ul><p>Finally, as mentioned previously, the administrator is allowed to mint new coins. This is implemented by the following entrypoint:</p><div class="language-SmartPy"><button title="Copy Code" class="copy"></button><span class="lang">SmartPy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">def mint(self, params):</span></span>
<span class="line"><span style="color:#babed8;">    assert sp.sender == self.data.admin</span></span>
<span class="line"><span style="color:#babed8;">    self.increase_balance(sp.record(x=params.dest, amount=params.amount))</span></span></code></pre></div><p>The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">assert</span></span></code></span> statement ensures that the operation fails if anyone other than the administrator attempts to call this entrypoint. The newly minted amount is assigned to the account given as a parameter.</p><h3 id="the-test-scenario" tabindex="-1">The test scenario <a class="header-anchor" href="#the-test-scenario" aria-label="Permalink to &quot;The test scenario&quot;">​</a></h3><p>Now that we have written the smart contract for Ducats, let&#39;s add a test scenario. The test scenario is important not just for testing but to compile the Michelson output.</p><p>To begin with, we define three accounts <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">admin</span></span></code></span>, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">alice</span></span></code></span>, and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">bob</span></span></code></span>:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add_test</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#BABED8;">    admin </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test_account</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Admin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#F07178;">address</span></span>
<span class="line"><span style="color:#BABED8;">    alice </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test_account</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Alice</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#F07178;">address</span></span>
<span class="line"><span style="color:#BABED8;">    bob </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test_account</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Bob</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#F07178;">address</span></span></code></pre></div><p>Then, as previously, we define a test scenario and instantiate our contract:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">s </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test_scenario</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Ducat test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> main</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">c </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> main</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Ducat</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">admin</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">s </span><span style="color:#89DDFF;">+=</span><span style="color:#BABED8;"> c</span></span></code></pre></div><p>To start off, we have the administrator mint 5 ducats each for Alice and Bob.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">c</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mint</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">dest</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">alice</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">amount</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">_sender</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">admin</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">c</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mint</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">dest</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">bob</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">amount</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">_sender</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">admin</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Adding <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">_sender</span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;">admin</span></span></code></span> to an entrypoint call informs SmartPy that the transaction came from the admin account.</p><p>For testing purposes, we verify that the ledger indeed contains these sums:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">verify</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">c</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">balances</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">alice</span><span style="color:#89DDFF;">]</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">==</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">verify</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">c</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">balances</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">bob</span><span style="color:#89DDFF;">]</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">==</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Next, Bob transfers 3 tokens to Alice. Again, we verify the resulting balances:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">c</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">transfer</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">dest</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">alice</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">amount</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">_sender</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">bob</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">verify</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">c</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">balances</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">alice</span><span style="color:#89DDFF;">]</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">==</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">verify</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">c</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">balances</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">bob</span><span style="color:#89DDFF;">]</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">==</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Finally, let&#39;s see what happens if we do something unauthorised. Here Bob is trying to send 3 ducats to Alice, even though there are only 2 ducats in his account. To indicate that the operation is expected to fail we supply <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">_valid</span><span style="color:#89DDFF;">=False</span></span></code></span> to the entrypoint call:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">c</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">transfer</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">dest</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">alice</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">amount</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">_sender</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">bob</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">_valid</span><span style="color:#89DDFF;">=False)</span></span></code></pre></div><p>To test another unauthorised transaction, let&#39;s verify that Bob can&#39;t mint new ducats:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">c</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mint</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">dest</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">bob</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">amount</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">_sender</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">bob</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">_valid</span><span style="color:#89DDFF;">=False)</span></span></code></pre></div><p>For reference, here is the complete code of the Ducat smart contract and the test scenario:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> smartpy </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#BABED8;"> sp</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">module</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Ducat</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Contract</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">admin</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">            self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">balances</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#BABED8;">            self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">admin</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> admin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">private</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">with_storage</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">read-write</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">increase_balance</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">account</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">amount</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">balances</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">contains</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">account</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">                self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">balances</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">account</span><span style="color:#89DDFF;">]</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#BABED8;"> amount</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">                self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">balances</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">account</span><span style="color:#89DDFF;">]</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> amount</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">private</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">with_storage</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">read-write</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">decrease_balance</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">account</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">amount</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">            b </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">balances</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">account</span><span style="color:#89DDFF;">]</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> amount</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#BABED8;"> b </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> b </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">                </span><span style="color:#89DDFF;font-style:italic;">del</span><span style="color:#BABED8;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">balances</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">account</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">                self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">balances</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">account</span><span style="color:#89DDFF;">]</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> b</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">entrypoint</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">transfer</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">params</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">            self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">decrease_balance</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">record</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">account</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">sender</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">amount</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">params</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">amount</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#BABED8;">            self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">increase_balance</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">record</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">account</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">params</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">dest</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">amount</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">params</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">amount</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">entrypoint</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">mint</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">params</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#BABED8;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">sender</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">admin</span></span>
<span class="line"><span style="color:#BABED8;">            self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">increase_balance</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">record</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">account</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">params</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">dest</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">amount</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">params</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">amount</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add_test</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#BABED8;">    admin </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test_account</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Admin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#F07178;">address</span></span>
<span class="line"><span style="color:#BABED8;">    alice </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test_account</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Alice</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#F07178;">address</span></span>
<span class="line"><span style="color:#BABED8;">    bob </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test_account</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Bob</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#F07178;">address</span></span>
<span class="line"><span style="color:#BABED8;">    s </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test_scenario</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Ducat test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> main</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    c </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> main</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Ducat</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">admin</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    s </span><span style="color:#89DDFF;">+=</span><span style="color:#BABED8;"> c</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    c</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mint</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">dest</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">alice</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">amount</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">_sender</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">admin</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    c</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mint</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">dest</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">bob</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">amount</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">_sender</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">admin</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">verify</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">c</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">balances</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">alice</span><span style="color:#89DDFF;">]</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">==</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">verify</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">c</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">balances</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">bob</span><span style="color:#89DDFF;">]</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">==</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    c</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">transfer</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">dest</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">alice</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">amount</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">_sender</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">bob</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">verify</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">c</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">balances</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">alice</span><span style="color:#89DDFF;">]</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">==</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">verify</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">c</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">balances</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">bob</span><span style="color:#89DDFF;">]</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">==</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    c</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">transfer</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">dest</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">alice</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">amount</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">_sender</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">bob</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">_valid</span><span style="color:#89DDFF;">=False)</span></span>
<span class="line"><span style="color:#BABED8;">    c</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mint</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">dest</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">bob</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">amount</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">_sender</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">bob</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">_valid</span><span style="color:#89DDFF;">=False)</span></span></code></pre></div>`,48)),a("div",m,[s[10]||(s[10]=a("p",{class:"custom-block-title"},"🚀 Try it out!",-1)),a("p",null,[s[6]||(s[6]=n("As before, you can go to ")),a("a",{href:`https://${l(p)}${l(o)("ide")}`,target:"\\_blank"}," smartpy.io/ide",8,B),s[7]||(s[7]=n(" and paste the above code snippet into the code editor. Then click the ")),s[8]||(s[8]=a("img",{src:t,style:{display:"inline",width:"30px"}},null,-1)),s[9]||(s[9]=n(" button and examine the results."))]),s[11]||(s[11]=a("p",null,[n("You can also remove the "),a("span",{class:"inline shiki material-theme-palenight"},[a("code",null,[a("span",{class:"line"},[a("span",{style:{color:"#BABED8"}},"valid"),a("span",{style:{color:"#89DDFF"}},"=False")])])]),n(" from the last two entrypoints and see what happens.")],-1))]),s[14]||(s[14]=e('<h2 id="further-resources" tabindex="-1">Further resources <a class="header-anchor" href="#further-resources" aria-label="Permalink to &quot;Further resources&quot;">​</a></h2><p>Congratulations on concluding this tutorial! As you have seen, SmartPy makes writing and testing smart contracts a breeze. However, we&#39;ve barely scratched the surface of what is possible. Here are some further resources to accompany you on your SmartPy journey:</p><ul><li><p>Latest news and updates on Twitter: <a href="https://twitter.com/smartpy_io" target="_blank" rel="noreferrer">@smartpy_io</a></p></li><li><p>The <a href="https://forum.smartpy.io" target="_blank" rel="noreferrer">SmartPy forum</a>: a friendly place to ask questions and get support</p></li><li><p>The <a href="/previews/smartpy/tutorials/manual/introduction/overview">SmartPy manual</a></p></li></ul>',3))]))}});export{w as __pageData,C as default};
