import{D as e}from"./chunks/DocFunction.e9a30d9e.js";import"./chunks/DocInPlace.vue_vue_type_style_index_0_scoped_8490fbaf_lang.4ed993c7.js";import{o,c as i,Q as t,C as l,y as p,v as s,a}from"./chunks/framework.741828c6.js";import"./chunks/DocFunction.vue_vue_type_style_index_0_scoped_21214205_lang.4ed993c7.js";const d=JSON.parse('{"title":"Numbers","description":"","frontmatter":{},"headers":[],"relativePath":"manual/data-types/integers-and-mutez.md","filePath":"manual/data-types/integers-and-mutez.md"}'),c={name:"manual/data-types/integers-and-mutez.md"},u=Object.assign(c,{setup(r){return(y,n)=>(o(),i("div",null,[n[5]||(n[5]=t(`<h1 id="numbers" tabindex="-1">Numbers <a class="header-anchor" href="#numbers" aria-label="Permalink to &quot;Numbers&quot;">​</a></h1><p>SmartPy has several types for integers:</p><ul><li><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">nat</span></span></code></span> for non-negative integers (zero and above), known as natural numbers or nats</li><li><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">int</span></span></code></span> for all integers</li><li><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mutez</span></span></code></span> for non-negative amounts of micro-tez or mutez, which is one-millionth of a tez, the token of the Tezos blockchain</li></ul><p>The types for integers and nats are not compatible with <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mutez</span></span></code></span>, which means that you can&#39;t compare integers and nats with <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mutez</span></span></code></span> types or use mathematical operations that combine them. However, you can use functions in the <a href="./../stdlib/library">standard libraries</a> to convert between nat and mutez.</p><p>SmartPy does not support floating-point numbers because Tezos does not.</p><h2 id="integers-and-natural-numbers" tabindex="-1">Integers and natural numbers <a class="header-anchor" href="#integers-and-natural-numbers" aria-label="Permalink to &quot;Integers and natural numbers&quot;">​</a></h2><p>A literal integer such as 2 is either of type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">nat</span></span></code></span> or <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">int</span></span></code></span>, depending on how it is used. To be explicit about the type, you can write <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nat</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span></span></code></span> or <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">int</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span></span></code></span>.</p><h3 id="basic-arithmetic" tabindex="-1">Basic arithmetic <a class="header-anchor" href="#basic-arithmetic" aria-label="Permalink to &quot;Basic arithmetic&quot;">​</a></h3><p>The operators <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">+</span></span></code></span>, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">-</span></span></code></span>, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">*</span></span></code></span> and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">/</span></span></code></span> perform addition, subtraction, multiplication, and division, respectively. They are <em>homogeneous</em>, meaning that both arguments must be of the same type (either both <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">nat</span></span></code></span> or both <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">int</span></span></code></span>).</p><p>The type of the result is the same as the arguments, except for <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">-</span></span></code></span>, which always returns an <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">int</span></span></code></span>.</p><p>Examples:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">assert sp.nat(2) + sp.nat(3) == sp.nat(5)</span></span>
<span class="line"><span style="color:#babed8;">assert sp.int(2) + sp.int(3) == sp.int(5)</span></span>
<span class="line"><span style="color:#babed8;">assert sp.nat(2) - sp.nat(3) == sp.int(-1)</span></span>
<span class="line"><span style="color:#babed8;">assert sp.int(2) - sp.int(3) == sp.int(-1)</span></span></code></pre></div><p>The unary negation operator <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">-</span></span></code></span> can take either <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">nat</span></span></code></span> or <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">int</span></span></code></span> and always returns an <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">int</span></span></code></span>. For example, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nat</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span> <span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">int</span><span style="color:#89DDFF;">(-</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span></span></code></span>.</p><p>Mixing different types yields an error. For example, adding an integer to a nat is invalid, as in <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nat</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span> <span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">int</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">)</span></span></code></span>.</p><p>To manipulate different types, SmartPy provides the functions <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">add</span></span></code></span>, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">sub</span></span></code></span>, and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mul</span></span></code></span>, as in this example:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">a = sp.nat(2)</span></span>
<span class="line"><span style="color:#babed8;">b = sp.int(3)</span></span>
<span class="line"><span style="color:#babed8;">assert sp.add(a, b) == sp.int(5)</span></span></code></pre></div><h3 id="division" tabindex="-1">Division <a class="header-anchor" href="#division" aria-label="Permalink to &quot;Division&quot;">​</a></h3>`,17)),l(e,{name:"sp.ediv",args:["a: sp.nat, b: sp.nat","a: sp.int, b: sp.nat","a: sp.nat, b: sp.int","a: sp.int, b: sp.int"],rTypes:["sp.option[sp.pair[sp.nat, sp.nat]]","sp.option[sp.pair[sp.int, sp.nat]]","sp.option[sp.pair[sp.int, sp.nat]]","sp.option[sp.pair[sp.int, sp.nat]]"]},{default:p(()=>n[0]||(n[0]=[s("p",null,[s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"ediv")])])]),a(" performs Euclidean division, which returns the quotient and the remainder within an "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"option")])])]),a(" type. Note that the quotient type depends on the types of the arguments.")],-1),s("p",null,"If both of the arguments are nats, the function returns an option with a nat for the quotient and a nat for the remainder, as in this example:",-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"assert sp.ediv(sp.nat(14), sp.nat(3)) == sp.Some(")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"    (sp.nat(4), sp.nat(2))")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},")  # 14 == 4 * 3 + 2")])])])],-1),s("p",null,[a("In any other combination of integers and nats, "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"ediv")])])]),a(" returns an option with an integer for the quotient and a nat for the remainder, as in these examples:")],-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"assert sp.ediv(sp.int(-14), sp.nat(3)) == sp.Some(")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"    (sp.int(-5), sp.nat(1))")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},")  # -14 == -5 *  3 + 1")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"assert sp.ediv(sp.nat(14), sp.int(-3)) == sp.Some(")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"    (sp.int(-4), sp.nat(2))")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},")  #  14 == -4 * -3 + 2")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"assert sp.ediv(sp.int(-14), sp.int(-3)) == sp.Some(")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"    (sp.int(5), sp.nat(1))")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},")  # -14 ==  5 * -3 + 1")])])])],-1),s("p",null,[a("If you try to divide by zero, the option type contains "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"None")])])]),a(", as in this example:")],-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"result_opt = sp.ediv(sp.nat(14), 0)")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"match result_opt:")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"    case Some(result):")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"        (quotient, remainder) = result")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"        sp.trace(quotient)")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"        sp.trace(remainder)")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"    case None:")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},'        sp.trace("Division by zero")')])])])],-1),s("p",null,[a("If the option type contains "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"Some")])])]),a(", then "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"ediv"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#82AAFF"}},"a"),s("span",{style:{color:"#89DDFF"}},","),s("span",{style:{color:"#82AAFF"}}," b"),s("span",{style:{color:"#89DDFF"}},")"),a(" "),s("span",{style:{color:"#89DDFF"}},"="),s("span",{style:{color:"#BABED8"}}," sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"Some"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#82AAFF"}},"q"),s("span",{style:{color:"#89DDFF"}},","),s("span",{style:{color:"#82AAFF"}}," r"),s("span",{style:{color:"#89DDFF"}},")")])])]),a(", where "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"q")])])]),a(" (the "),s("em",null,"quotient"),a(") and "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"r")])])]),a(" (the "),s("em",null,"remainder"),a(") are the unique integers such that "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"a "),s("span",{style:{color:"#89DDFF"}},"=="),s("span",{style:{color:"#BABED8"}}," q "),s("span",{style:{color:"#89DDFF"}},"*"),s("span",{style:{color:"#BABED8"}}," b "),s("span",{style:{color:"#89DDFF"}},"+"),s("span",{style:{color:"#BABED8"}}," r")])])]),a(" and both "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F78C6C"}},"0"),a(" "),s("span",{style:{color:"#89DDFF"}},"<="),s("span",{style:{color:"#BABED8"}}," r")])])]),a(" and "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"r "),s("span",{style:{color:"#89DDFF"}},"<"),s("span",{style:{color:"#BABED8"}}," b")])])]),a(".")],-1)])),_:1}),n[6]||(n[6]=t('<p>To get only the quotient or remainder of two integers or two nats, you can use <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">a </span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;"> b</span></span></code></span> and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mod</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">a</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> b</span><span style="color:#89DDFF;">)</span></span></code></span>, respectively. In either case, dividing by zero causes a <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">Division_by_zero</span></span></code></span>.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>For negative denominators the result of division differs between SmartPy and Python. SmartPy follows the Michelson semantics, whereas Python rounds the quotient towards negative infinity (yielding negative remainders!). To avoid confusion between the two, the SmartPy syntax uses <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">/</span></span></code></span> and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mod</span></span></code></span> instead of <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">//</span></span></code></span> and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">%</span></span></code></span>.</p></div><h3 id="comparison" tabindex="-1">Comparison <a class="header-anchor" href="#comparison" aria-label="Permalink to &quot;Comparison&quot;">​</a></h3><p>You can compare two integers of the same type (either <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">nat</span></span></code></span> or <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">int</span></span></code></span>) with the operators <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">==</span></span></code></span>, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">!=</span></span></code></span>, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span></span></code></span>, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;=</span></span></code></span>, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&gt;</span></span></code></span>, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&gt;=</span></span></code></span>. The result is of type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">bool</span></span></code></span>. For example, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">2</span> <span style="color:#89DDFF;">==</span> <span style="color:#F78C6C;">3</span></span></code></span> is <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">False</span></span></code></span>.</p><h3 id="conversions" tabindex="-1">Conversions <a class="header-anchor" href="#conversions" aria-label="Permalink to &quot;Conversions&quot;">​</a></h3>',5)),l(e,{name:"sp.to_int",arg:"x: sp.nat",rType:"sp.int"},{default:p(()=>n[1]||(n[1]=[s("p",null,[a("The function "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"to_int")])])]),a(" converts an "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"nat")])])]),a(" to an "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"int")])])]),a(". For example "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"to_int"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#82AAFF"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"nat"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#F78C6C"}},"2"),s("span",{style:{color:"#89DDFF"}},"))"),a(" "),s("span",{style:{color:"#89DDFF"}},"=="),s("span",{style:{color:"#BABED8"}}," sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"to_int"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#F78C6C"}},"2"),s("span",{style:{color:"#89DDFF"}},")")])])]),a(", or (thanks to type inference) "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"to_int"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#F78C6C"}},"2"),s("span",{style:{color:"#89DDFF"}},")"),a(" "),s("span",{style:{color:"#89DDFF"}},"=="),a(" "),s("span",{style:{color:"#F78C6C"}},"2")])])]),a(".")],-1)])),_:1}),l(e,{name:"sp.is_nat",arg:"a: sp.int",rType:"sp.option[sp.nat]"},{default:p(()=>n[2]||(n[2]=[s("p",null,[a("The function "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"is_nat")])])]),a(" converts an "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"int")])])]),a(" to an "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"option"),s("span",{style:{color:"#89DDFF"}},"["),s("span",{style:{color:"#F07178"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"nat"),s("span",{style:{color:"#89DDFF"}},"]")])])]),a(":")],-1),s("ul",null,[s("li",null,[a("If a variable "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"a")])])]),a(" is greater than or equal to zero, "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"is_nat"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#82AAFF"}},"a"),s("span",{style:{color:"#89DDFF"}},")")])])]),a(" returns "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"Some"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#82AAFF"}},"b"),s("span",{style:{color:"#89DDFF"}},")")])])]),a(", where "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"to_int"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#82AAFF"}},"b"),s("span",{style:{color:"#89DDFF"}},")"),a(" "),s("span",{style:{color:"#89DDFF"}},"=="),s("span",{style:{color:"#BABED8"}}," a")])])])]),s("li",null,[a("If a variable "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"a")])])]),a(" is less than zero, "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"is_nat"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#82AAFF"}},"a"),s("span",{style:{color:"#89DDFF"}},")")])])]),a(" returns "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"None")])])])])],-1),s("p",null,"For example:",-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"assert sp.is_nat(2) == sp.Some(2)")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"assert sp.is_nat(-2) == None")])])])],-1)])),_:1}),l(e,{name:"sp.as_nat",arg:"x: sp.int",rType:"sp.nat"},{default:p(()=>n[3]||(n[3]=[s("p",null,[a("The function "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"as_nat")])])]),a(" performs the same conversion as "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"is_nat")])])]),a(", but instead of returning an option, it raises an error on negative numbers. Thus "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"as_nat"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#F78C6C"}},"2"),s("span",{style:{color:"#89DDFF"}},")"),a(" "),s("span",{style:{color:"#89DDFF"}},"=="),a(" "),s("span",{style:{color:"#F78C6C"}},"2")])])]),a(", whereas "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"as_nat"),s("span",{style:{color:"#89DDFF"}},"(-"),s("span",{style:{color:"#F78C6C"}},"2"),s("span",{style:{color:"#89DDFF"}},")")])])]),a(" yields an error.")],-1)])),_:1}),n[7]||(n[7]=t(`<h3 id="bitwise-arithmetic" tabindex="-1">Bitwise arithmetic <a class="header-anchor" href="#bitwise-arithmetic" aria-label="Permalink to &quot;Bitwise arithmetic&quot;">​</a></h3><p>Bitwise <em>and</em>, <em>or</em> and <em>xor</em> operations are available as <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&amp;</span></span></code></span>, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">|</span></span></code></span> and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">^</span></span></code></span> on <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">nat</span></span></code></span>:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">assert 42 &amp; 1 == 0</span></span>
<span class="line"><span style="color:#babed8;">assert 42 | 1 == 43</span></span>
<span class="line"><span style="color:#babed8;">assert 42 ^ 1 == 43</span></span></code></pre></div><p>Furthermore, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">~</span><span style="color:#BABED8;">x</span></span></code></span> computes the <a href="https://en.wikipedia.org/wiki/Two%27s_complement" target="_blank" rel="noreferrer">two&#39;s complement</a> of <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">x</span></span></code></span> (of type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">int</span></span></code></span>):</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">assert ~100 == -101</span></span></code></pre></div><h3 id="shifting" tabindex="-1">Shifting <a class="header-anchor" href="#shifting" aria-label="Permalink to &quot;Shifting&quot;">​</a></h3><p>Left and right shifts are also available as <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;&lt;</span></span></code></span> and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;</span></span></code></span> on <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">nat</span></span></code></span>:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">assert 42 &lt;&lt; 1 == 84</span></span>
<span class="line"><span style="color:#babed8;">assert 42 &gt;&gt; 1 == 21</span></span></code></pre></div><h2 id="token-amounts" tabindex="-1">Token amounts <a class="header-anchor" href="#token-amounts" aria-label="Permalink to &quot;Token amounts&quot;">​</a></h2><p>The type <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mutez</span></span></code></span> represents micro-tez, or one-millionth of one tez, so <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mutez</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">42</span><span style="color:#89DDFF;">)</span></span></code></span> denotes 42 micro-tez or 0.000042 tez.</p><p>As shorthand, you can use <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">tez</span><span style="color:#89DDFF;">()</span></span></code></span> to create <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mutez</span></span></code></span> types. For example, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">tez</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">a</span><span style="color:#89DDFF;">)</span></span></code></span> is equivalent to <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mutez</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">a </span><span style="color:#89DDFF;">*</span> <span style="color:#F78C6C;">1_000_000</span><span style="color:#89DDFF;">)</span></span></code></span>.</p><p>You can add and subtract mutez values with the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">+</span></span></code></span> and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">-</span></span></code></span> operators but you cannot multiply them directly. Negative results raise errors. For example, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mutez</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">)</span> <span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mutez</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span> <span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mutez</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">)</span></span></code></span>, but <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mutez</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">)</span> <span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mutez</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">)</span></span></code></span> raises an error.</p>`,12)),l(e,{name:"sp.split_tokens",arg:"amount: sp.mutez, quantity: sp.nat, division: sp.nat",rType:"sp.mutez"},{default:p(()=>n[4]||(n[4]=[s("p",null,[a("The "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"split_tokens")])])]),a(" function helps multiply and divide tokens. It takes three "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"mutez")])])]),a(" parameters and calculates the value "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"a "),s("span",{style:{color:"#89DDFF"}},"*"),s("span",{style:{color:"#BABED8"}}," b "),s("span",{style:{color:"#89DDFF"}},"/"),s("span",{style:{color:"#BABED8"}}," c")])])]),a(". Its result is in "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"mutez")])])]),a(".")],-1),s("p",null,"This function enables the computation of mutez percentages. This example calculates 5% of 200 mutez:",-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"sp.split_tokens(sp.mutez(200), 5, 100) == sp.mutez(10)  # 5% of 200 mutez")])])])],-1),s("p",null,[a("This function rounds the result to the closest whole mutez or "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"mutez"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#F78C6C"}},"0"),s("span",{style:{color:"#89DDFF"}},")")])])]),a(" if the result is closer to zero.")],-1)])),_:1})]))}});export{d as __pageData,u as default};
