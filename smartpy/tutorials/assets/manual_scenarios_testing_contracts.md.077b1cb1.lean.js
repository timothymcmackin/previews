import{D as t}from"./chunks/DocFunction.e9a30d9e.js";import{D as p}from"./chunks/DocInPlace.04c2ab1e.js";import{o as c,c as i,Q as o,C as e,y as l,v as s,a}from"./chunks/framework.741828c6.js";import"./chunks/DocFunction.vue_vue_type_style_index_0_scoped_21214205_lang.4ed993c7.js";import"./chunks/DocInPlace.vue_vue_type_style_index_0_scoped_8490fbaf_lang.4ed993c7.js";const D=JSON.parse('{"title":"Testing contracts","description":"","frontmatter":{},"headers":[],"relativePath":"manual/scenarios/testing_contracts.md","filePath":"manual/scenarios/testing_contracts.md"}'),r={name:"manual/scenarios/testing_contracts.md"},f=Object.assign(r,{setup(d){return(y,n)=>(c(),i("div",null,[n[14]||(n[14]=o(`<h1 id="testing-contracts" tabindex="-1">Testing contracts <a class="header-anchor" href="#testing-contracts" aria-label="Permalink to &quot;Testing contracts&quot;">​</a></h1><p>After you have created a test scenario as described in <a href="./test_scenarios">Test scenarios</a>, you can originate (deploy) your contracts to it and test their operation.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>All work with smart contracts must take place inside the test scenario. For example, you can&#39;t check the storage of a contract with a command like <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> contract</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">storagevalue</span> <span style="color:#89DDFF;">==</span> <span style="color:#F78C6C;">5</span></span></code></span>. Instead, you must evaluate the state of the contract within the scenario, as in <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">scenario</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">verify</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">contract</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">storagevalue</span> <span style="color:#89DDFF;">==</span> <span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">)</span></span></code></span>.</p></div><h2 id="instantiating-and-originating-contracts" tabindex="-1">Instantiating and originating contracts <a class="header-anchor" href="#instantiating-and-originating-contracts" aria-label="Permalink to &quot;Instantiating and originating contracts&quot;">​</a></h2><p>To originate a contract within a test scenario, create an instance of the contract, which automatically calls its class&#39;s <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">()</span></span></code></span> method. Then add it to the scenario with the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">+=</span></span></code></span> operator, as in this example:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">def main():</span></span>
<span class="line"><span style="color:#babed8;">    class MyContract(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self):</span></span>
<span class="line"><span style="color:#babed8;">            pass</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    class MyContract2(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self, x):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.x = x</span></span>
<span class="line"><span style="color:#babed8;">            pass</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    class MyContract3(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self, x, y):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.x = x</span></span>
<span class="line"><span style="color:#babed8;">            self.data.y = y</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">@sp.add_test()</span></span>
<span class="line"><span style="color:#babed8;">def test():</span></span>
<span class="line"><span style="color:#babed8;">    scenario = sp.test_scenario(main, &quot;A Test&quot;)</span></span>
<span class="line"><span style="color:#babed8;">    c1 = main.MyContract()</span></span>
<span class="line"><span style="color:#babed8;">    c2 = main.MyContract2(2)</span></span>
<span class="line"><span style="color:#babed8;">    c3 = main.MyContract3(x=5, y=2)</span></span>
<span class="line"><span style="color:#babed8;">    scenario += c1</span></span>
<span class="line"><span style="color:#babed8;">    scenario += c2</span></span>
<span class="line"><span style="color:#babed8;">    scenario += c3</span></span></code></pre></div><h2 id="testing-entrypoints" tabindex="-1">Testing entrypoints <a class="header-anchor" href="#testing-entrypoints" aria-label="Permalink to &quot;Testing entrypoints&quot;">​</a></h2>`,7)),e(t,{name:"scenario.verify",arg:"expression"},{default:l(()=>n[0]||(n[0]=[s("p",null,[a("To verify conditions within a scenario, use "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"scenario"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"verify"),s("span",{style:{color:"#89DDFF"}},"(<"),s("span",{style:{color:"#82AAFF"}},"condition"),s("span",{style:{color:"#89DDFF"}},">)")])])]),a(".")],-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"scenario.verify(contract.data.myParameter == 51)")])])])],-1)])),_:1}),e(t,{name:"scenario.verify_equal",arg:"expr1, expr2"},{default:l(()=>n[1]||(n[1]=[s("p",null,[a("To verify an equality condition, use "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"scenario"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"verify_equal"),s("span",{style:{color:"#89DDFF"}},"(<"),s("span",{style:{color:"#82AAFF"}},"left_expression"),s("span",{style:{color:"#89DDFF"}},">,"),a(" "),s("span",{style:{color:"#89DDFF"}},"<"),s("span",{style:{color:"#82AAFF"}},"right_expression"),s("span",{style:{color:"#89DDFF"}},">)")])])]),a(" which works on both comparable and non-comparable types.")],-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"scenario.verify_equal(contract.data.myList, [2, 3, 5, 7])")])])])],-1)])),_:1}),n[15]||(n[15]=o(`<p>After you create an instance of a contract and add it to the scenario, you can call its entrypoints as methods on the contract object. Then you can use functions such as <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">scenario</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">verify</span></span></code></span> to verify things in the test scenario such as the current state of the contract storage. For example, this test scenario calls an entrypoint and verifies that its storage changed as expected:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def main():</span></span>
<span class="line"><span style="color:#babed8;">    class MyCounter(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self, initialValue: sp.nat):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.value = initialValue</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        @sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">        def increment(self, update):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.value += update</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">@sp.add_test()</span></span>
<span class="line"><span style="color:#babed8;">def test():</span></span>
<span class="line"><span style="color:#babed8;">    # Create a test scenario</span></span>
<span class="line"><span style="color:#babed8;">    # Specify the output folder and a module or list of modules to import</span></span>
<span class="line"><span style="color:#babed8;">    scenario = sp.test_scenario(&quot;Test for my smart contract&quot;, main)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    # Create an instance of a contract</span></span>
<span class="line"><span style="color:#babed8;">    # Automatically calls the __init__() method of the contract&#39;s class</span></span>
<span class="line"><span style="color:#babed8;">    contract = main.MyCounter(5)</span></span>
<span class="line"><span style="color:#babed8;">    # Add the contract to the scenario</span></span>
<span class="line"><span style="color:#babed8;">    scenario += contract</span></span>
<span class="line"><span style="color:#babed8;">    # Check the expected value in the contract storage</span></span>
<span class="line"><span style="color:#babed8;">    scenario.verify(contract.data.value == 5)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    # Call an entrypoint</span></span>
<span class="line"><span style="color:#babed8;">    contract.increment(3)</span></span>
<span class="line"><span style="color:#babed8;">    # Check the expected value in the contract storage</span></span>
<span class="line"><span style="color:#babed8;">    scenario.verify(contract.data.value == 8)</span></span></code></pre></div><p>If the entrypoint accepts more than one parameter, you must pass the values as a record or as an implied record by naming the values, as in this example:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.add_test()</span></span>
<span class="line"><span style="color:#babed8;">def test():</span></span>
<span class="line"><span style="color:#babed8;">    scenario = sp.test_scenario(main, &quot;A Test&quot;)</span></span>
<span class="line"><span style="color:#babed8;">    contract = main.MyContract()</span></span>
<span class="line"><span style="color:#babed8;">    scenario += contract</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    # Implied record</span></span>
<span class="line"><span style="color:#babed8;">    contract.exampleEntrypoint(a=5, b=6)</span></span>
<span class="line"><span style="color:#babed8;">    # Explicit record</span></span>
<span class="line"><span style="color:#babed8;">    contract.exampleEntrypoint(sp.record(a=5, b=6))</span></span></code></pre></div><p>After the entrypoint parameters, you can include any of these context parameters to change how the entrypoint runs and is evaluated:</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Accessor</th><th>Description</th></tr></thead><tbody><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">_sender</span></span></code></span></td><td>sp.address or <a href="./test_accounts">sp.test_account</a></td><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">sender</span></span></code></span></td><td>The simulated sender of the computation. <br>Specific to computation.</td></tr><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">_source</span></span></code></span></td><td>sp.address or <a href="./test_accounts">sp.test_account</a></td><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">source</span></span></code></span></td><td>The simulated source of the computation. <br>Specific to computation.</td></tr><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">_chain_id</span></span></code></span></td><td>sp.chain_id</td><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">chain_id</span></span></code></span></td><td>The simulated chain_id. <br>Preserved until changed.</td></tr><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">_level</span></span></code></span></td><td><a href="./../data-types/integers-and-mutez#sp-int-and-sp-nat">sp.nat</a></td><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">level</span></span></code></span></td><td>The simulated block level. <br>Preserved until changed.</td></tr><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">_now</span></span></code></span></td><td><a href="./../data-types/timestamps">sp.timestamp</a></td><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">now</span></span></code></span></td><td>The simulated block timestamp. <br>Preserved until changed.</td></tr><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">_voting_powers</span></span></code></span></td><td><a href="./../data-types/lists-sets-and-maps">sp.map</a>[sp.key_hash, <a href="./../data-types/integers-and-mutez#sp-int-and-sp-nat">sp.nat</a>]</td><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">total_voting_power</span></span></code></span>, <br> <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">voting_power</span></span></code></span></td><td>The simulated voting powers for the test. <br>Preserved until changed.</td></tr><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">_amount</span></span></code></span></td><td><a href="./../data-types/integers-and-mutez#token-amounts">sp.mutez</a></td><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">amount</span></span></code></span></td><td>The simulated amount of mutez to send with the smart contract call.</td></tr><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">_valid</span></span></code></span></td><td><a href="./../data-types/booleans">sp.bool</a></td><td>None</td><td>Tells the interpreter if the transaction is expected to fail or not. <strong>True by default.</strong></td></tr><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">_exception</span></span></code></span></td><td>any type</td><td>None</td><td>The expected exception raised by the transaction. <strong>If present, valid must be False.</strong></td></tr></tbody></table><p>For example, to test when an entrypoint throws an exception, pass <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">_valid </span><span style="color:#89DDFF;">=</span> <span style="color:#89DDFF;">False</span></span></code></span>, as in this example:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def main():</span></span>
<span class="line"><span style="color:#babed8;">    class MyCounter(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self, initialValue: sp.nat):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.value = initialValue</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        @sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">        def increment(self, update):</span></span>
<span class="line"><span style="color:#babed8;">            assert update &lt; 6, &quot;Increment by less than 6&quot;</span></span>
<span class="line"><span style="color:#babed8;">            self.data.value += update</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">@sp.add_test()</span></span>
<span class="line"><span style="color:#babed8;">def test():</span></span>
<span class="line"><span style="color:#babed8;">    scenario = sp.test_scenario(&quot;Test for my smart contract&quot;, main)</span></span>
<span class="line"><span style="color:#babed8;">    contract = main.MyCounter(5)</span></span>
<span class="line"><span style="color:#babed8;">    scenario += contract</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    # Call an entrypoint in a way that causes an exception</span></span>
<span class="line"><span style="color:#babed8;">    contract.increment(10, _valid=False)</span></span></code></pre></div><p>Similarly, to test what happens when different accounts call an entrypoint, pass the address of the caller in the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">_sender</span></span></code></span> parameter. This example limits an entrypoint to a specific caller and fails if another address calls it:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">import smartpy as sp</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def main():</span></span>
<span class="line"><span style="color:#babed8;">    class MyContract(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self, admin):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.admin = admin</span></span>
<span class="line"><span style="color:#babed8;">            self.data.counter = 0</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        @sp.entrypoint</span></span>
<span class="line"><span style="color:#babed8;">        def myEntryPoint(self):</span></span>
<span class="line"><span style="color:#babed8;">            assert self.data.admin == sp.sender</span></span>
<span class="line"><span style="color:#babed8;">            self.data.counter += 1</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">@sp.add_test()</span></span>
<span class="line"><span style="color:#babed8;">def test():</span></span>
<span class="line"><span style="color:#babed8;">    scenario = sp.test_scenario(&quot;test_scenario&quot;, main)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    admin = sp.test_account(&quot;admin&quot;).address</span></span>
<span class="line"><span style="color:#babed8;">    c1 = main.MyContract(admin)</span></span>
<span class="line"><span style="color:#babed8;">    scenario += c1</span></span>
<span class="line"><span style="color:#babed8;">    scenario.verify(c1.data.counter == 0)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    # Call the entrypoint as admin</span></span>
<span class="line"><span style="color:#babed8;">    c1.myEntryPoint(_sender=admin)</span></span>
<span class="line"><span style="color:#babed8;">    scenario.verify(c1.data.counter == 1)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    # Verify that you can&#39;t call as any other address</span></span>
<span class="line"><span style="color:#babed8;">    alice = sp.test_account(&quot;alice&quot;).address</span></span>
<span class="line"><span style="color:#babed8;">    c1.myEntryPoint(_sender=alice, _valid=False)</span></span>
<span class="line"><span style="color:#babed8;">    scenario.verify(c1.data.counter == 1)</span></span></code></pre></div>`,10)),e(t,{name:"sp.catch_exception",arg:"expression, [t]",rType:"sp.option[t]"},{default:l(()=>n[2]||(n[2]=[s("p",null,"Catches an exception in a expression.",-1),s("p",null,[a("The parameter "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"t")])])]),a(" is optional; using "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"catch_exception"),s("span",{style:{color:"#89DDFF"}},"(<"),s("span",{style:{color:"#82AAFF"}},"expression"),s("span",{style:{color:"#89DDFF"}},">)")])])]),a(" is valid in most situations.")],-1),s("p",null,[a("This method is used to test failing conditions of expressions "),s("em",null,"(views, lambdas, ...)"),a(". It returns an "),s("a",{href:"./../data-types/options-and-variants#options"},"sp.option"),a(" of type "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"t")])])]),a(" that contain "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"Some"),s("span",{style:{color:"#89DDFF"}},"(<"),s("span",{style:{color:"#82AAFF"}},"exception"),s("span",{style:{color:"#89DDFF"}},">)")])])]),a(" when the expression fails or "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"None")])])]),a(" if it succeeds.")],-1)])),_:1}),n[16]||(n[16]=s("h2",{id:"contract-instance-methods",tabindex:"-1"},[a("Contract instance methods "),s("a",{class:"header-anchor",href:"#contract-instance-methods","aria-label":'Permalink to "Contract instance methods"'},"​")],-1)),n[17]||(n[17]=s("p",null,"In addition to methods for each entrypoint, contracts have these instance methods:",-1)),e(t,{name:"contract.get_source"},{default:l(()=>n[3]||(n[3]=[s("p",null,[a("Returns the source code of the contract. See "),s("a",{href:"./metadata"},"metadata"),a(".")],-1)])),_:1}),e(t,{name:"contract.get_offchain_views"},{default:l(()=>n[4]||(n[4]=[s("p",null,[a("Returns the off-chain views of the contract. See "),s("a",{href:"./metadata"},"metadata"),a(".")],-1)])),_:1}),e(t,{name:"contract.get_generated_michelson"},{default:l(()=>n[5]||(n[5]=[s("p",null,[a("Returns the Michelson code the contract. See "),s("a",{href:"./metadata"},"metadata"),a(".")],-1)])),_:1}),e(t,{name:"contract.get_error_map"},{default:l(()=>n[6]||(n[6]=[s("p",null,[a("Returns the contract's error map. See "),s("a",{href:"./metadata"},"metadata"),a(" and "),s("a",{href:"./testing_contracts#exceptions-flag"},[s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF","font-style":"italic"}},'"'),s("span",{style:{color:"#676E95","font-style":"italic"}},"exceptions"),s("span",{style:{color:"#89DDFF","font-style":"italic"}},'"')])])]),a(" flag")]),a(".")],-1)])),_:1}),n[18]||(n[18]=s("p",null,"These instance methods can be called only before adding the contract to the scenario:",-1)),e(t,{name:"contract.set_initial_balance",arg:"balance: sp.tez"},{default:l(()=>n[7]||(n[7]=[s("p",null,"Set the initial balance for the contract.",-1),s("div",{class:"language-python"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"python"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"contract"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"set_initial_balance"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#82AAFF"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"tez"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#F78C6C"}},"20"),s("span",{style:{color:"#89DDFF"}},"))")])])])],-1)])),_:1}),e(p,{name:"set_data",left:"contract.data",symbol:"=",right:"x: any"},{default:l(()=>n[8]||(n[8]=[a(" Replace a field in the contract's storage. "),s("p",null,[a("This is mostly useful to initialize the metadata big map. See "),s("a",{href:"./metadata"},"metadata"),a(".")],-1)])),_:1}),n[19]||(n[19]=o('<h2 id="contract-data" tabindex="-1">Contract data <a class="header-anchor" href="#contract-data" aria-label="Permalink to &quot;Contract data&quot;">​</a></h2><p>When a variable <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">contract</span></span></code></span> represents a contract in a scenario, we can access some associated data:</p><ul><li><p><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">contract</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span></span></code></span>: Contract storage</p></li><li><p><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">contract</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">balance</span></span></code></span>: Contract balance</p></li><li><p><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">contract</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">baker</span></span></code></span>: Contract optional delegated baker</p></li><li><p><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">contract</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">address</span></span></code></span>: Contract address within the scenario</p><details class="details custom-block"><summary>Details</summary><p>In storage or similar circumstances, deployed contracts get addresses of the form:</p><ul><li><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">KT1TezoooozzSmartPyzzSTATiCzzzwwBFA1</span></span></code></span></li><li><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">KT1Tezooo1zzSmartPyzzSTATiCzzzyfC8eF</span></span></code></span></li><li><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">KT1Tezooo2zzSmartPyzzSTATiCzzzwqqQ4H</span></span></code></span></li><li><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">KT1Tezooo3zzSmartPyzzSTATiCzzzseJjWC</span></span></code></span></li><li><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">KT1Tezooo4zzSmartPyzzSTATiCzzzyPVdv3</span></span></code></span></li><li><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">KT1Tezooo5zzSmartPyzzSTATiCzzzz48Z4p</span></span></code></span></li><li><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">KT1Tezooo6zzSmartPyzzSTATiCzzztY1196</span></span></code></span></li><li><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">KT1Tezooo7zzSmartPyzzSTATiCzzzvTbG1z</span></span></code></span></li><li><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">KT1Tezooo8zzSmartPyzzSTATiCzzzzp29d1</span></span></code></span></li><li><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">KT1Tezooo9zzSmartPyzzSTATiCzzztdBMLX</span></span></code></span></li><li><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">KT1Tezoo1ozzSmartPyzzSTATiCzzzw8CmuY</span></span></code></span></li><li>...</li></ul></details></li><li><p><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">contract</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">typed</span></span></code></span></p><p>Retrieve its testing typed contract value.</p><p>To access entrypoints, you can use field notation:</p><ul><li><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">contract</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">typed</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">my_entrypoint</span></span></code></span>: Typed entrypoint my_entrypoint of contract <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">contract</span></span></code></span>.</li></ul></li></ul><h2 id="testing-expressions-views-and-lambdas" tabindex="-1">Testing expressions (views and lambdas) <a class="header-anchor" href="#testing-expressions-views-and-lambdas" aria-label="Permalink to &quot;Testing expressions (views and lambdas)&quot;">​</a></h2><p>Testing views and lambdas is different from testing entrypoints because views and lambdas return SmartPy expressions. SmartPy does not evaluate these expressions until you tell it to.</p>',5)),e(t,{name:"sp.is_failing",arg:"expression"},{default:l(()=>n[9]||(n[9]=[s("p",null,"Returns True when an expression results in failure and False when the expression succeeds.",-1)])),_:1}),e(t,{name:"sp.catch_exception",arg:"expression, [t]",rType:"sp.option[t]"},{default:l(()=>n[10]||(n[10]=[s("p",null,"Evaluates an expression, catches any failures in it, and returns an option.",-1),s("p",null,[a("This method is used to test failing conditions of expressions. It returns an "),s("a",{href:"./../data-types/options-and-variants#options"},"sp.option"),a(" of type "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"t")])])]),a(" that contains "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"Some"),s("span",{style:{color:"#89DDFF"}},"(<"),s("span",{style:{color:"#82AAFF"}},"exception"),s("span",{style:{color:"#89DDFF"}},">)")])])]),a(" when the expression fails or "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"None")])])]),a(" when it succeeds. The "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"t")])])]),a(" parameter is optional; in most cases you can leave it out.")],-1)])),_:1}),e(t,{name:"scenario.show",arg:"expression, html = True"},{default:l(()=>n[11]||(n[11]=[s("p",null,"Evaluate an expression and writes its result to the log.",-1),s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"Parameter"),s("th",null,"Type"),s("th",null,"Description")])]),s("tbody",null,[s("tr",null,[s("td",null,"html"),s("td",null,"bool"),s("td",null,[s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"True")])])]),a(" by default, "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"False")])])]),a(" to export not in HTML but in source code format.")])])])],-1),s("div",{class:"language-python"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"python"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"scenario"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"show"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#82AAFF"}},"expression"),s("span",{style:{color:"#89DDFF"}},","),s("span",{style:{color:"#82AAFF"}}," "),s("span",{style:{color:"#BABED8","font-style":"italic"}},"html"),s("span",{style:{color:"#89DDFF"}},"=True)")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"scenario"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"show"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#82AAFF"}},"contract"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"data"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"myParameter1"),s("span",{style:{color:"#82AAFF"}}," "),s("span",{style:{color:"#89DDFF"}},"*"),s("span",{style:{color:"#82AAFF"}}," "),s("span",{style:{color:"#F78C6C"}},"12"),s("span",{style:{color:"#89DDFF"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"scenario"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"show"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#82AAFF"}},"contract"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"data"),s("span",{style:{color:"#89DDFF"}},")")])])])],-1)])),_:1}),e(t,{name:"scenario.compute",arg:"expression, **context_args",rType:"t"},{default:l(()=>n[12]||(n[12]=[s("p",null,"Evaluate an expression and return its result.",-1),s("div",{class:"language-smartpy"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"smartpy"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#babed8"}},"x = scenario.compute(c1.data.myParameter1 * 12)")])])])],-1)])),_:1}),n[20]||(n[20]=o(`<p>This example calls an on-chain view and then evaluates the expression it returns:</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def main():</span></span>
<span class="line"><span style="color:#babed8;">    class MyCounter(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">        def __init__(self, initialValue: sp.nat):</span></span>
<span class="line"><span style="color:#babed8;">            self.data.value = initialValue</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        @sp.onchain_view</span></span>
<span class="line"><span style="color:#babed8;">        def getValue(self):</span></span>
<span class="line"><span style="color:#babed8;">            return self.data.value</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">@sp.add_test()</span></span>
<span class="line"><span style="color:#babed8;">def test():</span></span>
<span class="line"><span style="color:#babed8;">    scenario = sp.test_scenario(&quot;view_test&quot;, main)</span></span>
<span class="line"><span style="color:#babed8;">    contract = main.MyCounter(5)</span></span>
<span class="line"><span style="color:#babed8;">    scenario += contract</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    expression = contract.getValue()</span></span>
<span class="line"><span style="color:#babed8;">    scenario.show(expression)</span></span>
<span class="line"><span style="color:#babed8;">    scenario.verify(expression == 5)</span></span></code></pre></div><p>This example tests an expression that fails. Note that the creation of the expression does not fail because SmartPy has not evaluated the expression yet. Then the test scenario tests the failure, which implicitly evaluates the expression.</p><div class="language-smartpy"><button title="Copy Code" class="copy"></button><span class="lang">smartpy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@sp.module</span></span>
<span class="line"><span style="color:#babed8;">def main():</span></span>
<span class="line"><span style="color:#babed8;">    class MyContract(sp.Contract):</span></span>
<span class="line"><span style="color:#babed8;">        @sp.onchain_view</span></span>
<span class="line"><span style="color:#babed8;">        def alwaysFails(self):</span></span>
<span class="line"><span style="color:#babed8;">            assert 1 == 2, &quot;Failure&quot;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">@sp.add_test()</span></span>
<span class="line"><span style="color:#babed8;">def test():</span></span>
<span class="line"><span style="color:#babed8;">    scenario = sp.test_scenario(&quot;expression_test&quot;, main)</span></span>
<span class="line"><span style="color:#babed8;">    contract = main.MyContract()</span></span>
<span class="line"><span style="color:#babed8;">    scenario += contract</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    expression = contract.alwaysFails()  # No exception yet</span></span>
<span class="line"><span style="color:#babed8;">    scenario.verify(sp.is_failing(expression))</span></span>
<span class="line"><span style="color:#babed8;">    scenario.verify(sp.catch_exception(expression, sp.string) == sp.Some(&quot;Failure&quot;))</span></span></code></pre></div><h2 id="testing-dynamic-contracts" tabindex="-1">Testing dynamic contracts <a class="header-anchor" href="#testing-dynamic-contracts" aria-label="Permalink to &quot;Testing dynamic contracts&quot;">​</a></h2><p>Contracts in SmartPy can be created in two ways, statically as shown above, or dynamically via a call to the [sp.create_contract] statement from within an <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">entrypoint</span></span></code></span>.</p><p>We can refer to a contract that was created dynamically using <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">scenario</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dynamic_contract</span><span style="color:#89DDFF;">(&lt;</span><span style="color:#82AAFF;">module</span><span style="color:#89DDFF;">&gt;.&lt;</span><span style="color:#82AAFF;">Contract</span><span style="color:#89DDFF;">&gt;,</span><span style="color:#82AAFF;"> offset</span><span style="color:#89DDFF;">)</span></span></code></span>, this returns a handle that can then be used as for static contracts.</p>`,7)),e(t,{name:"scenario.dynamic_contract",arg:"template_ref: sp.Contract, offset:int | None",rType:"sp.contract[t]"},{default:l(()=>n[13]||(n[13]=[s("p",null,[a("Returns a handle to the dynamic contract of class type "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"template_ref"),s("span",{style:{color:"#89DDFF"}},"=<"),s("span",{style:{color:"#BABED8"}},"module"),s("span",{style:{color:"#89DDFF"}},">.<"),s("span",{style:{color:"#BABED8"}},"Contract"),s("span",{style:{color:"#89DDFF"}},">")])])]),a(" that was created at "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"offset")])])]),a(".")],-1),s("p",null,[a("The "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"template_ref")])])]),a(" is used to check that the referenced contract has the correct class type.")],-1),s("p",null,[a("The "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"offset")])])]),a(", if given, specifies the position in the list of dynamic contracts created so far. So "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"offset"),s("span",{style:{color:"#89DDFF"}},"="),s("span",{style:{color:"#F78C6C"}},"0")])])]),a(" would refer to the first dynamically created contract and "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"offset"),s("span",{style:{color:"#89DDFF"}},"=-"),s("span",{style:{color:"#F78C6C"}},"1")])])]),a(" would refer to the most recently created dynamic contract. If not given it will default to the most recently created dynamic contract.")],-1),s("p",null,[a("For example, to refer to the most recently created dynamic contract and check the class type is "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"main"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"MyContract")])])]),a(", we would use")],-1),s("div",{class:"language-python"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"python"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"dyn "),s("span",{style:{color:"#89DDFF"}},"="),s("span",{style:{color:"#BABED8"}}," scenario"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"dynamic_contract"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#82AAFF"}},"main"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"MyContract"),s("span",{style:{color:"#89DDFF"}},")")])])])],-1),s("p",null,"Where-as",-1),s("div",{class:"language-python"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"python"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"dyn "),s("span",{style:{color:"#89DDFF"}},"="),s("span",{style:{color:"#BABED8"}}," scenario"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"dynamic_contract"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#82AAFF"}},"main"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"MyContract"),s("span",{style:{color:"#89DDFF"}},","),s("span",{style:{color:"#82AAFF"}}," "),s("span",{style:{color:"#BABED8","font-style":"italic"}},"offset"),s("span",{style:{color:"#89DDFF"}},"=-"),s("span",{style:{color:"#F78C6C"}},"2"),s("span",{style:{color:"#89DDFF"}},")")])])])],-1),s("p",null,[a("will refer to the last but one dynamic contract and check the class type is "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"main"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"MyContract")])])]),a(".")],-1),s("p",null,[a("The handle "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"dyn")])])]),a(" can now be used to call entrypoints, verify data etc")],-1),s("div",{class:"language-python"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"python"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"dyn"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"myEntrypoint"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#F78C6C"}},"3"),s("span",{style:{color:"#89DDFF"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"scenario"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"verify"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#82AAFF"}},"dyn"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"data"),s("span",{style:{color:"#82AAFF"}}," "),s("span",{style:{color:"#89DDFF"}},"=="),s("span",{style:{color:"#82AAFF"}}," "),s("span",{style:{color:"#F78C6C"}},"3"),s("span",{style:{color:"#89DDFF"}},")")])])])],-1)])),_:1})]))}});export{D as __pageData,f as default};
