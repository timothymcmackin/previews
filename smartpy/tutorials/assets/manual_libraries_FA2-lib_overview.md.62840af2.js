import{o as l,c as r,Q as o,v as e,a as i,b as t,m as n}from"./chunks/framework.741828c6.js";import{s}from"./chunks/variables.b0c7d2f2.js";const p=["href"],c=["href"],d=["href"],h=["href"],u=["href"],f=["href"],_=JSON.parse('{"title":"Overview","description":"","frontmatter":{},"headers":[],"relativePath":"manual/libraries/FA2-lib/overview.md","filePath":"manual/libraries/FA2-lib/overview.md"}'),m={name:"manual/libraries/FA2-lib/overview.md"},w=Object.assign(m,{setup(b){return(y,a)=>(l(),r("div",null,[a[3]||(a[3]=o(`<h1 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>FA2 is the Tezos standard for a unified token contract interface.</p><p>It caters to a diverse range of token kinds and implementations, including but not limited to fungible tokens and NFTs.</p><blockquote><p>The standards relevant for FA2 are <a href="https://gitlab.com/tezos/tzip/-/blob/master/proposals/tzip-12/tzip-12.md" target="_blank" rel="noreferrer">TZIP-12</a> and <a href="https://gitlab.com/tezos/tzip/-/blob/master/proposals/tzip-16/tzip-16.md" target="_blank" rel="noreferrer">TZIP-16</a>. They are functionality equivalent to Ethereum&#39;s ERC-20, ERC-721, and ERC-1155.</p></blockquote><h2 id="library" tabindex="-1">Library <a class="header-anchor" href="#library" aria-label="Permalink to &quot;Library&quot;">​</a></h2><p>SmartPy provides a modular FA2 library that can be configured and adapted with custom logic to support a very wide range of needs.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> smartpy </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#BABED8;"> sp</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> smartpy</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">templates </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> fa2_lib </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#BABED8;"> fa2</span></span></code></pre></div><p>The library has these main components:</p><ul><li><a href="./base_classes">Base classes</a> that add the main functionality for a kind of token (NFT, fungible, or single asset)</li><li><a href="./mixins">Mixins</a> that add features to the base classes, such as the ability to mint and burn tokens.</li><li><a href="./transfer-policies">Transfer policies</a> that control who can transfer tokens</li><li><a href="./errors">Errors</a>, both defined by the standard and added by the library</li></ul><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">​</a></h2><p>The online IDE has templates that you can use to get started with the FA2 library:</p>`,12)),e("ul",null,[e("li",null,[a[0]||(a[0]=i("Example NFT contract: ")),e("ul",null,[e("li",null,[e("a",{href:`https://${t(s)}${t(n)("ide?template=fa2_lib_nft.py")}`,target:"_blank"},"Open in IDE",8,p)]),e("li",null,[e("a",{href:`https://${t(s)}${t(n)("templates/fa2_lib_nft.py")}`,target:"_blank"},"Download",8,c)])])]),e("li",null,[a[1]||(a[1]=i("Example fungible token contract: ")),e("ul",null,[e("li",null,[e("a",{href:`https://${t(s)}${t(n)("ide?template=fa2_lib_fungible.py")}`,target:"_blank"},"Open in IDE",8,d)]),e("li",null,[e("a",{href:`https://${t(s)}${t(n)("templates/fa2_lib_fungible.py")}`,target:"_blank"},"Download",8,h)])])]),e("li",null,[a[2]||(a[2]=i("Example single asset token contract: ")),e("ul",null,[e("li",null,[e("a",{href:`https://${t(s)}${t(n)("ide?template=fa2_lib_single_asset.py")}`,target:"_blank"},"Open in IDE",8,u)]),e("li",null,[e("a",{href:`https://${t(s)}${t(n)("templates/fa2_lib_single_asset.py")}`,target:"_blank"},"Download",8,f)])])])]),a[4]||(a[4]=o('<h2 id="token-identification" tabindex="-1">Token identification <a class="header-anchor" href="#token-identification" aria-label="Permalink to &quot;Token identification&quot;">​</a></h2><p>A token is uniquely identified on the chain by:</p><ul><li>its contract address and</li><li>a token id, which is a natural number (<span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">nat</span></span></code></span>).</li></ul><p>If a contract supports only a single token, the token ID must be 0. Although the contract is responsible for managing and assigning token ids, the FA2 library simplifies this process by automatically incrementing token ids.</p><h2 id="glossary" tabindex="-1">Glossary <a class="header-anchor" href="#glossary" aria-label="Permalink to &quot;Glossary&quot;">​</a></h2><ul><li>Burn: The process of destroying tokens permanently, reducing the total supply of the tokens in the system. Burning tokens is a common practice to control the circulation and stabilize the value of tokens.</li><li>ERC-20, ERC-721, and ERC-1155: Equivalent standards for tokens on the Ethereum blockchain. ERC-20 defines a common list of rules for Ethereum tokens to follow, allowing for seamless interaction with other tokens; ERC-721 is the standard for non-fungible Ethereum tokens, and ERC-1155 is a multi-token standard that supports any mix of fungible and non-fungible tokens.</li><li>FA1.2 and FA2: The two most recent standard for token contracts on Tezos. FA2 is the more recent and flexible standard, supporting both fungible and non-fungible tokens, whereas FA1.2 supports only fungible tokens.</li><li>Fungible Token: A type of digital token where each unit is interchangeable with any other unit.</li><li>Ledger: A digital register that tracks the ownership of tokens.</li><li>Metadata: Supplementary information associated with tokens or contracts which doesn&#39;t directly influence the contract&#39;s logic.</li><li>Mint: The process of creating new tokens. In the context of smart contracts, minting is often a function that allows certain addresses to create new tokens in the system.</li><li>Non-Fungible Token (NFT): A type of digital asset in which each token is completely unique, making them irreplaceable with something else.</li><li>Token: A digital asset representing a unit of value.</li><li>TZIP: Tezos Improvement Proposal, a design document providing information or describing a new feature for Tezos or its processes or environment. TZIPs propose and discuss changes and additions to the Tezos protocol.</li></ul>',6))]))}});export{_ as __pageData,w as default};
