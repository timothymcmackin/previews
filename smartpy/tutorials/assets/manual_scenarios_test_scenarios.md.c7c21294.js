import{D as l}from"./chunks/DocFunction.e9a30d9e.js";import{o as p,c,Q as t,C as e,y as o,v as s,a}from"./chunks/framework.741828c6.js";import"./chunks/DocFunction.vue_vue_type_style_index_0_scoped_21214205_lang.4ed993c7.js";const h=JSON.parse('{"title":"Test scenarios","description":"","frontmatter":{},"headers":[],"relativePath":"manual/scenarios/test_scenarios.md","filePath":"manual/scenarios/test_scenarios.md"}'),r={name:"manual/scenarios/test_scenarios.md"},m=Object.assign(r,{setup(i){return(F,n)=>(p(),c("div",null,[n[7]||(n[7]=t(`<h1 id="test-scenarios" tabindex="-1">Test scenarios <a class="header-anchor" href="#test-scenarios" aria-label="Permalink to &quot;Test scenarios&quot;">​</a></h1><p>Test scenarios are important not just for testing SmartPy code but for compiling contracts. Test scenarios mimic the Tezos blockchain to ensure that contracts work correctly before deployment. Then they generate the Michelson code for the contract and other metadata files that you can use in your dApps.</p><p>Unlike code within a SmartPy module, test scenario code is standard Python. Therefore, you can do things in test scenarios that you can&#39;t do in modules, such as using external libraries and calling external APIs.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>You must define test scenarios in Python <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#F07178;">py</span></span></code></span> files, not SmartPy <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#F07178;">spy</span></span></code></span> files.</p></div><h2 id="test-example" tabindex="-1">Test example <a class="header-anchor" href="#test-example" aria-label="Permalink to &quot;Test example&quot;">​</a></h2><p>This code defines a simple smart contract and then creates a test scenario for it:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">module</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">MyCounter</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Contract</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">initialValue</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">nat</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">            self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">value</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> initialValue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">entrypoint</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">increment</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">update</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#BABED8;"> update </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Increment by less than 6</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">            self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">value</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#BABED8;"> update</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add_test</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;"># Create a test scenario</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;"># Specify the output folder and a module or list of modules</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;"># to import into the scenario</span></span>
<span class="line"><span style="color:#BABED8;">    scenario </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test_scenario</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MyCounter tests</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> main</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;"># Create an instance of a contract</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;"># Automatically calls the __init__() method of the contract&#39;s class</span></span>
<span class="line"><span style="color:#BABED8;">    contract </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> main</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">MyCounter</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;"># Add the contract to the scenario</span></span>
<span class="line"><span style="color:#BABED8;">    scenario </span><span style="color:#89DDFF;">+=</span><span style="color:#BABED8;"> contract</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;"># Call an entrypoint</span></span>
<span class="line"><span style="color:#BABED8;">    contract</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">increment</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;"># Call an entrypoint and expect it to fail</span></span>
<span class="line"><span style="color:#BABED8;">    contract</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">increment</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">_valid</span><span style="color:#89DDFF;">=False)</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;"># Check the expected value in the contract storage</span></span>
<span class="line"><span style="color:#BABED8;">    scenario</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">verify</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">contract</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">value</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">==</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h2 id="creating-test-scenarios" tabindex="-1">Creating test scenarios <a class="header-anchor" href="#creating-test-scenarios" aria-label="Permalink to &quot;Creating test scenarios&quot;">​</a></h2>`,8)),e(l,{name:"@sp.add_test"},{default:o(()=>n[0]||(n[0]=[s("p",null,[a("The "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"@"),s("span",{style:{color:"#82AAFF"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"add_test"),s("span",{style:{color:"#89DDFF"}},"()")])])]),a(" annotation defines a block of code that contains one or more test functions.")],-1)])),_:1}),e(l,{name:"sp.test_scenario",arg:"name: str, modules: list[sp.module] | sp.module | None",rType:"test_scenario"},{default:o(()=>n[1]||(n[1]=[s("p",null,[a("The "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"test_scenario")])])]),a(" function creates a test scenario, which is a simulated Tezos environment.")],-1),s("p",null,"Each test function should have only one test scenario and creating it should be the first instruction in the function. Then you can create instances of contracts and add them to the scenario to simulate originating them to Tezos.",-1),s("p",null,[a("The "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"test_scenario")])])]),a(" function accepts a name for the scenario and one module or a list of modules to import. These modules become available inside the test scenario, so at minimum the test must import the module that contains the smart contracts it tests.")],-1),s("div",{class:"language-python"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"python"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"@"),s("span",{style:{color:"#82AAFF"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"module")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#C792EA"}},"def"),s("span",{style:{color:"#BABED8"}}," "),s("span",{style:{color:"#82AAFF"}},"main"),s("span",{style:{color:"#89DDFF"}},"():")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"    "),s("span",{style:{color:"#C792EA"}},"class"),s("span",{style:{color:"#BABED8"}}," "),s("span",{style:{color:"#FFCB6B"}},"MyContract"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#FFCB6B"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#FFCB6B"}},"Contract"),s("span",{style:{color:"#89DDFF"}},"):")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"        "),s("span",{style:{color:"#89DDFF","font-style":"italic"}},"pass")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"    "),s("span",{style:{color:"#676E95","font-style":"italic"}},"# ...etc")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"@"),s("span",{style:{color:"#82AAFF"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"add_test"),s("span",{style:{color:"#89DDFF"}},"()")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#C792EA"}},"def"),s("span",{style:{color:"#BABED8"}}," "),s("span",{style:{color:"#82AAFF"}},"test"),s("span",{style:{color:"#89DDFF"}},"():")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"    "),s("span",{style:{color:"#676E95","font-style":"italic"}},"# Create a test scenario")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"    scenario "),s("span",{style:{color:"#89DDFF"}},"="),s("span",{style:{color:"#BABED8"}}," sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"test_scenario"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#C3E88D"}},"A Test"),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#89DDFF"}},","),s("span",{style:{color:"#82AAFF"}}," main"),s("span",{style:{color:"#89DDFF"}},")")])])])],-1),s("div",{class:"warning custom-block"},[s("p",{class:"custom-block-title"},"WARNING"),s("p",null,"You must create the test scenario before instantiating any contracts because SmartPy uses the test scenario to pre-compile the contract.")],-1)])),_:1}),n[8]||(n[8]=t('<p>After you create the test scenario, you can create instances of contracts and add them to the scenario as described in <a href="./testing_contracts">Testing contracts</a>.</p><h2 id="running-test-scenarios" tabindex="-1">Running test scenarios <a class="header-anchor" href="#running-test-scenarios" aria-label="Permalink to &quot;Running test scenarios&quot;">​</a></h2><p>Test scenarios run automatically when you compile a contract with the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">python</span></span></code></span> command. For more information, see <a href="/previews/smartpy/tutorials/manual/compilation/compiling">Compiling contracts</a>.</p><h2 id="importing-modules" tabindex="-1">Importing modules <a class="header-anchor" href="#importing-modules" aria-label="Permalink to &quot;Importing modules&quot;">​</a></h2><p>You must import modules into the test scenario before using them.</p><ul><li>To import modules from separate SmartPy <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#F07178;">spy</span></span></code></span> files, use the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">add_module</span></span></code></span> command.</li><li>To import inlined modules from the same Python file, either include them in the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">test_scenario</span></span></code></span> command or use the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">add_module</span></span></code></span> command.</li></ul><p>For more information about importing modules, see <a href="./../syntax/modules">Modules</a>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>When you import modules from SmartPy files, the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">add_module</span></span></code></span> command returns a module handle. You must assign this handle to a variable and use it to access the elements in the module.</p></div>',8)),e(l,{name:"sc.add_module",arg:"module: filepath | sp.module",rType:"module"},{default:o(()=>n[2]||(n[2]=[s("p",null,[a("To add a module from an "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"spy")])])]),a(" file to the test scenario, use the filepath of the "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"spy")])])]),a(" file:")],-1),s("div",{class:"language-python"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"python"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"@"),s("span",{style:{color:"#82AAFF"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"add_test"),s("span",{style:{color:"#89DDFF"}},"()")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#C792EA"}},"def"),s("span",{style:{color:"#BABED8"}}," "),s("span",{style:{color:"#82AAFF"}},"test"),s("span",{style:{color:"#89DDFF"}},"():")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"    scenario "),s("span",{style:{color:"#89DDFF"}},"="),s("span",{style:{color:"#BABED8"}}," sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"test_scenario"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#C3E88D"}},"A Test"),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#89DDFF"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"    m "),s("span",{style:{color:"#89DDFF"}},"="),s("span",{style:{color:"#BABED8"}}," sc"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"add_module"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#C3E88D"}},"my/local/files/contracts.spy"),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#89DDFF"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"    contract "),s("span",{style:{color:"#89DDFF"}},"="),s("span",{style:{color:"#BABED8"}}," m"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"MyContract"),s("span",{style:{color:"#89DDFF"}},"()")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"    scenario "),s("span",{style:{color:"#89DDFF"}},"+="),s("span",{style:{color:"#BABED8"}}," contract")])])])],-1),s("p",null,[a("The handle "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"m")])])]),a(" is a module and the definitions of any types, contracts, constants, and other elements within the imported module can be used in the test scenario in the same way as for inlined modules.")],-1),s("div",{class:"info custom-block"},[s("p",{class:"custom-block-title"},"INFO"),s("p",null,[a("For more information on how SmartPy resolves file paths to modules, see "),s("a",{href:"./../syntax/modules#filepath-resolution"},"Filepath resolution"),a(".")])],-1),s("p",null,"To add an inlined module to the test scenario, use the module handle:",-1),s("div",{class:"language-python"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"python"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"@"),s("span",{style:{color:"#82AAFF"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"module")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#C792EA"}},"def"),s("span",{style:{color:"#BABED8"}}," "),s("span",{style:{color:"#82AAFF"}},"main"),s("span",{style:{color:"#89DDFF"}},"():")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"    "),s("span",{style:{color:"#C792EA"}},"class"),s("span",{style:{color:"#BABED8"}}," "),s("span",{style:{color:"#FFCB6B"}},"MyContract"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#FFCB6B"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#FFCB6B"}},"Contract"),s("span",{style:{color:"#89DDFF"}},"):")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"        "),s("span",{style:{color:"#89DDFF","font-style":"italic"}},"pass")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"    "),s("span",{style:{color:"#676E95","font-style":"italic"}},"# ...etc")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"@"),s("span",{style:{color:"#82AAFF"}},"sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"add_test"),s("span",{style:{color:"#89DDFF"}},"()")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#C792EA"}},"def"),s("span",{style:{color:"#BABED8"}}," "),s("span",{style:{color:"#82AAFF"}},"test"),s("span",{style:{color:"#89DDFF"}},"():")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"    scenario "),s("span",{style:{color:"#89DDFF"}},"="),s("span",{style:{color:"#BABED8"}}," sp"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"test_scenario"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#C3E88D"}},"A Test"),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#89DDFF"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"    scenario"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"add_module"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#82AAFF"}},"main"),s("span",{style:{color:"#89DDFF"}},")")])])])],-1)])),_:1}),n[9]||(n[9]=t('<h2 id="logging" tabindex="-1">Logging <a class="header-anchor" href="#logging" aria-label="Permalink to &quot;Logging&quot;">​</a></h2><p>These functions write information to the test log, which is stored in <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">scenario_name</span><span style="color:#89DDFF;">]/</span><span style="color:#BABED8;">log</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">txt</span></span></code></span>, where <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">scenario_name</span><span style="color:#89DDFF;">]</span></span></code></span> is the first parameter of the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">test_scenario</span></span></code></span> function.</p>',2)),e(l,{name:"scenario.h<N>",arg:"content: str"},{default:o(()=>n[3]||(n[3]=[s("p",null,[a("Add a section heading of the level "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"<"),s("span",{style:{color:"#BABED8"}},"N"),s("span",{style:{color:"#89DDFF"}},">")])])]),a(".")],-1),s("p",null,[s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"<"),s("span",{style:{color:"#F07178"}},"h1"),s("span",{style:{color:"#89DDFF"}},">")])])]),a(" is the highest section level.")],-1),s("div",{class:"language-python"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"python"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"scenario"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"h1"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#C3E88D"}},"a title"),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#89DDFF"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"scenario"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"h2"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#C3E88D"}},"a subtitle"),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#89DDFF"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"scenario"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"h3"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#C3E88D"}},"Equivalent to <h3> HTML tag."),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#89DDFF"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"scenario"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"h4"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#C3E88D"}},"Equivalent to <h4> HTML tag."),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#89DDFF"}},")")])])])],-1)])),_:1}),e(l,{name:"scenario.p",arg:"content: str"},{default:o(()=>n[4]||(n[4]=[s("p",null,[a("Add a text paragraph to the scenario equivalent to "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"<"),s("span",{style:{color:"#F07178"}},"p"),s("span",{style:{color:"#89DDFF"}},">")])])]),a(".")],-1),s("div",{class:"language-python"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"python"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"scenario"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"p"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#C3E88D"}},"Equivalent to <p> HTML tag."),s("span",{style:{color:"#89DDFF"}},'"'),s("span",{style:{color:"#89DDFF"}},")")])])])],-1)])),_:1}),e(l,{name:"scenario.show",arg:"expression, html = True"},{default:o(()=>n[5]||(n[5]=[s("p",null,"Write the result of an expression to the log.",-1),s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"Parameter"),s("th",null,"Type"),s("th",null,"Description")])]),s("tbody",null,[s("tr",null,[s("td",null,"html"),s("td",null,"bool"),s("td",null,[s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"True")])])]),a(" by default, "),s("span",{class:"inline shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"False")])])]),a(" to export not in HTML but in source code format")])])])],-1),s("div",{class:"language-python"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"python"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"scenario"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"show"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#82AAFF"}},"expression"),s("span",{style:{color:"#89DDFF"}},","),s("span",{style:{color:"#82AAFF"}}," "),s("span",{style:{color:"#BABED8","font-style":"italic"}},"html"),s("span",{style:{color:"#89DDFF"}},"=True)")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"scenario"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"show"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#82AAFF"}},"contract"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"data"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"myParameter1"),s("span",{style:{color:"#82AAFF"}}," "),s("span",{style:{color:"#89DDFF"}},"*"),s("span",{style:{color:"#82AAFF"}}," "),s("span",{style:{color:"#F78C6C"}},"12"),s("span",{style:{color:"#89DDFF"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#BABED8"}},"scenario"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#82AAFF"}},"show"),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#82AAFF"}},"contract"),s("span",{style:{color:"#89DDFF"}},"."),s("span",{style:{color:"#F07178"}},"data"),s("span",{style:{color:"#89DDFF"}},")")])])])],-1)])),_:1}),n[10]||(n[10]=s("h2",{id:"flags",tabindex:"-1"},[a("Flags "),s("a",{class:"header-anchor",href:"#flags","aria-label":'Permalink to "Flags"'},"​")],-1)),n[11]||(n[11]=s("p",null,"Flags change how the compiler runs the simulation and compiles the contract.",-1)),e(l,{name:"scenario.add_flag",arg:"flag, *args"},{default:o(()=>n[6]||(n[6]=[s("p",null,"Add a flag to the test scenario.",-1)])),_:1}),n[12]||(n[12]=t(`<h3 id="boolean-flags" tabindex="-1">Boolean flags <a class="header-anchor" href="#boolean-flags" aria-label="Permalink to &quot;Boolean flags&quot;">​</a></h3><p>Boolean flags are activated by passing their name to the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">add_flag</span></span></code></span> function. To deactivate them, pass the name prefixed with <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">&quot;</span><span style="color:#676E95;font-style:italic;">no-</span><span style="color:#89DDFF;font-style:italic;">&quot;</span></span></code></span>. For example:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Enable erase-comments flag</span></span>
<span class="line"><span style="color:#BABED8;">scenario</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add_flag</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">erase-comments</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Disable erase-comments flag</span></span>
<span class="line"><span style="color:#BABED8;">scenario</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add_flag</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">no-erase-comments</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><table><thead><tr><th>Flag</th><th>Description</th><th>Default Value</th></tr></thead><tbody><tr><td>default-check-no-incoming-transfer</td><td>Sets entrypoints in the scenario to fail when tez is sent with the smart contract call</td><td>False</td></tr><tr><td>disable-dup-check</td><td>Remove the DUP protection on tickets</td><td>False</td></tr><tr><td>dump-michel</td><td>Dump Michel intermediate language</td><td>False</td></tr><tr><td>erase-comments</td><td>Remove compiler comments from output files</td><td>False</td></tr><tr><td>simplify</td><td>Simplify output files by removing steps that don&#39;t effect results</td><td>True</td></tr><tr><td>simplify-via-michel</td><td>Use Michel intermediate language</td><td>False</td></tr></tbody></table><h3 id="the-exceptions-flag" tabindex="-1">The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">exceptions</span></span></code></span> flag <a class="header-anchor" href="#the-exceptions-flag" aria-label="Permalink to &quot;The \`exceptions\` flag&quot;">​</a></h3><p>The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">exceptions</span></span></code></span> flag controls how the compiler renders exceptions in compiled contracts. For example, some values for this flag change error messages to integers to save space in the generated contract. Other values others provide debugging information in a string for the error message. This flag must be added to the test scenario before the contract&#39;s instantiation.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The values <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">metadata</span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;">id</span></span></code></span>, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">line</span></span></code></span>, and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">unit</span></span></code></span> replace error message strings that you specify in <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">assert</span></span></code></span> and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">raise</span></span></code></span> statements:</p><ul><li>The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">metadata</span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;">id</span></span></code></span> and <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">line</span></span></code></span> options change error message strings to numbers to save space.</li><li>The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">unit</span></span></code></span> option changes error message strings to <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">UNIT</span></span></code></span>.</li></ul><p>The other values control only the generated message when you do not specify a message in the contract code.</p></div><table><thead><tr><th>Level</th><th>Description</th></tr></thead><tbody><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">full</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">debug</span></span></code></span></td><td>Includes full debugging information about the failure in generated error messages, such as the type of failure, the line number, and parameters. This option is extremely costly in terms of size and gas.</td></tr><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">debug</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">message</span></span></code></span></td><td>Includes reduced debugging information about the failure in generated error messages. This option is still very costly in terms of size and gas.</td></tr><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">default</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">line</span></span></code></span></td><td>Uses line numbers for generated error messages to indicate the line that caused the error.</td></tr><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">metadata</span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;">id</span></span></code></span></td><td>Replaces string error messages with a nat and provides a mapping from nat to string to be put in the metadata. The error map is accessible via <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">c</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get_error_map</span><span style="color:#89DDFF;">()</span></span></code></span>.</td></tr><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">line</span></span></code></span></td><td>Replaces string error messages with an integer that points to the line number of the failure.</td></tr><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">default</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">unit</span></span></code></span></td><td>Retains string error messages when they are provided. Replaces all generated errors with <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">UNIT</span></span></code></span>.</td></tr><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">unit</span></span></code></span></td><td>Replaces all error messages with <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">UNIT</span></span></code></span>.</td></tr><tr><td><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">verify</span><span style="color:#89DDFF;">-or-</span><span style="color:#BABED8;">line</span></span></code></span> (the default)</td><td>Retains string error messages when they are provided. Replaces all generated errors with an integer that points to the line number of the failure.</td></tr></tbody></table><p>When the <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">exceptions</span></span></code></span> flag&#39;s value is <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">metadata</span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;">id</span></span></code></span>, the compiler replaces error message strings with a nat number. Then SmartPy generates a mapping between the nat number and the original message.</p><p>For example, this code replaces a string error message with a number and verifies that the number maps to the message. Then it stores the error message mapping in the contract metadata and uploads it to IPFS as described in <a href="./metadata">Metadata</a>:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> smartpy </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#BABED8;"> sp</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">module</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">MyErrorMessages</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Contract</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">entrypoint</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">alwaysFails</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;font-style:italic;">raise</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">This is a long exception message.</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add_test</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#BABED8;">    scenario </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test_scenario</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MyErrorMessages</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> main</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    scenario</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add_flag</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">exceptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">metadata-id</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    contract </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> main</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">MyErrorMessages</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#BABED8;">    scenario </span><span style="color:#89DDFF;">+=</span><span style="color:#BABED8;"> contract</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">        contract</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">alwaysFails</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">except</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Exception</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#BABED8;"> e</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#676E95;font-style:italic;"># Verify exception number and message</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#BABED8;"> e</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">value</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#BABED8;"> e</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">expansion</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">This is a long exception message.</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;"># Add error message mapping to contract metadata</span></span>
<span class="line"><span style="color:#BABED8;">    metadata_dict </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create_tzip16_metadata</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">error_map</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">contract</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get_error_map</span><span style="color:#89DDFF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;"># Pin error message mapping to IPFS</span></span>
<span class="line"><span style="color:#BABED8;">    sp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pin_on_ipfs</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">metadata_dict</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Error messages for MyErrorMessages contract</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h3 id="protocol-flag" tabindex="-1"><span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">protocol</span></span></code></span> flag <a class="header-anchor" href="#protocol-flag" aria-label="Permalink to &quot;\`protocol\` flag&quot;">​</a></h3><p>The <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">protocol</span></span></code></span> flag is used to specify a specific protocol. For example, <span class="inline shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">scenario</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add_flag</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">protocol</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span> <span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Quebec</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></span> tells SmartPy to simulate Tezos and compile and run contracts with the Quebec protocol.</p>`,13))]))}});export{h as __pageData,m as default};
